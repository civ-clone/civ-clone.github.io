{
  "version": 3,
  "sources": ["../node_modules/@civ-clone/core-registry/EntityRegistry.ts", "../node_modules/@civ-clone/core-data-object/AdditionalData.ts", "../node_modules/@civ-clone/core-data-object/AdditionalDataRegistry.ts", "../node_modules/@civ-clone/core-data-object/DataObject.ts", "../node_modules/@civ-clone/core-player/PlayerAction.ts", "../node_modules/@civ-clone/core-player/MandatoryPlayerAction.ts", "../node_modules/@civ-clone/base-player-action-active-unit/ActiveUnit.ts", "../node_modules/@civ-clone/base-player-action-inactive-unit/InactiveUnit.ts", "../node_modules/@civ-clone/civ1-unit/PlayerActions.ts", "../node_modules/@civ-clone/core-science/Advance.ts", "../node_modules/@civ-clone/core-registry/ConstructorRegistry.ts", "../node_modules/@civ-clone/core-science/AdvanceRegistry.ts", "../node_modules/@civ-clone/core-rule/Criterion.ts", "../node_modules/@civ-clone/core-rule/Criteria.ts", "../node_modules/@civ-clone/core-rule/Criteria/And.ts", "../node_modules/@civ-clone/core-rule/Effect.ts", "../node_modules/@civ-clone/core-rule/Priority.ts", "../node_modules/@civ-clone/core-rule/Priorities/High.ts", "../node_modules/@civ-clone/core-rule/Priorities/Low.ts", "../node_modules/@civ-clone/core-rule/Priorities/Normal.ts", "../node_modules/@civ-clone/core-rule/Priorities.ts", "../node_modules/@civ-clone/core-rule/Rule.ts", "../node_modules/@civ-clone/core-rule/RuleRegistry.ts", "../node_modules/@civ-clone/core-science/Rules/Complete.ts", "../node_modules/@civ-clone/core-science/Rules/Cost.ts", "../node_modules/@civ-clone/core-science/Rules/Requirements.ts", "../node_modules/@civ-clone/core-yield/Yield.ts", "../node_modules/@civ-clone/core-science/Yields/Research.ts", "../node_modules/@civ-clone/core-science/Yields.ts", "../node_modules/@civ-clone/core-science/Rules/Started.ts", "../node_modules/@civ-clone/core-science/PlayerResearch.ts", "../node_modules/@civ-clone/core-science/PlayerResearchRegistry.ts", "../node_modules/@civ-clone/core-goody-hut/Action.ts", "../node_modules/@civ-clone/base-goody-hut-advance/Advance.ts", "../node_modules/@civ-clone/core-city/Rules/Captured.ts", "../node_modules/@civ-clone/core-city/Rules/Cost.ts", "../node_modules/@civ-clone/core-city/Rules/Created.ts", "../node_modules/@civ-clone/core-city/Rules/Destroyed.ts", "../node_modules/@civ-clone/core-terrain/Rules/Created.ts", "../node_modules/@civ-clone/core-terrain/Terrain.ts", "../node_modules/@civ-clone/core-terrain/Types/Land.ts", "../node_modules/@civ-clone/core-terrain/Types/Water.ts", "../node_modules/@civ-clone/core-terrain/Types.ts", "../node_modules/@civ-clone/core-world/Rules/YieldModifier.ts", "../node_modules/@civ-clone/core-world/Rules/Yield.ts", "../node_modules/@civ-clone/core-world/Tile.ts", "../node_modules/@civ-clone/core-world/Tileset.ts", "../node_modules/@civ-clone/core-city/Rules/Yield.ts", "../node_modules/@civ-clone/core-city/Rules/YieldModifier.ts", "../node_modules/@civ-clone/core-city/City.ts", "../node_modules/@civ-clone/core-city/CityRegistry.ts", "../node_modules/@civ-clone/base-goody-hut-city/City.ts", "../node_modules/@civ-clone/core-city-build/AvailableCityBuildItemsRegistry.ts", "../node_modules/@civ-clone/core-city-build/Rules/Build.ts", "../node_modules/@civ-clone/core-city-build/BuildCost.ts", "../node_modules/@civ-clone/core-city-build/Rules/BuildCost.ts", "../node_modules/@civ-clone/core-city-build/BuildItem.ts", "../node_modules/@civ-clone/core-city-build/Yields/BuildProgress.ts", "../node_modules/@civ-clone/core-city-build/Yields.ts", "../node_modules/@civ-clone/core-city-build/Rules/BulidingCancelled.ts", "../node_modules/@civ-clone/core-city-build/Rules/BulidingComplete.ts", "../node_modules/@civ-clone/core-city-build/CityBuild.ts", "../node_modules/@civ-clone/core-city-build/CityBuildRegistry.ts", "../node_modules/@civ-clone/core-treasury/Rules/Spend.ts", "../node_modules/@civ-clone/core-treasury/PlayerTreasury.ts", "../node_modules/@civ-clone/core-treasury/PlayerTreasuryRegistry.ts", "../node_modules/@civ-clone/base-city-yield-gold/Gold.ts", "../node_modules/@civ-clone/base-goody-hut-gold/Gold.ts", "../node_modules/@civ-clone/base-goody-hut-unit/Rules/Unit.ts", "../node_modules/@civ-clone/base-goody-hut-unit/Unit.ts", "../node_modules/@civ-clone/civ1-goody-hut/GoodyHuts.ts", "../node_modules/@civ-clone/core-city-build/PlayerActions/ChangeProduction.ts", "../node_modules/@civ-clone/core-city-build/PlayerActions/CityBuild.ts", "../node_modules/@civ-clone/core-city-build/PlayerActions.ts", "../node_modules/@civ-clone/core-client/Client.ts", "../node_modules/@civ-clone/core-civilization/Trait.ts", "../node_modules/@civ-clone/core-civilization/TraitRegistry.ts", "../node_modules/@civ-clone/core-civilization/Leader.ts", "../node_modules/@civ-clone/core-civilization/LeaderRegistry.ts", "../node_modules/@civ-clone/base-player-action-adjust-trade-rates/AdjustTradeRates.ts", "../node_modules/@civ-clone/civ1-trade-rate/PlayerActions.ts", "../node_modules/@civ-clone/core-unit/Rules/Busy.ts", "../node_modules/@civ-clone/civ1-science/PlayerActions/ChooseResearch.ts", "../node_modules/@civ-clone/core-city-growth/Rules/Cost.ts", "../node_modules/@civ-clone/core-city-growth/Yields/FoodStorage.ts", "../node_modules/@civ-clone/core-city-growth/Rules/FoodStorage.ts", "../node_modules/@civ-clone/core-city-growth/Rules/Grow.ts", "../node_modules/@civ-clone/core-city-growth/Rules/Shrink.ts", "../node_modules/@civ-clone/core-city-growth/CityGrowth.ts", "../node_modules/@civ-clone/core-city-build/Buildable.ts", "../node_modules/@civ-clone/core-city-improvement/Rules/Created.ts", "../node_modules/@civ-clone/core-city-improvement/CityImprovement.ts", "../node_modules/@civ-clone/core-civilization/Attribute.ts", "../node_modules/@civ-clone/core-civilization/AttributeRegistry.ts", "../node_modules/@civ-clone/core-civilization/CityName.ts", "../node_modules/@civ-clone/core-civilization/CityNameRegistry.ts", "../node_modules/@civ-clone/core-civilization/Civilization.ts", "../node_modules/@civ-clone/civ1-treasury/PlayerActions/CompleteProduction.ts", "../node_modules/@civ-clone/civ1-treasury/PlayerActions.ts", "../node_modules/@civ-clone/base-player-action-end-turn/EndTurn.ts", "../node_modules/@dom111/typed-event-emitter/EventEmitter.ts", "../node_modules/@civ-clone/base-player-action-launch-spaceship/LaunchSpaceship.ts", "../node_modules/@civ-clone/core-player/Rules/Action.ts", "../node_modules/@civ-clone/core-player/Rules/Added.ts", "../node_modules/@civ-clone/core-player/HiddenPlayerAction.ts", "../node_modules/@civ-clone/core-player/Player.ts", "../node_modules/@civ-clone/core-player-world/PlayerTile.ts", "../node_modules/@civ-clone/core-player-world/Terrains/Unknown.ts", "../node_modules/@civ-clone/core-player-world/UndiscoveredTile.ts", "../node_modules/@civ-clone/core-player-world/Rules/Player/VisibilityChanged.ts", "../node_modules/@civ-clone/core-player-world/PlayerWorld.ts", "../node_modules/@civ-clone/base-player-action-revolution/Revolution.ts", "../node_modules/@civ-clone/civ1-government/PlayerActions.ts", "../node_modules/@civ-clone/core-unit/Yields/Attack.ts", "../node_modules/@civ-clone/core-unit/Yields/Defence.ts", "../node_modules/@civ-clone/core-unit/Yields/Movement.ts", "../node_modules/@civ-clone/core-unit/Yields/Moves.ts", "../node_modules/@civ-clone/core-unit/Yields/Visibility.ts", "../node_modules/@civ-clone/core-unit/Yields.ts", "../node_modules/@civ-clone/core-unit/Rules/Action.ts", "../node_modules/@civ-clone/core-unit/Rules/Activate.ts", "../node_modules/@civ-clone/core-unit/Rules/Created.ts", "../node_modules/@civ-clone/core-unit/Rules/Destroyed.ts", "../node_modules/@civ-clone/core-unit/Rules/Visibility.ts", "../node_modules/@civ-clone/core-unit/Rules/Yield.ts", "../node_modules/@civ-clone/core-unit/Unit.ts", "../node_modules/@civ-clone/core-city-growth/CityGrowthRegistry.ts", "../node_modules/@civ-clone/core-wonder/Wonder.ts", "../node_modules/@civ-clone/core-player/PlayerRegistry.ts", "../node_modules/@civ-clone/core-player/CurrentPlayerRegistry.ts", "../node_modules/@civ-clone/core-engine/Engine.ts", "../node_modules/@civ-clone/core-player-world/PlayerWorldRegistry.ts", "../node_modules/@civ-clone/core-turn-based-game/Turn.ts", "../node_modules/@civ-clone/core-unit/UnitRegistry.ts", "../node_modules/@civ-clone/core-game-year/Rules/Year.ts", "../node_modules/@civ-clone/core-game-year/Year.ts", "../node_modules/@civ-clone/base-terrain-yield-food/Food.ts", "../node_modules/@civ-clone/base-terrain-yield-production/Production.ts", "../node_modules/@civ-clone/base-terrain-yield-trade/Trade.ts", "../node_modules/@civ-clone/civ1-world/Yields.ts", "../node_modules/@civ-clone/core-yield/lib/reduceYields.ts", "../node_modules/@civ-clone/civ1-city/lib/assignWorkers.ts", "../node_modules/@civ-clone/core-unit/Action.ts", "../node_modules/@civ-clone/core-unit/Rules/Defeated.ts", "../node_modules/@civ-clone/base-unit-action-attack/Attack.ts", "../node_modules/@civ-clone/base-unit-action-build-irrigation/Rules/BuildingIrrigation.ts", "../node_modules/@civ-clone/core-unit/Rules/Moved.ts", "../node_modules/@civ-clone/core-unit/DelayedAction.ts", "../node_modules/@civ-clone/core-tile-improvement/Rules/Built.ts", "../node_modules/@civ-clone/core-tile-improvement/TileImprovement.ts", "../node_modules/@civ-clone/base-tile-improvement-irrigation/Irrigation.ts", "../node_modules/@civ-clone/core-unit/Rules/MovementCost.ts", "../node_modules/@civ-clone/base-unit-action-build-irrigation/BuildIrrigation.ts", "../node_modules/@civ-clone/base-unit-action-build-mine/Rules/BuildingMine.ts", "../node_modules/@civ-clone/base-tile-improvement-mine/Mine.ts", "../node_modules/@civ-clone/base-unit-action-build-mine/BuildMine.ts", "../node_modules/@civ-clone/base-unit-action-build-road/Rules/BuildingRoad.ts", "../node_modules/@civ-clone/base-tile-improvement-road/Road.ts", "../node_modules/@civ-clone/base-unit-action-build-road/BuildRoad.ts", "../node_modules/@civ-clone/base-unit-action-build-railroad/Rules/BuildingRailroad.ts", "../node_modules/@civ-clone/base-tile-improvement-railroad/Railroad.ts", "../node_modules/@civ-clone/base-unit-action-build-railroad/BuildRailroad.ts", "../node_modules/@civ-clone/core-unit/Rules/ValidateMove.ts", "../node_modules/@civ-clone/base-unit-action-move/Move.ts", "../node_modules/@civ-clone/base-unit-action-capture-city/CaptureCity.ts", "../node_modules/@civ-clone/core-terrain-feature/TerrainFeature.ts", "../node_modules/@civ-clone/core-terrain-feature/TerrainFeatureRegistry.ts", "../node_modules/@civ-clone/base-unit-action-clear-forest/Rules/ClearingForest.ts", "../node_modules/@civ-clone/base-terrain-plains/Plains.ts", "../node_modules/@civ-clone/base-unit-action-clear-forest/ClearForest.ts", "../node_modules/@civ-clone/base-unit-action-clear-jungle/Rules/ClearingJungle.ts", "../node_modules/@civ-clone/core-terrain-feature/Rules/Feature.ts", "../node_modules/@civ-clone/base-terrain-grassland/Grassland.ts", "../node_modules/@civ-clone/base-terrain-feature-shield/Shield.ts", "../node_modules/@civ-clone/base-unit-action-clear-jungle/ClearJungle.ts", "../node_modules/@civ-clone/base-unit-action-clear-swamp/Rules/ClearingSwamp.ts", "../node_modules/@civ-clone/base-unit-action-clear-swamp/ClearSwamp.ts", "../node_modules/@civ-clone/base-unit-action-disband/Disband.ts", "../node_modules/@civ-clone/base-unit-action-disembark/Disembark.ts", "../node_modules/@civ-clone/base-unit-action-embark/Embark.ts", "../node_modules/@civ-clone/core-unit-improvement/UnitImprovement.ts", "../node_modules/@civ-clone/core-unit-improvement/UnitImprovementRegistry.ts", "../node_modules/@civ-clone/base-unit-action-fortify/Rules/Fortified.ts", "../node_modules/@civ-clone/base-unit-improvement-fortified/UnitImprovements/Fortified.ts", "../node_modules/@civ-clone/base-unit-action-fortify/Rules/Fortifying.ts", "../node_modules/@civ-clone/base-unit-action-fortify/Fortify.ts", "../node_modules/@civ-clone/base-unit-action-found-city/FoundCity.ts", "../node_modules/@civ-clone/base-unit-action-no-orders/NoOrders.ts", "../node_modules/@civ-clone/core-tile-improvement/TileImprovementRegistry.ts", "../node_modules/@civ-clone/base-unit-action-pillage/Pillage.ts", "../node_modules/@civ-clone/base-terrain-forest/Forest.ts", "../node_modules/@civ-clone/base-terrain-feature-horse/Horse.ts", "../node_modules/@civ-clone/base-unit-action-plant-forest/Rules/PlantingForest.ts", "../node_modules/@civ-clone/base-unit-action-plant-forest/PlantForest.ts", "../node_modules/@civ-clone/base-unit-action-sleep/Rules/Sleeping.ts", "../node_modules/@civ-clone/base-unit-action-sleep/Sleep.ts", "../node_modules/@civ-clone/base-unit-action-unload/Unload.ts", "../node_modules/@civ-clone/civ1-unit/Actions.ts", "../node_modules/@civ-clone/base-terrain-arctic/Arctic.ts", "../node_modules/@civ-clone/base-terrain-desert/Desert.ts", "../node_modules/@civ-clone/base-terrain-hills/Hills.ts", "../node_modules/@civ-clone/base-terrain-jungle/Jungle.ts", "../node_modules/@civ-clone/base-terrain-mountains/Mountains.ts", "../node_modules/@civ-clone/base-terrain-ocean/Ocean.ts", "../node_modules/@civ-clone/base-terrain-river/River.ts", "../node_modules/@civ-clone/base-terrain-swamp/Swamp.ts", "../node_modules/@civ-clone/base-terrain-tundra/Tundra.ts", "../node_modules/@civ-clone/civ1-world/Terrains.ts", "../node_modules/@civ-clone/base-unit-type-air/Air.ts", "../node_modules/@civ-clone/base-unit-type-land/Land.ts", "../node_modules/@civ-clone/base-unit-type-fortifiable/Fortifiable.ts", "../node_modules/@civ-clone/base-unit-type-naval/Naval.ts", "../node_modules/@civ-clone/core-unit-transport/TransportManifest.ts", "../node_modules/@civ-clone/core-unit-transport/TransportRegistry.ts", "../node_modules/@civ-clone/core-unit-transport/Rules/Stowed.ts", "../node_modules/@civ-clone/core-unit-transport/Rules/Unloaded.ts", "../node_modules/@civ-clone/core-unit-transport/Transport.ts", "../node_modules/@civ-clone/base-unit-type-naval-transport/NavalTransport.ts", "../node_modules/@civ-clone/base-unit-type-worker/Worker.ts", "../node_modules/@civ-clone/civ1-unit/Types.ts", "../node_modules/@civ-clone/base-terrain-feature-coal/Coal.ts", "../node_modules/@civ-clone/base-terrain-feature-fish/Fish.ts", "../node_modules/@civ-clone/base-terrain-feature-game/Game.ts", "../node_modules/@civ-clone/base-terrain-feature-gems/Gems.ts", "../node_modules/@civ-clone/base-terrain-feature-gold/Gold.ts", "../node_modules/@civ-clone/base-terrain-feature-oasis/Oasis.ts", "../node_modules/@civ-clone/base-terrain-feature-oil/Oil.ts", "../node_modules/@civ-clone/base-terrain-feature-seal/Seal.ts", "../node_modules/@civ-clone/civ1-world/TerrainFeatures.ts", "../node_modules/@civ-clone/core-goody-hut/Rules/Action.ts", "../node_modules/@civ-clone/core-goody-hut/Rules/ActionPerformed.ts", "../node_modules/@civ-clone/core-goody-hut/Rules/Discovered.ts", "../node_modules/@civ-clone/core-goody-hut/GoodyHut.ts", "../node_modules/@civ-clone/core-goody-hut/GoodyHutRegistry.ts", "../node_modules/@civ-clone/base-tile-improvement-pollution/Pollution.ts", "../node_modules/@civ-clone/civ1-world/TileImprovements.ts", "../node_modules/@civ-clone/core-world-path/PathFinder.ts", "../node_modules/@civ-clone/core-world-path/PathFinderRegistry.ts", "../node_modules/@civ-clone/core-government/Government.ts", "../node_modules/@civ-clone/core-government/AvailableGovernmentRegistry.ts", "../node_modules/@civ-clone/core-government/Rules/Availability.ts", "../node_modules/@civ-clone/core-government/Rules/Changed.ts", "../node_modules/@civ-clone/core-government/PlayerGovernment.ts", "../node_modules/@civ-clone/core-government/PlayerGovernmentRegistry.ts", "../node_modules/@civ-clone/core-ai-client/AIClient.ts", "../node_modules/@civ-clone/base-unit-improvement-fortified/UnitImprovements.ts", "../node_modules/@civ-clone/base-unit-improvement-veteran/UnitImprovements/Veteran.ts", "../node_modules/@civ-clone/base-unit-improvement-veteran/UnitImprovements.ts", "../node_modules/@civ-clone/civ1-unit/UnitImprovements.ts", "../node_modules/@civ-clone/base-science-advance-advancedflight/AdvancedFlight.ts", "../node_modules/@civ-clone/base-science-advance-alphabet/Alphabet.ts", "../node_modules/@civ-clone/base-science-advance-astronomy/Astronomy.ts", "../node_modules/@civ-clone/base-science-advance-atomictheory/AtomicTheory.ts", "../node_modules/@civ-clone/base-science-advance-automobile/Automobile.ts", "../node_modules/@civ-clone/base-science-advance-banking/Banking.ts", "../node_modules/@civ-clone/base-science-advance-bridgebuilding/BridgeBuilding.ts", "../node_modules/@civ-clone/base-science-advance-bronzeworking/BronzeWorking.ts", "../node_modules/@civ-clone/base-science-advance-ceremonialburial/CeremonialBurial.ts", "../node_modules/@civ-clone/base-science-advance-chemistry/Chemistry.ts", "../node_modules/@civ-clone/base-science-advance-chivalry/Chivalry.ts", "../node_modules/@civ-clone/base-science-advance-codeoflaws/CodeOfLaws.ts", "../node_modules/@civ-clone/base-science-advance-combustion/Combustion.ts", "../node_modules/@civ-clone/base-science-advance-communism/Communism.ts", "../node_modules/@civ-clone/base-science-advance-computers/Computers.ts", "../node_modules/@civ-clone/base-science-advance-conscription/Conscription.ts", "../node_modules/@civ-clone/base-science-advance-construction/Construction.ts", "../node_modules/@civ-clone/base-science-advance-corporation/Corporation.ts", "../node_modules/@civ-clone/base-science-advance-currency/Currency.ts", "../node_modules/@civ-clone/base-science-advance-democracy/Democracy.ts", "../node_modules/@civ-clone/base-science-advance-electricity/Electricity.ts", "../node_modules/@civ-clone/base-science-advance-electronics/Electronics.ts", "../node_modules/@civ-clone/base-science-advance-engineering/Engineering.ts", "../node_modules/@civ-clone/base-science-advance-explosives/Explosives.ts", "../node_modules/@civ-clone/base-science-advance-feudalism/Feudalism.ts", "../node_modules/@civ-clone/base-science-advance-flight/Flight.ts", "../node_modules/@civ-clone/base-science-advance-fusionpower/FusionPower.ts", "../node_modules/@civ-clone/base-science-advance-geneticengineering/GeneticEngineering.ts", "../node_modules/@civ-clone/base-science-advance-gunpowder/Gunpowder.ts", "../node_modules/@civ-clone/base-science-advance-horsebackriding/HorsebackRiding.ts", "../node_modules/@civ-clone/base-science-advance-industrialization/Industrialization.ts", "../node_modules/@civ-clone/base-science-advance-invention/Invention.ts", "../node_modules/@civ-clone/base-science-advance-ironworking/IronWorking.ts", "../node_modules/@civ-clone/base-science-advance-laborunion/LaborUnion.ts", "../node_modules/@civ-clone/base-science-advance-literacy/Literacy.ts", "../node_modules/@civ-clone/base-science-advance-magnetism/Magnetism.ts", "../node_modules/@civ-clone/base-science-advance-mapmaking/MapMaking.ts", "../node_modules/@civ-clone/base-science-advance-masonry/Masonry.ts", "../node_modules/@civ-clone/base-science-advance-massproduction/MassProduction.ts", "../node_modules/@civ-clone/base-science-advance-mathematics/Mathematics.ts", "../node_modules/@civ-clone/base-science-advance-medicine/Medicine.ts", "../node_modules/@civ-clone/base-science-advance-metallurgy/Metallurgy.ts", "../node_modules/@civ-clone/base-science-advance-monarchy/Monarchy.ts", "../node_modules/@civ-clone/base-science-advance-mysticism/Mysticism.ts", "../node_modules/@civ-clone/base-science-advance-navigation/Navigation.ts", "../node_modules/@civ-clone/base-science-advance-nuclearfission/NuclearFission.ts", "../node_modules/@civ-clone/base-science-advance-nuclearpower/NuclearPower.ts", "../node_modules/@civ-clone/base-science-advance-philosophy/Philosophy.ts", "../node_modules/@civ-clone/base-science-advance-physics/Physics.ts", "../node_modules/@civ-clone/base-science-advance-plastics/Plastics.ts", "../node_modules/@civ-clone/base-science-advance-pottery/Pottery.ts", "../node_modules/@civ-clone/base-science-advance-railroad/Railroad.ts", "../node_modules/@civ-clone/base-science-advance-recycling/Recycling.ts", "../node_modules/@civ-clone/base-science-advance-refining/Refining.ts", "../node_modules/@civ-clone/base-science-advance-religion/Religion.ts", "../node_modules/@civ-clone/base-science-advance-robotics/Robotics.ts", "../node_modules/@civ-clone/base-science-advance-rocketry/Rocketry.ts", "../node_modules/@civ-clone/base-science-advance-spaceflight/SpaceFlight.ts", "../node_modules/@civ-clone/base-science-advance-steamengine/SteamEngine.ts", "../node_modules/@civ-clone/base-science-advance-steel/Steel.ts", "../node_modules/@civ-clone/base-science-advance-superconductor/Superconductor.ts", "../node_modules/@civ-clone/base-science-advance-therepublic/TheRepublic.ts", "../node_modules/@civ-clone/base-science-advance-thewheel/TheWheel.ts", "../node_modules/@civ-clone/base-science-advance-theoryofgravity/TheoryOfGravity.ts", "../node_modules/@civ-clone/base-science-advance-trade/Trade.ts", "../node_modules/@civ-clone/base-science-advance-university/University.ts", "../node_modules/@civ-clone/base-science-advance-writing/Writing.ts", "../node_modules/@civ-clone/civ1-science/Advances.ts", "../node_modules/@civ-clone/base-government-anarchy/Anarchy.ts", "../node_modules/@civ-clone/base-government-communism/Communism.ts", "../node_modules/@civ-clone/base-government-democracy/Democracy.ts", "../node_modules/@civ-clone/base-government-despotism/Despotism.ts", "../node_modules/@civ-clone/base-government-monarchy/Monarchy.ts", "../node_modules/@civ-clone/base-government-republic/Republic.ts", "../node_modules/@civ-clone/civ1-government/Governments.ts", "../node_modules/@civ-clone/base-city-improvement-aqueduct/Aqueduct.ts", "../node_modules/@civ-clone/base-city-improvement-bank/Bank.ts", "../node_modules/@civ-clone/base-city-improvement-barracks/Barracks.ts", "../node_modules/@civ-clone/base-city-improvement-cathedral/Cathedral.ts", "../node_modules/@civ-clone/base-city-improvement-citywalls/CityWalls.ts", "../node_modules/@civ-clone/base-city-improvement-colosseum/Colosseum.ts", "../node_modules/@civ-clone/base-city-improvement-courthouse/Courthouse.ts", "../node_modules/@civ-clone/base-city-improvement-factory/Factory.ts", "../node_modules/@civ-clone/base-city-improvement-granary/Granary.ts", "../node_modules/@civ-clone/base-city-improvement-hydroplant/HydroPlant.ts", "../node_modules/@civ-clone/base-city-improvement-library/Library.ts", "../node_modules/@civ-clone/base-city-improvement-manufacturingplant/ManufacturingPlant.ts", "../node_modules/@civ-clone/base-city-improvement-marketplace/Marketplace.ts", "../node_modules/@civ-clone/base-city-improvement-masstransit/MassTransit.ts", "../node_modules/@civ-clone/base-city-improvement-nuclearplant/NuclearPlant.ts", "../node_modules/@civ-clone/base-city-improvement-palace/Palace.ts", "../node_modules/@civ-clone/base-city-improvement-powerplant/PowerPlant.ts", "../node_modules/@civ-clone/base-city-improvement-recyclingcenter/RecyclingCenter.ts", "../node_modules/@civ-clone/base-city-improvement-sdidefence/SdiDefence.ts", "../node_modules/@civ-clone/base-city-improvement-temple/Temple.ts", "../node_modules/@civ-clone/base-city-improvement-university/University.ts", "../node_modules/@civ-clone/civ1-city-improvement/CityImprovements.ts", "../node_modules/@civ-clone/core-world-path/Path.ts", "../node_modules/@civ-clone/base-unit-artillery/Artillery.ts", "../node_modules/@civ-clone/base-unit-battleship/Battleship.ts", "../node_modules/@civ-clone/base-unit-bomber/Bomber.ts", "../node_modules/@civ-clone/base-unit-cannon/Cannon.ts", "../node_modules/@civ-clone/base-unit-caravan/Caravan.ts", "../node_modules/@civ-clone/base-unit-carrier/Carrier.ts", "../node_modules/@civ-clone/base-unit-catapult/Catapult.ts", "../node_modules/@civ-clone/base-unit-chariot/Chariot.ts", "../node_modules/@civ-clone/base-unit-cruiser/Cruiser.ts", "../node_modules/@civ-clone/base-unit-diplomat/Diplomat.ts", "../node_modules/@civ-clone/base-unit-fighter/Fighter.ts", "../node_modules/@civ-clone/base-unit-frigate/Frigate.ts", "../node_modules/@civ-clone/base-unit-horseman/Horseman.ts", "../node_modules/@civ-clone/base-unit-ironclad/Ironclad.ts", "../node_modules/@civ-clone/base-unit-knight/Knight.ts", "../node_modules/@civ-clone/base-unit-mechanizedinfantry/MechanizedInfantry.ts", "../node_modules/@civ-clone/base-unit-musketman/Musketman.ts", "../node_modules/@civ-clone/base-unit-nuclear/Nuclear.ts", "../node_modules/@civ-clone/base-unit-rifleman/Rifleman.ts", "../node_modules/@civ-clone/base-unit-sail/Sail.ts", "../node_modules/@civ-clone/base-unit-settlers/Settlers.ts", "../node_modules/@civ-clone/base-unit-spearman/Spearman.ts", "../node_modules/@civ-clone/base-unit-submarine/Submarine.ts", "../node_modules/@civ-clone/base-unit-swordman/Swordman.ts", "../node_modules/@civ-clone/base-unit-tank/Tank.ts", "../node_modules/@civ-clone/base-unit-transport/Transport.ts", "../node_modules/@civ-clone/base-unit-trireme/Trireme.ts", "../node_modules/@civ-clone/base-unit-warrior/Warrior.ts", "../node_modules/@civ-clone/civ1-unit/Units.ts", "../node_modules/@civ-clone/simple-ai-client/SimpleAIClient.ts", "../node_modules/@civ-clone/core-client/ClientRegistry.ts", "../node_modules/@civ-clone/base-civilization-american/American.ts", "../node_modules/@civ-clone/base-civilization-american/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-american/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-american/index.ts", "../node_modules/@civ-clone/base-civilization-aztec/Aztec.ts", "../node_modules/@civ-clone/base-civilization-aztec/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-aztec/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-aztec/index.ts", "../node_modules/@civ-clone/base-civilization-babylonian/Babylonian.ts", "../node_modules/@civ-clone/base-civilization-babylonian/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-babylonian/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-babylonian/index.ts", "../node_modules/@civ-clone/base-civilization-chinese/Chinese.ts", "../node_modules/@civ-clone/base-civilization-chinese/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-chinese/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-chinese/index.ts", "../node_modules/@civ-clone/base-civilization-egyptian/Egyptian.ts", "../node_modules/@civ-clone/base-civilization-egyptian/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-egyptian/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-egyptian/index.ts", "../node_modules/@civ-clone/base-civilization-english/English.ts", "../node_modules/@civ-clone/base-civilization-english/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-english/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-english/index.ts", "../node_modules/@civ-clone/base-civilization-french/French.ts", "../node_modules/@civ-clone/base-civilization-french/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-french/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-french/index.ts", "../node_modules/@civ-clone/base-civilization-german/German.ts", "../node_modules/@civ-clone/base-civilization-german/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-german/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-german/index.ts", "../node_modules/@civ-clone/base-civilization-greek/Greek.ts", "../node_modules/@civ-clone/base-civilization-greek/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-greek/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-greek/index.ts", "../node_modules/@civ-clone/base-civilization-indian/Indian.ts", "../node_modules/@civ-clone/base-civilization-indian/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-indian/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-indian/index.ts", "../node_modules/@civ-clone/base-civilization-mongol/Mongol.ts", "../node_modules/@civ-clone/base-civilization-mongol/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-mongol/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-mongol/index.ts", "../node_modules/@civ-clone/base-civilization-roman/Roman.ts", "../node_modules/@civ-clone/base-civilization-roman/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-roman/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-roman/index.ts", "../node_modules/@civ-clone/base-civilization-russian/Russian.ts", "../node_modules/@civ-clone/base-civilization-russian/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-russian/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-russian/index.ts", "../node_modules/@civ-clone/base-civilization-zulu/Zulu.ts", "../node_modules/@civ-clone/base-civilization-zulu/registerAttributes.ts", "../node_modules/@civ-clone/base-civilization-zulu/registerCityNames.ts", "../node_modules/@civ-clone/base-civilization-zulu/index.ts", "../node_modules/@civ-clone/base-science-advance-advancedflight/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-advancedflight/index.ts", "../node_modules/@civ-clone/base-science-advance-alphabet/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-alphabet/index.ts", "../node_modules/@civ-clone/base-science-advance-astronomy/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-astronomy/index.ts", "../node_modules/@civ-clone/base-science-advance-atomictheory/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-atomictheory/index.ts", "../node_modules/@civ-clone/base-science-advance-automobile/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-automobile/index.ts", "../node_modules/@civ-clone/base-science-advance-banking/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-banking/index.ts", "../node_modules/@civ-clone/base-science-advance-bridgebuilding/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-bridgebuilding/index.ts", "../node_modules/@civ-clone/base-science-advance-bronzeworking/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-bronzeworking/index.ts", "../node_modules/@civ-clone/base-science-advance-ceremonialburial/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-ceremonialburial/index.ts", "../node_modules/@civ-clone/base-science-advance-chemistry/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-chemistry/index.ts", "../node_modules/@civ-clone/base-science-advance-chivalry/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-chivalry/index.ts", "../node_modules/@civ-clone/base-science-advance-codeoflaws/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-codeoflaws/index.ts", "../node_modules/@civ-clone/base-science-advance-combustion/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-combustion/index.ts", "../node_modules/@civ-clone/base-science-advance-communism/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-communism/index.ts", "../node_modules/@civ-clone/base-science-advance-computers/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-computers/index.ts", "../node_modules/@civ-clone/base-science-advance-conscription/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-conscription/index.ts", "../node_modules/@civ-clone/base-science-advance-construction/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-construction/index.ts", "../node_modules/@civ-clone/base-science-advance-corporation/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-corporation/index.ts", "../node_modules/@civ-clone/base-science-advance-currency/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-currency/index.ts", "../node_modules/@civ-clone/base-science-advance-democracy/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-democracy/index.ts", "../node_modules/@civ-clone/base-science-advance-electricity/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-electricity/index.ts", "../node_modules/@civ-clone/base-science-advance-electronics/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-electronics/index.ts", "../node_modules/@civ-clone/base-science-advance-engineering/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-engineering/index.ts", "../node_modules/@civ-clone/base-science-advance-explosives/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-explosives/index.ts", "../node_modules/@civ-clone/base-science-advance-feudalism/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-feudalism/index.ts", "../node_modules/@civ-clone/base-science-advance-flight/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-flight/index.ts", "../node_modules/@civ-clone/base-science-advance-fusionpower/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-fusionpower/index.ts", "../node_modules/@civ-clone/base-science-advance-geneticengineering/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-geneticengineering/index.ts", "../node_modules/@civ-clone/base-science-advance-gunpowder/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-gunpowder/index.ts", "../node_modules/@civ-clone/base-science-advance-horsebackriding/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-horsebackriding/index.ts", "../node_modules/@civ-clone/base-science-advance-industrialization/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-industrialization/index.ts", "../node_modules/@civ-clone/base-science-advance-invention/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-invention/index.ts", "../node_modules/@civ-clone/base-science-advance-ironworking/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-ironworking/index.ts", "../node_modules/@civ-clone/base-science-advance-laborunion/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-laborunion/index.ts", "../node_modules/@civ-clone/base-science-advance-literacy/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-literacy/index.ts", "../node_modules/@civ-clone/base-science-advance-magnetism/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-magnetism/index.ts", "../node_modules/@civ-clone/base-science-advance-mapmaking/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-mapmaking/index.ts", "../node_modules/@civ-clone/base-science-advance-masonry/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-masonry/index.ts", "../node_modules/@civ-clone/base-science-advance-massproduction/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-massproduction/index.ts", "../node_modules/@civ-clone/base-science-advance-mathematics/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-mathematics/index.ts", "../node_modules/@civ-clone/base-science-advance-medicine/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-medicine/index.ts", "../node_modules/@civ-clone/base-science-advance-metallurgy/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-metallurgy/index.ts", "../node_modules/@civ-clone/base-science-advance-monarchy/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-monarchy/index.ts", "../node_modules/@civ-clone/base-science-advance-mysticism/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-mysticism/index.ts", "../node_modules/@civ-clone/base-science-advance-navigation/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-navigation/index.ts", "../node_modules/@civ-clone/base-science-advance-nuclearfission/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-nuclearfission/index.ts", "../node_modules/@civ-clone/base-science-advance-nuclearpower/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-nuclearpower/index.ts", "../node_modules/@civ-clone/base-science-advance-philosophy/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-philosophy/index.ts", "../node_modules/@civ-clone/base-science-advance-physics/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-physics/index.ts", "../node_modules/@civ-clone/base-science-advance-plastics/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-plastics/index.ts", "../node_modules/@civ-clone/base-science-advance-pottery/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-pottery/index.ts", "../node_modules/@civ-clone/base-science-advance-railroad/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-railroad/index.ts", "../node_modules/@civ-clone/base-science-advance-recycling/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-recycling/index.ts", "../node_modules/@civ-clone/base-science-advance-refining/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-refining/index.ts", "../node_modules/@civ-clone/base-science-advance-religion/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-religion/index.ts", "../node_modules/@civ-clone/base-science-advance-robotics/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-robotics/index.ts", "../node_modules/@civ-clone/base-science-advance-rocketry/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-rocketry/index.ts", "../node_modules/@civ-clone/base-science-advance-spaceflight/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-spaceflight/index.ts", "../node_modules/@civ-clone/base-science-advance-steamengine/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-steamengine/index.ts", "../node_modules/@civ-clone/base-science-advance-steel/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-steel/index.ts", "../node_modules/@civ-clone/base-science-advance-superconductor/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-superconductor/index.ts", "../node_modules/@civ-clone/base-science-advance-theoryofgravity/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-theoryofgravity/index.ts", "../node_modules/@civ-clone/base-science-advance-therepublic/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-therepublic/index.ts", "../node_modules/@civ-clone/base-science-advance-thewheel/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-thewheel/index.ts", "../node_modules/@civ-clone/base-science-advance-trade/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-trade/index.ts", "../node_modules/@civ-clone/base-science-advance-university/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-university/index.ts", "../node_modules/@civ-clone/base-science-advance-writing/registerAdvance.ts", "../node_modules/@civ-clone/base-science-advance-writing/index.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/building-complete.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/captured.ts", "../node_modules/@civ-clone/core-yield/NegativeYield.ts", "../node_modules/@civ-clone/base-city-yield-population-support-food/PopulationSupportFood.ts", "../node_modules/@civ-clone/base-city-yield-unit-support-food/UnitSupportFood.ts", "../node_modules/@civ-clone/base-city-yield-unit-support-production/UnitSupportProduction.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/cost.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/created.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/destroyed.ts", "../node_modules/@civ-clone/core-city-growth/Rules/FoodExhausted.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/food-exhausted.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/food-storage.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/grow.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/growth-cost.ts", "../node_modules/@civ-clone/base-city-yield-corruption/Corruption.ts", "../node_modules/@civ-clone/base-city-yield-happiness/Happiness.ts", "../node_modules/@civ-clone/base-city-yield-luxuries/Luxuries.ts", "../node_modules/@civ-clone/base-city-yield-research/Research.ts", "../node_modules/@civ-clone/base-city-yield-unhappiness/Unhappiness.ts", "../node_modules/@civ-clone/civ1-city/Yields.ts", "../node_modules/@civ-clone/core-city-happiness/Rules/CivilDisorder.ts", "../node_modules/@civ-clone/core-city/Rules/ProcessYield.ts", "../node_modules/@civ-clone/core-unit/Rules/Unsupported.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/process-yield.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/shrink.ts", "../node_modules/@civ-clone/core-city-improvement/CityImprovementRegistry.ts", "../node_modules/@civ-clone/civ1-city/Rules/City/yield.ts", "../node_modules/@civ-clone/civ1-city/Rules/Player/action.ts", "../node_modules/@civ-clone/civ1-city/Rules/Unit/defeated.ts", "../node_modules/@civ-clone/civ1-city/Rules/Unit/unsupported.ts", "../node_modules/@civ-clone/civ1-city/registerRules.ts", "../node_modules/@civ-clone/civ1-city/index.ts", "../node_modules/@civ-clone/base-city-yield-city-improvement-content/CityImprovementContent.ts", "../node_modules/@civ-clone/base-city-yield-luxury-happiness/LuxuryHappiness.ts", "../node_modules/@civ-clone/base-city-yield-martial-law-content/MartialLaw.ts", "../node_modules/@civ-clone/base-city-yield-military-unhappiness/MilitaryUnhappiness.ts", "../node_modules/@civ-clone/base-city-yield-population-unhappiness/PopulationUnhappiness.ts", "../node_modules/@civ-clone/civ1-science/Yields.ts", "../node_modules/@civ-clone/civ1-city-happiness/Yields.ts", "../node_modules/@civ-clone/core-city-happiness/Rules/CelebrateLeader.ts", "../node_modules/@civ-clone/civ1-city-happiness/Rules/City/celebrate-leader.ts", "../node_modules/@civ-clone/civ1-city-happiness/Rules/City/yield.ts", "../node_modules/@civ-clone/civ1-city-happiness/Rules/City/civil-disorder.ts", "../node_modules/@civ-clone/core-rule/Criteria/Or.ts", "../node_modules/@civ-clone/civ1-city-happiness/Rules/City/cost.ts", "../node_modules/@civ-clone/core-player/Rules/TurnStart.ts", "../node_modules/@civ-clone/civ1-city-happiness/Rules/Player/turn-start.ts", "../node_modules/@civ-clone/civ1-city-happiness/registerRules.ts", "../node_modules/@civ-clone/civ1-city-happiness/index.ts", "../node_modules/@civ-clone/civ1-city-improvement/registerAvailableBuildItems.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/City/build.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/City/build-cost.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/City/captured.ts", "../node_modules/@civ-clone/base-city-yield-city-improvement-maintenance-gold/CityImprovementMaintenanceGold.ts", "../node_modules/@civ-clone/civ1-city-improvement/Yields.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/City/cost.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/City/created.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/City/destroyed.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/City/grow.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/CityImprovement/created.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/City/yield-modifier.ts", "../node_modules/@civ-clone/civ1-city-improvement/Rules/Unit/created.ts", "../node_modules/@civ-clone/civ1-city-improvement/registerRules.ts", "../node_modules/@civ-clone/civ1-city-improvement/index.ts", "../node_modules/@civ-clone/civ1-civilization/registerCityNames.ts", "../node_modules/@civ-clone/civ1-civilization/Civilizations.ts", "../node_modules/@civ-clone/core-civilization/CivilizationRegistry.ts", "../node_modules/@civ-clone/civ1-civilization/registerCivilizations.ts", "../node_modules/@civ-clone/base-civilization-american/Leaders/AbrahamLincoln.ts", "../node_modules/@civ-clone/base-civilization-american/Leaders/GeorgeWashington.ts", "../node_modules/@civ-clone/base-civilization-american/Leaders.ts", "../node_modules/@civ-clone/base-civilization-aztec/Leaders/MoctezumaII.ts", "../node_modules/@civ-clone/base-civilization-aztec/Leaders.ts", "../node_modules/@civ-clone/base-civilization-babylonian/Leaders/Hammurabi.ts", "../node_modules/@civ-clone/base-civilization-babylonian/Leaders.ts", "../node_modules/@civ-clone/base-civilization-chinese/Leaders/MaoZedong.ts", "../node_modules/@civ-clone/base-civilization-chinese/Leaders.ts", "../node_modules/@civ-clone/base-civilization-egyptian/Leaders/RamessesII.ts", "../node_modules/@civ-clone/base-civilization-egyptian/Leaders.ts", "../node_modules/@civ-clone/base-civilization-english/Leaders/ElizabethI.ts", "../node_modules/@civ-clone/base-civilization-english/Leaders/WinstonChurchill.ts", "../node_modules/@civ-clone/base-civilization-english/Leaders.ts", "../node_modules/@civ-clone/base-civilization-french/Leaders/NapoleonI.ts", "../node_modules/@civ-clone/base-civilization-french/Leaders.ts", "../node_modules/@civ-clone/base-civilization-german/Leaders/FrederickTheGreat.ts", "../node_modules/@civ-clone/base-civilization-german/Leaders/OttoVonBismarck.ts", "../node_modules/@civ-clone/base-civilization-german/Leaders.ts", "../node_modules/@civ-clone/base-civilization-greek/Leaders/AlexanderTheGreat.ts", "../node_modules/@civ-clone/base-civilization-greek/Leaders.ts", "../node_modules/@civ-clone/base-civilization-indian/Leaders/MahatmaGandhi.ts", "../node_modules/@civ-clone/base-civilization-indian/Leaders.ts", "../node_modules/@civ-clone/base-civilization-mongol/Leaders/GenghisKhan.ts", "../node_modules/@civ-clone/base-civilization-mongol/Leaders.ts", "../node_modules/@civ-clone/base-civilization-roman/Leaders/JuliusCaesar.ts", "../node_modules/@civ-clone/base-civilization-roman/Leaders.ts", "../node_modules/@civ-clone/base-civilization-russian/Leaders/CatherineTheGreat.ts", "../node_modules/@civ-clone/base-civilization-russian/Leaders/JosephStalin.ts", "../node_modules/@civ-clone/base-civilization-russian/Leaders.ts", "../node_modules/@civ-clone/base-civilization-zulu/Leaders/Shaka.ts", "../node_modules/@civ-clone/base-civilization-zulu/Leaders.ts", "../node_modules/@civ-clone/civ1-civilization/Leaders.ts", "../node_modules/@civ-clone/civ1-civilization/registerLeaders.ts", "../node_modules/@civ-clone/base-leader-trait-aggression/Aggression.ts", "../node_modules/@civ-clone/base-leader-trait-aggression/Aggression/Aggressive.ts", "../node_modules/@civ-clone/base-leader-trait-militarism/Militarism.ts", "../node_modules/@civ-clone/base-leader-trait-militarism/Militarism/Civilized.ts", "../node_modules/@civ-clone/base-leader-trait-development/Development.ts", "../node_modules/@civ-clone/base-leader-trait-development/Development/Expansionist.ts", "../node_modules/@civ-clone/base-leader-trait-aggression/Aggression/Friendly.ts", "../node_modules/@civ-clone/base-leader-trait-militarism/Militarism/Militaristic.ts", "../node_modules/@civ-clone/base-leader-trait-aggression/Aggression/Normal.ts", "../node_modules/@civ-clone/base-leader-trait-development/Development/Normal.ts", "../node_modules/@civ-clone/base-leader-trait-militarism/Militarism/Normal.ts", "../node_modules/@civ-clone/base-leader-trait-development/Development/Perfectionist.ts", "../node_modules/@civ-clone/civ1-civilization/registerTraits.ts", "../node_modules/@civ-clone/civ1-civilization/index.ts", "../node_modules/@civ-clone/core-spaceship/Rules/Yield.ts", "../node_modules/@civ-clone/core-spaceship/Part.ts", "../node_modules/@civ-clone/base-spaceship-fuel/Fuel.ts", "../node_modules/@civ-clone/base-spaceship-habitation/Habitation.ts", "../node_modules/@civ-clone/core-spaceship/Rules/ChooseSlot.ts", "../node_modules/@civ-clone/core-spaceship/Rules/Active.ts", "../node_modules/@civ-clone/core-spaceship/Layout.ts", "../node_modules/@civ-clone/base-spaceship-life-support/LifeSupport.ts", "../node_modules/@civ-clone/base-spaceship-power/Power.ts", "../node_modules/@civ-clone/base-spaceship-propulsion/Propulsion.ts", "../node_modules/@civ-clone/core-spaceship/Slot.ts", "../node_modules/@civ-clone/base-spaceship-structural/Structural.ts", "../node_modules/@civ-clone/civ1-default-spaceship-layout/Default.ts", "../node_modules/@civ-clone/core-spaceship/LayoutRegistry.ts", "../node_modules/@civ-clone/civ1-default-spaceship-layout/registerLayouts.ts", "../node_modules/@civ-clone/civ1-default-spaceship-layout/index.ts", "../node_modules/@civ-clone/core-diplomacy/Interaction.ts", "../node_modules/@civ-clone/core-diplomacy/InteractionRegistry.ts", "../node_modules/@civ-clone/base-diplomacy-interaction-contact/Contact.ts", "../node_modules/@civ-clone/civ1-diplomacy/Interactions.ts", "../node_modules/@civ-clone/civ1-diplomacy/Rules/Unit/moved.ts", "../node_modules/@civ-clone/civ1-diplomacy/registerRules.ts", "../node_modules/@civ-clone/civ1-diplomacy/index.ts", "../node_modules/@civ-clone/civ1-earth-generator/CivilizationStartTile.ts", "../node_modules/@civ-clone/core-world-generator/lib/coordsToIndex.ts", "../node_modules/@civ-clone/core-world-generator/lib/indexToCoords.ts", "../node_modules/@civ-clone/core-world-generator/lib/distanceFrom.ts", "../node_modules/@civ-clone/core-world-generator/lib/getNeighbours.ts", "../node_modules/@civ-clone/core-world-generator/Generator.ts", "../node_modules/@civ-clone/civ1-earth-generator/Earth.ts", "../node_modules/@civ-clone/civ1-earth-generator/EarthStartTile.ts", "../node_modules/@civ-clone/civ1-earth-generator/CivilizationStartTileRegistry.ts", "../node_modules/@civ-clone/civ1-earth-generator/EarthStartTileRegistry.ts", "../node_modules/@civ-clone/civ1-earth-generator/registerEarthStartTiles.ts", "../node_modules/@civ-clone/civ1-earth-generator/index.ts", "../node_modules/@civ-clone/civ1-game-year/Rules/Turn/year.ts", "../node_modules/@civ-clone/civ1-game-year/registerRules.ts", "../node_modules/@civ-clone/civ1-game-year/index.ts", "../node_modules/@civ-clone/civ1-goody-hut/Rules/GoodyHut/action.ts", "../node_modules/@civ-clone/civ1-goody-hut/Rules/GoodyHut/action-performed.ts", "../node_modules/@civ-clone/civ1-goody-hut/Rules/GoodyHut/discovered.ts", "../node_modules/@civ-clone/core-goody-hut/Rules/Distribution.ts", "../node_modules/@civ-clone/civ1-goody-hut/Rules/GoodyHut/distribution.ts", "../node_modules/@civ-clone/civ1-goody-hut/Rules/GoodyHut/unit.ts", "../node_modules/@civ-clone/civ1-goody-hut/Rules/Unit/moved.ts", "../node_modules/@civ-clone/core-world/Rules/Built.ts", "../node_modules/@civ-clone/civ1-goody-hut/Rules/World/built.ts", "../node_modules/@civ-clone/civ1-goody-hut/registerRules.ts", "../node_modules/@civ-clone/civ1-goody-hut/index.ts", "../node_modules/@civ-clone/civ1-government/registerGovernments.ts", "../node_modules/@civ-clone/civ1-government/Rules/Player/action.ts", "../node_modules/@civ-clone/civ1-government/Rules/Player/added.ts", "../node_modules/@civ-clone/civ1-government/Rules/Governments/availability.ts", "../node_modules/@civ-clone/civ1-government/Rules/Player/government-changed.ts", "../node_modules/@civ-clone/civ1-government/registerRules.ts", "../node_modules/@civ-clone/civ1-government/index.ts", "../node_modules/@civ-clone/core-player/Rules/TurnEnd.ts", "../node_modules/@civ-clone/civ1-player/Events/Player/turn-end.ts", "../node_modules/@civ-clone/civ1-player/Events/Player/turn-start.ts", "../node_modules/@civ-clone/civ1-player/Events/Turn/start.ts", "../node_modules/@civ-clone/civ1-player/registerEvents.ts", "../node_modules/@civ-clone/core-player/Rules/Defeated.ts", "../node_modules/@civ-clone/civ1-player/Rules/City/captured.ts", "../node_modules/@civ-clone/civ1-player/Rules/City/destroyed.ts", "../node_modules/@civ-clone/civ1-player/Rules/Player/action.ts", "../node_modules/@civ-clone/civ1-player/Rules/Player/added.ts", "../node_modules/@civ-clone/civ1-player/Rules/Player/defeated.ts", "../node_modules/@civ-clone/core-player/Rules/Spawn.ts", "../node_modules/@civ-clone/civ1-player/Rules/Player/spawn.ts", "../node_modules/@civ-clone/civ1-player/Rules/Player/turn-start.ts", "../node_modules/@civ-clone/civ1-player/Rules/Player/visibility-changed.ts", "../node_modules/@civ-clone/civ1-player/Rules/TileImprovement/built.ts", "../node_modules/@civ-clone/civ1-player/Rules/Unit/destroyed.ts", "../node_modules/@civ-clone/civ1-player/Rules/Unit/visibility.ts", "../node_modules/@civ-clone/core-world-generator/Rules/PickStartTile.ts", "../node_modules/@civ-clone/civ1-player/Rules/World/built.ts", "../node_modules/@civ-clone/civ1-player/registerRules.ts", "../node_modules/@civ-clone/civ1-player/index.ts", "../node_modules/@civ-clone/civ1-science/registerAdvances.ts", "../node_modules/@civ-clone/civ1-science/PlayerActions.ts", "../node_modules/@civ-clone/civ1-science/Rules/Player/action.ts", "../node_modules/@civ-clone/civ1-science/Rules/Player/added.ts", "../node_modules/@civ-clone/civ1-science/Rules/City/captured.ts", "../node_modules/@civ-clone/civ1-science/Rules/Research/complete.ts", "../node_modules/@civ-clone/civ1-science/Rules/Research/cost.ts", "../node_modules/@civ-clone/civ1-science/Rules/City/process-yield.ts", "../node_modules/@civ-clone/civ1-science/Rules/Research/requirements.ts", "../node_modules/@civ-clone/civ1-science/Rules/Research/started.ts", "../node_modules/@civ-clone/civ1-science/registerRules.ts", "../node_modules/@civ-clone/civ1-science/index.ts", "../node_modules/@civ-clone/civ1-spaceship/Parts.ts", "../node_modules/@civ-clone/civ1-spaceship/registerBuildItems.ts", "../node_modules/@civ-clone/core-spaceship/Rules/Built.ts", "../node_modules/@civ-clone/core-spaceship/Rules/ChanceOfSuccess.ts", "../node_modules/@civ-clone/core-spaceship/Rules/FlightTime.ts", "../node_modules/@civ-clone/core-spaceship/Rules/Landed.ts", "../node_modules/@civ-clone/core-spaceship/Rules/Launch.ts", "../node_modules/@civ-clone/core-spaceship/Rules/Lost.ts", "../node_modules/@civ-clone/core-spaceship/Spaceship.ts", "../node_modules/@civ-clone/core-spaceship/SpaceshipRegistry.ts", "../node_modules/@civ-clone/core-wonder/WonderRegistry.ts", "../node_modules/@civ-clone/base-wonder-apolloprogram/ApolloProgram.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/City/build.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/City/build-cost.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/City/building-complete.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/City/spend.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Player/action.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Spaceship/active.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Spaceship/built.ts", "../node_modules/@civ-clone/base-spaceship-yield-energy/Energy.ts", "../node_modules/@civ-clone/base-spaceship-yield-life-support/LifeSupport.ts", "../node_modules/@civ-clone/base-spaceship-yield-mass/Mass.ts", "../node_modules/@civ-clone/base-spaceship-yield-population/Population.ts", "../node_modules/@civ-clone/civ1-spaceship/Yields.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Spaceship/chance-of-success.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Spaceship/choose-slot.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Spaceship/flight-time.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Spaceship/landed.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Spaceship/lost.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Spaceship/yield.ts", "../node_modules/@civ-clone/core-turn-based-game/Rules/Start.ts", "../node_modules/@civ-clone/civ1-spaceship/Rules/Turn/start.ts", "../node_modules/@civ-clone/civ1-spaceship/registerRules.ts", "../node_modules/@civ-clone/civ1-spaceship/index.ts", "../node_modules/@civ-clone/core-trade-rate/TradeRate.ts", "../node_modules/@civ-clone/base-trade-rate-luxuries/Luxuries.ts", "../node_modules/@civ-clone/base-trade-rate-research/Research.ts", "../node_modules/@civ-clone/base-trade-rate-tax/Tax.ts", "../node_modules/@civ-clone/civ1-trade-rate/TradeRates.ts", "../node_modules/@civ-clone/core-trade-rate/AvailableTradeRateRegistry.ts", "../node_modules/@civ-clone/civ1-trade-rate/registerAvailableTradeRates.ts", "../node_modules/@civ-clone/civ1-trade-rate/Yields.ts", "../node_modules/@civ-clone/core-trade-rate/PlayerTradeRates.ts", "../node_modules/@civ-clone/core-trade-rate/PlayerTradeRatesRegistry.ts", "../node_modules/@civ-clone/civ1-trade-rate/Rules/City/yield.ts", "../node_modules/@civ-clone/civ1-trade-rate/Rules/Player/action.ts", "../node_modules/@civ-clone/civ1-trade-rate/Rules/Player/added.ts", "../node_modules/@civ-clone/civ1-trade-rate/Rules/Player/turn-start.ts", "../node_modules/@civ-clone/civ1-trade-rate/registerRules.ts", "../node_modules/@civ-clone/civ1-trade-rate/index.ts", "../node_modules/@civ-clone/civ1-treasury/Rules/City/spend.ts", "../node_modules/@civ-clone/civ1-treasury/Rules/Player/action.ts", "../node_modules/@civ-clone/civ1-treasury/Rules/Player/added.ts", "../node_modules/@civ-clone/civ1-treasury/Yields.ts", "../node_modules/@civ-clone/core-treasury/Rules/Updated.ts", "../node_modules/@civ-clone/civ1-treasury/Rules/City/process-yield.ts", "../node_modules/@civ-clone/civ1-treasury/Rules/Player/treasury-updated.ts", "../node_modules/@civ-clone/civ1-treasury/registerRules.ts", "../node_modules/@civ-clone/civ1-treasury/index.ts", "../node_modules/@civ-clone/civ1-unit/registerAvailableBuildItems.ts", "../node_modules/@civ-clone/core-tile-improvement/Rules/Available.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/action.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/activate.ts", "../node_modules/@civ-clone/civ1-unit/Rules/City/build.ts", "../node_modules/@civ-clone/civ1-unit/Rules/City/buildCost.ts", "../node_modules/@civ-clone/civ1-unit/Rules/City/buildingComplete.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/created.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/defeated.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/destroyed.ts", "../node_modules/@civ-clone/core-unit-transport/Rules/LostAtSea.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/lostAtSea.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/moved.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/movementCost.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Player/action.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/stowed.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/yield.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/unsupported.ts", "../node_modules/@civ-clone/civ1-unit/Rules/Unit/validateMove.ts", "../node_modules/@civ-clone/civ1-unit/registerRules.ts", "../node_modules/@civ-clone/civ1-unit/index.ts", "../node_modules/@civ-clone/base-wonder-colossus/Colossus.ts", "../node_modules/@civ-clone/base-wonder-copernicus-observatory/CopernicusObservatory.ts", "../node_modules/@civ-clone/base-wonder-cureforcancer/CureForCancer.ts", "../node_modules/@civ-clone/base-wonder-darwinsvoyage/DarwinsVoyage.ts", "../node_modules/@civ-clone/base-wonder-great-library/GreatLibrary.ts", "../node_modules/@civ-clone/base-wonder-great-wall/GreatWall.ts", "../node_modules/@civ-clone/base-wonder-hanging-gardens/HangingGardens.ts", "../node_modules/@civ-clone/base-wonder-hooverdam/HooverDam.ts", "../node_modules/@civ-clone/base-wonder-isaacnewtonscollege/IsaacNewtonsCollege.ts", "../node_modules/@civ-clone/base-wonder-jsbachscathedral/JsBachsCathedral.ts", "../node_modules/@civ-clone/base-wonder-lighthouse/Lighthouse.ts", "../node_modules/@civ-clone/base-wonder-magellans-expedition/MagellansExpedition.ts", "../node_modules/@civ-clone/base-wonder-manhattanproject/ManhattanProject.ts", "../node_modules/@civ-clone/base-wonder-michelangeloschapel/MichelangelosChapel.ts", "../node_modules/@civ-clone/base-wonder-oracle/Oracle.ts", "../node_modules/@civ-clone/base-wonder-pyramids/Pyramids.ts", "../node_modules/@civ-clone/base-wonder-setiprogram/SetiProgram.ts", "../node_modules/@civ-clone/base-wonder-shakespearestheatre/ShakespearesTheatre.ts", "../node_modules/@civ-clone/base-wonder-unitednations/UnitedNations.ts", "../node_modules/@civ-clone/base-wonder-womenssuffrage/WomensSuffrage.ts", "../node_modules/@civ-clone/civ1-wonder/Wonders.ts", "../node_modules/@civ-clone/civ1-wonder/registerAvailableBuildItems.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/City/build.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/City/build-cost.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/City/building-complete.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/lib/hasWonder.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/lib/hasDiscovered.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/lib/hasCityImprovement.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/City/cost.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/City/destroyed.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/City/yield.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/City/yield-modifier.ts", "../node_modules/@civ-clone/core-wonder/Rules/Obsolete.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/Player/research-complete.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/Unit/yield.ts", "../node_modules/@civ-clone/civ1-wonder/Rules/Wonder/obsolete.ts", "../node_modules/@civ-clone/civ1-wonder/registerRules.ts", "../node_modules/@civ-clone/civ1-wonder/index.ts", "../node_modules/@civ-clone/civ1-world/Rules/TileImprovement/available.ts", "../node_modules/@civ-clone/civ1-world/Rules/TileImprovement/built.ts", "../node_modules/@civ-clone/core-terrain-feature/AvailableTerrainFeatureRegistry.ts", "../node_modules/@civ-clone/civ1-world/Rules/Terrain/created.ts", "../node_modules/@civ-clone/core-world-generator/Rules/Distribution.ts", "../node_modules/@civ-clone/civ1-world/Rules/Terrain/distribution.ts", "../node_modules/@civ-clone/core-world-generator/Rules/DistributionGroups.ts", "../node_modules/@civ-clone/civ1-world/Rules/Terrain/distribution-groups.ts", "../node_modules/@civ-clone/civ1-world/Rules/Terrain/feature.ts", "../node_modules/@civ-clone/core-tile-improvement/Rules/Pillaged.ts", "../node_modules/@civ-clone/civ1-world/Rules/TileImprovement/pillaged.ts", "../node_modules/@civ-clone/civ1-world/Rules/Player/pick-start-tile.ts", "../node_modules/@civ-clone/core-world-generator/GeneratorRegistry.ts", "../node_modules/@civ-clone/core-world-generator/Rules/PickGenerator.ts", "../node_modules/@civ-clone/core-engine/Rules/Start.ts", "../node_modules/@civ-clone/core-world/World.ts", "../node_modules/@civ-clone/civ1-world/Rules/Engine/start.ts", "../node_modules/@civ-clone/civ1-world/Rules/Tile/yield.ts", "../node_modules/@civ-clone/civ1-world/Rules/Tile/yield-modifier.ts", "../node_modules/@civ-clone/civ1-world/Rules/WorldGenerator/pick-generator.ts", "../node_modules/@civ-clone/civ1-world/registerRules.ts", "../node_modules/@civ-clone/core-terrain/TerrainRegistry.ts", "../node_modules/@civ-clone/civ1-world/registerTerrains.ts", "../node_modules/@civ-clone/civ1-world/registerTerrainFeatures.ts", "../node_modules/@civ-clone/civ1-world/index.ts", "../node_modules/@civ-clone/core-city/AdditionalData/cities.ts", "../node_modules/@civ-clone/core-city/registerAdditionalData.ts", "../node_modules/@civ-clone/core-city/index.ts", "../node_modules/@civ-clone/core-city-build/AdditionalData/build.ts", "../node_modules/@civ-clone/core-city-build/registerAdditionalData.ts", "../node_modules/@civ-clone/core-city-build/index.ts", "../node_modules/@civ-clone/core-city-growth/AdditionalData/growth.ts", "../node_modules/@civ-clone/core-city-growth/registerAdditionalData.ts", "../node_modules/@civ-clone/core-city-growth/index.ts", "../node_modules/@civ-clone/core-city-improvement/AdditionalData/improvements.ts", "../node_modules/@civ-clone/core-city-improvement/registerAdditionalData.ts", "../node_modules/@civ-clone/core-city-improvement/index.ts", "../node_modules/@civ-clone/core-goody-hut/AdditionalData/goodyHut.ts", "../node_modules/@civ-clone/core-goody-hut/registerAdditionalData.ts", "../node_modules/@civ-clone/core-goody-hut/index.ts", "../node_modules/@civ-clone/core-government/AdditionalData/government.ts", "../node_modules/@civ-clone/core-government/registerAdditionalData.ts", "../node_modules/@civ-clone/core-government/index.ts", "../node_modules/@civ-clone/core-player-world/AdditionalData/world.ts", "../node_modules/@civ-clone/core-player-world/registerAdditionalData.ts", "../node_modules/@civ-clone/core-player-world/index.ts", "../node_modules/@civ-clone/core-science/AdditionalData/research.ts", "../node_modules/@civ-clone/core-science/registerAdditionalData.ts", "../node_modules/@civ-clone/core-science/index.ts", "../node_modules/@civ-clone/core-spaceship/AdditionalData/spaceship.ts", "../node_modules/@civ-clone/core-spaceship/registerAdditionalData.ts", "../node_modules/@civ-clone/core-spaceship/index.ts", "../node_modules/@civ-clone/core-terrain-feature/AdditionalData/features.ts", "../node_modules/@civ-clone/core-terrain-feature/registerAdditionalData.ts", "../node_modules/@civ-clone/core-terrain-feature/index.ts", "../node_modules/@civ-clone/core-tile-improvement/AdditionalData/improvements.ts", "../node_modules/@civ-clone/core-tile-improvement/registerAdditionalData.ts", "../node_modules/@civ-clone/core-tile-improvement/index.ts", "../node_modules/@civ-clone/core-trade-rate/AdditionalData/rates.ts", "../node_modules/@civ-clone/core-trade-rate/registerAdditionalData.ts", "../node_modules/@civ-clone/core-trade-rate/index.ts", "../node_modules/@civ-clone/core-treasury/AdditionalData/treasury.ts", "../node_modules/@civ-clone/core-treasury/registerAdditionalData.ts", "../node_modules/@civ-clone/core-treasury/index.ts", "../node_modules/@civ-clone/core-turn-based-game/Rules/End.ts", "../node_modules/@civ-clone/core-turn-based-game/Events/Engine/start.ts", "../node_modules/@civ-clone/core-turn-based-game/registerEvents.ts", "../node_modules/@civ-clone/core-turn-based-game/index.ts", "../node_modules/@civ-clone/core-unit/AdditionalData/units.ts", "../node_modules/@civ-clone/core-unit/registerAdditionalData.ts", "../node_modules/@civ-clone/core-unit/index.ts", "../node_modules/@civ-clone/core-unit-improvement/AdditionalData/improvements.ts", "../node_modules/@civ-clone/core-unit-improvement/registerAdditionalData.ts", "../node_modules/@civ-clone/core-unit-improvement/index.ts", "../node_modules/@civ-clone/core-ai-client/AIClientRegistry.ts", "../node_modules/@civ-clone/simple-ai-client/registerAIClient.ts", "../node_modules/@civ-clone/simple-ai-client/Rules/City/captured.ts", "../node_modules/@civ-clone/simple-ai-client/Rules/City/destroyed.ts", "../node_modules/@civ-clone/simple-ai-client/Rules/Unit/defeated.ts", "../node_modules/@civ-clone/simple-ai-client/registerRules.ts", "../node_modules/@civ-clone/simple-ai-client/index.ts", "../node_modules/@civ-clone/simple-world-generator/BaseGenerator.ts", "../node_modules/@civ-clone/simple-world-generator/registerWorldGenerator.ts", "../node_modules/@civ-clone/simple-world-generator/index.ts", "../src/js/plugins.ts", "../src/js/Engine/DataTransferClient.ts", "../node_modules/@civ-clone/core-civ-client/Client.ts", "../src/js/Engine/DataQueue.ts", "../node_modules/@civ-clone/civ1-player/PlayerActions.ts", "../node_modules/@civ-clone/civ1-spaceship/PlayerActions.ts", "../src/js/Engine/Error/RetryFailed.ts", "../src/js/Engine/Retryable.ts", "../src/js/Engine/TransferObject.ts", "../src/js/Engine/UnknownObjects/City.ts", "../src/js/Engine/UnknownObjects/Player.ts", "../src/js/Engine/UnknownObjects/Unit.ts", "../src/js/Engine/Game.ts", "../src/js/Engine/AbstractTransport.ts", "../src/js/Engine/ParentTransport.ts", "../src/js/backend.ts"],
  "sourcesContent": ["import { IRegistry, IRegistryIterator, IConstructor } from './Registry';\n\nexport interface IEntityRegistry<T> extends IRegistry<T> {\n  accepts(entity: T): boolean;\n  entries(): T[];\n  every(iterator: IRegistryIterator<T>): boolean;\n  filter(iterator: IRegistryIterator<T>): T[];\n  forEach(iterator: (item: T, i: number) => void): void;\n  getBy<K extends keyof T>(\n    key: K,\n    value: T[K] extends (...args: any[]) => any ? ReturnType<T[K]> : T[K]\n  ): T[];\n  includes(item: T): boolean;\n  indexOf(item: T): number;\n  map(iterator: (item: T, i: number) => any): any[];\n  register(...entities: T[]): void;\n  some(iterator: IRegistryIterator<T>): boolean;\n  unregister(...entities: T[]): void;\n}\n\nexport class EntityRegistry<T = any> implements IEntityRegistry<T> {\n  #acceptedTypes: IConstructor<T>[] = [];\n  #entries: T[] = [];\n\n  constructor(...acceptedTypes: IConstructor<T>[]) {\n    this.#acceptedTypes.push(...acceptedTypes);\n  }\n\n  accepts(entity: T): boolean {\n    return this.#acceptedTypes.some(\n      (acceptedType: IConstructor<T>): boolean => entity instanceof acceptedType\n    );\n  }\n\n  entries(): T[] {\n    return this.#entries.slice();\n  }\n\n  every(iterator: IRegistryIterator<T>): boolean {\n    return this.entries().every(iterator);\n  }\n\n  filter(iterator: IRegistryIterator<T>): T[] {\n    return this.entries().filter(iterator);\n  }\n\n  forEach(iterator: (item: T, i: number) => void): void {\n    return this.entries().forEach(iterator);\n  }\n\n  getBy<K extends keyof T>(\n    key: K,\n    value: T[K] extends (...args: any[]) => any ? ReturnType<T[K]> : T[K]\n  ): T[] {\n    return this.filter((entity: T): boolean => {\n      const check = entity[key];\n\n      if (check instanceof Function) {\n        return check.bind(entity)() === value;\n      }\n\n      return entity[key] === value;\n    });\n  }\n\n  includes(item: T): boolean {\n    return this.#entries.includes(item);\n  }\n\n  indexOf(entity: T): number {\n    return this.#entries.indexOf(entity);\n  }\n\n  get length(): number {\n    return this.entries().length;\n  }\n\n  map(iterator: (item: T, i: number) => any): any[] {\n    return this.entries().map(iterator);\n  }\n\n  register(...entities: T[]): void {\n    entities.forEach((entity: T): void => {\n      if (!this.accepts(entity)) {\n        throw new TypeError(\n          `Registry#register: Invalid entity attempted to be registered: '${entity}'.`\n        );\n      }\n\n      if (!this.#entries.includes(entity)) {\n        this.#entries.push(entity);\n      }\n    });\n  }\n\n  some(iterator: IRegistryIterator<T>): boolean {\n    return this.entries().some(iterator);\n  }\n\n  unregister(...entities: T[]): void {\n    entities.forEach((entity: T) => {\n      const index = this.#entries.indexOf(entity);\n\n      if (index > -1) {\n        this.#entries.splice(index, 1);\n      }\n    });\n  }\n}\n\nexport default EntityRegistry;\n", "import { IConstructor } from '@civ-clone/core-registry/Registry';\n\nexport interface IAdditionalData {\n  data(...args: any[]): any;\n  key(): string;\n  type(): IConstructor;\n}\n\nexport class AdditionalData implements IAdditionalData {\n  #key: string;\n  #provider: (...args: any[]) => any;\n  #type: IConstructor;\n\n  constructor(\n    type: IConstructor,\n    key: string,\n    provider: (...args: any[]) => any\n  ) {\n    this.#key = key;\n    this.#provider = provider;\n    this.#type = type;\n  }\n\n  data(...args: any[]): any {\n    return this.#provider(...args);\n  }\n\n  key(): string {\n    return this.#key;\n  }\n\n  type(): IConstructor {\n    return this.#type;\n  }\n}\n\nexport default AdditionalData;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport AdditionalData from './AdditionalData';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\n\nexport interface IAdditionalDataRegistry\n  extends IEntityRegistry<AdditionalData> {\n  getByType(type: IConstructor): AdditionalData[];\n}\n\nexport class AdditionalDataRegistry\n  extends EntityRegistry<AdditionalData>\n  implements IAdditionalDataRegistry\n{\n  constructor() {\n    super(AdditionalData);\n  }\n\n  getByType(type: IConstructor): AdditionalData[] {\n    return this.filter(\n      (additionalData: AdditionalData): boolean =>\n        additionalData.type() === type ||\n        Object.prototype.isPrototypeOf.call(additionalData.type(), type) ||\n        Object.prototype.isPrototypeOf.call(\n          additionalData.type().prototype,\n          type\n        )\n    );\n  }\n}\n\nexport const instance: AdditionalDataRegistry = new AdditionalDataRegistry();\n\nexport default AdditionalDataRegistry;\n", "import {\n  AdditionalDataRegistry,\n  instance as additionalDataRegistryInstance,\n} from './AdditionalDataRegistry';\nimport AdditionalData from './AdditionalData';\nimport EntityRegistry from '@civ-clone/core-registry/EntityRegistry';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\n\nexport type DataObjectFilter = (object: DataObject) => any;\n\nexport type PlainObject = {\n  [key: string | symbol | number]: any;\n};\n\nexport type ObjectStore = {\n  [key: string]: PlainObject;\n};\n\nexport type ObjectMap = {\n  hierarchy: PlainObject;\n  objects: ObjectStore;\n};\n\nexport interface IDataObject {\n  addKey(...keys: (string | number | symbol)[]): void;\n  id(): string;\n  keys(): (string | number | symbol)[];\n  sourceClass(): IConstructor<this>;\n  toPlainObject(): PlainObject;\n}\n\nconst idCache: { [key: string]: number | bigint } = {},\n  idProvider = (object: DataObject) => {\n    const className = object.sourceClass().name,\n      current = idCache[className];\n\n    if (!current) {\n      idCache[className] = 0;\n    }\n\n    if (current === Number.MAX_SAFE_INTEGER) {\n      idCache[className] = BigInt(current);\n    }\n\n    return className + '-' + (++idCache[className]).toString(36);\n  },\n  toPlainObject = (\n    value: any,\n    objects: ObjectStore,\n    filter: (object: any) => any = (object) => object,\n    additionalDataRegistry: AdditionalDataRegistry = additionalDataRegistryInstance\n  ): PlainObject | PlainObject[] => {\n    value = filter(value);\n\n    if (value instanceof EntityRegistry) {\n      value = value.entries();\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(\n        (item: any): PlainObject =>\n          toPlainObject(item, objects, filter, additionalDataRegistry)\n      );\n    }\n\n    if (value instanceof DataObject) {\n      const id = value.id();\n\n      if (!(id in objects)) {\n        const plainObject: PlainObject = {\n          _: value.sourceClass().name,\n        };\n\n        objects[id] = plainObject;\n\n        value.keys().forEach((key: string): void => {\n          const keyValue: any =\n            value[key] instanceof Function\n              ? (value[key] as unknown as Function)()\n              : value[key];\n\n          plainObject[key] = toPlainObject(\n            keyValue,\n            objects,\n            filter,\n            additionalDataRegistry\n          );\n        });\n\n        additionalDataRegistry\n          .getByType(value.sourceClass())\n          .forEach((additionalData: AdditionalData): void => {\n            plainObject[additionalData.key()] = toPlainObject(\n              additionalData.data(value),\n              objects,\n              filter,\n              additionalDataRegistry\n            );\n          });\n      }\n\n      return {\n        '#ref': id,\n      };\n    }\n\n    if (value instanceof Function) {\n      return {\n        _: value.name,\n      };\n    }\n\n    if (value && value instanceof Object) {\n      return Object.entries(value).reduce(\n        (object: PlainObject, [key, value]) => {\n          object[key] = toPlainObject(\n            value,\n            objects,\n            filter,\n            additionalDataRegistry\n          );\n\n          return object;\n        },\n        {}\n      );\n    }\n\n    return value;\n  };\n\nexport class DataObject implements IDataObject {\n  #id: string;\n  #keys: (keyof this)[] = ['id'];\n\n  constructor() {\n    this.#id = idProvider(this);\n  }\n\n  addKey(...keys: (keyof this)[]): void {\n    this.#keys.push(...keys);\n  }\n\n  id(): string {\n    return this.#id;\n  }\n\n  keys(): (keyof this)[] {\n    return this.#keys;\n  }\n\n  sourceClass<T extends NewableFunction>(): T {\n    return this.constructor as T;\n  }\n\n  toPlainObject(\n    dataObjectFilter: DataObjectFilter = (object) => object,\n    additionalDataRegistry: AdditionalDataRegistry = additionalDataRegistryInstance\n  ): ObjectMap {\n    const objects = {};\n\n    return {\n      hierarchy: toPlainObject(\n        this,\n        objects,\n        dataObjectFilter,\n        additionalDataRegistry\n      ),\n      objects,\n    };\n  }\n}\n\nexport default DataObject;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport Player from './Player';\n\nexport interface IPlayerAction extends IDataObject {\n  player(): Player;\n  value(): any;\n}\n\nexport class PlayerAction<T = any> extends DataObject implements IPlayerAction {\n  #player: Player;\n  #value: T;\n\n  constructor(player: Player, value: T) {\n    super();\n\n    this.#player = player;\n    this.#value = value;\n\n    this.addKey('value');\n  }\n\n  public player(): Player {\n    return this.#player;\n  }\n\n  public value(): T {\n    return this.#value;\n  }\n}\n\nexport default PlayerAction;\n", "import PlayerAction from './PlayerAction';\n\nexport class MandatoryPlayerAction<T = any> extends PlayerAction<T> {}\n\nexport default MandatoryPlayerAction;\n", "import MandatoryPlayerAction from '@civ-clone/core-player/MandatoryPlayerAction';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class ActiveUnit extends MandatoryPlayerAction<Unit> {}\n\nexport default ActiveUnit;\n", "import PlayerAction from '@civ-clone/core-player/PlayerAction';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class InactiveUnit extends PlayerAction<Unit> {}\n\nexport default InactiveUnit;\n", "export { ActiveUnit } from '@civ-clone/base-player-action-active-unit/ActiveUnit';\nexport { InactiveUnit } from '@civ-clone/base-player-action-inactive-unit/InactiveUnit';\n", "import DataObject from '@civ-clone/core-data-object/DataObject';\n\nexport class Advance extends DataObject {}\n\nexport default Advance;\n", "import { IRegistry, IRegistryIterator, IConstructor } from './Registry';\n\nexport interface IConstructorRegistry<T = any> extends IRegistry<T> {\n  accepts(entity: IConstructor<T>): boolean;\n  entries(): IConstructor<T>[];\n  every(iterator: IRegistryIterator<IConstructor<T>>): boolean;\n  filter(iterator: IRegistryIterator<IConstructor<T>>): IConstructor<T>[];\n  forEach(iterator: (item: IConstructor<T>, i: number) => void): void;\n  getBy<K extends keyof T>(\n    key: K,\n    value: T[K] extends (...args: any[]) => any ? ReturnType<T[K]> : T[K]\n  ): IConstructor<T>[];\n  includes(item: IConstructor<T>): boolean;\n  indexOf(item: IConstructor<T>): number;\n  map(iterator: (item: IConstructor<T>, i: number) => any): any[];\n  register(...entities: IConstructor<T>[]): void;\n  some(iterator: IRegistryIterator<IConstructor<T>>): boolean;\n  unregister(...entities: IConstructor<T>[]): void;\n}\n\nexport class ConstructorRegistry<T = any> implements IConstructorRegistry<T> {\n  #acceptedTypes: IConstructor<T>[] = [];\n  #entries: IConstructor<T>[] = [];\n\n  constructor(...acceptedTypes: IConstructor<T>[]) {\n    this.#acceptedTypes.push(...acceptedTypes);\n  }\n\n  accepts(entity: IConstructor<T>): boolean {\n    return (\n      typeof entity === 'function' &&\n      this.#acceptedTypes.some(\n        (acceptedType: IConstructor<T>) =>\n          Object.prototype.isPrototypeOf.call(acceptedType, entity) ||\n          Object.prototype.isPrototypeOf.call(acceptedType.prototype, entity)\n      )\n    );\n  }\n\n  entries(): IConstructor<T>[] {\n    return this.#entries.slice();\n  }\n\n  every(iterator: IRegistryIterator<IConstructor<T>>): boolean {\n    return this.entries().every(iterator);\n  }\n\n  filter(iterator: IRegistryIterator<IConstructor<T>>): IConstructor<T>[] {\n    return this.entries().filter(iterator);\n  }\n\n  forEach(iterator: (item: IConstructor<T>, i: number) => void): void {\n    return this.entries().forEach(iterator);\n  }\n\n  getBy<K extends keyof IConstructor<T>>(\n    key: K,\n    value: T[K] extends (...args: any[]) => any ? ReturnType<T[K]> : T[K]\n  ): IConstructor<T>[] {\n    return this.filter((entity: IConstructor<T>): boolean => {\n      const check: any = entity[key];\n\n      if (check instanceof Function) {\n        return check.bind(entity)() === value;\n      }\n\n      return entity[key] === value;\n    });\n  }\n\n  includes(item: IConstructor<T>): boolean {\n    return this.#entries.includes(item);\n  }\n\n  indexOf(entity: IConstructor<T>): number {\n    return this.#entries.indexOf(entity);\n  }\n\n  get length(): number {\n    return this.entries().length;\n  }\n\n  map(iterator: (item: IConstructor<T>, i: number) => any): any[] {\n    return this.entries().map(iterator);\n  }\n\n  register(...entities: IConstructor<T>[]): void {\n    entities.forEach((entity: IConstructor<T>): void => {\n      if (!this.accepts(entity)) {\n        throw new TypeError(\n          `Registry#register: Invalid entity attempted to be registered: '${entity}'.`\n        );\n      }\n\n      if (!this.#entries.includes(entity)) {\n        this.#entries.push(entity);\n      }\n    });\n  }\n\n  some(iterator: IRegistryIterator<IConstructor<T>>): boolean {\n    return this.entries().some(iterator);\n  }\n\n  unregister(...entities: IConstructor<T>[]): void {\n    entities.forEach((entity: IConstructor<T>) => {\n      const index = this.#entries.indexOf(entity);\n\n      if (index > -1) {\n        this.#entries.splice(index, 1);\n      }\n    });\n  }\n}\n\nexport default ConstructorRegistry;\n", "import Advance from './Advance';\nimport {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\n\nexport interface IAdvanceRegistry extends IConstructorRegistry<Advance> {}\n\nexport class AdvanceRegistry\n  extends ConstructorRegistry<Advance>\n  implements IAdvanceRegistry\n{\n  constructor() {\n    super(Advance);\n  }\n}\n\nexport const instance: AdvanceRegistry = new AdvanceRegistry();\n\nexport default AdvanceRegistry;\n", "export interface ICriterion<C extends any[] = any[]> {\n  validate(...args: C): boolean;\n}\n\nexport class Criterion<C extends any[] = any[]> implements ICriterion<C> {\n  #criterion: ((...args: C) => boolean) | null = null;\n\n  constructor(criterion?: (...args: C) => boolean) {\n    if (criterion) {\n      this.#criterion = criterion;\n    }\n  }\n\n  validate(...args: C): boolean {\n    if (this.#criterion === null) {\n      return true;\n    }\n\n    return this.#criterion(...args);\n  }\n}\n\nexport default Criterion;\n", "import Criterion, { ICriterion } from './Criterion';\n\nexport interface ICriteria<C extends any[] = any[]> extends ICriterion<C> {\n  criteria(): Criterion<C>[];\n}\n\nexport class Criteria<C extends any[] = any[]>\n  extends Criterion<C>\n  implements ICriteria<C>\n{\n  #criteria: Criterion<C>[] = [];\n\n  constructor(...criteria: Criterion<C>[]) {\n    super();\n\n    criteria.forEach((criterion: Criterion<C>): void => {\n      this.#criteria.push(criterion);\n    });\n  }\n\n  criteria(): Criterion<C>[] {\n    return this.#criteria;\n  }\n\n  validate(...args: C): boolean {\n    return this.#criteria.every((criterion: Criterion<C>): boolean =>\n      criterion.validate(...args)\n    );\n  }\n}\n\nexport default Criteria;\n", "import Criteria from '../Criteria';\n\nexport class And<C extends any[] = any[]> extends Criteria<C> {}\n\nexport default And;\n", "export interface IEffect {\n  apply(...args: any[]): any;\n}\n\nexport class Effect<T extends any[] = any[], R = any> implements IEffect {\n  #effect: (...args: T) => R;\n\n  constructor(effect: (...args: T) => R) {\n    this.#effect = effect;\n  }\n\n  apply(...args: T): R {\n    return this.#effect(...args);\n  }\n}\n\nexport default Effect;\n", "export interface IPriority {\n  value(): number;\n}\n\nexport class Priority implements IPriority {\n  #value: number;\n\n  constructor(value: number = 2000) {\n    this.#value = value;\n  }\n\n  value(): number {\n    return this.#value;\n  }\n}\n\nexport default Priority;\n", "import Priority from '../Priority';\n\nexport class High extends Priority {\n  constructor() {\n    super(1000);\n  }\n}\n\nexport default High;\n", "import Priority from '../Priority';\n\nexport class Low extends Priority {\n  constructor() {\n    super(3000);\n  }\n}\n\nexport default Low;\n", "import Priority from '../Priority';\n\nexport class Normal extends Priority {\n  constructor() {\n    super(2000);\n  }\n}\n\nexport default Normal;\n", "export { High } from './Priorities/High';\nexport { Low } from './Priorities/Low';\nexport { Normal } from './Priorities/Normal';\n", "import And from './Criteria/And';\nimport Criteria from './Criteria';\nimport Criterion from './Criterion';\nimport Effect from './Effect';\nimport { Normal } from './Priorities';\nimport Priority from './Priority';\n\nexport interface IRule<C extends any[] = any[], R = any> {\n  disable(): void;\n  enable(): void;\n  enabled(): boolean;\n  priority(): Priority;\n  process(...args: C): R | void;\n  validate(...args: C): boolean;\n}\n\nexport class Rule<C extends any[] = any[], R = any> implements IRule<C, R> {\n  #criteria: Criteria<C> | undefined;\n  #enabled: boolean = true;\n  #effect: Effect<C, R> | undefined;\n  #priority: Priority = new Normal();\n\n  constructor(...values: (Priority | Criterion<C> | Effect<C, R>)[]) {\n    const criteria: Criterion<C>[] = [];\n\n    values.forEach((value: Priority | Criterion<C> | Effect<C, R>): void => {\n      if (value instanceof Effect) {\n        if (this.#effect) {\n          throw new TypeError(\n            'Rule: effect already specified, but another was provided.'\n          );\n        }\n\n        this.#effect = value;\n\n        return;\n      }\n\n      if (value instanceof Criterion) {\n        criteria.push(value);\n\n        return;\n      }\n\n      this.#priority = value;\n    });\n\n    if (criteria.length) {\n      this.#criteria = new And(...criteria);\n    }\n  }\n\n  disable(): void {\n    this.#enabled = false;\n  }\n\n  enable(): void {\n    this.#enabled = true;\n  }\n\n  enabled(): boolean {\n    return this.#enabled;\n  }\n\n  priority(): Priority {\n    return this.#priority;\n  }\n\n  process(...args: C): R | void {\n    if (!this.#enabled) {\n      return;\n    }\n\n    if (this.#effect instanceof Effect) {\n      return this.#effect.apply(...args);\n    }\n  }\n\n  validate(...args: C): boolean {\n    if (!this.#enabled) {\n      return false;\n    }\n\n    if (this.#criteria instanceof Criterion) {\n      return this.#criteria.validate(...args);\n    }\n\n    return true;\n  }\n}\n\nexport default Rule;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Rule from './Rule';\n\ntype RuleArgs<T extends Rule> = T extends Rule<infer C, any> ? C : never;\ntype RuleReturn<T extends Rule> = T extends Rule<any[], infer R> ? R : never;\n\nexport interface IRuleRegistry<\n  T extends Rule = Rule,\n  P extends any[] = any[],\n  R = any\n> extends IEntityRegistry<T> {\n  get<RuleType extends T = T>(ruleType: IConstructor<RuleType>): RuleType[];\n  invalidateCache(rule: T | IConstructor<T>): void;\n  process<RuleType extends T = T>(\n    ruleType: IConstructor<RuleType>,\n    ...args: RuleArgs<RuleType>\n  ): RuleReturn<RuleType>[];\n}\n\ninterface RuleCacheMap extends Map<IConstructor<Rule>, Rule[]> {\n  get<T extends Rule>(ruleType: IConstructor<T>): T[];\n  set<T extends Rule>(ruleType: IConstructor<T>, rules: T[]): this;\n}\n\nexport class RuleRegistry\n  extends EntityRegistry<Rule>\n  implements IRuleRegistry\n{\n  #cache: RuleCacheMap = new Map();\n\n  constructor() {\n    super(Rule);\n  }\n\n  entries(): Rule[] {\n    return super\n      .entries()\n      .sort(\n        (a: Rule, b: Rule): number =>\n          a.priority().value() - b.priority().value()\n      );\n  }\n\n  get<RuleType extends Rule>(ruleType: IConstructor<RuleType>): RuleType[] {\n    if (!this.#cache.has(ruleType)) {\n      this.#cache.set(\n        ruleType,\n        this.filter(\n          (rule: Rule): rule is RuleType =>\n            rule.enabled() && rule instanceof ruleType\n        )\n      );\n    }\n\n    return this.#cache.get(ruleType) || [];\n  }\n\n  invalidateCache(rule: Rule | IConstructor<Rule>): void {\n    this.#cache.delete(\n      rule instanceof Rule\n        ? (rule.constructor as IConstructor<Rule>)\n        : (rule as IConstructor<Rule>)\n    );\n  }\n\n  process<RuleType extends Rule>(\n    ruleType: IConstructor<RuleType>,\n    ...args: RuleArgs<RuleType>\n  ): RuleReturn<RuleType>[] {\n    return this.get(ruleType)\n      .filter((rule: RuleType): boolean => rule.validate(...args))\n      .map((rule: RuleType): RuleReturn<RuleType> => rule.process(...args));\n  }\n\n  register(...rules: Rule[]) {\n    super.register(...rules);\n\n    rules.forEach((rule: Rule): void => this.invalidateCache(rule));\n  }\n\n  unregister(...rules: Rule[]): void {\n    super.unregister(...rules);\n\n    rules.forEach((rule: Rule): void => this.invalidateCache(rule));\n  }\n}\n\nexport const instance: RuleRegistry = new RuleRegistry();\n\nexport default RuleRegistry;\n", "import Advance from '../Advance';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport PlayerResearch from '../PlayerResearch';\n\nexport class Complete extends Rule<[PlayerResearch, Advance], void> {}\n\nexport default Complete;\n", "import Advance from '../Advance';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport PlayerResearch from '../PlayerResearch';\n\nexport class Cost extends Rule<[typeof Advance, PlayerResearch], number> {}\n\nexport default Cost;\n", "import Advance from '../Advance';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Requirements extends Rule<[typeof Advance, Advance[]], boolean> {}\n\nexport default Requirements;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\n\nexport type YieldValue = [number, string];\n\nexport interface IYield extends IDataObject {\n  add(value: Yield | number, provider: string): void;\n  clone(): Yield;\n  set(value: Yield | number, provider: string): void;\n  subtract(value: Yield | number, provider: string): void;\n  value(): number;\n  values(): YieldValue[];\n}\n\nexport class Yield extends DataObject implements IYield {\n  #values: YieldValue[] = [];\n  #valueCache: number | null = null;\n\n  constructor(value: Yield | number = 0, provider = 'initial') {\n    super();\n\n    this.addKey('value', 'values');\n\n    this.add(value, provider);\n  }\n\n  add(value: Yield | number, provider = ''): void {\n    if (value instanceof Yield) {\n      return this.add(value.value(), provider);\n    }\n\n    this.#values.push([value, provider]);\n\n    this.#valueCache = null;\n  }\n\n  clone(): Yield {\n    return new (this.constructor as typeof Yield)(this);\n  }\n\n  set(value: Yield | number, provider = ''): void {\n    this.#values.splice(0);\n\n    if (value instanceof Yield) {\n      return this.set(value.value(), provider);\n    }\n\n    this.#values.push([value, provider]);\n\n    this.#valueCache = value;\n  }\n\n  subtract(value: Yield | number, provider = ''): void {\n    if (value instanceof Yield) {\n      return this.subtract(value.value(), provider);\n    }\n\n    this.#values.push([-value, provider]);\n\n    this.#valueCache = null;\n  }\n\n  value(): number {\n    if (this.#valueCache === null) {\n      this.#valueCache = this.#values.reduce(\n        (total: number, [yieldValue]: YieldValue): number => total + yieldValue,\n        0\n      );\n    }\n\n    return this.#valueCache;\n  }\n\n  values(): YieldValue[] {\n    return this.#values;\n  }\n}\n\nexport default Yield;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Research extends Yield {}\n\nexport default Research;\n", "export { Research } from './Yields/Research';\n", "import Advance from '../Advance';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport PlayerResearch from '../PlayerResearch';\n\nexport class Started extends Rule<[PlayerResearch, typeof Advance], void> {}\n\nexport default Started;\n", "import {\n  AdvanceRegistry,\n  instance as advanceRegistryInstance,\n} from './AdvanceRegistry';\nimport {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Advance from './Advance';\nimport Complete from './Rules/Complete';\nimport Cost from './Rules/Cost';\nimport Player from '@civ-clone/core-player/Player';\nimport Requirements from './Rules/Requirements';\nimport { Research } from './Yields';\nimport Started from './Rules/Started';\n\nexport interface IPlayerResearch extends IDataObject {\n  add(researchYield: Research): void;\n  addAdvance(CompleteAdvance: typeof Advance): void;\n  available(): typeof Advance[];\n  check(): void;\n  complete(): Advance[];\n  completed(CompleteAdvance: typeof Advance): boolean;\n  cost(): Research;\n  player(): Player;\n  progress(): Research;\n  research(AdvanceToResearch: typeof Advance): void;\n  researching(): typeof Advance | null;\n}\n\nexport class PlayerResearch extends DataObject implements IPlayerResearch {\n  #advanceRegistry: AdvanceRegistry;\n  #complete: Advance[] = [];\n  #researching: typeof Advance | null = null;\n  #player: Player;\n  #cost: Research = new Research(Infinity);\n  #progress: Research = new Research(0);\n  #rulesRegistry: RuleRegistry;\n\n  constructor(\n    player: Player,\n    advanceRegistry: AdvanceRegistry = advanceRegistryInstance,\n    rulesRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#advanceRegistry = advanceRegistry;\n    this.#player = player;\n    this.#rulesRegistry = rulesRegistry;\n\n    this.addKey('available', 'complete', 'cost', 'progress', 'researching');\n  }\n\n  add(researchYield: Research): void {\n    this.#progress.add(researchYield);\n\n    this.check();\n  }\n\n  addAdvance(CompleteAdvance: typeof Advance): void {\n    if (\n      this.#complete.some(\n        (advance: Advance): boolean => advance instanceof CompleteAdvance\n      )\n    ) {\n      return;\n    }\n\n    if (this.#researching === CompleteAdvance) {\n      this.#researching = null;\n    }\n\n    const completedResearch = new CompleteAdvance();\n\n    this.#complete.push(completedResearch);\n    this.#rulesRegistry.process(Complete, this, completedResearch);\n  }\n\n  available(): typeof Advance[] {\n    const rules: Requirements[] = this.#rulesRegistry.get(Requirements);\n\n    return this.#advanceRegistry.filter(\n      (AvailableAdvance: typeof Advance): boolean =>\n        rules\n          .filter((rule: Requirements): boolean =>\n            rule.validate(AvailableAdvance, this.#complete)\n          )\n          .every(\n            (rule: Requirements): boolean =>\n              rule.process(AvailableAdvance, this.#complete) === true\n          ) &&\n        !this.#complete.some(\n          (advance: Advance): boolean => advance instanceof AvailableAdvance\n        )\n    );\n  }\n\n  check(): void {\n    if (\n      this.#researching !== null &&\n      this.#progress.value() >= this.#cost.value()\n    ) {\n      const completedResearch = new this.#researching();\n\n      this.#complete.push(completedResearch);\n      this.#researching = null;\n      this.#progress.subtract(this.#cost);\n\n      this.#cost.set(Infinity);\n\n      this.#rulesRegistry.process(Complete, this, completedResearch);\n    }\n  }\n\n  complete(): Advance[] {\n    return this.#complete;\n  }\n\n  completed(CompleteAdvance: typeof Advance): boolean {\n    return this.#complete.some(\n      (advance: Advance): boolean => advance instanceof CompleteAdvance\n    );\n  }\n\n  cost(): Research {\n    return this.#cost;\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  progress(): Research {\n    return this.#progress;\n  }\n\n  research(AdvanceToResearch: typeof Advance): void {\n    const [cost] = this.#rulesRegistry.process(Cost, AdvanceToResearch, this);\n\n    this.#cost.set(cost);\n    this.#researching = AdvanceToResearch;\n\n    this.#rulesRegistry.process(Started, this, AdvanceToResearch);\n  }\n\n  researching(): typeof Advance | null {\n    return this.#researching;\n  }\n}\n\nexport default PlayerResearch;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerResearch from './PlayerResearch';\n\ninterface IPlayerResearchRegistry extends IEntityRegistry<PlayerResearch> {\n  getByPlayer(player: Player): PlayerResearch;\n}\n\nexport class PlayerResearchRegistry\n  extends EntityRegistry<PlayerResearch>\n  implements IPlayerResearchRegistry\n{\n  constructor() {\n    super(PlayerResearch);\n  }\n\n  getByPlayer(player: Player): PlayerResearch {\n    const playerResearch: PlayerResearch[] = this.getBy('player', player);\n\n    if (playerResearch.length !== 1) {\n      throw new TypeError('Wrong number of results for player.');\n    }\n\n    return playerResearch[0];\n  }\n}\n\nexport const instance: PlayerResearchRegistry = new PlayerResearchRegistry();\n\nexport default PlayerResearchRegistry;\n", "import GoodyHut from './GoodyHut';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport interface IAction {\n  goodyHut(): GoodyHut;\n  perform(): void;\n  unit(): Unit;\n}\n\nexport class Action implements IAction {\n  #goodyHut: GoodyHut;\n  #unit: Unit;\n\n  constructor(goodyHut: GoodyHut, unit: Unit) {\n    this.#goodyHut = goodyHut;\n    this.#unit = unit;\n  }\n\n  goodyHut(): GoodyHut {\n    return this.#goodyHut;\n  }\n\n  perform(): void {}\n\n  unit(): Unit {\n    return this.#unit;\n  }\n}\n\nexport default Action;\n", "import {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport Action from '@civ-clone/core-goody-hut/Action';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport ScienceAdvance from '@civ-clone/core-science/Advance';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Advance extends Action {\n  #playerResearchRegistry: PlayerResearchRegistry;\n  #randomNumberGenerator: () => number;\n\n  constructor(\n    goodyHut: GoodyHut,\n    unit: Unit,\n    playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n    randomNumberGenerator: () => number = () => Math.random()\n  ) {\n    super(goodyHut, unit);\n\n    this.#playerResearchRegistry = playerResearchRegistry;\n    this.#randomNumberGenerator = randomNumberGenerator;\n  }\n\n  perform(): void {\n    const playerResearch = this.#playerResearchRegistry.getByPlayer(\n        this.unit().player()\n      ),\n      availableResearch = playerResearch.available(),\n      RandomAdvance: typeof ScienceAdvance =\n        availableResearch[\n          Math.floor(availableResearch.length * this.#randomNumberGenerator())\n        ];\n    playerResearch.addAdvance(RandomAdvance);\n  }\n}\n\nexport default Advance;\n", "import City from '../City';\nimport Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Captured extends Rule<[City, Player, Player], void> {}\n\nexport default Captured;\n", "import City from '../City';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport YieldValue from '@civ-clone/core-yield/Yield';\n\nexport class Cost extends Rule<\n  [City, YieldValue[]],\n  YieldValue | YieldValue[]\n> {}\n\nexport default Cost;\n", "import City from '../City';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Created extends Rule<[City], void> {}\n\nexport default Created;\n", "import City from '../City';\nimport Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Destroyed extends Rule<[City, Player | null], void> {}\n\nexport default Destroyed;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Terrain from '../Terrain';\n\nexport class Created extends Rule<[Terrain], void> {}\n\nexport default Created;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Created from './Rules/Created';\n\nexport interface ITerrain extends IDataObject {\n  clone(): Terrain;\n}\n\nexport class Terrain extends DataObject implements ITerrain {\n  #ruleRegistry: RuleRegistry;\n\n  constructor(ruleRegistry: RuleRegistry = ruleRegistryInstance) {\n    super();\n\n    this.#ruleRegistry = ruleRegistry;\n\n    this.#ruleRegistry.process(Created, this);\n  }\n\n  clone(): Terrain {\n    const clone = new (<typeof Terrain>this.constructor)(this.#ruleRegistry);\n\n    // TODO: make a `Cloned` `Rule` to handle cloning features\n    // clone\n    //   .features()\n    //   .push(\n    //     ...this.#features.map(\n    //       (feature: TerrainFeature): TerrainFeature => feature.clone()\n    //     )\n    //   );\n\n    return clone;\n  }\n}\n\nexport default Terrain;\n", "import Terrain from '../Terrain';\n\nexport class Land extends Terrain {}\n\nexport default Land;\n", "import Terrain from '../Terrain';\n\nexport class Water extends Terrain {}\n\nexport default Water;\n", "export { Land } from './Types/Land';\nexport { Water } from './Types/Water';\n", "import Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '../Tile';\nimport YieldValue from '@civ-clone/core-yield/Yield';\n\ntype YieldModifierArgs = [Tile, Player | null, YieldValue[]];\n\nexport class YieldModifier extends Rule<YieldModifierArgs, void> {}\n\nexport default YieldModifier;\n", "import Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '../Tile';\nimport YieldValue from '@civ-clone/core-yield/Yield';\n\ntype YieldArgs = [Tile, Player | null];\n\nexport class Yield extends Rule<YieldArgs, YieldValue | YieldValue[]> {}\n\nexport default Yield;\n", "import {\n  IDataObject,\n  DataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport { Land, Water } from '@civ-clone/core-terrain/Types';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Player from '@civ-clone/core-player/Player';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport Tileset from './Tileset';\nimport World from './World';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport YieldModifier from './Rules/YieldModifier';\nimport YieldRule from './Rules/Yield';\n\nexport type IAdjacentTiles = 'n' | 'e' | 's' | 'w';\nexport type INeighbouringTiles = IAdjacentTiles | 'ne' | 'se' | 'sw' | 'nw';\ntype IYieldCache = Map<Player | null, Yield[]>;\nexport type IYieldMap = [typeof Yield, number];\n\nexport interface ITile extends IDataObject {\n  clearYieldCache(player: Player | null): void;\n  getAdjacent(): Tile[];\n  getAdjacentDirections(): IAdjacentTiles[];\n  getNeighbour(direction: INeighbouringTiles): Tile;\n  getNeighbouringDirections(): INeighbouringTiles[];\n  getNeighbours(): Tile[];\n  getSurroundingArea(radius: number): Tileset;\n  distanceFrom(tile: Tile): number;\n  isCoast(): boolean;\n  isLand(): boolean;\n  isNeighbourOf(otherTile: Tile): boolean;\n  isWater(): boolean;\n  map(): World;\n  score(player: Player | null, values: IYieldMap[]): number;\n  terrain(): Terrain;\n  setTerrain(terrain: Terrain): void;\n  x(): number;\n  y(): number;\n  yields(player: Player | null): Yield[];\n}\n\nexport class Tile extends DataObject implements ITile {\n  #map: World;\n  #neighbours: Tile[] = [];\n  #ruleRegistry: RuleRegistry;\n  #terrain: Terrain;\n  #x: number;\n  #y: number;\n  #yieldCache: IYieldCache = new Map();\n\n  constructor(\n    x: number,\n    y: number,\n    terrain: Terrain,\n    map: World,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#x = x;\n    this.#y = y;\n    this.#terrain = terrain;\n    this.#map = map;\n    this.#ruleRegistry = ruleRegistry;\n\n    this.addKey('terrain', 'isCoast', 'isLand', 'isWater', 'x', 'y', 'yields');\n  }\n\n  clearYieldCache(player: Player | null = null): void {\n    this.#yieldCache.delete(player);\n  }\n\n  getAdjacent(): Tile[] {\n    return this.getAdjacentDirections().map(\n      (direction: IAdjacentTiles): Tile => this.getNeighbour(direction)\n    );\n  }\n\n  getAdjacentDirections(): IAdjacentTiles[] {\n    return ['n', 'e', 's', 'w'];\n  }\n\n  getNeighbour(direction: INeighbouringTiles): Tile {\n    if (direction === 'n') {\n      return this.#map.get(this.#x, this.#y - 1);\n    }\n\n    if (direction === 'ne') {\n      return this.#map.get(this.#x + 1, this.#y - 1);\n    }\n\n    if (direction === 'e') {\n      return this.#map.get(this.#x + 1, this.#y);\n    }\n\n    if (direction === 'se') {\n      return this.#map.get(this.#x + 1, this.#y + 1);\n    }\n\n    if (direction === 's') {\n      return this.#map.get(this.#x, this.#y + 1);\n    }\n\n    if (direction === 'sw') {\n      return this.#map.get(this.#x - 1, this.#y + 1);\n    }\n\n    if (direction === 'w') {\n      return this.#map.get(this.#x - 1, this.#y);\n    }\n\n    return this.#map.get(this.#x - 1, this.#y - 1);\n  }\n\n  getNeighbouringDirections(): INeighbouringTiles[] {\n    return ['n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'];\n  }\n\n  getNeighbours(): Tile[] {\n    if (!this.#neighbours.length) {\n      this.#neighbours = this.getNeighbouringDirections().map(\n        (direction: INeighbouringTiles): Tile => this.getNeighbour(direction)\n      );\n    }\n\n    return this.#neighbours;\n  }\n\n  getSurroundingArea(radius: number = 2): Tileset {\n    return Tileset.fromSurrounding(this, radius);\n  }\n\n  distanceFrom(tile: Tile): number {\n    const map: [number, number][] = [\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n        [0, 1],\n        [0, 0],\n        [0, -1],\n        [1, 1],\n        [1, 0],\n        [1, -1],\n      ],\n      [shortestDistance] = map\n        .map(([x, y]: [number, number]): number =>\n          Math.hypot(\n            this.#x - tile.x() + x * this.#map.width(),\n            this.#y - tile.y() + y * this.#map.height()\n          )\n        )\n        .sort((a: number, b: number): number => a - b);\n    return shortestDistance;\n  }\n\n  isCoast(): boolean {\n    const tile = this;\n\n    return (\n      (tile.isWater() &&\n        tile.getNeighbours().some((tile: Tile): boolean => tile.isLand())) ||\n      (tile.isLand() &&\n        tile.getNeighbours().some((tile: Tile): boolean => tile.isWater()))\n    );\n  }\n\n  isLand(): boolean {\n    return this.#terrain instanceof Land;\n  }\n\n  isNeighbourOf(otherTile: Tile): boolean {\n    return this.getNeighbours().includes(otherTile);\n  }\n\n  isWater(): boolean {\n    return this.#terrain instanceof Water;\n  }\n\n  map(): World {\n    return this.#map;\n  }\n\n  score(\n    player: Player | null = null,\n    values: IYieldMap[] = [[Yield, 3]]\n  ): number {\n    const yields = this.yields(player);\n\n    return yields\n      .map((tileYield: Yield): number => {\n        const [value]: IYieldMap[] = values.filter(\n            ([YieldType]: IYieldMap): boolean => tileYield instanceof YieldType\n          ),\n          weight: number = value ? value[1] || 1 : 0;\n\n        return tileYield.value() * weight;\n      })\n      .reduce((total: number, value: number): number => total + value, 0);\n  }\n\n  terrain(): Terrain {\n    return this.#terrain;\n  }\n\n  setTerrain(terrain: Terrain): void {\n    this.#terrain = terrain;\n  }\n\n  x(): number {\n    return this.#x;\n  }\n\n  y(): number {\n    return this.#y;\n  }\n\n  yields(player: Player | null = null): Yield[] {\n    if (!this.#yieldCache.has(player)) {\n      const tileYields = this.#ruleRegistry\n        .process(YieldRule, this, player)\n        .flat();\n\n      this.#ruleRegistry\n        .process(YieldModifier, this, player, tileYields)\n        .flat();\n\n      this.#yieldCache.set(player, tileYields);\n    }\n\n    return this.#yieldCache.get(player)!;\n  }\n}\n\nexport default Tile;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport { Tile, IYieldMap } from './Tile';\nimport Player from '@civ-clone/core-player/Player';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport interface ITileset extends IEntityRegistry<Tile> {\n  push(...tiles: Tile[]): void;\n  score(player: Player, values?: IYieldMap[]): number;\n  shift(): Tile;\n  unregister(...entities: Tile[]): void;\n  yields(player: Player): Yield[];\n}\n\nexport class Tileset extends EntityRegistry implements ITileset {\n  static from(...tiles: Tile[]): Tileset {\n    return new this(...tiles);\n  }\n\n  static fromSurrounding(tile: Tile, radius: number = 2): Tileset {\n    const gen = (radius: number): [number, number][] => {\n      const pairs: [number, number][] = [];\n\n      for (let x: number = tile.x() - radius; x <= tile.x() + radius; x++) {\n        for (let y: number = tile.y() - radius; y <= tile.y() + radius; y++) {\n          pairs.push([x, y]);\n        }\n      }\n\n      return pairs;\n    };\n\n    return this.from(\n      ...gen(radius).map(\n        ([x, y]: [number, number]): Tile => tile.map().get(x, y)\n      )\n    );\n  }\n\n  constructor(...tiles: Tile[]) {\n    super(Tile);\n\n    this.register(...tiles);\n  }\n\n  push(...tiles: Tile[]): void {\n    this.register(...tiles);\n  }\n\n  shift(): Tile {\n    const [first] = this.entries();\n\n    this.unregister(first);\n\n    return first;\n  }\n\n  score(player: Player | null = null, values: IYieldMap[] = []): number {\n    return this.entries().reduce(\n      (total: number, tile: Tile): number => total + tile.score(player, values),\n      0\n    );\n  }\n\n  yields(player: Player | null = null): Yield[] {\n    return this.entries().flatMap((tile) => tile.yields(player));\n  }\n}\n\nexport default Tileset;\n", "import City from '../City';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport YieldValue from '@civ-clone/core-yield/Yield';\n\nexport class Yield extends Rule<\n  [City, YieldValue[]],\n  YieldValue | YieldValue[]\n> {}\n\nexport default Yield;\n", "import City from '../City';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport YieldValue from '@civ-clone/core-yield/Yield';\n\nexport class YieldModifier extends Rule<\n  [City, YieldValue[]],\n  YieldValue | YieldValue[]\n> {}\n\nexport default YieldModifier;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Captured from './Rules/Captured';\nimport Cost from './Rules/Cost';\nimport Created from './Rules/Created';\nimport Destroyed from './Rules/Destroyed';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Tileset from '@civ-clone/core-world/Tileset';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport YieldRule from './Rules/Yield';\nimport YieldModifier from './Rules/YieldModifier';\n\nexport interface ICity extends IDataObject {\n  capture(player: Player): void;\n  destroy(player: Player | null): void;\n  destroyed(): boolean;\n  name(): string;\n  originalPlayer(): Player;\n  player(): Player;\n  tile(): Tile;\n  tiles(): Tileset;\n  tilesWorked(): Tileset;\n  yields(): Yield[];\n}\n\nexport class City extends DataObject implements ICity {\n  #destroyed: boolean = false;\n  #name: string;\n  #originalPlayer: Player;\n  #player: Player;\n  #ruleRegistry: RuleRegistry;\n  #tile: Tile;\n  #tiles: Tileset;\n  #tilesWorked: Tileset = new Tileset();\n\n  constructor(\n    player: Player,\n    tile: Tile,\n    name: string,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#name = name;\n    this.#originalPlayer = player;\n    this.#player = player;\n    this.#tile = tile;\n    // TODO: have this controlled via `Rule`s to match original (removing indices 0, 4, 20, 24)\n    this.#tiles = this.#tile.getSurroundingArea();\n    // TODO: need a `WorkedTilesRegistry` so that two cities (from any players) cannot work the same `Tile`.\n    this.#tilesWorked.push(tile);\n    this.#ruleRegistry = ruleRegistry;\n\n    this.#ruleRegistry.process(Created, this);\n\n    this.addKey(\n      'destroyed',\n      'name',\n      'originalPlayer',\n      'player',\n      'tile',\n      'tiles',\n      'tilesWorked',\n      'yields'\n    );\n  }\n\n  capture(capturingPlayer: Player): void {\n    // Should this method even exist? Thinking about just having a `setPlayer` method and having this `Rule`-controlled..\n    const player = this.#player;\n\n    this.#player = capturingPlayer;\n\n    this.#ruleRegistry.process(Captured, this, capturingPlayer, player);\n  }\n\n  destroy(player: Player | null = null): void {\n    this.#destroyed = true;\n\n    this.#ruleRegistry.process(Destroyed, this, player);\n  }\n\n  destroyed(): boolean {\n    return this.#destroyed;\n  }\n\n  name(): string {\n    return this.#name;\n  }\n\n  setName(name: string): void {\n    this.#name = name;\n  }\n\n  originalPlayer(): Player {\n    return this.#originalPlayer;\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  tile(): Tile {\n    return this.#tile;\n  }\n\n  tiles(): Tileset {\n    return this.#tiles;\n  }\n\n  tilesWorked(): Tileset {\n    return this.#tilesWorked;\n  }\n\n  yields(): Yield[] {\n    const yields: Yield[] = [];\n\n    [\n      this.#ruleRegistry.get(YieldRule),\n      this.#ruleRegistry.get(YieldModifier),\n      this.#ruleRegistry.get(Cost),\n    ]\n      .flat()\n      .forEach((rule) => {\n        if (!rule.validate(this, yields)) {\n          return;\n        }\n\n        const cityYields = rule.process(this, yields);\n\n        if (!cityYields) {\n          return;\n        }\n\n        if (cityYields instanceof Yield) {\n          yields.push(cityYields);\n\n          return;\n        }\n\n        cityYields.forEach((cityYield: Yield) => yields.push(cityYield));\n      });\n\n    return yields;\n  }\n}\n\nexport default City;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport City from './City';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport interface ICityRegistry extends IEntityRegistry<City> {\n  getByPlayer(player: Player, includeDestroyed?: boolean): City[];\n  getByTile(tile: Tile): City | null;\n}\n\nexport class CityRegistry\n  extends EntityRegistry<City>\n  implements ICityRegistry\n{\n  constructor() {\n    super(City);\n  }\n\n  getByPlayer(player: Player, includeDestroyed: boolean = false): City[] {\n    if (includeDestroyed) {\n      return this.getBy('player', player);\n    }\n\n    return this.filter(\n      (city: City): boolean => city.player() === player && !city.destroyed()\n    );\n  }\n\n  getByTile(tile: Tile): City | null {\n    const [city] = this.filter(\n      (city: City): boolean => city.tile() === tile && !city.destroyed()\n    );\n\n    return city ?? null;\n  }\n}\n\nexport const instance: CityRegistry = new CityRegistry();\n\nexport default CityRegistry;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Action from '@civ-clone/core-goody-hut/Action';\nimport PlayerCity from '@civ-clone/core-city/City';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class City extends Action {\n  #cityRegistry: CityRegistry;\n\n  constructor(\n    goodyHut: GoodyHut,\n    unit: Unit,\n    cityRegistry: CityRegistry = cityRegistryInstance\n  ) {\n    super(goodyHut, unit);\n\n    this.#cityRegistry = cityRegistry;\n  }\n\n  perform(ruleRegistry: RuleRegistry = ruleRegistryInstance) {\n    const player = this.unit().player(),\n      city = new PlayerCity(\n        player,\n        this.goodyHut().tile(),\n        player.civilization().getCityName(true),\n        ruleRegistry\n      );\n\n    this.#cityRegistry.register(city);\n  }\n}\n\nexport default City;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport { IBuildable } from './Buildable';\n\nexport class AvailableCityBuildItemsRegistry\n  extends EntityRegistry<IBuildable>\n  implements IEntityRegistry<IBuildable>\n{\n  constructor() {\n    // All `Buildable`s are `Function`s so this is sufficient although less than ideal\n    // @ts-ignore\n    super(Function);\n  }\n\n  accepts(entity: IBuildable): boolean {\n    return 'build' in entity;\n  }\n}\n\nexport const instance: AvailableCityBuildItemsRegistry =\n  new AvailableCityBuildItemsRegistry();\n\nexport default AvailableCityBuildItemsRegistry;\n", "import { Criterion, ICriterion } from '@civ-clone/core-rule/Criterion';\nimport City from '@civ-clone/core-city/City';\nimport { IBuildable as Buildable } from '../Buildable';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport interface IBuildCriterion extends ICriterion {\n  validate(): boolean;\n}\n\nexport class Build extends Rule<[City, Buildable], IBuildCriterion> {\n  process(city: City, BuildItem: Buildable): IBuildCriterion {\n    const criterion = super.process(city, BuildItem);\n\n    if (!(criterion instanceof Criterion)) {\n      throw new TypeError('Invalid build rule.');\n    }\n\n    return criterion;\n  }\n}\n\nexport default Build;\n", "import DataObject from '@civ-clone/core-data-object/DataObject';\n\n// TODO: `BuildCost` could be something other than `Production` (e.g. `Faith`) but omit that need for now.\nexport class BuildCost extends DataObject {\n  #value: number;\n\n  constructor(value: number) {\n    super();\n\n    this.addKey('value');\n\n    this.#value = value;\n  }\n\n  value(): number {\n    return this.#value;\n  }\n}\n\nexport default BuildCost;\n", "import BuildCostItem from '../BuildCost';\nimport BuildItem from '../BuildItem';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { IBuildable as Buildable } from '../Buildable';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class BuildCost extends Rule<[BuildItem, City | null], BuildCostItem> {}\n\nexport default BuildCost;\n\nexport const buildCost = (Item: Buildable, cost: number): BuildCost[] =>\n  buildCosts([[Item, cost]]);\n\nexport const buildCosts = (itemCosts: [Buildable, number][]): BuildCost[] =>\n  itemCosts.map(\n    ([Item, cost]) =>\n      new BuildCost(\n        new Criterion(\n          (buildItem: BuildItem): boolean => buildItem.item() === Item\n        ),\n        new Effect((): BuildCostItem => new BuildCostItem(cost))\n      )\n  );\n", "import {\n  instance as ruleRegistryInstance,\n  RuleRegistry,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport BuildCost from './BuildCost';\nimport BuildCostRule from './Rules/BuildCost';\nimport City from '@civ-clone/core-city/City';\nimport DataObject from '@civ-clone/core-data-object/DataObject';\nimport { IBuildable as Buildable } from './Buildable';\n\nexport class BuildItem extends DataObject {\n  #city: City | null;\n  #cost: BuildCost = new BuildCost(Infinity);\n  #item: Buildable;\n  #ruleRegistry: RuleRegistry;\n\n  constructor(\n    item: Buildable,\n    city: City | null = null,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#item = item;\n    this.#city = city;\n    this.#ruleRegistry = ruleRegistry;\n\n    this.addKey('cost', 'item');\n  }\n\n  cost(): BuildCost {\n    if (!Number.isFinite(this.#cost.value())) {\n      const [cost] = this.#ruleRegistry.process(\n        BuildCostRule,\n        this,\n        this.#city\n      );\n\n      if (cost) {\n        this.#cost = cost;\n      }\n    }\n\n    return this.#cost;\n  }\n\n  item(): Buildable {\n    return this.#item;\n  }\n}\n\nexport default BuildItem;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class BuildProgress extends Yield {}\n\nexport default BuildProgress;\n", "export { BuildProgress } from './Yields/BuildProgress';\n", "import { CityBuild } from '../CityBuild';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class BuildingCancelled extends Rule<[CityBuild], void> {}\n\nexport default BuildingCancelled;\n", "import { BuildableInstance } from '../Buildable';\nimport CityBuild from '../CityBuild';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class BuildingComplete extends Rule<\n  [CityBuild, BuildableInstance],\n  void\n> {}\n\nexport default BuildingComplete;\n", "import {\n  AvailableCityBuildItemsRegistry,\n  instance as availableCityBuildItemsRegistryInstance,\n} from './AvailableCityBuildItemsRegistry';\nimport {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Build from './Rules/Build';\nimport BuildItem from './BuildItem';\nimport { BuildProgress } from './Yields';\nimport { IBuildable as Buildable } from './Buildable';\nimport BuildingCancelled from './Rules/BulidingCancelled';\nimport BuildingComplete from './Rules/BulidingComplete';\nimport City from '@civ-clone/core-city/City';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport interface ICityBuild extends IDataObject {\n  add(production: Yield): void;\n  available(): BuildItem[];\n  build(ItemToBuild: Buildable): void;\n  building(): BuildItem | null;\n  check(): void;\n  cost(): BuildProgress;\n  getAvailable(Item: Buildable): BuildItem;\n  progress(): BuildProgress;\n  remaining(): number;\n  revalidate(): void;\n}\n\nexport class CityBuild extends DataObject implements ICityBuild {\n  #availableCityBuildItemsRegistry: AvailableCityBuildItemsRegistry;\n  #building: BuildItem | null = null;\n  #city: City;\n  #cost: BuildProgress = new BuildProgress(Infinity);\n  #progress: BuildProgress = new BuildProgress();\n  #ruleRegistry: RuleRegistry;\n\n  constructor(\n    city: City,\n    availableCityBuildItemsRegistry: AvailableCityBuildItemsRegistry = availableCityBuildItemsRegistryInstance,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#availableCityBuildItemsRegistry = availableCityBuildItemsRegistry;\n    this.#city = city;\n    this.#ruleRegistry = ruleRegistry;\n\n    this.addKey(\n      'available',\n      'building',\n      'city',\n      'cost',\n      'progress',\n      'remaining'\n    );\n  }\n\n  add(production: Yield): void {\n    this.#progress.add(production);\n  }\n\n  available(): BuildItem[] {\n    const buildRules = this.#ruleRegistry.get(Build);\n\n    // TODO: this still feels awkward... It's either this, or every rule has to be 'either it isn't this thing we're\n    //  checking or it is and it meets the condition' or it's this. It'd be nice to be able to just filter the list in a\n    //  more straightforward way...\n    return (\n      this.#availableCityBuildItemsRegistry.filter(\n        (BuildItem: Buildable): boolean =>\n          buildRules\n            .filter((rule: Build): boolean =>\n              rule.validate(this.city(), BuildItem)\n            )\n            .every((rule: Build): boolean =>\n              rule.process(this.city(), BuildItem).validate()\n            )\n      ) as Buildable[]\n    ).map(\n      (available) => new BuildItem(available, this.city(), this.#ruleRegistry)\n    );\n  }\n\n  build(ItemToBuild: Buildable): void {\n    const buildItem = this.getAvailable(ItemToBuild);\n\n    if (!buildItem) {\n      throw new TypeError(\n        `Cannot build ${ItemToBuild.name}, it's not available.`\n      );\n    }\n\n    this.#building = buildItem;\n\n    this.#cost.set(this.#building.cost().value());\n  }\n\n  building(): BuildItem | null {\n    return this.#building;\n  }\n\n  check(): IDataObject | null {\n    if (this.#progress.value() >= this.#cost.value() && this.#building) {\n      const built = this.#building.item().build(this.#city, this.#ruleRegistry);\n\n      this.#progress.set(0);\n      this.#building = null;\n      this.#cost.set(Infinity);\n\n      this.#ruleRegistry.process(BuildingComplete, this, built);\n\n      return built;\n    }\n\n    return null;\n  }\n\n  city(): City {\n    return this.#city;\n  }\n\n  cost(): BuildProgress {\n    return this.#cost;\n  }\n\n  getAvailable(Item: Buildable): BuildItem {\n    return this.available().filter(\n      (available: BuildItem): boolean => available.item() === Item\n    )[0];\n  }\n\n  progress(): BuildProgress {\n    return this.#progress;\n  }\n\n  remaining(): number {\n    return this.#cost.value() - this.#progress.value();\n  }\n\n  revalidate(): void {\n    if (this.#building && !this.getAvailable(this.#building.item())) {\n      this.#building = null;\n      this.#cost.set(Infinity);\n\n      this.#ruleRegistry.process(BuildingCancelled, this);\n    }\n  }\n}\n\nexport default CityBuild;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport City from '@civ-clone/core-city/City';\nimport CityBuild from './CityBuild';\n\nexport interface ICityBuildRegistry extends IEntityRegistry<CityBuild> {\n  getByCity(city: City): CityBuild;\n}\n\nexport class CityBuildRegistry\n  extends EntityRegistry<CityBuild>\n  implements ICityBuildRegistry\n{\n  constructor() {\n    super(CityBuild);\n  }\n\n  getByCity(city: City): CityBuild {\n    const cityBuilds = this.getBy('city', city);\n\n    if (cityBuilds.length !== 1) {\n      throw new TypeError('Wrong number of entities returned.');\n    }\n\n    return cityBuilds[0];\n  }\n}\n\nexport const instance: CityBuildRegistry = new CityBuildRegistry();\n\nexport default CityBuildRegistry;\n", "import CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport class Spend extends Rule<[CityBuild, Yield], Yield> {}\n\nexport default Spend;\n", "import {\n  CityBuildRegistry,\n  instance as cityBuildRegistryInstance,\n} from '@civ-clone/core-city-build/CityBuildRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Player from '@civ-clone/core-player/Player';\nimport Spend from './Rules/Spend';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport interface IPlayerTreasury {\n  buy(city: City): void;\n  cost(city: City): Yield;\n  player(): Player;\n}\n\nexport class PlayerTreasury extends Yield implements IPlayerTreasury {\n  #player: Player;\n  #ruleRegistry: RuleRegistry;\n  #cityBuildRegistry: CityBuildRegistry;\n\n  constructor(\n    player: Player,\n    cityBuildRegistry: CityBuildRegistry = cityBuildRegistryInstance,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#player = player;\n    this.#ruleRegistry = ruleRegistry;\n    this.#cityBuildRegistry = cityBuildRegistry;\n  }\n\n  buy(city: City): void {\n    const cityBuild = this.#cityBuildRegistry.getByCity(city),\n      cost = this.cost(city);\n\n    if (city.player() !== this.#player || this.value() < cost.value()) {\n      return;\n    }\n\n    // TODO: do this via Rules and then use Production\n    cityBuild.add(new Yield(cityBuild.remaining()));\n\n    this.subtract(cost.value());\n  }\n\n  cost(city: City): Yield {\n    const cityBuild = this.#cityBuildRegistry.getByCity(city),\n      cost = new Yield();\n\n    return this.#ruleRegistry\n      .process(Spend, cityBuild, cost)\n      .reduce((totalYield, currentYield) => {\n        totalYield.add(currentYield);\n\n        return totalYield;\n      });\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n}\n\nexport default PlayerTreasury;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerTreasury from './PlayerTreasury';\n\ninterface IPlayerTreasuryRegistry extends IEntityRegistry<PlayerTreasury> {\n  getByPlayer(player: Player): PlayerTreasury;\n}\n\nexport class PlayerTreasuryRegistry\n  extends EntityRegistry<PlayerTreasury>\n  implements IPlayerTreasuryRegistry\n{\n  constructor() {\n    super(PlayerTreasury);\n  }\n\n  getByPlayer(player: Player): PlayerTreasury {\n    const playerTreasuries = this.getBy('player', player);\n\n    if (playerTreasuries.length !== 1) {\n      throw new TypeError('Wrong number of PlayerTreasuries for player.');\n    }\n\n    return playerTreasuries[0];\n  }\n}\n\nexport const instance: PlayerTreasuryRegistry = new PlayerTreasuryRegistry();\n\nexport default PlayerTreasuryRegistry;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Gold extends Yield {}\n\nexport default Gold;\n", "import {\n  PlayerTreasuryRegistry,\n  instance as playerTreasuryRegistryInstance,\n} from '@civ-clone/core-treasury/PlayerTreasuryRegistry';\nimport Action from '@civ-clone/core-goody-hut/Action';\nimport { Gold as GoldYield } from '@civ-clone/base-city-yield-gold/Gold';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Gold extends Action {\n  #playerTreasuryRegistry: PlayerTreasuryRegistry;\n\n  constructor(\n    goodyHut: GoodyHut,\n    unit: Unit,\n    playerTreasuryRegistry: PlayerTreasuryRegistry = playerTreasuryRegistryInstance\n  ) {\n    super(goodyHut, unit);\n\n    this.#playerTreasuryRegistry = playerTreasuryRegistry;\n  }\n\n  perform(): void {\n    const playerTreasury = this.#playerTreasuryRegistry.getByPlayer(\n      this.unit().player()\n    );\n\n    playerTreasury.add(new GoldYield(50));\n  }\n}\n\nexport default Gold;\n", "import GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport PlayerUnit from '@civ-clone/core-unit/Unit';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Unit extends Rule<[GoodyHut, PlayerUnit], PlayerUnit> {}\n\nexport default Unit;\n", "import { Action, IAction } from '@civ-clone/core-goody-hut/Action';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport PlayerUnit from '@civ-clone/core-unit/Unit';\nimport UnitRule from './Rules/Unit';\n\nexport class Unit extends Action implements IAction {\n  #randomNumberGenerator: () => number;\n  #ruleRegistry: RuleRegistry;\n\n  constructor(\n    goodyHut: GoodyHut,\n    unit: PlayerUnit,\n    randomNumberGenerator: () => number = (): number => Math.random(),\n    rulesRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super(goodyHut, unit);\n\n    this.#randomNumberGenerator = randomNumberGenerator;\n    this.#ruleRegistry = rulesRegistry;\n  }\n\n  perform(): void {\n    this.#ruleRegistry.process(UnitRule, this.goodyHut(), this.unit());\n  }\n}\n\nexport default Unit;\n", "export { Advance } from '@civ-clone/base-goody-hut-advance/Advance';\nexport { City } from '@civ-clone/base-goody-hut-city/City';\nexport { Gold } from '@civ-clone/base-goody-hut-gold/Gold';\nexport { Unit } from '@civ-clone/base-goody-hut-unit/Unit';\n", "import CityBuildItem from '../CityBuild';\nimport PlayerAction from '@civ-clone/core-player/PlayerAction';\n\nexport class ChangeProduction extends PlayerAction<CityBuildItem> {}\n\nexport default ChangeProduction;\n", "import CityBuildItem from '../CityBuild';\nimport MandatoryPlayerAction from '@civ-clone/core-player/MandatoryPlayerAction';\n\nexport class CityBuild extends MandatoryPlayerAction<CityBuildItem> {}\n\nexport default CityBuild;\n", "export { ChangeProduction } from './PlayerActions/ChangeProduction';\nexport { CityBuild } from './PlayerActions/CityBuild';\n", "import Player from '@civ-clone/core-player/Player';\n\nexport interface IClient {\n  player(): Player;\n  takeTurn(): Promise<any>;\n}\n\nexport class Client implements IClient {\n  #player: Player;\n\n  constructor(player: Player) {\n    this.#player = player;\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  takeTurn(): Promise<any> {\n    return new Promise(\n      (\n        resolve: (value?: any | PromiseLike<any>) => void,\n        reject: (reason?: any) => void\n      ): void => reject(new TypeError('Client#takeTurn must be implemented.'))\n    );\n  }\n}\n\nexport default Client;\n", "import Yield from '@civ-clone/core-yield/Yield';\nimport Leader from './Leader';\n\nexport class Trait extends Yield {\n  #leader: typeof Leader;\n\n  constructor(LeaderType: typeof Leader, value: number) {\n    super(value);\n\n    this.#leader = LeaderType;\n  }\n\n  leader(): typeof Leader {\n    return this.#leader;\n  }\n}\n\nexport default Trait;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Leader from './Leader';\nimport Trait from './Trait';\n\nexport interface ITraitRegistry extends IEntityRegistry<Trait> {\n  getByLeader(LeaderType: typeof Leader): Trait[];\n  getBySubclass(TraitType: typeof Trait): Trait[];\n}\n\nexport class TraitRegistry\n  extends EntityRegistry<Trait>\n  implements ITraitRegistry\n{\n  constructor() {\n    super(Trait);\n  }\n\n  getByLeader(LeaderType: typeof Leader): Trait[] {\n    return this.getBy('leader', LeaderType);\n  }\n\n  getBySubclass(TraitType: typeof Trait): Trait[] {\n    return this.filter((trait): boolean => trait instanceof TraitType);\n  }\n}\n\nexport const instance: TraitRegistry = new TraitRegistry();\n\nexport default TraitRegistry;\n", "import Civilization from './Civilization';\nimport Trait from './Trait';\nimport {\n  TraitRegistry,\n  instance as traitRegistryInstance,\n} from './TraitRegistry';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\n\nexport interface ILeader extends IDataObject {\n  name(): string;\n  traits(): Trait[];\n}\n\nexport class Leader extends DataObject implements ILeader {\n  #traits: Trait[] = [];\n\n  constructor(traitRegistry: TraitRegistry = traitRegistryInstance) {\n    super();\n\n    const traits = traitRegistry.getByLeader(this.sourceClass<typeof Leader>());\n\n    this.#traits.push(...traits);\n\n    this.addKey('name');\n  }\n\n  static civilization(): typeof Civilization {\n    throw new TypeError('Must be implemented in extending class');\n  }\n\n  name(): string {\n    throw new TypeError('Must be implemented in extending class');\n  }\n\n  traits(): Trait[] {\n    return [...this.#traits];\n  }\n}\n\nexport default Leader;\n", "import { IConstructor } from '@civ-clone/core-registry/Registry';\nimport {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\nimport Civilization from './Civilization';\nimport Leader from './Leader';\n\n// TODO: don't use ts-ignore :(\n\nexport interface ILeaderRegistry extends IConstructorRegistry<Leader> {\n  getByCivilization(\n    LeaderCivilization: IConstructor<Civilization>\n  ): IConstructor<Leader>[];\n}\n\nexport class LeaderRegistry\n  extends ConstructorRegistry<Leader>\n  implements ILeaderRegistry\n{\n  constructor() {\n    super(Leader);\n  }\n\n  getByCivilization(\n    LeaderCivilization: IConstructor<Civilization>\n  ): IConstructor<Leader>[] {\n    // @ts-ignore\n    return this.getBy('civilization', LeaderCivilization);\n  }\n}\n\nexport const instance: LeaderRegistry = new LeaderRegistry();\n\nexport default LeaderRegistry;\n", "import PlayerAction from '@civ-clone/core-player/PlayerAction';\nimport PlayerTradeRates from '@civ-clone/core-trade-rate/PlayerTradeRates';\n\nexport class AdjustTradeRates extends PlayerAction<PlayerTradeRates> {}\n\nexport default AdjustTradeRates;\n", "export { AdjustTradeRates } from '@civ-clone/base-player-action-adjust-trade-rates/AdjustTradeRates';\n", "import Rule from '@civ-clone/core-rule/Rule';\n\nexport class Busy extends Rule<any[], void> {}\n\nexport default Busy;\n", "import MandatoryPlayerAction from '@civ-clone/core-player/MandatoryPlayerAction';\n\nexport class ChooseResearch extends MandatoryPlayerAction {}\n\nexport default ChooseResearch;\n", "import CityGrowth from '../CityGrowth';\nimport Rule from '@civ-clone/core-rule/Rule';\n\ntype CostArgs = [CityGrowth];\ntype CostEffectReturn = number;\n\nexport class Cost extends Rule<CostArgs, CostEffectReturn> {}\n\nexport default Cost;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class FoodStorage extends Yield {}\n\nexport default FoodStorage;\n", "import CityGrowth from '../CityGrowth';\nimport Rule from '@civ-clone/core-rule/Rule';\n\ntype FoodStorageArgs = [CityGrowth];\n\nexport class FoodStorage extends Rule<FoodStorageArgs, void> {}\n\nexport default FoodStorage;\n", "import CityGrowth from '../CityGrowth';\nimport Rule from '@civ-clone/core-rule/Rule';\n\ntype GrowArgs = [CityGrowth];\n\nexport class Grow extends Rule<GrowArgs, void> {}\n\nexport default Grow;\n", "import CityGrowth from '../CityGrowth';\nimport Rule from '@civ-clone/core-rule/Rule';\n\ntype ShrinkArgs = [CityGrowth];\n\nexport class Shrink extends Rule<ShrinkArgs, void> {}\n\nexport default Shrink;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Cost from './Rules/Cost';\nimport FoodStorage from './Yields/FoodStorage';\nimport FoodStorageRule from './Rules/FoodStorage';\nimport Grow from './Rules/Grow';\nimport Shrink from './Rules/Shrink';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport interface ICityGrowth extends IDataObject {\n  add(food: Yield): void;\n  check(): void;\n  city(): City;\n  cost(): FoodStorage;\n  empty(): void;\n  grow(): void;\n  progress(): FoodStorage;\n  shrink(): void;\n  size(): number;\n}\n\nexport class CityGrowth extends DataObject implements ICityGrowth {\n  #city: City;\n  #cost: FoodStorage = new FoodStorage(Infinity);\n  #progress: FoodStorage = new FoodStorage();\n  #ruleRegistry: RuleRegistry;\n  #size: number = 1;\n\n  constructor(city: City, ruleRegistry: RuleRegistry = ruleRegistryInstance) {\n    super();\n\n    this.#city = city;\n    this.#ruleRegistry = ruleRegistry;\n    this.setCost();\n\n    this.addKey('cost', 'progress', 'size');\n  }\n\n  add(food: Yield): void {\n    this.#progress.add(food);\n  }\n\n  check(): void {\n    this.#ruleRegistry.process(FoodStorageRule, this);\n  }\n\n  city(): City {\n    return this.#city;\n  }\n\n  cost(): FoodStorage {\n    return this.#cost;\n  }\n\n  setCost(): void {\n    const costs = this.#ruleRegistry.process(Cost, this);\n\n    if (costs.length > 0) {\n      this.#cost.set(costs[0], 'setCost');\n    }\n  }\n\n  empty(): void {\n    this.#progress.subtract(this.#progress.value());\n  }\n\n  grow(): void {\n    this.#size++;\n\n    this.#ruleRegistry.process(Grow, this);\n  }\n\n  progress(): FoodStorage {\n    return this.#progress;\n  }\n\n  shrink(): void {\n    this.#size--;\n\n    this.#ruleRegistry.process(Shrink, this);\n  }\n\n  size(): number {\n    return this.#size;\n  }\n}\n\nexport default CityGrowth;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\n\nexport interface BuildableInstance extends IDataObject {}\n\nexport interface IBuildable extends IConstructor<BuildableInstance> {\n  build(city: City, ruleRegistry?: RuleRegistry): BuildableInstance;\n}\n\nexport class Buildable extends DataObject {\n  public static build(\n    city: City,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ): BuildableInstance {\n    throw new TypeError(\n      'createFromObject: Must be overridden in extending class'\n    );\n  }\n}\n\nexport default Buildable;\n", "import City from '@civ-clone/core-city/City';\nimport CityImprovement from '../CityImprovement';\nimport { IRuleRegistry } from '@civ-clone/core-rule/RuleRegistry';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Created extends Rule<[CityImprovement, City], void> {}\n\nexport default Created;\n\nexport interface ICreatedRegistry\n  extends IRuleRegistry<Created, [CityImprovement, City], void> {}\n", "import {\n  Buildable,\n  BuildableInstance,\n  IBuildable,\n} from '@civ-clone/core-city-build/Buildable';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Player from '@civ-clone/core-player/Player';\nimport Created, { ICreatedRegistry } from './Rules/Created';\nimport { IDataObject } from '@civ-clone/core-data-object/DataObject';\n\nexport interface ICityImprovement extends IDataObject {\n  city(): City;\n  destroy(): void;\n}\n\nexport class CityImprovement extends Buildable implements ICityImprovement {\n  #city: City;\n  #destroyed: boolean = false;\n  #ruleRegistry: ICreatedRegistry;\n\n  constructor(city: City, ruleRegistry: RuleRegistry = ruleRegistryInstance) {\n    super();\n\n    this.addKey('destroyed');\n\n    this.#city = city;\n    this.#ruleRegistry = ruleRegistry;\n\n    this.#ruleRegistry.process(Created, this, city);\n  }\n\n  public static build(\n    city: City,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ): BuildableInstance {\n    return new this(city, ruleRegistry) as BuildableInstance;\n  }\n\n  city(): City {\n    return this.#city;\n  }\n\n  destroy(): void {\n    this.#destroyed = true;\n  }\n\n  destroyed() {\n    return this.#destroyed;\n  }\n}\n\nexport default CityImprovement;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport Civilization from './Civilization';\n\nexport interface IAttribute extends IDataObject {\n  civilization(): typeof Civilization;\n  name(): string;\n  value(): any;\n}\n\nexport class Attribute extends DataObject implements IAttribute {\n  #civilization: typeof Civilization;\n  #name: string;\n  #value: any;\n\n  constructor(CivilizationType: typeof Civilization, name: string, value: any) {\n    super();\n\n    this.#civilization = CivilizationType;\n    this.#name = name;\n    this.#value = value;\n\n    this.addKey('name', 'value');\n  }\n\n  civilization(): typeof Civilization {\n    return this.#civilization;\n  }\n\n  name(): string {\n    return this.#name;\n  }\n\n  value(): any {\n    return this.#value;\n  }\n}\n\nexport default Attribute;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Attribute from './Attribute';\nimport Civilization from './Civilization';\n\nexport interface IAttributeRegistry extends IEntityRegistry<Attribute> {\n  getByCivilization(CivilizationType: typeof Civilization): Attribute[];\n  getByName(name: string): Attribute[];\n}\n\nexport class AttributeRegistry\n  extends EntityRegistry<Attribute>\n  implements IAttributeRegistry\n{\n  constructor() {\n    super(Attribute);\n  }\n\n  getByCivilization(CivilizationType: typeof Civilization): Attribute[] {\n    return this.getBy('civilization', CivilizationType);\n  }\n\n  getByName(name: string): Attribute[] {\n    return this.getBy('name', name);\n  }\n}\n\nexport const instance: AttributeRegistry = new AttributeRegistry();\n\nexport default AttributeRegistry;\n", "import Civilization from './Civilization';\n\nexport interface ICityName {\n  name(): string;\n  civilization(): typeof Civilization | null;\n}\n\nexport class CityName implements ICityName {\n  #name: string;\n  #civilization: typeof Civilization | null;\n  #capital: boolean = false;\n\n  constructor(\n    name: string,\n    CivilizationType: typeof Civilization | null,\n    capital: boolean = false\n  ) {\n    this.#name = name;\n    this.#civilization = CivilizationType;\n    this.#capital = capital;\n  }\n\n  name(): string {\n    return this.#name;\n  }\n\n  civilization(): typeof Civilization | null {\n    return this.#civilization;\n  }\n\n  capital(): boolean {\n    return this.#capital;\n  }\n}\n\nexport default CityName;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport CityName from './CityName';\nimport Civilization from './Civilization';\n\nexport interface ICityNameRegistry extends IEntityRegistry<CityName> {\n  takeByCivilization(CivilizationType: typeof Civilization): string;\n  takeCapitalByCivilization(CivilizationType: typeof Civilization): string;\n}\n\nexport class CityNameRegistry\n  extends EntityRegistry<CityName>\n  implements ICityNameRegistry\n{\n  #counter: number = 1;\n  #randomNumberGenerator: () => number;\n\n  constructor(\n    randomNumberGenerator: () => number = (): number => Math.random()\n  ) {\n    super(CityName);\n\n    this.#randomNumberGenerator = randomNumberGenerator;\n  }\n\n  takeByCivilization(CivilizationType: typeof Civilization): string {\n    const [cityName] = this.getBy('civilization', CivilizationType).sort(\n      (): number => Math.floor(this.#randomNumberGenerator() * 3) - 1\n    );\n\n    if (cityName instanceof CityName) {\n      this.unregister(cityName);\n\n      return cityName.name();\n    }\n\n    return this.takeUnassociated();\n  }\n\n  takeCapitalByCivilization(CivilizationType: typeof Civilization): string {\n    const [capitalName] = this.getBy('civilization', CivilizationType)\n      .sort((): number => Math.floor(this.#randomNumberGenerator() * 3) - 1)\n      .filter((cityName: CityName): boolean => cityName.capital());\n\n    if (capitalName instanceof CityName) {\n      this.unregister(capitalName);\n\n      return capitalName.name();\n    }\n\n    return this.takeByCivilization(CivilizationType);\n  }\n\n  private takeUnassociated(): string {\n    const [cityName] = this.getBy('civilization', null).sort(\n      (): number => Math.floor(this.#randomNumberGenerator() * 3) - 1\n    );\n\n    if (cityName instanceof CityName) {\n      this.unregister(cityName);\n\n      return cityName.name();\n    }\n\n    return `City #${this.#counter++}`;\n  }\n}\n\nexport const instance: CityNameRegistry = new CityNameRegistry();\n\nexport default CityNameRegistry;\n", "import {\n  AttributeRegistry,\n  instance as attributeRegistryInstance,\n} from './AttributeRegistry';\nimport {\n  CityNameRegistry,\n  instance as cityNameRegistryInstance,\n} from './CityNameRegistry';\nimport {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport Attribute from './Attribute';\nimport Leader from './Leader';\n\nexport interface ICivilization extends IDataObject {\n  attributes(): any[];\n  name(): string;\n  leader(): Leader | null;\n  setLeader(leader: Leader): void;\n  getCityName(capital: boolean): string;\n}\n\nexport class Civilization extends DataObject implements ICivilization {\n  #leader: Leader | null = null;\n  #cityNamesRegistry: CityNameRegistry;\n  #attributes = new AttributeRegistry();\n\n  constructor(\n    attributeRegistry: AttributeRegistry = attributeRegistryInstance,\n    cityNamesRegistry: CityNameRegistry = cityNameRegistryInstance\n  ) {\n    super();\n\n    this.#cityNamesRegistry = cityNamesRegistry;\n\n    this.#attributes.register(\n      ...attributeRegistry.getByCivilization(this.sourceClass())\n    );\n\n    this.addKey('name', 'leader', 'attributes');\n  }\n\n  attributes(): Attribute[] {\n    return this.#attributes.entries();\n  }\n\n  name(): string {\n    return this.constructor.name;\n  }\n\n  leader(): Leader | null {\n    return this.#leader;\n  }\n\n  setLeader(leader: Leader): void {\n    this.#leader = leader;\n  }\n\n  getCityName(capital: boolean = false): string {\n    const CivilizationType = this.sourceClass<typeof Civilization>();\n\n    return capital\n      ? this.#cityNamesRegistry.takeCapitalByCivilization(CivilizationType)\n      : this.#cityNamesRegistry.takeByCivilization(CivilizationType);\n  }\n}\n\nexport default Civilization;\n", "import City from '@civ-clone/core-city/City';\nimport PlayerAction, {\n  IPlayerAction,\n} from '@civ-clone/core-player/PlayerAction';\n\nexport interface ICompleteProduction extends IPlayerAction {\n  value(): City;\n}\n\nexport class CompleteProduction\n  extends PlayerAction\n  implements ICompleteProduction\n{\n  value(): City {\n    return super.value();\n  }\n}\n\nexport default CompleteProduction;\n", "export { CompleteProduction } from './PlayerActions/CompleteProduction';\n", "import MandatoryPlayerAction from '@civ-clone/core-player/MandatoryPlayerAction';\n\nexport class EndTurn extends MandatoryPlayerAction {}\n\nexport default EndTurn;\n", "export type EventMap = {\n  [key: string]: any[];\n};\n\ntype Handler<A extends any[]> = (...args: A) => void;\n\ntype HandlerStack<E extends EventMap> = {\n  [K in keyof E]?: Handler<E[K]>[];\n};\n\nexport interface ITypedEventEmitter<\n  T extends EventMap,\n  E extends EventMap = T & EventMap\n> {\n  on<K extends keyof E>(event: K, handler: Handler<E[K]>): void;\n  once<K extends keyof E>(event: K, handler: Handler<E[K]>): void;\n  off<K extends keyof E>(event: K, handler: Handler<E[K]>): void;\n  emit<K extends keyof E>(event: K, ...args: E[K]): void;\n}\n\nexport class EventEmitter<\n  T extends EventMap = EventMap,\n  E extends EventMap = T & EventMap\n> implements ITypedEventEmitter<E>\n{\n  #handlers: HandlerStack<E> = {};\n\n  public on<K extends keyof E>(event: K, handler: Handler<E[K]>): void {\n    if (!(event in this.#handlers)) {\n      this.#handlers[event] = [];\n    }\n\n    this.#handlers[event]!.push(handler);\n  }\n\n  public once<K extends keyof E>(event: K, handler: Handler<E[K]>): void {\n    const onceHandler: Handler<E[K]> = (...args) => {\n      handler(...args);\n\n      this.off(event, onceHandler);\n    };\n\n    this.on(event, onceHandler);\n  }\n\n  public off<K extends keyof E>(event: K, handler: Handler<E[K]>): void {\n    if (!(event in this.#handlers)) {\n      return;\n    }\n\n    const index = this.#handlers[event]!.indexOf(handler);\n\n    if (index === -1) {\n      return;\n    }\n\n    this.#handlers[event]!.splice(index, 1);\n  }\n\n  public emit<K extends keyof E>(event: K, ...args: E[K]): void {\n    if (!(event in this.#handlers)) {\n      return;\n    }\n\n    this.#handlers[event]!.forEach((handler) => handler(...args));\n  }\n}\n\nexport default EventEmitter;\n", "import PlayerAction from '@civ-clone/core-player/PlayerAction';\nimport Spaceship from '@civ-clone/core-spaceship/Spaceship';\n\nexport class LaunchSpaceship extends PlayerAction<Spaceship> {}\n\nexport default LaunchSpaceship;\n", "import Player from '../Player';\nimport PlayerAction from '../PlayerAction';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Action extends Rule<[Player], PlayerAction[]> {}\n\nexport default Action;\n", "import Player from '../Player';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Added extends Rule<[Player], void> {}\n\nexport default Added;\n", "import PlayerAction from './PlayerAction';\n\nexport class HiddenPlayerAction<T = any> extends PlayerAction<T> {}\n\nexport default HiddenPlayerAction;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Action from './Rules/Action';\nimport Added from './Rules/Added';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport HiddenPlayerAction from './HiddenPlayerAction';\nimport MandatoryPlayerAction from './MandatoryPlayerAction';\nimport PlayerAction from './PlayerAction';\n\ninterface IPlayer extends IDataObject {\n  action(): PlayerAction;\n  actions(): PlayerAction[];\n  civilization(): Civilization;\n  hasActions(): boolean;\n  hasMandatoryActions(): boolean;\n  hiddenActions(): HiddenPlayerAction[];\n  mandatoryAction(): MandatoryPlayerAction;\n  mandatoryActions(): MandatoryPlayerAction[];\n  setCivilization(civilization: Civilization): void;\n}\n\nexport class Player extends DataObject implements IPlayer {\n  #civilization: Civilization | null = null;\n  #ruleRegistry: RuleRegistry;\n\n  constructor(ruleRegistry: RuleRegistry = ruleRegistryInstance) {\n    super();\n\n    this.#ruleRegistry = ruleRegistry;\n\n    this.#ruleRegistry.process(Added, this);\n\n    this.addKey('actions', 'civilization', 'mandatoryActions');\n  }\n\n  action(): PlayerAction {\n    const [action] = this.actions();\n\n    return action;\n  }\n\n  actions(): PlayerAction[] {\n    return this.#ruleRegistry\n      .process(Action, this)\n      .flat()\n      .filter(\n        (action: PlayerAction): boolean =>\n          !(action instanceof HiddenPlayerAction)\n      );\n  }\n\n  civilization(): Civilization {\n    if (this.#civilization === null) {\n      throw new TypeError('Player#civilization is unset.');\n    }\n\n    return this.#civilization;\n  }\n\n  hasActions(): boolean {\n    return !!this.action();\n  }\n\n  hasMandatoryActions(): boolean {\n    return this.actions().some(\n      (action: PlayerAction): boolean => action instanceof MandatoryPlayerAction\n    );\n  }\n\n  hiddenActions(): HiddenPlayerAction[] {\n    return this.#ruleRegistry\n      .process(Action, this)\n      .flat()\n      .filter(\n        (action: PlayerAction): boolean => action instanceof HiddenPlayerAction\n      );\n  }\n\n  mandatoryAction(): MandatoryPlayerAction {\n    const [action] = this.mandatoryActions();\n\n    return action;\n  }\n\n  mandatoryActions(): MandatoryPlayerAction[] {\n    return this.actions().filter(\n      (action: PlayerAction): boolean => action instanceof MandatoryPlayerAction\n    );\n  }\n\n  setCivilization(civilization: Civilization): void {\n    this.#civilization = civilization;\n  }\n}\n\nexport default Player;\n", "import {\n  AdditionalDataRegistry,\n  instance as additionalDataRegistryInstance,\n} from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport {\n  DataObject,\n  IDataObject,\n  PlainObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Player from '@civ-clone/core-player/Player';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport interface IPlayerTile extends IDataObject {\n  isCoast(): boolean;\n  isLand(): boolean;\n  isWater(): boolean;\n  terrain(): Terrain;\n  tile(): Tile;\n  update(): void;\n  x(): number;\n  y(): number;\n  yields(): Yield[];\n}\n\nexport class PlayerTile extends DataObject implements IPlayerTile {\n  #additionalData: PlainObject = {};\n  #additionalDataRegistry: AdditionalDataRegistry;\n  #player: Player;\n  #tile: Tile;\n\n  constructor(\n    tile: Tile,\n    player: Player,\n    additionalDataRegistry: AdditionalDataRegistry = additionalDataRegistryInstance\n  ) {\n    super();\n\n    this.#additionalDataRegistry = additionalDataRegistry;\n    this.#player = player;\n    this.#tile = tile;\n\n    this.addKey('isCoast', 'isLand', 'isWater', 'terrain', 'x', 'y', 'yields');\n\n    this.setAdditionalData();\n  }\n\n  addKey(...keys: (string | number | Symbol)[]) {\n    super.addKey(...(keys as (keyof this)[]));\n  }\n\n  isCoast(): boolean {\n    return this.#tile.isCoast();\n  }\n\n  isLand(): boolean {\n    return this.#tile.isLand();\n  }\n\n  isWater(): boolean {\n    return this.#tile.isWater();\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  private setAdditionalData(): void {\n    this.#additionalDataRegistry\n      .getByType(Tile)\n      .forEach((additionalData: AdditionalData): void => {\n        this.#additionalData[additionalData.key()] = additionalData.data(\n          this.#tile\n        );\n\n        Object.defineProperty(this, additionalData.key(), {\n          configurable: true,\n          value: () => additionalData.data(this.#tile),\n        });\n\n        this.addKey(additionalData.key());\n      });\n  }\n\n  terrain(): Terrain {\n    return this.#tile.terrain();\n  }\n\n  tile(): Tile {\n    return this.#tile;\n  }\n\n  update(): void {\n    this.#tile.clearYieldCache(this.#player);\n\n    this.setAdditionalData();\n  }\n\n  x(): number {\n    return this.#tile.x();\n  }\n\n  y(): number {\n    return this.#tile.y();\n  }\n\n  yields(): Yield[] {\n    return this.#tile.yields(this.#player);\n  }\n}\n\nexport default PlayerTile;\n", "import Terrain from '@civ-clone/core-terrain/Terrain';\n\nexport class Unknown extends Terrain {}\n\nexport default Unknown;\n", "import Tile from '@civ-clone/core-world/Tile';\nimport World from '@civ-clone/core-world/World';\nimport Unknown from './Terrains/Unknown';\n\nexport class UndiscoveredTile extends Tile {\n  constructor(x: number, y: number, map: World) {\n    super(x, y, new Unknown(), map);\n  }\n}\n\nexport default UndiscoveredTile;\n", "import Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport class VisibilityChanged extends Rule<[Tile, Player], void> {}\n\nexport default VisibilityChanged;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport { IRegistryIterator } from '@civ-clone/core-registry/Registry';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerTile from './PlayerTile';\nimport Tile from '@civ-clone/core-world/Tile';\nimport UndiscoveredTile from './UndiscoveredTile';\nimport VisibilityChanged from './Rules/Player/VisibilityChanged';\nimport World from '@civ-clone/core-world/World';\n\nexport interface IPlayerWorld extends IDataObject {\n  filter(iterator: IRegistryIterator<PlayerTile>): PlayerTile[];\n  forEach(iterator: (item: PlayerTile, i: number) => void): void;\n  get(x: number, y: number): PlayerTile | UndiscoveredTile;\n  getByTile(tile: Tile): PlayerTile | null;\n  height(): number;\n  map(iterator: (item: PlayerTile, i: number) => any): any[];\n  player(): Player;\n  register(...tiles: Tile[]): void;\n  tiles(): PlayerTile[];\n  width(): number;\n}\n\nexport class PlayerWorld extends DataObject implements IPlayerWorld {\n  #player: Player;\n  #ruleRegistry: RuleRegistry;\n  #tiles: PlayerTile[] = [];\n  #world: World;\n\n  constructor(\n    player: Player,\n    world: World,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#player = player;\n    this.#world = world;\n    this.#ruleRegistry = ruleRegistry;\n\n    this.addKey('height', 'tiles', 'width');\n  }\n\n  entries(): PlayerTile[] {\n    return this.#tiles;\n  }\n\n  filter(iterator: IRegistryIterator<PlayerTile>): PlayerTile[] {\n    return this.entries().filter(iterator);\n  }\n\n  forEach(iterator: (item: PlayerTile, i: number) => void): void {\n    return this.#tiles.forEach(iterator);\n  }\n\n  get(x: number, y: number): PlayerTile | UndiscoveredTile {\n    const [tile] = this.entries().filter(\n      (tile: PlayerTile): boolean => tile.x() === x && tile.y() === y\n    );\n\n    if (tile) {\n      return tile;\n    }\n\n    return new UndiscoveredTile(x, y, this.#world);\n  }\n\n  getByTile(tile: Tile): PlayerTile | null {\n    const [found] = this.filter(\n      (playerTile: PlayerTile) => playerTile.tile() === tile\n    );\n\n    return found ?? null;\n  }\n\n  height(): number {\n    return this.#world.height();\n  }\n\n  includes(tile: Tile | PlayerTile): boolean {\n    if (tile instanceof Tile) {\n      return !!this.getByTile(tile);\n    }\n\n    return this.#tiles.includes(tile);\n  }\n\n  map(iterator: (item: PlayerTile, i: number) => any): any[] {\n    return this.#tiles.map(iterator);\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  register(...tiles: Tile[]): void {\n    tiles.forEach((tile: Tile) => {\n      if (!this.includes(tile)) {\n        this.#tiles.push(new PlayerTile(tile, this.#player));\n\n        this.#ruleRegistry.process(VisibilityChanged, tile, this.player());\n      }\n    });\n  }\n\n  tiles(): PlayerTile[] {\n    return this.entries();\n  }\n\n  width(): number {\n    return this.#world.width();\n  }\n}\n\nexport default PlayerWorld;\n", "import PlayerAction from '@civ-clone/core-player/PlayerAction';\nimport PlayerGovernment from '@civ-clone/core-government/PlayerGovernment';\n\nexport class Revolution extends PlayerAction<PlayerGovernment> {}\n\nexport default Revolution;\n", "export { Revolution } from '@civ-clone/base-player-action-revolution/Revolution';\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Attack extends Yield {}\n\nexport default Attack;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Defence extends Yield {}\n\nexport default Defence;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Movement extends Yield {}\n\nexport default Movement;\n", "import Movement from './Movement';\n\nexport class Moves extends Movement {}\n\nexport default Moves;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Visibility extends Yield {}\n\nexport default Visibility;\n", "export { Attack } from './Yields/Attack';\nexport { Defence } from './Yields/Defence';\nexport { Movement } from './Yields/Movement';\nexport { Moves } from './Yields/Moves';\nexport { Visibility } from './Yields/Visibility';\n", "import Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Priority from '@civ-clone/core-rule/Priority';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '../Unit';\nimport UnitAction from '../Action';\n\nexport class Action extends Rule<[Unit, Tile, Tile], UnitAction> {}\n\nexport default Action;\n\nexport const hasMovesLeft = new Criterion(\n  (unit: Unit): boolean => unit.moves().value() >= 0.1\n);\n\nexport const isCurrentTile: Criterion = new Criterion(\n  (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean => from === to\n);\n\nexport const isNeighbouringTile: Criterion = new Criterion(\n  (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n    to.isNeighbourOf(from)\n);\n\nexport const unitAction: (\n  ActionType: typeof UnitAction,\n  unitTypes: typeof Unit[],\n  ...additionalProperties: (Criterion | Priority)[]\n) => Action[] = (\n  ActionType: typeof UnitAction,\n  unitTypes: typeof Unit[],\n  ...additionalPriorities: (Criterion | Priority)[]\n): Action[] => [\n  new Action(\n    new Criterion((unit: Unit): boolean =>\n      unitTypes.some(\n        (UnitType: typeof Unit): boolean => unit instanceof UnitType\n      )\n    ),\n    ...additionalPriorities,\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile): UnitAction =>\n        new ActionType(from, to, unit)\n    )\n  ),\n];\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '../Unit';\n\nexport class Activate extends Rule<[Unit], void> {}\n\nexport default Activate;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '../Unit';\n\nexport class Created extends Rule<[Unit], void> {}\n\nexport default Created;\n", "import Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '../Unit';\n\nexport class Destroyed extends Rule<[Unit, Player | null], void> {}\n\nexport default Destroyed;\n", "import Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport class Visibility extends Rule<[Tile, Player], void> {}\n\nexport default Visibility;\n", "import { Attack, Defence, Movement, Visibility } from '../Yields';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '../Unit';\nimport YieldValue from '@civ-clone/core-yield/Yield';\n\ntype BaseYieldArgs = [typeof Unit, YieldValue];\n\nexport class BaseYield extends Rule<BaseYieldArgs, void> {}\n\ntype YieldArgs = [Unit, YieldValue];\n\nexport class Yield extends Rule<YieldArgs, void> {}\n\nexport default Yield;\n\nexport const unitYield: (\n  UnitType: typeof Unit,\n  attack?: number,\n  defence?: number,\n  movement?: number,\n  visibility?: number\n) => (Yield | BaseYield)[] = (\n  UnitType: typeof Unit,\n  attack: number = 1,\n  defence: number = 1,\n  movement: number = 1,\n  visibility: number = 1\n): (Yield | BaseYield)[] => [\n  ...(\n    [\n      [Attack, attack],\n      [Defence, defence],\n      [Movement, movement],\n      [Visibility, visibility],\n    ] as [typeof YieldValue, number][]\n  ).flatMap(\n    ([YieldType, value]: [typeof YieldValue, number]): (\n      | Yield\n      | BaseYield\n    )[] => [\n      new Yield(\n        new Criterion((unit: Unit): boolean => unit instanceof UnitType),\n        new Criterion(\n          (unit: Unit, unitYield: YieldValue): boolean =>\n            unitYield instanceof YieldType\n        ),\n        new Effect((unit: Unit, unitYield: YieldValue): void =>\n          unitYield.set(value)\n        )\n      ),\n      new BaseYield(\n        new Criterion(\n          (BaseUnitType: typeof Unit): boolean => BaseUnitType === UnitType\n        ),\n        new Criterion(\n          (BaseUnitType: typeof Unit, unitYield: YieldValue): boolean =>\n            unitYield instanceof YieldType\n        ),\n        new Effect((BaseUnitType: typeof Unit, unitYield: YieldValue): void =>\n          unitYield.set(value)\n        )\n      ),\n    ]\n  ),\n];\n", "import { Attack, Defence, Movement, Moves, Visibility } from './Yields';\nimport {\n  Buildable,\n  BuildableInstance,\n  IBuildable,\n} from '@civ-clone/core-city-build/Buildable';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport { Tile, INeighbouringTiles } from '@civ-clone/core-world/Tile';\nimport Action from './Action';\nimport ActionRule from './Rules/Action';\nimport Activate from './Rules/Activate';\nimport Busy from './Rules/Busy';\nimport City from '@civ-clone/core-city/City';\nimport Created from './Rules/Created';\nimport Destroyed from './Rules/Destroyed';\nimport Player from '@civ-clone/core-player/Player';\nimport VisibilityRule from './Rules/Visibility';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport YieldRule from './Rules/Yield';\nimport { IDataObject } from '@civ-clone/core-data-object/DataObject';\n\nexport type IActionsForNeighbours = {\n  [key: string]: Action[];\n};\ntype IBusy = Busy | null;\ntype ICity = City | null;\n\nexport interface IUnit extends IDataObject {\n  action(action: Action, ...args: any[]): void;\n  actions(to?: INeighbouringTiles | Tile, from?: Tile): Action[];\n  actionsForNeighbours(from: Tile): IActionsForNeighbours;\n  activate(): void;\n  active(): boolean;\n  setActive(active: boolean): void;\n  applyVisibility(): void;\n  attack(): Attack;\n  busy(): IBusy;\n  setBusy(rule?: IBusy): void;\n  city(): ICity;\n  defence(): Defence;\n  destroy(player?: Player | null): void;\n  destroyed(): boolean;\n  setDestroyed(): void;\n  movement(): Movement;\n  moves(): Moves;\n  player(): Player;\n  status(): Action | null;\n  setStatus(status: Action | null): void;\n  tile(): Tile;\n  setTile(tile: Tile): void;\n  visibility(): Visibility;\n  waiting(): boolean;\n  setWaiting(waiting?: boolean): void;\n  yield(...yields: Yield[]): Yield[];\n}\n\nexport class Unit extends Buildable implements IUnit {\n  #active: boolean = true;\n  #busy: IBusy = null;\n  #city: ICity;\n  #destroyed: boolean = false;\n  #moves: Moves = new Moves();\n  #player: Player;\n  #ruleRegistry: RuleRegistry;\n  #status: Action | null = null;\n  #tile: Tile;\n  #waiting: boolean = false;\n\n  constructor(\n    city: ICity | null,\n    player: Player,\n    tile: Tile,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#city = city;\n    this.#player = player;\n    this.#tile = tile;\n    this.#ruleRegistry = ruleRegistry;\n\n    this.addKey(\n      'actions',\n      'actionsForNeighbours',\n      'active',\n      'attack',\n      'busy',\n      'city',\n      'defence',\n      'destroyed',\n      'movement',\n      'moves',\n      'player',\n      'status',\n      'tile',\n      'visibility',\n      'waiting'\n    );\n\n    this.#ruleRegistry.process(Created, this);\n  }\n\n  static build(\n    city: City,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ): BuildableInstance {\n    return new this(\n      city,\n      city.player(),\n      city.tile(),\n      ruleRegistry\n    ) as BuildableInstance;\n  }\n\n  action(action: Action, ...args: any[]): void {\n    return action.perform(...args);\n  }\n\n  actions(\n    to: INeighbouringTiles | Tile = this.#tile,\n    from: Tile = this.#tile\n  ): Action[] {\n    if (typeof to === 'string') {\n      to = from.getNeighbour(to);\n    }\n\n    return this.#ruleRegistry.process(ActionRule, this, to, from);\n  }\n\n  actionsForNeighbours(from: Tile = this.#tile): IActionsForNeighbours {\n    return from.getNeighbouringDirections().reduce(\n      (\n        object: IActionsForNeighbours,\n        direction: INeighbouringTiles\n      ): IActionsForNeighbours => ({\n        ...object,\n        [direction]: this.#ruleRegistry.process(\n          ActionRule,\n          this,\n          from.getNeighbour(direction),\n          from\n        ),\n      }),\n      {}\n    );\n  }\n\n  activate(): void {\n    this.#ruleRegistry.process(Activate, this);\n  }\n\n  active(): boolean {\n    return this.#active;\n  }\n\n  setActive(active: boolean = true): void {\n    this.#active = active;\n  }\n\n  applyVisibility(): void {\n    this.#tile\n      .getSurroundingArea(this.visibility().value())\n      .forEach((tile: Tile): void => {\n        this.#ruleRegistry.process(VisibilityRule, tile, this.#player);\n      });\n  }\n\n  attack(): Attack {\n    const [unitYield] = this.yield(new Attack());\n\n    return unitYield;\n  }\n\n  busy(): IBusy {\n    return this.#busy;\n  }\n\n  setBusy(rule: IBusy = null): void {\n    this.#busy = rule;\n  }\n\n  city(): ICity {\n    return this.#city;\n  }\n\n  defence(): Defence {\n    const [unitYield] = this.yield(new Defence());\n\n    return unitYield;\n  }\n\n  destroy(player: Player | null = null): void {\n    this.#ruleRegistry.process(Destroyed, this, player);\n  }\n\n  destroyed(): boolean {\n    return this.#destroyed;\n  }\n\n  setDestroyed(): void {\n    this.#destroyed = true;\n  }\n\n  movement(): Movement {\n    const [unitYield] = this.yield(new Movement());\n\n    return unitYield;\n  }\n\n  moves(): Moves {\n    return this.#moves;\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  status(): Action | null {\n    return this.#status;\n  }\n\n  setStatus(status: Action | null): void {\n    this.#status = status;\n  }\n\n  tile(): Tile {\n    return this.#tile;\n  }\n\n  setTile(tile: Tile): void {\n    this.#tile = tile;\n  }\n\n  visibility(): Visibility {\n    const [unitYield] = this.yield(new Visibility());\n\n    return unitYield;\n  }\n\n  waiting(): boolean {\n    return this.#waiting;\n  }\n\n  setWaiting(waiting: boolean = true): void {\n    this.#waiting = waiting;\n  }\n\n  yield(...yields: Yield[]): Yield[] {\n    const rules = this.#ruleRegistry.get(YieldRule);\n\n    yields.forEach((unitYield: Yield): void =>\n      rules\n        .filter((rule: YieldRule): boolean => rule.validate(this, unitYield))\n        .forEach((rule: YieldRule): any => rule.process(this, unitYield))\n    );\n\n    return yields;\n  }\n}\n\nexport default Unit;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport City from '@civ-clone/core-city/City';\nimport CityGrowth from './CityGrowth';\n\nexport interface ICityGrowthRegistry extends IEntityRegistry<CityGrowth> {\n  getByCity(city: City): CityGrowth;\n}\n\nexport class CityGrowthRegistry\n  extends EntityRegistry<CityGrowth>\n  implements ICityGrowthRegistry\n{\n  constructor() {\n    super(CityGrowth);\n  }\n\n  getByCity(city: City): CityGrowth {\n    const cityGrowths = this.getBy('city', city);\n\n    if (cityGrowths.length !== 1) {\n      throw new TypeError('Wrong number of CityGrowths returned.');\n    }\n\n    return cityGrowths[0];\n  }\n}\n\nexport const instance: CityGrowthRegistry = new CityGrowthRegistry();\n\nexport default CityGrowthRegistry;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Wonder extends CityImprovement {}\n\nexport default Wonder;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Player from './Player';\n\nexport interface IPlayerRegistry extends IEntityRegistry<Player> {}\n\nexport class PlayerRegistry\n  extends EntityRegistry<Player>\n  implements IPlayerRegistry\n{\n  constructor() {\n    super(Player);\n  }\n}\n\nexport default PlayerRegistry;\n\nexport const instance: PlayerRegistry = new PlayerRegistry();\n", "import { PlayerRegistry, IPlayerRegistry } from './PlayerRegistry';\n\nexport class CurrentPlayerRegistry\n  extends PlayerRegistry\n  implements IPlayerRegistry {}\n\nexport default CurrentPlayerRegistry;\n\nexport const instance: CurrentPlayerRegistry = new CurrentPlayerRegistry();\n", "import EventEmitter from '@dom111/typed-event-emitter/EventEmitter';\n\nexport interface IEngine {\n  debug(callback: (...args: any[]) => void): void;\n  emit(event: string, ...args: any[]): void;\n  option(key: string, defaultValue: any): any;\n  setOption(key: string, value: any): void;\n  start(): void;\n}\n\nexport class Engine extends EventEmitter implements IEngine {\n  #options: {\n    [key: string]: any;\n  } = {};\n  #started: boolean = false;\n\n  debug(callback: (...args: any[]) => void): void {\n    if (!this.option('debug')) {\n      return;\n    }\n\n    return callback();\n  }\n\n  emit(event: string | number, ...args: any[]): void {\n    this.debug((): void =>\n      console.log(`Engine#emit: ${String(event)}: ${args}`)\n    );\n\n    return super.emit(event, ...args);\n  }\n\n  loadPlugins(): Promise<void> {\n    this.emit('plugins:load:start');\n\n    return new Promise((resolve, reject) => {\n      this.once('plugins:load:end', () => resolve());\n    });\n  }\n\n  /**\n   * Options are per-instance settings that affect only the current instance.\n   */\n  option(key: string, defaultValue: any = null): any {\n    return this.#options[key] || defaultValue;\n  }\n\n  setOption(key: string, value: any): void {\n    if (this.#options[key] !== value) {\n      this.#options[key] = value;\n\n      this.emit('option:changed', key, value);\n    }\n  }\n\n  start(): void {\n    if (this.#started) {\n      return;\n    }\n\n    this.#started = true;\n\n    this.emit('engine:initialise');\n\n    this.loadPlugins().then((): void => {\n      this.emit('engine:start');\n    });\n  }\n}\n\nexport const instance: Engine = new Engine();\n\nexport default Engine;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerWorld from './PlayerWorld';\n\nexport interface IPlayerWorldRegistry extends IEntityRegistry<PlayerWorld> {\n  getByPlayer(player: Player): PlayerWorld;\n}\n\nexport class PlayerWorldRegistry\n  extends EntityRegistry<PlayerWorld>\n  implements IPlayerWorldRegistry\n{\n  constructor() {\n    super(PlayerWorld);\n  }\n\n  getByPlayer(player: Player): PlayerWorld {\n    const playerWorlds = this.getBy('player', player);\n\n    if (playerWorlds.length !== 1) {\n      throw new TypeError(\n        `Wrong number of player worlds exist for player: ${player.id()}`\n      );\n    }\n\n    return playerWorlds[0];\n  }\n}\n\nexport const instance: PlayerWorldRegistry = new PlayerWorldRegistry();\n\nexport default PlayerWorldRegistry;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\n\nexport interface ITurn extends IDataObject {\n  increment(): number;\n  value(): number;\n}\n\nexport class Turn extends DataObject implements ITurn {\n  #value: number = 0;\n\n  constructor() {\n    super();\n\n    this.addKey('value');\n  }\n\n  increment(): number {\n    this.#value++;\n\n    return this.#value;\n  }\n\n  value(): number {\n    return this.#value;\n  }\n}\n\nexport const instance: Turn = new Turn();\n\nexport default Turn;\n", "import {\n  IEntityRegistry,\n  EntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from './Unit';\n\nexport interface IUnitRegistry extends IEntityRegistry<Unit> {\n  getByCity(city: City): Unit[];\n  getByPlayer(player: Player, includeDestroyed?: boolean): Unit[];\n  getByTile(tile: Tile): Unit[];\n}\n\nexport class UnitRegistry\n  extends EntityRegistry<Unit>\n  implements IUnitRegistry\n{\n  constructor() {\n    super(Unit);\n  }\n\n  getByCity(city: City): Unit[] {\n    return this.filter(\n      (unit: Unit) => unit.city() === city && !unit.destroyed()\n    );\n  }\n\n  getByPlayer(player: Player, includeDestroyed: boolean = false): Unit[] {\n    if (includeDestroyed) {\n      return this.getBy('player', player);\n    }\n\n    return this.filter(\n      (unit: Unit) => unit.player() === player && !unit.destroyed()\n    );\n  }\n\n  getByTile(tile: Tile): Unit[] {\n    return this.filter(\n      (unit: Unit) => unit.tile() === tile && !unit.destroyed()\n    );\n  }\n}\n\nexport const instance: UnitRegistry = new UnitRegistry();\n\nexport default UnitRegistry;\n", "import Rule from '@civ-clone/core-rule/Rule';\n\nexport class Year extends Rule<[number], number> {}\n\nexport default Year;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport YearRule from './Rules/Year';\n\nexport interface IYear extends IDataObject {\n  value(turn: number): number;\n}\n\nexport class Year extends DataObject implements IYear {\n  #cache: Map<number, number> = new Map();\n  #ruleRegistry: RuleRegistry;\n  #turn: Turn;\n\n  constructor(\n    turn: Turn = turnInstance,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#ruleRegistry = ruleRegistry;\n    this.#turn = turn;\n\n    this.addKey('value');\n  }\n\n  value(turn: number = this.#turn.value()): number {\n    if (!this.#cache.has(turn)) {\n      const [year] = this.#ruleRegistry.process(YearRule, turn);\n\n      this.#cache.set(turn, year);\n    }\n\n    const value = this.#cache.get(turn);\n\n    if (typeof value !== 'number') {\n      throw new TypeError('Invalid cache result.');\n    }\n\n    return value;\n  }\n}\n\nexport const instance: Year = new Year();\n\nexport default Year;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Food extends Yield {}\n\nexport default Food;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Production extends Yield {}\n\nexport default Production;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Trade extends Yield {}\n\nexport default Trade;\n", "export { Food } from '@civ-clone/base-terrain-yield-food/Food';\nexport { Production } from '@civ-clone/base-terrain-yield-production/Production';\nexport { Trade } from '@civ-clone/base-terrain-yield-trade/Trade';\n", "import Yield from '../Yield';\n\nexport const reduceYields = (\n  yields: Yield[],\n  ...wantedYields: typeof Yield[]\n): number[] =>\n  yields.reduce(\n    (totals, currentYield) => {\n      const yieldIndex = wantedYields.findIndex(\n        (YieldType) => currentYield instanceof YieldType\n      );\n\n      if (yieldIndex === -1) {\n        return totals;\n      }\n\n      totals[yieldIndex] += currentYield.value();\n\n      return totals;\n    },\n    wantedYields.map(() => 0)\n  );\n\nexport const reduceYield = (yields: Yield[], YieldType: typeof Yield): number =>\n  reduceYields(yields, YieldType).shift() ?? 0;\n", "import {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport { Food, Production, Trade } from '@civ-clone/civ1-world/Yields';\nimport {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { reduceYield } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getHighestValueCityTiles = (\n  city: City,\n  weights: [typeof Yield, number][] = [\n    [Food, 8],\n    [\n      Production,\n      3 *\n        (reduceYield(city.tilesWorked().yields(city.player()), Production) === 0\n          ? 3\n          : 1),\n    ],\n    [\n      Trade,\n      1 *\n        (reduceYield(city.tilesWorked().yields(city.player()), Trade) === 0\n          ? 3\n          : 1),\n    ],\n  ]\n) =>\n  city\n    .tiles()\n    .entries()\n    .sort(\n      (a: Tile, b: Tile) =>\n        b.score(city.player(), weights) - a.score(city.player(), weights)\n    );\n\nexport const getHighestValueAvailableCityTiles = (\n  city: City,\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance\n) =>\n  getHighestValueCityTiles(city).filter(\n    (tile) =>\n      playerWorldRegistry.getByPlayer(city.player()).includes(tile) &&\n      !city.tilesWorked().includes(tile) &&\n      city.tile() !== tile\n  );\n\nexport const reassignWorkers = (\n  city: City,\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance,\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance\n) => {\n  city.tilesWorked().unregister(...city.tilesWorked().entries());\n\n  city.tilesWorked().register(city.tile());\n\n  assignWorkers(city, playerWorldRegistry, cityGrowthRegistry);\n};\n\nexport const assignWorkers: (\n  city: City,\n  playerWorldRegistry?: PlayerWorldRegistry,\n  cityGrowthRegistry?: CityGrowthRegistry\n) => void = (\n  city: City,\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance,\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance\n): void => {\n  const cityGrowth = cityGrowthRegistry.getByCity(city);\n\n  getHighestValueAvailableCityTiles(city, playerWorldRegistry).some((tile) => {\n    if (city.tilesWorked().length >= cityGrowth.size() + 1) {\n      return true;\n    }\n\n    city.tilesWorked().register(tile);\n\n    return false;\n  });\n};\n\nexport default assignWorkers;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from './Unit';\n\nexport interface IAction extends IDataObject {\n  forUnit(unit: Unit): Action;\n  from(): Tile;\n  perform(...args: any[]): void;\n  ruleRegistry(): RuleRegistry;\n  to(): Tile;\n  unit(): Unit;\n}\n\nexport class Action extends DataObject implements IAction {\n  #from: Tile;\n  #ruleRegistry: RuleRegistry;\n  #to: Tile;\n  #unit: Unit;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#from = from;\n    this.#ruleRegistry = ruleRegistry;\n    this.#to = to;\n    this.#unit = unit;\n\n    this.addKey('from', 'to');\n  }\n\n  forUnit(unit: Unit): Action {\n    return new (<typeof Action>this.constructor)(\n      this.#from,\n      this.#to,\n      unit,\n      this.#ruleRegistry\n    );\n  }\n\n  from(): Tile {\n    return this.#from;\n  }\n\n  perform(...args: any[]): void {}\n\n  ruleRegistry(): RuleRegistry {\n    return this.#ruleRegistry;\n  }\n\n  to(): Tile {\n    return this.#to;\n  }\n\n  unit(): Unit {\n    return this.#unit;\n  }\n}\n\nexport default Action;\n", "import Action from '../Action';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '../Unit';\n\nexport class Defeated extends Rule<[Unit, Unit, Action], void> {}\n\nexport default Defeated;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Action from '@civ-clone/core-unit/Action';\nimport Defeated from '@civ-clone/core-unit/Rules/Defeated';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Attack extends Action {\n  #randomNumberGenerator: () => number;\n  #unitRegistry: UnitRegistry;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    unitRegistry: UnitRegistry = unitRegistryInstance,\n    randomNumberGenerator: () => number = () => Math.random()\n  ) {\n    super(from, to, unit, ruleRegistry);\n\n    this.#unitRegistry = unitRegistry;\n    this.#randomNumberGenerator = randomNumberGenerator;\n  }\n\n  perform(): void {\n    const [defender]: Unit[] = this.#unitRegistry\n        .getByTile(this.to())\n        .sort(\n          (a: Unit, b: Unit): number =>\n            b.defence().value() - a.defence().value()\n        ),\n      power = Math.min(1, this.unit().moves().value());\n\n    if (\n      this.unit().attack().value() * power * this.#randomNumberGenerator() >=\n      defender.defence().value() * this.#randomNumberGenerator()\n    ) {\n      this.ruleRegistry().process(Defeated, defender, this.unit(), this);\n\n      this.unit().moves().subtract(power, this.constructor.name);\n\n      return;\n    }\n\n    this.ruleRegistry().process(Defeated, this.unit(), defender, this);\n  }\n}\n\nexport default Attack;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class BuildingIrrigation extends Busy {}\n\nexport default BuildingIrrigation;\n", "import Action from '../Action';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '../Unit';\n\nexport class Moved extends Rule<[Unit, Action], void> {}\n\nexport default Moved;\n", "import { Action, IAction } from './Action';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport Busy from './Rules/Busy';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Moved from './Rules/Moved';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from './Unit';\n\nexport interface IDelayedAction extends IAction {\n  perform(turns: number, action: (...args: any[]) => void): void;\n}\n\nexport class DelayedAction extends Action implements IDelayedAction {\n  #turn: Turn;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    turn: Turn = turnInstance\n  ) {\n    super(from, to, unit, ruleRegistry);\n\n    this.#turn = turn;\n  }\n\n  perform(\n    turns: number,\n    action: (...args: any[]) => void = () => {},\n    BusyRule: typeof Busy = Busy\n  ): void {\n    const endTurn: number = this.#turn.value() + turns;\n\n    this.unit().setActive(false);\n    this.unit().moves().set(0);\n\n    this.unit().setBusy(\n      new BusyRule(\n        new Criterion((): boolean => this.#turn.value() === endTurn),\n        new Effect((...args: any[]): void => {\n          const unit: Unit = this.unit();\n\n          unit.setActive();\n          unit.setBusy();\n\n          action(...args);\n\n          this.ruleRegistry().process(Moved, this.unit(), this);\n        })\n      )\n    );\n  }\n}\n\nexport default DelayedAction;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '../TileImprovement';\n\nexport class Built extends Rule<[Tile, TileImprovement], void> {}\n\nexport default Built;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Built from './Rules/Built';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport interface ITileImprovement extends IDataObject {\n  tile(): Tile;\n}\n\nexport class TileImprovement extends DataObject implements ITileImprovement {\n  #tile: Tile;\n\n  constructor(tile: Tile, ruleRegistry: RuleRegistry = ruleRegistryInstance) {\n    super();\n\n    this.#tile = tile;\n\n    ruleRegistry.process(Built, tile, this);\n  }\n\n  tile(): Tile {\n    return this.#tile;\n  }\n}\n\nexport default TileImprovement;\n", "import TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\n\nexport class Irrigation extends TileImprovement {}\n\nexport default Irrigation;\n", "import Action from '../Action';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '../Unit';\n\nexport class MovementCost extends Rule<[Unit, Action], number> {}\n\nexport default MovementCost;\n", "import BuildingIrrigation from './Rules/BuildingIrrigation';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Irrigation from '@civ-clone/base-tile-improvement-irrigation/Irrigation';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\n\nexport class BuildIrrigation extends DelayedAction {\n  perform(): void {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(\n      moveCost || 0,\n      (): void => {\n        new Irrigation(this.unit().tile());\n      },\n      BuildingIrrigation\n    );\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default BuildIrrigation;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class BuildingMine extends Busy {}\n\nexport default BuildingMine;\n", "import TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\n\nexport class Mine extends TileImprovement {}\n\nexport default Mine;\n", "import BuildingMine from './Rules/BuildingMine';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Mine from '@civ-clone/base-tile-improvement-mine/Mine';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\n\nexport class BuildMine extends DelayedAction {\n  perform(): void {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(\n      moveCost || 0,\n      (): void => {\n        new Mine(this.unit().tile());\n      },\n      BuildingMine\n    );\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default BuildMine;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class BuildingRoad extends Busy {}\n\nexport default BuildingRoad;\n", "import TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\n\nexport class Road extends TileImprovement {}\n\nexport default Road;\n", "import BuildingRoad from './Rules/BuildingRoad';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport Road from '@civ-clone/base-tile-improvement-road/Road';\n\nexport class BuildRoad extends DelayedAction {\n  perform(): void {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(\n      moveCost || 0,\n      (): void => {\n        new Road(this.unit().tile());\n      },\n      BuildingRoad\n    );\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default BuildRoad;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class BuildingRailroad extends Busy {}\n\nexport default BuildingRailroad;\n", "import TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\n\nexport class Railroad extends TileImprovement {}\n\nexport default Railroad;\n", "import BuildingRailroad from './Rules/BuildingRailroad';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport Railroad from '@civ-clone/base-tile-improvement-railroad/Railroad';\n\nexport class BuildRailroad extends DelayedAction {\n  perform(): void {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(\n      moveCost || 0,\n      (): void => {\n        new Railroad(this.unit().tile());\n      },\n      BuildingRailroad\n    );\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default BuildRailroad;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '../Unit';\n\nexport class ValidateMove extends Rule<[Unit, number], boolean> {}\n\nexport default ValidateMove;\n", "import { Action, IAction } from '@civ-clone/core-unit/Action';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport ValidateMove from '@civ-clone/core-unit/Rules/ValidateMove';\n\nexport interface IMove extends IAction {\n  movementCost(): number;\n  validate(): boolean;\n}\n\nexport class Move extends Action implements IMove {\n  perform(): boolean {\n    if (!this.validate()) {\n      return false;\n    }\n\n    this.unit().setTile(this.to());\n    this.ruleRegistry().process(Moved, this.unit(), this as Action);\n\n    return true;\n  }\n\n  movementCost(): number {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this as Action)\n      .sort((a: number, b: number): number => a - b);\n\n    return moveCost;\n  }\n\n  validate(): boolean {\n    const [valid]: boolean[] = this.ruleRegistry().process(\n      ValidateMove,\n      this.unit(),\n      this.movementCost()\n    );\n\n    return valid;\n  }\n}\n\nexport default Move;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Move from '@civ-clone/base-unit-action-move/Move';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class CaptureCity extends Move {\n  #city: City;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    city: City,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super(from, to, unit, ruleRegistry);\n\n    this.#city = city;\n  }\n  perform(): boolean {\n    if (super.perform()) {\n      this.#city.capture(this.unit().player());\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport default CaptureCity;\n", "import Terrain from '@civ-clone/core-terrain/Terrain';\nimport DataObject from '@civ-clone/core-data-object/DataObject';\n\nexport interface ITerrainFeature {\n  clone(terrain: Terrain): TerrainFeature;\n  terrain(): Terrain;\n}\n\nexport class TerrainFeature extends DataObject implements ITerrainFeature {\n  #terrain: Terrain;\n\n  constructor(terrain: Terrain) {\n    super();\n\n    this.#terrain = terrain;\n  }\n\n  clone(terrain: Terrain = this.terrain()): TerrainFeature {\n    return new (<typeof TerrainFeature>this.constructor)(terrain);\n  }\n\n  terrain(): Terrain {\n    return this.#terrain;\n  }\n}\n\nexport default TerrainFeature;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport TerrainFeature from './TerrainFeature';\n\nexport interface ITerrainFeatureRegistry\n  extends IEntityRegistry<TerrainFeature> {\n  getByTerrain(terrain: Terrain): TerrainFeature[];\n}\n\nconst featureCache = new Map<Terrain, TerrainFeature[]>();\n\nexport class TerrainFeatureRegistry\n  extends EntityRegistry<TerrainFeature>\n  implements ITerrainFeatureRegistry\n{\n  constructor() {\n    super(TerrainFeature);\n  }\n\n  getByTerrain(terrain: Terrain): TerrainFeature[] {\n    if (!featureCache.has(terrain)) {\n      featureCache.set(terrain, this.getBy('terrain', terrain));\n    }\n\n    return featureCache.get(terrain)!;\n  }\n}\n\nexport const instance: TerrainFeatureRegistry = new TerrainFeatureRegistry();\n\nexport default TerrainFeatureRegistry;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class ClearingForest extends Busy {}\n\nexport default ClearingForest;\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Plains extends Land {}\n\nexport default Plains;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '@civ-clone/core-terrain-feature/TerrainFeatureRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport ClearingForest from './Rules/ClearingForest';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport Plains from '@civ-clone/base-terrain-plains/Plains';\nimport TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\n// TODO: This is specific to the original Civilization and might need to be labelled as `-civ1` as other games have\n//  forests as a feature\nexport class ClearForest extends DelayedAction {\n  #terrainFeatureRegistry: TerrainFeatureRegistry;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance,\n    turn: Turn = turnInstance\n  ) {\n    super(from, to, unit, ruleRegistry, turn);\n\n    this.#terrainFeatureRegistry = terrainFeatureRegistry;\n  }\n\n  perform(): void {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(\n      moveCost,\n      (): void => {\n        const terrain = new Plains(),\n          features = this.#terrainFeatureRegistry.getByTerrain(\n            this.from().terrain()\n          );\n\n        this.#terrainFeatureRegistry.register(\n          ...features.map(\n            (feature: TerrainFeature): TerrainFeature => feature.clone(terrain)\n          )\n        );\n        this.#terrainFeatureRegistry.unregister(...features);\n\n        this.from().setTerrain(terrain);\n      },\n      ClearingForest\n    );\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default ClearForest;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class ClearingJungle extends Busy {}\n\nexport default ClearingJungle;\n", "import {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '../TerrainFeatureRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport TerrainFeature from '../TerrainFeature';\n\nexport class Feature extends Rule<\n  [IConstructor<TerrainFeature>, Terrain],\n  void\n> {}\n\nexport default Feature;\n\nexport const feature: (\n  TerrainType: IConstructor<Terrain>,\n  FeatureType: IConstructor<TerrainFeature>,\n  chance?: number,\n  terrainFeatureRegistry?: TerrainFeatureRegistry,\n  randomNumberGenerator?: () => number\n) => Feature[] = (\n  TerrainType: IConstructor<Terrain>,\n  FeatureType: IConstructor<TerrainFeature>,\n  chance: number = 0.2,\n  terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): Feature[] => [\n  new Feature(\n    new Criterion(\n      (TerrainFeatureType: IConstructor<TerrainFeature>): boolean =>\n        TerrainFeatureType === FeatureType\n    ),\n    new Criterion(\n      (\n        TerrainFeatureType: IConstructor<TerrainFeature>,\n        terrain: Terrain\n      ): boolean => terrain instanceof TerrainType\n    ),\n    new Criterion((): boolean => randomNumberGenerator() <= chance),\n    new Effect(\n      (\n        TerrainFeatureType: IConstructor<TerrainFeature>,\n        terrain: Terrain\n      ): void =>\n        terrainFeatureRegistry.register(new TerrainFeatureType(terrain))\n    )\n  ),\n];\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Grassland extends Land {}\n\nexport default Grassland;\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Shield extends TerrainFeature {}\n\nexport default Shield;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '@civ-clone/core-terrain-feature/TerrainFeatureRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport ClearingJungle from './Rules/ClearingJungle';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Feature from '@civ-clone/core-terrain-feature/Rules/Feature';\nimport Grassland from '@civ-clone/base-terrain-grassland/Grassland';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport Shield from '@civ-clone/base-terrain-feature-shield/Shield';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\n// TODO: This is specific to the original Civilization and might need to be labelled as `-civ1` as other games have\n//  forests as a feature\nexport class ClearJungle extends DelayedAction {\n  #terrainFeatureRegistry: TerrainFeatureRegistry;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance,\n    turn: Turn = turnInstance\n  ) {\n    super(from, to, unit, ruleRegistry, turn);\n\n    this.#terrainFeatureRegistry = terrainFeatureRegistry;\n  }\n\n  perform(): void {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(\n      moveCost,\n      (): void => {\n        const terrain = new Grassland(),\n          features = this.#terrainFeatureRegistry.getByTerrain(\n            this.from().terrain()\n          );\n\n        this.ruleRegistry().process(Feature, Shield, terrain);\n\n        this.#terrainFeatureRegistry.unregister(...features);\n\n        this.from().setTerrain(terrain);\n      },\n      ClearingJungle\n    );\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default ClearJungle;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class ClearingSwamp extends Busy {}\n\nexport default ClearingSwamp;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '@civ-clone/core-terrain-feature/TerrainFeatureRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport ClearingSwamp from './Rules/ClearingSwamp';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Feature from '@civ-clone/core-terrain-feature/Rules/Feature';\nimport Grassland from '@civ-clone/base-terrain-grassland/Grassland';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport Shield from '@civ-clone/base-terrain-feature-shield/Shield';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\n// TODO: This is specific to the original Civilization and might need to be labelled as `-civ1` as other games have\n//  forests as a feature\nexport class ClearSwamp extends DelayedAction {\n  #terrainFeatureRegistry: TerrainFeatureRegistry;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance,\n    turn: Turn = turnInstance\n  ) {\n    super(from, to, unit, ruleRegistry, turn);\n\n    this.#terrainFeatureRegistry = terrainFeatureRegistry;\n  }\n\n  perform(): void {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(\n      moveCost,\n      (): void => {\n        const terrain = new Grassland(),\n          features = this.#terrainFeatureRegistry.getByTerrain(\n            this.from().terrain()\n          );\n\n        this.ruleRegistry().process(Feature, Shield, terrain);\n\n        this.#terrainFeatureRegistry.unregister(...features);\n\n        this.from().setTerrain(terrain);\n      },\n      ClearingSwamp\n    );\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default ClearSwamp;\n", "import Action from \"@civ-clone/core-unit/Action\";\n\nexport class Disband extends Action {\n  perform() {\n    this.unit().destroy();\n  }\n}\n\nexport default Disband;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport { ITransport } from '@civ-clone/core-unit-transport/Transport';\nimport Move from '@civ-clone/base-unit-action-move/Move';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Disembark extends Move {\n  #transport: ITransport;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    transport: ITransport,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super(from, to, unit, ruleRegistry);\n\n    this.#transport = transport;\n  }\n\n  perform(): boolean {\n    if (!super.perform()) {\n      return false;\n    }\n\n    this.unit().moves().set(0);\n\n    this.#transport.unload(this.unit());\n\n    return true;\n  }\n}\n\nexport default Disembark;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Action from '@civ-clone/core-unit/Action';\nimport Busy from '@civ-clone/core-unit/Rules/Busy';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport { ITransport } from '@civ-clone/core-unit-transport/Transport';\nimport Move from '@civ-clone/base-unit-action-move/Move';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Embark extends Move {\n  #transport: ITransport;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    transport: ITransport,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super(from, to, unit, ruleRegistry);\n\n    this.#transport = transport;\n  }\n\n  perform(): boolean {\n    if (!super.perform()) {\n      return false;\n    }\n\n    this.#transport.stow(this.unit());\n\n    this.unit().setBusy(new Busy(new Criterion((): boolean => false)));\n    this.unit().setActive(false);\n\n    this.ruleRegistry().process(Moved, this.unit(), this as Action);\n\n    return true;\n  }\n}\n\nexport default Embark;\n", "import Unit from '@civ-clone/core-unit/Unit';\nimport DataObject, {\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\n\nexport interface IUnitImprovement extends IDataObject {\n  unit(): Unit;\n}\n\nexport class UnitImprovement extends DataObject implements IUnitImprovement {\n  #unit: Unit;\n\n  constructor(unit: Unit) {\n    super();\n\n    this.#unit = unit;\n  }\n\n  unit(): Unit {\n    return this.#unit;\n  }\n}\n\nexport default UnitImprovement;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitImprovement from './UnitImprovement';\n\nexport interface IUnitImprovementRegistry\n  extends IEntityRegistry<UnitImprovement> {\n  getByUnit(unit: Unit): UnitImprovement[];\n}\n\nexport class UnitImprovementRegistry\n  extends EntityRegistry<UnitImprovement>\n  implements IUnitImprovementRegistry {\n  constructor() {\n    super(UnitImprovement);\n  }\n\n  getByUnit(unit: Unit): UnitImprovement[] {\n    return this.getBy('unit', unit);\n  }\n}\n\nexport const instance: UnitImprovementRegistry = new UnitImprovementRegistry();\n\nexport default UnitImprovementRegistry;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class Fortified extends Busy {}\n\nexport default Fortified;\n", "import UnitImprovement from '@civ-clone/core-unit-improvement/UnitImprovement';\n\nexport class Fortified extends UnitImprovement {}\n\nexport default Fortified;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class Fortifying extends Busy {}\n\nexport default Fortifying;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport {\n  UnitImprovementRegistry,\n  instance as unitImprovementRegistryInstance,\n} from '@civ-clone/core-unit-improvement/UnitImprovementRegistry';\nimport BusyFortified from './Rules/Fortified';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Fortified from '@civ-clone/base-unit-improvement-fortified/UnitImprovements/Fortified';\nimport Fortifying from './Rules/Fortifying';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Fortify extends DelayedAction {\n  #unitImprovementRegistry: UnitImprovementRegistry;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    turn: Turn = turnInstance,\n    unitImprovementRegistry: UnitImprovementRegistry = unitImprovementRegistryInstance\n  ) {\n    super(from, to, unit, ruleRegistry, turn);\n\n    this.#unitImprovementRegistry = unitImprovementRegistry;\n  }\n\n  perform() {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(\n      moveCost,\n      (): void => {\n        this.unit().moves().set(0);\n        this.unit().setActive(false);\n        this.unit().setBusy(new BusyFortified(new Criterion(() => false)));\n\n        this.#unitImprovementRegistry.register(new Fortified(this.unit()));\n      },\n      Fortifying\n    );\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default Fortify;\n", "import {\n  CityNameRegistry,\n  instance as cityNameRegistryInstance,\n} from '@civ-clone/core-civilization/CityNameRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Action from '@civ-clone/core-unit/Action';\nimport City from '@civ-clone/core-city/City';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class FoundCity extends Action {\n  #cityNameRegistry: CityNameRegistry;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    cityNameRegistry: CityNameRegistry = cityNameRegistryInstance,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super(from, to, unit, ruleRegistry);\n\n    this.#cityNameRegistry = cityNameRegistry;\n  }\n\n  perform() {\n    new City(\n      this.unit().player(),\n      this.unit().tile(),\n      this.#cityNameRegistry.takeCapitalByCivilization(\n        this.unit().player().civilization().constructor as typeof Civilization\n      ),\n      this.ruleRegistry()\n    );\n\n    this.unit().destroy();\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default FoundCity;\n", "import { Action } from '@civ-clone/core-unit/Action';\n\nexport class NoOrders extends Action {\n  perform() {\n    this.unit().moves().subtract(this.unit().moves());\n  }\n}\n\nexport default NoOrders;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from './TileImprovement';\n\nexport interface ITileImprovementRegistry\n  extends IEntityRegistry<TileImprovement> {\n  getByTile(tile: Tile): TileImprovement[];\n}\n\nexport class TileImprovementRegistry\n  extends EntityRegistry<TileImprovement>\n  implements ITileImprovementRegistry\n{\n  constructor() {\n    super(TileImprovement);\n  }\n\n  getByTile(tile: Tile): TileImprovement[] {\n    return this.getBy('tile', tile);\n  }\n}\n\nexport const instance: TileImprovementRegistry = new TileImprovementRegistry();\n\nexport default TileImprovementRegistry;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Pillage extends DelayedAction {\n  #tileImprovementRegistry: TileImprovementRegistry;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n    turn: Turn = turnInstance\n  ) {\n    super(from, to, unit, ruleRegistry, turn);\n\n    this.#tileImprovementRegistry = tileImprovementRegistry;\n  }\n\n  perform() {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(moveCost, () => {\n      // TODO: should this prioritise Fortress > Mine > Irrigation > Railroad > Road?\n      //  use a Rule\n      const [improvement] = this.#tileImprovementRegistry.getByTile(\n        this.from()\n      );\n\n      this.#tileImprovementRegistry.unregister(improvement);\n    });\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default Pillage;\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Forest extends Land {}\n\nexport default Forest;\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Horse extends TerrainFeature {}\n\nexport default Horse;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class PlantingForest extends Busy {}\n\nexport default PlantingForest;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '@civ-clone/core-terrain-feature/TerrainFeatureRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Feature from '@civ-clone/core-terrain-feature/Rules/Feature';\nimport Forest from '@civ-clone/base-terrain-forest/Forest';\nimport Horse from '@civ-clone/base-terrain-feature-horse/Horse';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport PlantingForest from './Rules/PlantingForest';\n\n// TODO: This is specific to the original Civilization and might need to be labelled as `-civ1` as other games have\n//  forests as a feature\nexport class PlantForest extends DelayedAction {\n  #terrainFeatureRegistry: TerrainFeatureRegistry;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance,\n    turn: Turn = turnInstance\n  ) {\n    super(from, to, unit, ruleRegistry, turn);\n\n    this.#terrainFeatureRegistry = terrainFeatureRegistry;\n  }\n\n  perform(): void {\n    const [moveCost]: number[] = this.ruleRegistry()\n      .process(MovementCost, this.unit(), this)\n      .sort((a: number, b: number): number => b - a);\n\n    super.perform(\n      moveCost,\n      (): void => {\n        const terrain = new Forest(),\n          features = this.#terrainFeatureRegistry.getByTerrain(\n            this.from().terrain()\n          );\n\n        this.ruleRegistry().process(Feature, Horse, terrain);\n\n        this.#terrainFeatureRegistry.unregister(...features);\n\n        this.from().setTerrain(terrain);\n      },\n      PlantingForest\n    );\n\n    this.ruleRegistry().process(Moved, this.unit(), this);\n  }\n}\n\nexport default PlantForest;\n", "import Busy from '@civ-clone/core-unit/Rules/Busy';\n\nexport class Sleeping extends Busy {}\n\nexport default Sleeping;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Sleeping from './Rules/Sleeping';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Sleep extends DelayedAction {\n  #unitRegistry: UnitRegistry;\n\n  constructor(\n    from: Tile,\n    to: Tile,\n    unit: Unit,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    turn: Turn = turnInstance,\n    unitRegistry: UnitRegistry = unitRegistryInstance\n  ) {\n    super(from, to, unit, ruleRegistry, turn);\n\n    this.#unitRegistry = unitRegistry;\n  }\n\n  perform() {\n    this.unit().setActive(false);\n    this.unit().moves().set(0);\n\n    this.unit().setBusy(\n      new Sleeping(\n        new Criterion((): boolean =>\n          this.from()\n            .getSurroundingArea(this.unit().visibility().value())\n            .some((tile: Tile): boolean =>\n              this.#unitRegistry\n                .getByTile(tile)\n                .some(\n                  (unit: Unit): boolean =>\n                    unit.player() !== this.unit().player()\n                )\n            )\n        ),\n        new Effect((): void => {\n          this.unit().setActive();\n          this.unit().setBusy();\n        })\n      )\n    );\n  }\n}\n\nexport default Sleep;\n", "import Action from '@civ-clone/core-unit/Action';\nimport NavalTransport from '@civ-clone/base-unit-type-naval-transport/NavalTransport';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Unload extends Action {\n  perform() {\n    this.unit().setWaiting();\n\n    (this.unit() as NavalTransport).cargo().forEach((unit: Unit): void => {\n      unit.moves().set(unit.movement());\n      unit.activate();\n    });\n  }\n}\n\nexport default Unload;\n", "export { Attack } from '@civ-clone/base-unit-action-attack/Attack';\nexport { BuildIrrigation } from '@civ-clone/base-unit-action-build-irrigation/BuildIrrigation';\nexport { BuildMine } from '@civ-clone/base-unit-action-build-mine/BuildMine';\nexport { BuildRoad } from '@civ-clone/base-unit-action-build-road/BuildRoad';\nexport { BuildRailroad } from '@civ-clone/base-unit-action-build-railroad/BuildRailroad';\nexport { CaptureCity } from '@civ-clone/base-unit-action-capture-city/CaptureCity';\nexport { ClearForest } from '@civ-clone/base-unit-action-clear-forest/ClearForest';\nexport { ClearJungle } from '@civ-clone/base-unit-action-clear-jungle/ClearJungle';\nexport { ClearSwamp } from '@civ-clone/base-unit-action-clear-swamp/ClearSwamp';\nexport { Disband } from '@civ-clone/base-unit-action-disband/Disband';\nexport { Disembark } from '@civ-clone/base-unit-action-disembark/Disembark';\nexport { Embark } from '@civ-clone/base-unit-action-embark/Embark';\nexport { Fortify } from '@civ-clone/base-unit-action-fortify/Fortify';\nexport { FoundCity } from '@civ-clone/base-unit-action-found-city/FoundCity';\nexport { Move } from '@civ-clone/base-unit-action-move/Move';\nexport { NoOrders } from '@civ-clone/base-unit-action-no-orders/NoOrders';\nexport { Pillage } from '@civ-clone/base-unit-action-pillage/Pillage';\nexport { PlantForest } from '@civ-clone/base-unit-action-plant-forest/PlantForest';\nexport { Sleep } from '@civ-clone/base-unit-action-sleep/Sleep';\nexport { Unload } from '@civ-clone/base-unit-action-unload/Unload';\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Arctic extends Land {}\n\nexport default Arctic;\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Desert extends Land {}\n\nexport default Desert;\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Hills extends Land {}\n\nexport default Hills;\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Jungle extends Land {}\n\nexport default Jungle;\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Mountains extends Land {}\n\nexport default Mountains;\n", "import { Water } from '@civ-clone/core-terrain/Types/Water';\n\nexport class Ocean extends Water {}\n\nexport default Ocean;\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class River extends Land {}\n\nexport default River;\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Swamp extends Land {}\n\nexport default Swamp;\n", "import { Land } from '@civ-clone/core-terrain/Types';\n\nexport class Tundra extends Land {}\n\nexport default Tundra;\n", "export { Arctic } from '@civ-clone/base-terrain-arctic/Arctic';\nexport { Desert } from '@civ-clone/base-terrain-desert/Desert';\nexport { Forest } from '@civ-clone/base-terrain-forest/Forest';\nexport { Grassland } from '@civ-clone/base-terrain-grassland/Grassland';\nexport { Hills } from '@civ-clone/base-terrain-hills/Hills';\nexport { Jungle } from '@civ-clone/base-terrain-jungle/Jungle';\nexport { Mountains } from '@civ-clone/base-terrain-mountains/Mountains';\nexport { Ocean } from '@civ-clone/base-terrain-ocean/Ocean';\nexport { Plains } from '@civ-clone/base-terrain-plains/Plains';\nexport { River } from '@civ-clone/base-terrain-river/River';\nexport { Swamp } from '@civ-clone/base-terrain-swamp/Swamp';\nexport { Tundra } from '@civ-clone/base-terrain-tundra/Tundra';\n", "import Unit from '@civ-clone/core-unit/Unit';\n\nexport class Air extends Unit {}\n\nexport default Air;\n", "import Unit from '@civ-clone/core-unit/Unit';\n\nexport class Land extends Unit {}\n\nexport default Land;\n", "import Land from '@civ-clone/base-unit-type-land/Land';\n\nexport class Fortifiable extends Land {}\n\nexport default Fortifiable;\n", "import Unit from '@civ-clone/core-unit/Unit';\n\nexport class Naval extends Unit {}\n\nexport default Naval;\n", "import { ITransport } from './Transport';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport interface ITransportManifest {\n  transport(): ITransport;\n  unit(): Unit;\n}\n\nexport class TransportManifest implements ITransportManifest {\n  #transport: ITransport;\n  #unit: Unit;\n\n  constructor(transport: ITransport, unit: Unit) {\n    this.#transport = transport;\n    this.#unit = unit;\n  }\n\n  transport(): ITransport {\n    return this.#transport;\n  }\n\n  unit(): Unit {\n    return this.#unit;\n  }\n}\n\nexport default TransportManifest;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport { ITransport } from './Transport';\nimport TransportManifest from './TransportManifest';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport interface ITransportRegistry extends IEntityRegistry<TransportManifest> {\n  getByTransport(transport: ITransport): TransportManifest[];\n  getByUnit(unit: Unit): TransportManifest;\n}\n\nexport class TransportRegistry\n  extends EntityRegistry<TransportManifest>\n  implements ITransportRegistry\n{\n  constructor() {\n    super(TransportManifest);\n  }\n\n  getByTransport(transport: ITransport): TransportManifest[] {\n    return this.getBy('transport', transport);\n  }\n\n  getByUnit(unit: Unit): TransportManifest {\n    const manifests = this.getBy('unit', unit);\n\n    if (manifests.length !== 1) {\n      throw new TypeError(`Wrong number of results.`);\n    }\n\n    return manifests[0];\n  }\n}\n\nexport const instance: TransportRegistry = new TransportRegistry();\n\nexport default TransportRegistry;\n", "import { ITransport } from '../Transport';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Stowed extends Rule<[Unit, ITransport], void> {}\n\nexport default Stowed;\n", "import { ITransport } from '../Transport';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Unloaded extends Rule<[Unit, ITransport], void> {}\n\nexport default Unloaded;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TransportRegistry,\n  instance as transportRegistryInstance,\n} from './TransportRegistry';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Stowed from './Rules/Stowed';\nimport TransportManifest from './TransportManifest';\nimport Unit, { IUnit } from '@civ-clone/core-unit/Unit';\nimport Unloaded from './Rules/Unloaded';\n\nexport interface ITransport extends IUnit {\n  canStow(unit: Unit): boolean;\n  capacity(): number;\n  cargo(): Unit[];\n  hasCapacity(): boolean;\n  hasCargo(): boolean;\n  stow(unit: Unit): boolean;\n  unload(unit: Unit): boolean;\n}\n\nexport const Transport = (Base: typeof Unit) =>\n  class Transport extends Base implements ITransport {\n    #ruleRegistry: RuleRegistry = ruleRegistryInstance;\n    #transportRegistry: TransportRegistry = transportRegistryInstance;\n\n    canStow(unit: Unit): boolean {\n      return !this.cargo().includes(unit) && this.hasCapacity();\n    }\n\n    capacity(): number {\n      return 0;\n    }\n\n    cargo(): Unit[] {\n      return this.#transportRegistry\n        .getByTransport(this as ITransport)\n        .map((manifest: TransportManifest): Unit => manifest.unit());\n    }\n\n    hasCapacity(): boolean {\n      return (\n        this.#transportRegistry.getByTransport(this as ITransport).length <\n        this.capacity()\n      );\n    }\n\n    hasCargo(): boolean {\n      return (\n        this.#transportRegistry.getByTransport(this as ITransport).length > 0\n      );\n    }\n\n    // Ideally, these would be `protected`: https://github.com/microsoft/TypeScript/issues/30355\n    setRuleRegistry(ruleRegistry: RuleRegistry): void {\n      this.#ruleRegistry = ruleRegistry;\n    }\n\n    setTransportRegistry(transportRegistry: TransportRegistry): void {\n      this.#transportRegistry = transportRegistry;\n    }\n\n    stow(unit: Unit) {\n      if (!this.hasCapacity() || !this.canStow(unit)) {\n        return false;\n      }\n\n      this.#transportRegistry.register(\n        new TransportManifest(this as ITransport, unit)\n      );\n\n      this.#ruleRegistry.process(Stowed, unit, this as ITransport);\n\n      return true;\n    }\n\n    unload(unit: Unit) {\n      try {\n        const manifest = this.#transportRegistry.getByUnit(unit);\n\n        this.#transportRegistry.unregister(manifest);\n\n        this.#ruleRegistry.process(Unloaded, unit, this as ITransport);\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  };\n\nexport default Transport;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TransportRegistry,\n  instance as transportRegistryInstance,\n} from '@civ-clone/core-unit-transport/TransportRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Naval from '@civ-clone/base-unit-type-naval/Naval';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Transport from '@civ-clone/core-unit-transport/Transport';\n\nexport class NavalTransport extends Transport(Naval) {\n  constructor(\n    city: City | null,\n    player: Player,\n    tile: Tile,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    transportRegistry: TransportRegistry = transportRegistryInstance\n  ) {\n    super(city, player, tile, ruleRegistry);\n\n    this.setRuleRegistry(ruleRegistry);\n    this.setTransportRegistry(transportRegistry);\n  }\n}\n\nexport default NavalTransport;\n", "import Land from '@civ-clone/base-unit-type-land/Land';\n\nexport class Worker extends Land {}\n\nexport default Worker;\n", "export { Air } from '@civ-clone/base-unit-type-air/Air';\nexport { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\nexport { Land } from '@civ-clone/base-unit-type-land/Land';\nexport { Naval } from '@civ-clone/base-unit-type-naval/Naval';\nexport { NavalTransport } from '@civ-clone/base-unit-type-naval-transport/NavalTransport';\nexport { Worker } from '@civ-clone/base-unit-type-worker/Worker';\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Coal extends TerrainFeature {}\n\nexport default Coal;\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Fish extends TerrainFeature {}\n\nexport default Fish;\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Game extends TerrainFeature {}\n\nexport default Game;\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Gems extends TerrainFeature {}\n\nexport default Gems;\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Gold extends TerrainFeature {}\n\nexport default Gold;\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Oasis extends TerrainFeature {}\n\nexport default Oasis;\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Oil extends TerrainFeature {}\n\nexport default Oil;\n", "import TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport class Seal extends TerrainFeature {}\n\nexport default Seal;\n", "export { Coal } from '@civ-clone/base-terrain-feature-coal/Coal';\nexport { Fish } from '@civ-clone/base-terrain-feature-fish/Fish';\nexport { Game } from '@civ-clone/base-terrain-feature-game/Game';\nexport { Gems } from '@civ-clone/base-terrain-feature-gems/Gems';\nexport { Gold } from '@civ-clone/base-terrain-feature-gold/Gold';\nexport { Horse } from '@civ-clone/base-terrain-feature-horse/Horse';\nexport { Oasis } from '@civ-clone/base-terrain-feature-oasis/Oasis';\nexport { Oil } from '@civ-clone/base-terrain-feature-oil/Oil';\nexport { Seal } from '@civ-clone/base-terrain-feature-seal/Seal';\nexport { Shield } from '@civ-clone/base-terrain-feature-shield/Shield';\n", "import GoodyHut from '../GoodyHut';\nimport GoodyHutAction from '../Action';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Action extends Rule<[GoodyHut, Unit], GoodyHutAction> {}\n\nexport default Action;\n", "import GoodyHut from '../GoodyHut';\nimport GoodyHutAction from '../Action';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class ActionPerformed extends Rule<[GoodyHut, GoodyHutAction], void> {}\n\nexport default ActionPerformed;\n", "import GoodyHut from '../GoodyHut';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Discovered extends Rule<[GoodyHut, Unit], void> {}\n\nexport default Discovered;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Action from './Action';\nimport ActionRule from './Rules/Action';\nimport ActionPerformed from './Rules/ActionPerformed';\nimport Discovered from './Rules/Discovered';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport interface IGoodyHut extends IDataObject {\n  action(action: Action): void;\n  actions(unit: Unit): Action[];\n  process(unit: Unit): void;\n  tile(): Tile;\n}\n\nexport class GoodyHut extends DataObject implements IGoodyHut {\n  #ruleRegistry: RuleRegistry;\n  #tile: Tile;\n\n  constructor(tile: Tile, ruleRegistry: RuleRegistry = ruleRegistryInstance) {\n    super();\n\n    this.#ruleRegistry = ruleRegistry;\n    this.#tile = tile;\n\n    this.addKey('tile');\n  }\n\n  action(action: Action): void {\n    action.perform();\n\n    this.#ruleRegistry.process(ActionPerformed, this, action);\n  }\n\n  actions(unit: Unit): Action[] {\n    return this.#ruleRegistry.process(ActionRule, this, unit);\n  }\n\n  process(unit: Unit): void {\n    this.#ruleRegistry.process(Discovered, this, unit);\n  }\n\n  tile(): Tile {\n    return this.#tile;\n  }\n}\n\nexport default GoodyHut;\n", "import GoodyHut from './GoodyHut';\nimport {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport interface IGoodyHutRegistry extends IEntityRegistry<GoodyHut> {\n  getByTile(tile: Tile): GoodyHut | null;\n}\n\nexport class GoodyHutRegistry\n  extends EntityRegistry<GoodyHut>\n  implements IGoodyHutRegistry\n{\n  constructor() {\n    super(GoodyHut);\n  }\n\n  getByTile(tile: Tile): GoodyHut | null {\n    const goodyHuts = this.filter(\n      (goodyHut: GoodyHut): boolean => goodyHut.tile() === tile\n    );\n\n    if (goodyHuts.length === 0) {\n      return null;\n    }\n\n    return goodyHuts[0];\n  }\n}\n\nexport const instance: GoodyHutRegistry = new GoodyHutRegistry();\n\nexport default GoodyHutRegistry;\n", "import TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\n\nexport class Pollution extends TileImprovement {}\n\nexport default Pollution;\n", "export { Irrigation } from '@civ-clone/base-tile-improvement-irrigation/Irrigation';\nexport { Mine } from '@civ-clone/base-tile-improvement-mine/Mine';\nexport { Pollution } from '@civ-clone/base-tile-improvement-pollution/Pollution';\nexport { Road } from '@civ-clone/base-tile-improvement-road/Road';\nexport { Railroad } from '@civ-clone/base-tile-improvement-railroad/Railroad';\n", "import Path from './Path';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport interface IPathFinder {\n  end(): Tile;\n  generate(): Path;\n  start(): Tile;\n  unit(): Unit;\n}\n\nexport class PathFinder implements IPathFinder {\n  #end: Tile;\n  #start: Tile;\n  #unit: Unit;\n\n  constructor(unit: Unit, start: Tile, end: Tile) {\n    this.#end = end;\n    this.#start = start;\n    this.#unit = unit;\n  }\n\n  end(): Tile {\n    return this.#end;\n  }\n\n  generate(): Path {\n    throw new Error(\n      `PathFinder#generate: Must be overridden in '${this.constructor.name}'.`\n    );\n  }\n\n  start(): Tile {\n    return this.#start;\n  }\n\n  unit(): Unit {\n    return this.#unit;\n  }\n}\n\nexport default PathFinder;\n", "import {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\nimport PathFinder from './PathFinder';\n\nexport interface IPathFinder extends IConstructorRegistry<PathFinder> {}\n\nexport class PathFinderRegistry\n  extends ConstructorRegistry<PathFinder>\n  implements IPathFinder {\n  constructor() {\n    super(PathFinder);\n  }\n}\n\nexport const instance: PathFinderRegistry = new PathFinderRegistry();\n\nexport default PathFinderRegistry;\n", "import DataObject from '@civ-clone/core-data-object/DataObject';\n\nexport class Government extends DataObject {}\n\nexport default Government;\n", "import {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\nimport Government from './Government';\n\nexport interface IAvailableGovernmentRegistry\n  extends IConstructorRegistry<Government> {}\n\nexport class AvailableGovernmentRegistry\n  extends ConstructorRegistry<Government>\n  implements IAvailableGovernmentRegistry\n{\n  constructor() {\n    super(Government);\n  }\n}\n\nexport const instance = new AvailableGovernmentRegistry();\n\nexport default AvailableGovernmentRegistry;\n", "import Government from '../Government';\nimport Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Availability extends Rule<[typeof Government, Player], void> {}\n\nexport default Availability;\n", "import Government from '../Government';\nimport Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Changed extends Rule<[Player, Government], void> {}\n\nexport default Changed;\n", "import {\n  AvailableGovernmentRegistry,\n  instance as availableGovernmentRegistryInstance,\n} from './AvailableGovernmentRegistry';\nimport {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as rulesRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Availability from './Rules/Availability';\nimport Changed from './Rules/Changed';\nimport Government from './Government';\nimport Player from '@civ-clone/core-player/Player';\n\nexport interface IPlayerGovernment extends IDataObject {\n  available(): typeof Government[];\n  current(): Government | null;\n  is(...governments: typeof Government[]): boolean;\n  player(): Player;\n  set(government: Government): void;\n}\n\nexport class PlayerGovernment extends DataObject implements IPlayerGovernment {\n  #availableGovernmentRegistry: AvailableGovernmentRegistry;\n  #government: Government | null = null;\n  #player: Player;\n  #rulesRegistry: RuleRegistry;\n\n  constructor(\n    player: Player,\n    availableGovernmentRegistry: AvailableGovernmentRegistry = availableGovernmentRegistryInstance,\n    rulesRegistry: RuleRegistry = rulesRegistryInstance\n  ) {\n    super();\n\n    this.#player = player;\n    this.#availableGovernmentRegistry = availableGovernmentRegistry;\n    this.#rulesRegistry = rulesRegistry;\n\n    this.addKey('available', 'current');\n  }\n\n  available(): typeof Government[] {\n    return this.#availableGovernmentRegistry.filter(\n      (GovernmentType: typeof Government) =>\n        this.#rulesRegistry\n          .get(Availability)\n          .some((rule) => rule.validate(GovernmentType, this.#player))\n    );\n  }\n\n  current(): Government | null {\n    return this.#government;\n  }\n\n  is(...governments: typeof Government[]): boolean {\n    return governments.some(\n      (Government) => this.#government instanceof Government\n    );\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  set(government: Government): void {\n    this.#government = government;\n\n    this.#rulesRegistry.process(Changed, this.#player, government);\n  }\n}\n\nexport default PlayerGovernment;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerGovernment from './PlayerGovernment';\n\nexport interface IPlayerGovernmentRegistry\n  extends IEntityRegistry<PlayerGovernment> {\n  getByPlayer(player: Player): PlayerGovernment;\n}\n\nexport class PlayerGovernmentRegistry\n  extends EntityRegistry<PlayerGovernment>\n  implements IPlayerGovernmentRegistry\n{\n  constructor() {\n    super(PlayerGovernment);\n  }\n\n  getByPlayer(player: Player): PlayerGovernment {\n    const playerGovernments = this.getBy('player', player);\n\n    if (playerGovernments.length !== 1) {\n      throw new TypeError('Wrong number of PlayerGovernments for player.');\n    }\n\n    return playerGovernments[0];\n  }\n}\n\nexport const instance: PlayerGovernmentRegistry =\n  new PlayerGovernmentRegistry();\n\nexport default PlayerGovernmentRegistry;\n", "import { Client, IClient } from '@civ-clone/core-client/Client';\nimport {\n  LeaderRegistry,\n  instance as leaderRegistryInstance,\n} from '@civ-clone/core-civilization/LeaderRegistry';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Player from '@civ-clone/core-player/Player';\n\nexport interface IAIClient extends IClient {\n  chooseCivilization(choices: typeof Civilization[]): void;\n  chooseLeader(civilization: Civilization): void;\n}\n\nexport class AIClient extends Client implements IAIClient {\n  #leaderRegistry: LeaderRegistry;\n  #randomNumberGenerator: () => number;\n\n  constructor(\n    player: Player,\n    leaderRegistry: LeaderRegistry = leaderRegistryInstance,\n    randomNumberGenerator: () => number = () => Math.random()\n  ) {\n    super(player);\n\n    this.#leaderRegistry = leaderRegistry;\n    this.#randomNumberGenerator = randomNumberGenerator;\n  }\n\n  chooseCivilization(choices: typeof Civilization[]): void {\n    const Random =\n        choices[Math.floor(choices.length * this.#randomNumberGenerator())],\n      player = this.player(),\n      civilization = new Random();\n\n    player.setCivilization(civilization);\n\n    this.chooseLeader(civilization);\n  }\n\n  chooseLeader(civilization: Civilization): void {\n    const leaders = this.#leaderRegistry.getByCivilization(\n      civilization.constructor as IConstructor<Civilization>\n    );\n\n    const RandomLeader =\n      leaders[Math.floor(this.#randomNumberGenerator() * leaders.length)];\n\n    civilization.setLeader(new RandomLeader());\n  }\n}\n\nexport default AIClient;\n", "export { Fortified } from './UnitImprovements/Fortified';\n", "import UnitImprovement from '@civ-clone/core-unit-improvement/UnitImprovement';\n\nexport class Veteran extends UnitImprovement {}\n\nexport default Veteran;\n", "export { Veteran } from './UnitImprovements/Veteran';\n", "export { Fortified } from '@civ-clone/base-unit-improvement-fortified/UnitImprovements';\nexport { Veteran } from '@civ-clone/base-unit-improvement-veteran/UnitImprovements';\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class AdvancedFlight extends Advance {}\n\nexport default AdvancedFlight;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Alphabet extends Advance {}\n\nexport default Alphabet;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Astronomy extends Advance {}\n\nexport default Astronomy;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class AtomicTheory extends Advance {}\n\nexport default AtomicTheory;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Automobile extends Advance {}\n\nexport default Automobile;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Banking extends Advance {}\n\nexport default Banking;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class BridgeBuilding extends Advance {}\n\nexport default BridgeBuilding;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class BronzeWorking extends Advance {}\n\nexport default BronzeWorking;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class CeremonialBurial extends Advance {}\n\nexport default CeremonialBurial;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Chemistry extends Advance {}\n\nexport default Chemistry;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Chivalry extends Advance {}\n\nexport default Chivalry;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class CodeOfLaws extends Advance {}\n\nexport default CodeOfLaws;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Combustion extends Advance {}\n\nexport default Combustion;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Communism extends Advance {}\n\nexport default Communism;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Computers extends Advance {}\n\nexport default Computers;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Conscription extends Advance {}\n\nexport default Conscription;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Construction extends Advance {}\n\nexport default Construction;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Corporation extends Advance {}\n\nexport default Corporation;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Currency extends Advance {}\n\nexport default Currency;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Democracy extends Advance {}\n\nexport default Democracy;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Electricity extends Advance {}\n\nexport default Electricity;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Electronics extends Advance {}\n\nexport default Electronics;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Engineering extends Advance {}\n\nexport default Engineering;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Explosives extends Advance {}\n\nexport default Explosives;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Feudalism extends Advance {}\n\nexport default Feudalism;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Flight extends Advance {}\n\nexport default Flight;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class FusionPower extends Advance {}\n\nexport default FusionPower;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class GeneticEngineering extends Advance {}\n\nexport default GeneticEngineering;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Gunpowder extends Advance {}\n\nexport default Gunpowder;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class HorsebackRiding extends Advance {}\n\nexport default HorsebackRiding;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Industrialization extends Advance {}\n\nexport default Industrialization;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Invention extends Advance {}\n\nexport default Invention;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class IronWorking extends Advance {}\n\nexport default IronWorking;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class LaborUnion extends Advance {}\n\nexport default LaborUnion;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Literacy extends Advance {}\n\nexport default Literacy;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Magnetism extends Advance {}\n\nexport default Magnetism;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class MapMaking extends Advance {}\n\nexport default MapMaking;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Masonry extends Advance {}\n\nexport default Masonry;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class MassProduction extends Advance {}\n\nexport default MassProduction;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Mathematics extends Advance {}\n\nexport default Mathematics;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Medicine extends Advance {}\n\nexport default Medicine;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Metallurgy extends Advance {}\n\nexport default Metallurgy;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Monarchy extends Advance {}\n\nexport default Monarchy;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Mysticism extends Advance {}\n\nexport default Mysticism;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Navigation extends Advance {}\n\nexport default Navigation;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class NuclearFission extends Advance {}\n\nexport default NuclearFission;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class NuclearPower extends Advance {}\n\nexport default NuclearPower;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Philosophy extends Advance {}\n\nexport default Philosophy;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Physics extends Advance {}\n\nexport default Physics;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Plastics extends Advance {}\n\nexport default Plastics;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Pottery extends Advance {}\n\nexport default Pottery;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Railroad extends Advance {}\n\nexport default Railroad;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Recycling extends Advance {}\n\nexport default Recycling;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Refining extends Advance {}\n\nexport default Refining;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Religion extends Advance {}\n\nexport default Religion;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Robotics extends Advance {}\n\nexport default Robotics;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Rocketry extends Advance {}\n\nexport default Rocketry;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class SpaceFlight extends Advance {}\n\nexport default SpaceFlight;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class SteamEngine extends Advance {}\n\nexport default SteamEngine;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Steel extends Advance {}\n\nexport default Steel;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Superconductor extends Advance {}\n\nexport default Superconductor;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class TheRepublic extends Advance {}\n\nexport default TheRepublic;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class TheWheel extends Advance {}\n\nexport default TheWheel;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class TheoryOfGravity extends Advance {}\n\nexport default TheoryOfGravity;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Trade extends Advance {}\n\nexport default Trade;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class University extends Advance {}\n\nexport default University;\n", "import Advance from '@civ-clone/core-science/Advance';\n\nexport class Writing extends Advance {}\n\nexport default Writing;\n", "export { AdvancedFlight } from '@civ-clone/base-science-advance-advancedflight/AdvancedFlight';\nexport { Alphabet } from '@civ-clone/base-science-advance-alphabet/Alphabet';\nexport { Astronomy } from '@civ-clone/base-science-advance-astronomy/Astronomy';\nexport { AtomicTheory } from '@civ-clone/base-science-advance-atomictheory/AtomicTheory';\nexport { Automobile } from '@civ-clone/base-science-advance-automobile/Automobile';\nexport { Banking } from '@civ-clone/base-science-advance-banking/Banking';\nexport { BridgeBuilding } from '@civ-clone/base-science-advance-bridgebuilding/BridgeBuilding';\nexport { BronzeWorking } from '@civ-clone/base-science-advance-bronzeworking/BronzeWorking';\nexport { CeremonialBurial } from '@civ-clone/base-science-advance-ceremonialburial/CeremonialBurial';\nexport { Chemistry } from '@civ-clone/base-science-advance-chemistry/Chemistry';\nexport { Chivalry } from '@civ-clone/base-science-advance-chivalry/Chivalry';\nexport { CodeOfLaws } from '@civ-clone/base-science-advance-codeoflaws/CodeOfLaws';\nexport { Combustion } from '@civ-clone/base-science-advance-combustion/Combustion';\nexport { Communism } from '@civ-clone/base-science-advance-communism/Communism';\nexport { Computers } from '@civ-clone/base-science-advance-computers/Computers';\nexport { Conscription } from '@civ-clone/base-science-advance-conscription/Conscription';\nexport { Construction } from '@civ-clone/base-science-advance-construction/Construction';\nexport { Corporation } from '@civ-clone/base-science-advance-corporation/Corporation';\nexport { Currency } from '@civ-clone/base-science-advance-currency/Currency';\nexport { Democracy } from '@civ-clone/base-science-advance-democracy/Democracy';\nexport { Electricity } from '@civ-clone/base-science-advance-electricity/Electricity';\nexport { Electronics } from '@civ-clone/base-science-advance-electronics/Electronics';\nexport { Engineering } from '@civ-clone/base-science-advance-engineering/Engineering';\nexport { Explosives } from '@civ-clone/base-science-advance-explosives/Explosives';\nexport { Feudalism } from '@civ-clone/base-science-advance-feudalism/Feudalism';\nexport { Flight } from '@civ-clone/base-science-advance-flight/Flight';\nexport { FusionPower } from '@civ-clone/base-science-advance-fusionpower/FusionPower';\nexport { GeneticEngineering } from '@civ-clone/base-science-advance-geneticengineering/GeneticEngineering';\nexport { Gunpowder } from '@civ-clone/base-science-advance-gunpowder/Gunpowder';\nexport { HorsebackRiding } from '@civ-clone/base-science-advance-horsebackriding/HorsebackRiding';\nexport { Industrialization } from '@civ-clone/base-science-advance-industrialization/Industrialization';\nexport { Invention } from '@civ-clone/base-science-advance-invention/Invention';\nexport { IronWorking } from '@civ-clone/base-science-advance-ironworking/IronWorking';\nexport { LaborUnion } from '@civ-clone/base-science-advance-laborunion/LaborUnion';\nexport { Literacy } from '@civ-clone/base-science-advance-literacy/Literacy';\nexport { Magnetism } from '@civ-clone/base-science-advance-magnetism/Magnetism';\nexport { MapMaking } from '@civ-clone/base-science-advance-mapmaking/MapMaking';\nexport { Masonry } from '@civ-clone/base-science-advance-masonry/Masonry';\nexport { MassProduction } from '@civ-clone/base-science-advance-massproduction/MassProduction';\nexport { Mathematics } from '@civ-clone/base-science-advance-mathematics/Mathematics';\nexport { Medicine } from '@civ-clone/base-science-advance-medicine/Medicine';\nexport { Metallurgy } from '@civ-clone/base-science-advance-metallurgy/Metallurgy';\nexport { Monarchy } from '@civ-clone/base-science-advance-monarchy/Monarchy';\nexport { Mysticism } from '@civ-clone/base-science-advance-mysticism/Mysticism';\nexport { Navigation } from '@civ-clone/base-science-advance-navigation/Navigation';\nexport { NuclearFission } from '@civ-clone/base-science-advance-nuclearfission/NuclearFission';\nexport { NuclearPower } from '@civ-clone/base-science-advance-nuclearpower/NuclearPower';\nexport { Philosophy } from '@civ-clone/base-science-advance-philosophy/Philosophy';\nexport { Physics } from '@civ-clone/base-science-advance-physics/Physics';\nexport { Plastics } from '@civ-clone/base-science-advance-plastics/Plastics';\nexport { Pottery } from '@civ-clone/base-science-advance-pottery/Pottery';\nexport { Railroad } from '@civ-clone/base-science-advance-railroad/Railroad';\nexport { Recycling } from '@civ-clone/base-science-advance-recycling/Recycling';\nexport { Refining } from '@civ-clone/base-science-advance-refining/Refining';\nexport { Religion } from '@civ-clone/base-science-advance-religion/Religion';\nexport { Robotics } from '@civ-clone/base-science-advance-robotics/Robotics';\nexport { Rocketry } from '@civ-clone/base-science-advance-rocketry/Rocketry';\nexport { SpaceFlight } from '@civ-clone/base-science-advance-spaceflight/SpaceFlight';\nexport { SteamEngine } from '@civ-clone/base-science-advance-steamengine/SteamEngine';\nexport { Steel } from '@civ-clone/base-science-advance-steel/Steel';\nexport { Superconductor } from '@civ-clone/base-science-advance-superconductor/Superconductor';\nexport { TheRepublic } from '@civ-clone/base-science-advance-therepublic/TheRepublic';\nexport { TheWheel } from '@civ-clone/base-science-advance-thewheel/TheWheel';\nexport { TheoryOfGravity } from '@civ-clone/base-science-advance-theoryofgravity/TheoryOfGravity';\nexport { Trade } from '@civ-clone/base-science-advance-trade/Trade';\nexport { University } from '@civ-clone/base-science-advance-university/University';\nexport { Writing } from '@civ-clone/base-science-advance-writing/Writing';\n", "import Government from '@civ-clone/core-government/Government';\n\nexport class Anarchy extends Government {}\n\nexport default Anarchy;\n", "import Government from '@civ-clone/core-government/Government';\n\nexport class Communism extends Government {}\n\nexport default Communism;\n", "import Government from '@civ-clone/core-government/Government';\n\nexport class Democracy extends Government {}\n\nexport default Democracy;\n", "import Government from '@civ-clone/core-government/Government';\n\nexport class Despotism extends Government {}\n\nexport default Despotism;\n", "import Government from '@civ-clone/core-government/Government';\n\nexport class Monarchy extends Government {}\n\nexport default Monarchy;\n", "import Government from '@civ-clone/core-government/Government';\n\nexport class Republic extends Government {}\n\nexport default Republic;\n", "export { Anarchy } from '@civ-clone/base-government-anarchy/Anarchy';\nexport { Communism } from '@civ-clone/base-government-communism/Communism';\nexport { Democracy } from '@civ-clone/base-government-democracy/Democracy';\nexport { Despotism } from '@civ-clone/base-government-despotism/Despotism';\nexport { Monarchy } from '@civ-clone/base-government-monarchy/Monarchy';\nexport { Republic } from '@civ-clone/base-government-republic/Republic';\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Aqueduct extends CityImprovement {}\n\nexport default Aqueduct;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Bank extends CityImprovement {}\n\nexport default Bank;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Barracks extends CityImprovement {}\n\nexport default Barracks;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Cathedral extends CityImprovement {}\n\nexport default Cathedral;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class CityWalls extends CityImprovement {}\n\nexport default CityWalls;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Colosseum extends CityImprovement {}\n\nexport default Colosseum;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Courthouse extends CityImprovement {}\n\nexport default Courthouse;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Factory extends CityImprovement {}\n\nexport default Factory;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Granary extends CityImprovement {}\n\nexport default Granary;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class HydroPlant extends CityImprovement {}\n\nexport default HydroPlant;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Library extends CityImprovement {}\n\nexport default Library;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class ManufacturingPlant extends CityImprovement {}\n\nexport default ManufacturingPlant;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Marketplace extends CityImprovement {}\n\nexport default Marketplace;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class MassTransit extends CityImprovement {}\n\nexport default MassTransit;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class NuclearPlant extends CityImprovement {}\n\nexport default NuclearPlant;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Palace extends CityImprovement {}\n\nexport default Palace;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class PowerPlant extends CityImprovement {}\n\nexport default PowerPlant;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class RecyclingCenter extends CityImprovement {}\n\nexport default RecyclingCenter;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class SdiDefence extends CityImprovement {}\n\nexport default SdiDefence;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class Temple extends CityImprovement {}\n\nexport default Temple;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\n\nexport class University extends CityImprovement {}\n\nexport default University;\n", "export { Aqueduct } from '@civ-clone/base-city-improvement-aqueduct/Aqueduct';\nexport { Bank } from '@civ-clone/base-city-improvement-bank/Bank';\nexport { Barracks } from '@civ-clone/base-city-improvement-barracks/Barracks';\nexport { Cathedral } from '@civ-clone/base-city-improvement-cathedral/Cathedral';\nexport { CityWalls } from '@civ-clone/base-city-improvement-citywalls/CityWalls';\nexport { Colosseum } from '@civ-clone/base-city-improvement-colosseum/Colosseum';\nexport { Courthouse } from '@civ-clone/base-city-improvement-courthouse/Courthouse';\nexport { Factory } from '@civ-clone/base-city-improvement-factory/Factory';\nexport { Granary } from '@civ-clone/base-city-improvement-granary/Granary';\nexport { HydroPlant } from '@civ-clone/base-city-improvement-hydroplant/HydroPlant';\nexport { Library } from '@civ-clone/base-city-improvement-library/Library';\nexport { ManufacturingPlant } from '@civ-clone/base-city-improvement-manufacturingplant/ManufacturingPlant';\nexport { Marketplace } from '@civ-clone/base-city-improvement-marketplace/Marketplace';\nexport { MassTransit } from '@civ-clone/base-city-improvement-masstransit/MassTransit';\nexport { NuclearPlant } from '@civ-clone/base-city-improvement-nuclearplant/NuclearPlant';\nexport { Palace } from '@civ-clone/base-city-improvement-palace/Palace';\nexport { PowerPlant } from '@civ-clone/base-city-improvement-powerplant/PowerPlant';\nexport { RecyclingCenter } from '@civ-clone/base-city-improvement-recyclingcenter/RecyclingCenter';\nexport { SdiDefence } from '@civ-clone/base-city-improvement-sdidefence/SdiDefence';\nexport { Temple } from '@civ-clone/base-city-improvement-temple/Temple';\nexport { University } from '@civ-clone/base-city-improvement-university/University';\n", "import {\n  PathFinderRegistry,\n  instance as pathFinderRegistryInstance,\n} from './PathFinderRegistry';\nimport PathFinder from './PathFinder';\nimport Tile from '@civ-clone/core-world/Tile';\nimport { ITileset, Tileset } from '@civ-clone/core-world/Tileset';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport interface IPath extends ITileset {\n  end(): Tile;\n  movementCost(): number;\n  setMovementCost(movementCost: number): void;\n  start(): Tile;\n}\n\nexport class Path extends Tileset implements IPath {\n  #movementCost: number = Infinity;\n\n  end(): Tile {\n    return this.entries()[this.length - 1];\n  }\n\n  static for(\n    unit: Unit,\n    start: Tile,\n    end: Tile,\n    pathFinderRegistry: PathFinderRegistry = pathFinderRegistryInstance\n  ): Path {\n    // If there are lots of `PathFinder`s here, this could take aaages, so probably best to only have one registered at\n    // a time, but this mechanism avoids and hard-coding\n    const [path]: Path[] = pathFinderRegistry\n      .entries()\n      .map(\n        (PathFinderImplementation: typeof PathFinder): PathFinder =>\n          new PathFinderImplementation(unit, start, end)\n      )\n      .map((pathFinder: PathFinder): Path => pathFinder.generate())\n      .sort((a: Path, b: Path): number => a.movementCost() - b.movementCost());\n    if (!path) {\n      return path;\n    }\n\n    // the first tile is the source tile, so we can remove it.\n    path.shift();\n\n    return path;\n  }\n\n  movementCost(): number {\n    return this.#movementCost;\n  }\n\n  setMovementCost(movementCost: number): void {\n    this.#movementCost = movementCost;\n  }\n\n  push(...tiles: Tile[]) {\n    tiles.forEach((tile: Tile): void => {\n      const top: Tile = this.end();\n\n      if (this.length > 0 && !tile.isNeighbourOf(top)) {\n        throw new TypeError(\n          `Tile#push: Invalid element passed, ${tile.x()},${tile.y()} is not a neighbour of ${top.x()},${top.y()}.`\n        );\n      }\n\n      super.push(tile);\n    });\n  }\n\n  start(): Tile {\n    return this.entries()[0];\n  }\n}\n\nexport default Path;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Artillery extends Fortifiable {}\n\nexport default Artillery;\n", "import Naval from '@civ-clone/base-unit-type-naval/Naval';\n\nexport class Battleship extends Naval {}\n\nexport default Battleship;\n", "import Air from '@civ-clone/base-unit-type-air/Air';\n\nexport class Bomber extends Air {}\n\nexport default Bomber;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Cannon extends Fortifiable {}\n\nexport default Cannon;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Caravan extends Fortifiable {}\n\nexport default Caravan;\n", "import Air from '@civ-clone/base-unit-type-air/Air';\nimport NavalTransport from '@civ-clone/base-unit-type-naval-transport/NavalTransport';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Carrier extends NavalTransport {\n  canStow(unit: Unit): boolean {\n    return unit instanceof Air && super.canStow(unit);\n  }\n\n  capacity(): number {\n    return 8;\n  }\n}\n\nexport default Carrier;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Catapult extends Fortifiable {}\n\nexport default Catapult;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Chariot extends Fortifiable {}\n\nexport default Chariot;\n", "import Naval from '@civ-clone/base-unit-type-naval/Naval';\n\nexport class Cruiser extends Naval {}\n\nexport default Cruiser;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Diplomat extends Fortifiable {}\n\nexport default Diplomat;\n", "import Air from '@civ-clone/base-unit-type-air/Air';\n\nexport class Fighter extends Air {}\n\nexport default Fighter;\n", "import NavalTransport from '@civ-clone/base-unit-type-naval-transport/NavalTransport';\n\nexport class Frigate extends NavalTransport {\n  capacity(): number {\n    return 4;\n  }\n}\n\nexport default Frigate;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Horseman extends Fortifiable {}\n\nexport default Horseman;\n", "import Naval from '@civ-clone/base-unit-type-naval/Naval';\n\nexport class Ironclad extends Naval {}\n\nexport default Ironclad;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Knight extends Fortifiable {}\n\nexport default Knight;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class MechanizedInfantry extends Fortifiable {}\n\nexport default MechanizedInfantry;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Musketman extends Fortifiable {}\n\nexport default Musketman;\n", "import Air from '@civ-clone/base-unit-type-air/Air';\n\nexport class Nuclear extends Air {}\n\nexport default Nuclear;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Rifleman extends Fortifiable {}\n\nexport default Rifleman;\n", "import NavalTransport from '@civ-clone/base-unit-type-naval-transport/NavalTransport';\n\nexport class Sail extends NavalTransport {\n  capacity() {\n    return 3;\n  }\n}\n\nexport default Sail;\n", "import { Worker } from '@civ-clone/base-unit-type-worker/Worker';\n\nexport class Settlers extends Worker {}\n\nexport default Settlers;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Spearman extends Fortifiable {}\n\nexport default Spearman;\n", "import Naval from '@civ-clone/base-unit-type-naval/Naval';\n\nexport class Submarine extends Naval {}\n\nexport default Submarine;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Swordman extends Fortifiable {}\n\nexport default Swordman;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Tank extends Fortifiable {}\n\nexport default Tank;\n", "import NavalTransport from '@civ-clone/base-unit-type-naval-transport/NavalTransport';\n\nexport class Transport extends NavalTransport {\n  capacity() {\n    return 8;\n  }\n}\n\nexport default Transport;\n", "import NavalTransport from '@civ-clone/base-unit-type-naval-transport/NavalTransport';\n\nexport class Trireme extends NavalTransport {\n  capacity(): number {\n    return 2;\n  }\n}\n\nexport default Trireme;\n", "import { Fortifiable } from '@civ-clone/base-unit-type-fortifiable/Fortifiable';\n\nexport class Warrior extends Fortifiable {}\n\nexport default Warrior;\n", "export { Artillery } from '@civ-clone/base-unit-artillery/Artillery';\nexport { Battleship } from '@civ-clone/base-unit-battleship/Battleship';\nexport { Bomber } from '@civ-clone/base-unit-bomber/Bomber';\nexport { Cannon } from '@civ-clone/base-unit-cannon/Cannon';\nexport { Caravan } from '@civ-clone/base-unit-caravan/Caravan';\nexport { Carrier } from '@civ-clone/base-unit-carrier/Carrier';\nexport { Catapult } from '@civ-clone/base-unit-catapult/Catapult';\nexport { Chariot } from '@civ-clone/base-unit-chariot/Chariot';\nexport { Cruiser } from '@civ-clone/base-unit-cruiser/Cruiser';\nexport { Diplomat } from '@civ-clone/base-unit-diplomat/Diplomat';\nexport { Fighter } from '@civ-clone/base-unit-fighter/Fighter';\nexport { Frigate } from '@civ-clone/base-unit-frigate/Frigate';\nexport { Horseman } from '@civ-clone/base-unit-horseman/Horseman';\nexport { Ironclad } from '@civ-clone/base-unit-ironclad/Ironclad';\nexport { Knight } from '@civ-clone/base-unit-knight/Knight';\nexport { MechanizedInfantry } from '@civ-clone/base-unit-mechanizedinfantry/MechanizedInfantry';\nexport { Musketman } from '@civ-clone/base-unit-musketman/Musketman';\nexport { Nuclear } from '@civ-clone/base-unit-nuclear/Nuclear';\nexport { Rifleman } from '@civ-clone/base-unit-rifleman/Rifleman';\nexport { Sail } from '@civ-clone/base-unit-sail/Sail';\nexport { Settlers } from '@civ-clone/base-unit-settlers/Settlers';\nexport { Spearman } from '@civ-clone/base-unit-spearman/Spearman';\nexport { Submarine } from '@civ-clone/base-unit-submarine/Submarine';\nexport { Swordman } from '@civ-clone/base-unit-swordman/Swordman';\nexport { Tank } from '@civ-clone/base-unit-tank/Tank';\nexport { Transport } from '@civ-clone/base-unit-transport/Transport';\nexport { Trireme } from '@civ-clone/base-unit-trireme/Trireme';\nexport { Warrior } from '@civ-clone/base-unit-warrior/Warrior';\n", "import { Attack, Defence } from '@civ-clone/core-unit/Yields';\nimport {\n  Attack as AttackAction,\n  BuildIrrigation,\n  BuildMine,\n  BuildRoad,\n  CaptureCity,\n  Disembark,\n  Embark,\n  Fortify,\n  FoundCity,\n  Move,\n  NoOrders,\n  Unload,\n} from '@civ-clone/civ1-unit/Actions';\nimport {\n  CityBuildRegistry,\n  instance as cityBuildRegistryInstance,\n} from '@civ-clone/core-city-build/CityBuildRegistry';\nimport {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  Desert,\n  Grassland,\n  Hills,\n  Mountains,\n  Plains,\n  River,\n} from '@civ-clone/civ1-world/Terrains';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport { Food, Production, Trade } from '@civ-clone/civ1-world/Yields';\nimport {\n  Fortifiable,\n  Land,\n  Naval,\n  NavalTransport,\n  Worker,\n} from '@civ-clone/civ1-unit/Types';\nimport { Game, Oasis } from '@civ-clone/civ1-world/TerrainFeatures';\nimport {\n  GoodyHutRegistry,\n  instance as goodyHutRegistryInstance,\n} from '@civ-clone/core-goody-hut/GoodyHutRegistry';\nimport { Irrigation, Mine, Road } from '@civ-clone/civ1-world/TileImprovements';\nimport {\n  LeaderRegistry,\n  instance as leaderRegistryInstance,\n} from '@civ-clone/core-civilization/LeaderRegistry';\nimport {\n  PathFinderRegistry,\n  instance as pathFinderRegistryInstance,\n} from '@civ-clone/core-world-path/PathFinderRegistry';\nimport {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '@civ-clone/core-government/PlayerGovernmentRegistry';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  PlayerTreasuryRegistry,\n  instance as playerTreasuryRegistryInstance,\n} from '@civ-clone/core-treasury/PlayerTreasuryRegistry';\nimport {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '@civ-clone/core-terrain-feature/TerrainFeatureRegistry';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport {\n  UnitImprovementRegistry,\n  instance as unitImprovementRegistryInstance,\n} from '@civ-clone/core-unit-improvement/UnitImprovementRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Action from '@civ-clone/core-unit/Action';\nimport AIClient from '@civ-clone/core-ai-client/AIClient';\nimport { BaseYield } from '@civ-clone/core-unit/Rules/Yield';\nimport BuildItem from '@civ-clone/core-city-build/BuildItem';\nimport Buildable from '@civ-clone/core-city-build/Buildable';\nimport City from '@civ-clone/core-city/City';\nimport CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport EndTurn from '@civ-clone/base-player-action-end-turn/EndTurn';\nimport { Fortified } from '@civ-clone/civ1-unit/UnitImprovements';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport { Monarchy as MonarchyAdvance } from '@civ-clone/civ1-science/Advances';\nimport { Monarchy as MonarchyGovernment } from '@civ-clone/civ1-government/Governments';\nimport { Palace } from '@civ-clone/civ1-city-improvement/CityImprovements';\nimport Path from '@civ-clone/core-world-path/Path';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerResearch from '@civ-clone/core-science/PlayerResearch';\nimport PlayerTile from '@civ-clone/core-player-world/PlayerTile';\nimport { Settlers } from '@civ-clone/civ1-unit/Units';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitImprovement from '@civ-clone/core-unit-improvement/UnitImprovement';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport assignWorkers from '@civ-clone/civ1-city/lib/assignWorkers';\n\ntype ActionLookup = {\n  attack?: AttackAction;\n  buildIrrigation?: BuildIrrigation;\n  buildMine?: BuildMine;\n  buildRoad?: BuildRoad;\n  captureCity?: CaptureCity;\n  disembark?: Disembark;\n  embark?: Embark;\n  fortify?: Fortify;\n  foundCity?: FoundCity;\n  noOrders?: NoOrders;\n  unload?: Unload;\n};\n\nconst hasPlayerCity = (\n  tile: Tile,\n  player: Player,\n  cityRegistry: CityRegistry = cityRegistryInstance\n): boolean => {\n  const city = cityRegistry.getByTile(tile);\n\n  if (city === null) {\n    return false;\n  }\n\n  return city.player() === player;\n};\n\nexport class SimpleAIClient extends AIClient {\n  #shouldBuildCity = (tile: Tile): boolean => {\n    const isEarth = this.#engine.option('earth', false),\n      hasNoCities = this.#cityRegistry.getByPlayer(this.player()).length === 0;\n\n    if (isEarth && hasNoCities) {\n      return true;\n    }\n\n    const terrainFeatures = this.#terrainFeatureRegistry.getByTerrain(\n      tile.terrain()\n    );\n\n    return (\n      (tile.terrain() instanceof Grassland ||\n        tile.terrain() instanceof River ||\n        tile.terrain() instanceof Plains ||\n        terrainFeatures.some(\n          (feature: TerrainFeature): boolean => feature instanceof Oasis\n        ) ||\n        terrainFeatures.some(\n          (feature: TerrainFeature): boolean => feature instanceof Game\n        )) &&\n      tile.getSurroundingArea().score(this.player(), [\n        [Food, 4],\n        [Production, 2],\n        [Trade, 1],\n      ]) >= 160 &&\n      !tile\n        .getSurroundingArea(4)\n        .filter(\n          (tile: Tile): boolean => this.#cityRegistry.getByTile(tile) !== null\n        ).length\n    );\n  };\n\n  #shouldIrrigate = (tile: Tile): boolean => {\n    return (\n      [Desert, Plains, Grassland, River].some(\n        (TerrainType) => tile.terrain() instanceof TerrainType\n      ) &&\n      // TODO: doing this a lot already, need to make improvements a value object with a helper method\n      !this.#tileImprovementRegistry\n        .getByTile(tile)\n        .some(\n          (improvement: TileImprovement): boolean =>\n            improvement instanceof Irrigation\n        ) &&\n      tile\n        .getSurroundingArea()\n        .some((tile: Tile): boolean =>\n          hasPlayerCity(tile, this.player(), this.#cityRegistry)\n        ) &&\n      [...tile.getAdjacent(), tile].some(\n        (tile: Tile): boolean =>\n          tile.terrain() instanceof River ||\n          tile.isCoast() ||\n          (this.#tileImprovementRegistry\n            .getByTile(tile)\n            .some(\n              (improvement: TileImprovement): boolean =>\n                improvement instanceof Irrigation\n            ) &&\n            this.#cityRegistry.getByTile(tile) === null)\n      )\n    );\n  };\n\n  #shouldMine = (tile: Tile): boolean => {\n    return (\n      [Hills, Mountains].some(\n        (TerrainType: typeof Terrain): boolean =>\n          tile.terrain() instanceof TerrainType\n      ) &&\n      !this.#tileImprovementRegistry\n        .getByTile(tile)\n        .some(\n          (improvement: TileImprovement): boolean => improvement instanceof Mine\n        ) &&\n      tile\n        .getSurroundingArea()\n        .some((tile: Tile): boolean =>\n          hasPlayerCity(tile, this.player(), this.#cityRegistry)\n        )\n    );\n  };\n\n  #shouldRoad = (tile: Tile): boolean => {\n    return (\n      !this.#tileImprovementRegistry\n        .getByTile(tile)\n        .some(\n          (improvement: TileImprovement): boolean => improvement instanceof Road\n        ) &&\n      tile\n        .getSurroundingArea()\n        .some((tile: Tile): boolean =>\n          hasPlayerCity(tile, this.player(), this.#cityRegistry)\n        )\n    );\n  };\n\n  #lastUnitMoves: Map<Unit, Tile[]> = new Map();\n  #unitPathData: Map<Unit, Path> = new Map();\n  #unitTargetData: Map<Unit, Tile> = new Map();\n\n  // TODO: could be `City`/`Unit`s?\n  #citiesToLiberate: Tile[] = [];\n  #enemyCitiesToAttack: Tile[] = [];\n  #enemyUnitsToAttack: Tile[] = [];\n  #goodSitesForCities: Tile[] = [];\n  #landTilesToExplore: Tile[] = [];\n  #seaTilesToExplore: Tile[] = [];\n  #undefendedCities: Tile[] = [];\n\n  #cityRegistry: CityRegistry;\n  #cityBuildRegistry: CityBuildRegistry;\n  #cityGrowthRegistry: CityGrowthRegistry;\n  #goodyHutRegistry: GoodyHutRegistry;\n  #pathFinderRegistry: PathFinderRegistry;\n  #playerGovernmentRegistry: PlayerGovernmentRegistry;\n  #playerResearchRegistry: PlayerResearchRegistry;\n  #playerTreasuryRegistry: PlayerTreasuryRegistry;\n  #playerWorldRegistry: PlayerWorldRegistry;\n  #ruleRegistry: RuleRegistry;\n  #terrainFeatureRegistry: TerrainFeatureRegistry;\n  #tileImprovementRegistry: TileImprovementRegistry;\n  #unitImprovementRegistry: UnitImprovementRegistry;\n  #unitRegistry: UnitRegistry;\n  #engine: Engine;\n\n  constructor(\n    player: Player,\n    cityRegistry: CityRegistry = cityRegistryInstance,\n    cityBuildRegistry: CityBuildRegistry = cityBuildRegistryInstance,\n    cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n    goodyHutRegistry: GoodyHutRegistry = goodyHutRegistryInstance,\n    leaderRegistry: LeaderRegistry = leaderRegistryInstance,\n    pathFinderRegistry: PathFinderRegistry = pathFinderRegistryInstance,\n    playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance,\n    playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n    playerTreasuryRegistry: PlayerTreasuryRegistry = playerTreasuryRegistryInstance,\n    playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance,\n    tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n    unitImprovementRegistry: UnitImprovementRegistry = unitImprovementRegistryInstance,\n    unitRegistry: UnitRegistry = unitRegistryInstance,\n    engine: Engine = engineInstance\n  ) {\n    super(player, leaderRegistry);\n\n    this.#cityRegistry = cityRegistry;\n    this.#cityBuildRegistry = cityBuildRegistry;\n    this.#cityGrowthRegistry = cityGrowthRegistry;\n    this.#goodyHutRegistry = goodyHutRegistry;\n    this.#pathFinderRegistry = pathFinderRegistry;\n    this.#playerGovernmentRegistry = playerGovernmentRegistry;\n    this.#playerResearchRegistry = playerResearchRegistry;\n    this.#playerTreasuryRegistry = playerTreasuryRegistry;\n    this.#playerWorldRegistry = playerWorldRegistry;\n    this.#ruleRegistry = ruleRegistry;\n    this.#terrainFeatureRegistry = terrainFeatureRegistry;\n    this.#unitImprovementRegistry = unitImprovementRegistry;\n    this.#tileImprovementRegistry = tileImprovementRegistry;\n    this.#unitRegistry = unitRegistry;\n    this.#engine = engine;\n  }\n\n  scoreUnitMove(unit: Unit, tile: Tile): number {\n    const actions = unit.actions(tile),\n      {\n        attack,\n        buildIrrigation,\n        buildMine,\n        buildRoad,\n        captureCity,\n        disembark,\n        embark,\n        fortify,\n        foundCity,\n        noOrders,\n      } = actions.reduce(\n        (object: ActionLookup, entity: Action): ActionLookup => ({\n          ...object,\n          [entity.constructor.name.replace(/^./, (char: string): string =>\n            char.toLowerCase()\n          )]: entity,\n        }),\n        {}\n      );\n\n    if (\n      !actions.length ||\n      (actions.length === 1 && noOrders) ||\n      (unit instanceof Fortifiable &&\n        actions.length === 2 &&\n        fortify &&\n        noOrders)\n    ) {\n      return -1;\n    }\n\n    let score = 0;\n\n    const goodyHut = this.#goodyHutRegistry.getByTile(tile);\n\n    if (goodyHut !== null) {\n      score += 60;\n    }\n\n    if (\n      (foundCity && this.#shouldBuildCity(tile)) ||\n      (buildMine && this.#shouldMine(tile)) ||\n      (buildIrrigation && this.#shouldIrrigate(tile)) ||\n      (buildRoad && this.#shouldRoad(tile))\n    ) {\n      score += 24;\n    }\n\n    const tileUnits = this.#unitRegistry\n        .getByTile(tile)\n        .sort(\n          (a: Unit, b: Unit): number =>\n            b.defence().value() - a.defence().value()\n        ),\n      [defender] = tileUnits,\n      ourUnitsOnTile = tileUnits.some(\n        (unit: Unit) => unit.player() === this.player()\n      );\n\n    if (\n      unit instanceof NavalTransport &&\n      unit.hasCapacity() &&\n      tileUnits.length &&\n      ourUnitsOnTile\n    ) {\n      score += 10;\n    }\n\n    if (\n      unit instanceof NavalTransport &&\n      unit.hasCargo() &&\n      tile.isCoast() &&\n      tile.isWater()\n    ) {\n      score += 16;\n    }\n\n    if (embark) {\n      score += 16;\n    }\n\n    // TODO: move to far off continents\n    if (disembark /* && tile.continentId !== unit.departureContinentId*/) {\n      score += 16;\n    }\n\n    if (captureCity) {\n      score += 100;\n    }\n\n    // TODO: weight attacking dependent on leader's personality\n    if (attack && unit.attack() > defender.defence()) {\n      score += 24 * (unit.attack().value() - defender.defence().value());\n    }\n\n    if (attack && unit.attack().value() >= defender.defence().value()) {\n      score += 16;\n    }\n\n    // add some jeopardy\n    if (\n      attack &&\n      unit.attack().value() >= defender.defence().value() * (2 / 3)\n    ) {\n      score += 8;\n    }\n\n    const playerWorld = this.#playerWorldRegistry.getByPlayer(this.player());\n\n    const discoverableTiles = tile\n      .getNeighbours()\n      .filter(\n        (neighbouringTile: Tile): boolean =>\n          !playerWorld.includes(neighbouringTile)\n      ).length;\n\n    if (discoverableTiles > 0) {\n      score += discoverableTiles * 3;\n    }\n\n    const target = this.#unitTargetData.get(unit);\n\n    if (\n      target instanceof Tile &&\n      tile.distanceFrom(target) < unit.tile().distanceFrom(target)\n    ) {\n      score += 14;\n    }\n\n    const lastMoves = this.#lastUnitMoves.get(unit) || [];\n\n    if (!lastMoves.includes(tile)) {\n      score *= 4;\n    }\n\n    return score;\n  }\n\n  moveUnit(unit: Unit): void {\n    let loopCheck = 0;\n\n    while (unit.active() && unit.moves().value() >= 0.1) {\n      if (loopCheck++ > 1e3) {\n        console.log('SimpleAIClient#moveUnit: loopCheck: aborting');\n        console.log(\n          `${unit.player().civilization().name()} ${unit.constructor.name}`\n        );\n        console.log(unit.actions());\n        console.log(unit.actionsForNeighbours());\n        unit.action(new NoOrders(unit.tile(), unit.tile(), unit));\n\n        return;\n      }\n\n      const path = this.#unitPathData.get(unit);\n\n      if (path) {\n        const target = path.shift(),\n          [move] = unit\n            .actions(target)\n            .filter((action) => action instanceof Move);\n        if (move) {\n          unit.action(move);\n\n          if (path.length === 0) {\n            this.#unitPathData.delete(unit);\n          }\n\n          return;\n        }\n\n        if (path.length > 0) {\n          const newPath = Path.for(unit, unit.tile(), path.end());\n\n          if (newPath) {\n            this.#unitPathData.set(unit, newPath);\n\n            // restart the loop\n            continue;\n          }\n        }\n\n        this.#unitPathData.delete(unit);\n      }\n\n      const [target] = unit\n        .tile()\n        .getNeighbours()\n        .map((tile: Tile): [Tile, number] => [\n          tile,\n          this.scoreUnitMove(unit, tile),\n        ])\n        .filter(([, score]: [Tile, number]): boolean => score > -1)\n        .sort(\n          ([, a]: [Tile, number], [, b]: [Tile, number]): number =>\n            b - a ||\n            // if there's no difference, sort randomly\n            Math.floor(Math.random() * 3) - 1\n        )\n        .map(([tile]: [Tile, number]): Tile => tile);\n\n      if (!target) {\n        // TODO: could do something a bit more intelligent here\n        unit.action(new NoOrders(unit.tile(), unit.tile(), unit));\n\n        return;\n      }\n\n      const actions = unit.actions(target),\n        [action] = actions,\n        lastMoves = this.#lastUnitMoves.get(unit) || [],\n        currentTarget = this.#unitTargetData.get(unit);\n\n      if (!action) {\n        // TODO: could do something a bit more intelligent here\n        unit.action(new NoOrders(unit.tile(), unit.tile(), unit));\n\n        return;\n      }\n\n      if (currentTarget === target) {\n        this.#unitTargetData.delete(unit);\n      }\n\n      lastMoves.push(target);\n\n      this.#lastUnitMoves.set(unit, lastMoves.slice(-50));\n\n      unit.action(action);\n    }\n\n    // If we're here, we still have some moves left, lets clear them up.\n    // TODO: This might not be necessary, just remove all checks for >= .1 moves left...\n    if (unit.moves().value() > 0) {\n      unit.action(new NoOrders(unit.tile(), unit.tile(), unit));\n    }\n  }\n\n  preProcessTurn(): void {\n    this.#citiesToLiberate.splice(0);\n    this.#enemyCitiesToAttack.splice(0);\n    this.#enemyUnitsToAttack.splice(0);\n    this.#goodSitesForCities.splice(0);\n    this.#landTilesToExplore.splice(0);\n    this.#seaTilesToExplore.splice(0);\n    this.#undefendedCities.splice(0);\n    const playerWorld = this.#playerWorldRegistry.getByPlayer(this.player());\n\n    playerWorld.entries().forEach((playerTile: PlayerTile): void => {\n      const tile = playerTile.tile(),\n        tileCity = this.#cityRegistry.getByTile(tile),\n        tileUnits = this.#unitRegistry.getBy('tile', tile),\n        existingTarget =\n          this.#undefendedCities.includes(tile) &&\n          ![\n            ...this.#unitTargetData.values(),\n            ...[...this.#unitPathData.values()].map(\n              (path: Path): Tile => path.end()\n            ),\n          ].includes(tile);\n\n      if (\n        tileCity &&\n        tileCity.player() === this.player() &&\n        !tileUnits.length &&\n        !this.#undefendedCities.includes(tile) &&\n        !existingTarget\n      ) {\n        this.#undefendedCities.push(tile);\n      }\n      // TODO: when diplomacy exists, check diplomatic status with player\n      else if (\n        tileCity &&\n        tileCity.player() !== this.player() &&\n        tileCity.originalPlayer() === this.player()\n      ) {\n        this.#citiesToLiberate.push(tile);\n      } else if (\n        tileCity &&\n        tileCity.player() !== this.player() &&\n        !this.#enemyCitiesToAttack.includes(tile)\n      ) {\n        this.#enemyCitiesToAttack.push(tile);\n      } else if (\n        tileUnits.length &&\n        tileUnits.some(\n          (unit: Unit): boolean => unit.player() !== this.player()\n        ) &&\n        this.#enemyUnitsToAttack.includes(tile)\n      ) {\n        this.#enemyUnitsToAttack.push(tile);\n      } else if (\n        tile.isLand() &&\n        tile\n          .getNeighbours()\n          .some((tile: Tile): boolean => !playerWorld.includes(tile)) &&\n        !this.#landTilesToExplore.includes(tile) &&\n        !existingTarget\n      ) {\n        this.#landTilesToExplore.push(tile);\n      } else if (\n        tile.isWater() &&\n        tile\n          .getNeighbours()\n          .some((tile: Tile): boolean => !playerWorld.includes(tile)) &&\n        this.#seaTilesToExplore.includes(tile) &&\n        !existingTarget\n      ) {\n        this.#seaTilesToExplore.push(tile);\n      }\n\n      if (\n        this.#shouldBuildCity(tile) &&\n        this.#goodSitesForCities.includes(tile) &&\n        !existingTarget\n      ) {\n        this.#goodSitesForCities.push(tile);\n      }\n    });\n\n    this.#cityRegistry\n      .getByPlayer(this.player())\n      .forEach((city: City): void => {\n        const tileUnits = this.#unitRegistry.getByTile(city.tile());\n\n        assignWorkers(\n          city,\n          this.#playerWorldRegistry,\n          this.#cityGrowthRegistry\n        );\n\n        if (\n          !tileUnits.length &&\n          !this.#undefendedCities.includes(city.tile())\n        ) {\n          this.#undefendedCities.push(city.tile());\n        }\n      });\n  }\n\n  takeTurn(): Promise<void> {\n    return new Promise(\n      (resolve: () => void, reject: (error: Error) => any): void => {\n        try {\n          let loopCheck = 0;\n\n          this.preProcessTurn();\n\n          const [playerGovernment] = this.#playerGovernmentRegistry.filter(\n              (playerGovernment) => playerGovernment.player() === this.player()\n            ),\n            [playerResearch] = this.#playerResearchRegistry.filter(\n              (playerScience) => playerScience.player() === this.player()\n            );\n          if (\n            playerResearch.completed(MonarchyAdvance) &&\n            !playerGovernment.is(MonarchyGovernment)\n          ) {\n            playerGovernment.set(new MonarchyGovernment());\n          }\n\n          while (this.player().hasMandatoryActions()) {\n            const action = this.player().mandatoryAction(),\n              item = action.value();\n\n            // TODO: Remove this when it's working as expected\n            if (loopCheck++ > 1e3) {\n              // TODO: raise warning - notification?\n              console.log('');\n              console.log('');\n              console.log(item);\n\n              if (item instanceof Unit) {\n                console.log(item.actions());\n                item\n                  .tile()\n                  .getNeighbours()\n                  .forEach((tile: Tile): void =>\n                    console.log(item.actions(tile))\n                  );\n                console.log(item.active());\n                console.log(item.busy());\n                console.log(item.moves().value());\n                console.log(this.#unitImprovementRegistry.getByUnit(item));\n              }\n\n              // Do nothing, but shout about it\n              item.action(new NoOrders(item.tile(), item.tile(), item));\n\n              console.error(\"SimpleAIClient: Couldn't pick an action to do.\");\n\n              break;\n            }\n\n            if (item instanceof Unit) {\n              const unit = item,\n                tile = unit.tile(),\n                target = this.#unitTargetData.get(unit),\n                actions = unit.actions(),\n                {\n                  buildIrrigation,\n                  buildMine,\n                  buildRoad,\n                  fortify,\n                  foundCity,\n                  unload,\n                } = actions.reduce(\n                  (object: ActionLookup, entity: Action): ActionLookup => ({\n                    ...object,\n                    [entity.constructor.name.replace(/^./, (char) =>\n                      char.toLowerCase()\n                    )]: entity,\n                  }),\n                  {}\n                ),\n                tileUnits = this.#unitRegistry.getByTile(tile),\n                lastUnitMoves = this.#lastUnitMoves.get(unit);\n\n              if (!lastUnitMoves) {\n                this.#lastUnitMoves.set(unit, [unit.tile()]);\n              }\n\n              if (\n                unit instanceof NavalTransport &&\n                unload &&\n                tile.isCoast() &&\n                unit\n                  .cargo()\n                  .some(\n                    (unit: Unit): boolean =>\n                      !tile\n                        .getNeighbours()\n                        .some((tile: Tile): boolean =>\n                          (this.#lastUnitMoves.get(unit) || []).includes(tile)\n                        )\n                  )\n              ) {\n                unit.action(unload);\n\n                unit.setWaiting();\n\n                // skip out to allow the unloaded units to be moved.\n                continue;\n              }\n\n              if (unit instanceof Worker) {\n                if (foundCity && this.#shouldBuildCity(tile)) {\n                  unit.action(foundCity);\n                } else if (buildIrrigation && this.#shouldIrrigate(tile)) {\n                  unit.action(buildIrrigation);\n                } else if (buildMine && this.#shouldMine(tile)) {\n                  unit.action(buildMine);\n                } else if (buildRoad && this.#shouldRoad(tile)) {\n                  unit.action(buildRoad);\n                } else if (!target && this.#goodSitesForCities.length) {\n                  this.#unitTargetData.set(\n                    unit,\n                    this.#goodSitesForCities.shift() as Tile\n                  );\n                }\n\n                this.moveUnit(unit);\n\n                continue;\n              }\n\n              // TODO: check for defense values and activate weaker for disband/upgrade/scouting\n              const [cityUnitWithLowerDefence] = tileUnits.filter(\n                  (tileUnit: Unit): boolean =>\n                    this.#unitImprovementRegistry\n                      .getByUnit(tileUnit)\n                      .some(\n                        (improvement: UnitImprovement): boolean =>\n                          improvement instanceof Fortified\n                      ) && unit.defence() > tileUnit.defence()\n                ),\n                city = this.#cityRegistry.getByTile(tile);\n\n              if (\n                fortify &&\n                city &&\n                (cityUnitWithLowerDefence ||\n                  tileUnits.length <=\n                    Math.ceil(\n                      this.#cityGrowthRegistry.getByCity(city).size() / 5\n                    ))\n              ) {\n                unit.action(fortify);\n\n                if (cityUnitWithLowerDefence) {\n                  cityUnitWithLowerDefence.activate();\n                }\n\n                continue;\n              }\n\n              if (!target) {\n                // TODO: all the repetition - sort this.\n                if (\n                  unit instanceof Fortifiable &&\n                  unit.defence().value() > 0 &&\n                  this.#undefendedCities.length > 0\n                ) {\n                  const [targetTile] = this.#undefendedCities.sort(\n                      (a: Tile, b: Tile): number =>\n                        a.distanceFrom(unit.tile()) -\n                        b.distanceFrom(unit.tile())\n                    ),\n                    path = Path.for(\n                      unit,\n                      unit.tile(),\n                      targetTile,\n                      this.#pathFinderRegistry\n                    );\n\n                  if (path) {\n                    this.#undefendedCities.splice(\n                      this.#undefendedCities.indexOf(targetTile),\n                      1\n                    );\n                    this.#unitPathData.set(unit, path);\n                  }\n                } else if (\n                  unit.attack().value() > 0 &&\n                  this.#citiesToLiberate.length > 0\n                ) {\n                  const [targetTile] = this.#citiesToLiberate\n                      .filter(\n                        (tile: Tile): boolean =>\n                          unit instanceof Land && tile.isLand()\n                      )\n                      .sort(\n                        (a: Tile, b: Tile): number =>\n                          a.distanceFrom(unit.tile()) -\n                          b.distanceFrom(unit.tile())\n                      ),\n                    path = Path.for(\n                      unit as Unit,\n                      unit.tile(),\n                      targetTile,\n                      this.#pathFinderRegistry\n                    );\n\n                  if (path) {\n                    this.#citiesToLiberate.splice(\n                      this.#citiesToLiberate.indexOf(targetTile),\n                      1\n                    );\n                    this.#unitPathData.set(unit as Unit, path);\n                  }\n                } else if (\n                  unit.attack().value() > 0 &&\n                  this.#enemyUnitsToAttack.length > 0\n                ) {\n                  const [targetTile] = this.#enemyUnitsToAttack\n                      .filter(\n                        (tile: Tile): boolean =>\n                          (unit instanceof Land && tile.isLand()) ||\n                          (unit instanceof Naval && tile.isWater())\n                      )\n                      .sort(\n                        (a: Tile, b: Tile): number =>\n                          a.distanceFrom(unit.tile()) -\n                          b.distanceFrom(unit.tile())\n                      ),\n                    path = Path.for(\n                      unit as Unit,\n                      unit.tile(),\n                      targetTile,\n                      this.#pathFinderRegistry\n                    );\n\n                  if (path) {\n                    this.#enemyUnitsToAttack.splice(\n                      this.#enemyUnitsToAttack.indexOf(targetTile),\n                      1\n                    );\n                    this.#unitPathData.set(unit as Unit, path);\n                  }\n                } else if (\n                  unit instanceof Land &&\n                  unit.attack().value() > 0 &&\n                  this.#enemyCitiesToAttack.length > 0\n                ) {\n                  const [targetTile] = this.#enemyCitiesToAttack.sort(\n                      (a: Tile, b: Tile): number =>\n                        a.distanceFrom(unit.tile()) -\n                        b.distanceFrom(unit.tile())\n                    ),\n                    path = Path.for(\n                      unit,\n                      unit.tile(),\n                      targetTile,\n                      this.#pathFinderRegistry\n                    );\n\n                  if (path) {\n                    this.#enemyCitiesToAttack.splice(\n                      this.#enemyCitiesToAttack.indexOf(targetTile),\n                      1\n                    );\n                    this.#unitPathData.set(unit, path);\n                  }\n                } else if (\n                  unit instanceof Land &&\n                  this.#landTilesToExplore.length > 0\n                ) {\n                  const [targetTile] = this.#landTilesToExplore.sort(\n                      (a: Tile, b: Tile): number =>\n                        a.distanceFrom(unit.tile()) -\n                        b.distanceFrom(unit.tile())\n                    ),\n                    path = Path.for(\n                      unit,\n                      unit.tile(),\n                      targetTile,\n                      this.#pathFinderRegistry\n                    );\n\n                  if (path) {\n                    this.#landTilesToExplore.splice(\n                      this.#landTilesToExplore.indexOf(targetTile),\n                      1\n                    );\n                    this.#unitPathData.set(unit, path);\n                  }\n                } else if (\n                  unit instanceof Naval &&\n                  this.#seaTilesToExplore.length > 0\n                ) {\n                  const [targetTile] = this.#seaTilesToExplore.sort(\n                      (a: Tile, b: Tile): number =>\n                        a.distanceFrom(unit.tile()) -\n                        b.distanceFrom(unit.tile())\n                    ),\n                    path = Path.for(\n                      unit as Naval,\n                      unit.tile(),\n                      targetTile,\n                      this.#pathFinderRegistry\n                    );\n\n                  if (path) {\n                    this.#seaTilesToExplore.splice(\n                      this.#seaTilesToExplore.indexOf(targetTile),\n                      1\n                    );\n                    this.#unitPathData.set(unit as Naval, path);\n                  }\n                }\n              }\n\n              this.moveUnit(unit as Unit);\n\n              continue;\n            }\n\n            if (item instanceof CityBuild) {\n              this.buildItemInCity(item.city());\n\n              continue;\n            }\n\n            if (item instanceof PlayerResearch) {\n              const available = item.available();\n\n              if (available.length) {\n                item.research(\n                  available[Math.floor(available.length * Math.random())]\n                );\n              }\n\n              continue;\n            }\n\n            if (action instanceof EndTurn) {\n              break;\n            }\n\n            console.log(`Can't process: '${item.constructor.name}'`);\n\n            break;\n          }\n\n          resolve();\n        } catch (e) {\n          if (typeof e === 'string') {\n            reject(new Error(e));\n\n            return;\n          }\n\n          if (e instanceof Error) {\n            reject(e);\n\n            return;\n          }\n\n          reject(new Error(`An unknown error occurred: ${e}`));\n        }\n      }\n    );\n  }\n\n  private buildItemInCity(city: City): void {\n    const tile = city.tile(),\n      cityBuild = this.#cityBuildRegistry.getByCity(city),\n      tileUnits = this.#unitRegistry.getByTile(tile),\n      available = cityBuild.available(),\n      restrictions: IConstructor[] = [Palace, Settlers],\n      availableFiltered = available.filter(\n        (buildItem: BuildItem): boolean =>\n          !restrictions.includes(buildItem.item()) &&\n          // TODO: Add auto-wonders or have more logic around this\n          !Object.prototype.isPrototypeOf.call(Wonder, buildItem.item())\n      ),\n      availableWonders = available.filter((buildItem: BuildItem): boolean =>\n        Object.prototype.isPrototypeOf.call(Wonder, buildItem.item())\n      ),\n      availableUnits = availableFiltered.filter(\n        (buildItem: BuildItem): boolean =>\n          Object.prototype.isPrototypeOf.call(Unit, buildItem.item())\n      ),\n      randomSelection =\n        availableFiltered[\n          Math.floor(availableFiltered.length * Math.random())\n        ].item(),\n      getUnitByYield = (YieldType: typeof Yield) => {\n        const [[UnitType]] = availableUnits\n          .map((buildItem: BuildItem): [typeof Unit, Yield] => {\n            const UnitType = buildItem.item() as unknown as typeof Unit,\n              unitYield = new YieldType();\n\n            this.#ruleRegistry.process(BaseYield, UnitType, unitYield);\n\n            return [UnitType as typeof Unit, unitYield];\n          })\n          .sort(\n            (\n              [, unitYieldA]: [typeof Unit, Yield],\n              [, unitYieldB]: [typeof Unit, Yield]\n            ): number => unitYieldB.value() - unitYieldA.value()\n          );\n\n        return UnitType;\n      },\n      getDefensiveUnit = (\n        (UnitType?: typeof Unit): (() => typeof Unit) =>\n        (): typeof Unit =>\n          UnitType || (UnitType = getUnitByYield(Defence))\n      )(),\n      getOffensiveUnit = (\n        (UnitType?: typeof Unit): (() => typeof Unit) =>\n        (): typeof Unit =>\n          UnitType || (UnitType = getUnitByYield(Attack))\n      )();\n\n    if (this.#unitRegistry.getByTile(tile).length < 2 && getDefensiveUnit()) {\n      cityBuild.build(getDefensiveUnit() as unknown as typeof Buildable);\n\n      return;\n    }\n\n    const cityGrowth = this.#cityGrowthRegistry.getByCity(cityBuild.city());\n\n    // Always Build Cities\n    if (\n      available.some(\n        (buildItem: BuildItem) =>\n          buildItem.item() === (Settlers as unknown as typeof Buildable)\n      ) &&\n      !this.#unitRegistry\n        .getByCity(cityBuild.city())\n        .some((unit: Unit): boolean => unit instanceof Settlers) &&\n      // TODO: use expansionist leader trait\n      this.#unitRegistry\n        .getByPlayer(this.player())\n        .filter((unit: Unit): boolean => unit instanceof Settlers).length < 3 &&\n      cityGrowth.size() > 1\n    ) {\n      cityBuild.build(Settlers as unknown as typeof Buildable);\n\n      return;\n    }\n\n    if (\n      this.#citiesToLiberate.length > 0 ||\n      this.#enemyCitiesToAttack.length > 0 ||\n      this.#enemyUnitsToAttack.length > 4\n    ) {\n      cityBuild.build(getOffensiveUnit() as unknown as typeof Buildable);\n\n      return;\n    }\n\n    if (\n      tileUnits.filter((unit) =>\n        this.#unitImprovementRegistry\n          .getByUnit(unit)\n          .filter((improvement) => improvement instanceof Fortified)\n      ).length < 2 ||\n      this.#undefendedCities.length\n    ) {\n      cityBuild.build(getDefensiveUnit() as unknown as typeof Buildable);\n\n      return;\n    }\n\n    // If we have resources to burn, build a wonder\n    if (\n      cityBuild\n        .city()\n        .yields()\n        .filter((cityYield) => cityYield instanceof Production)\n        .some((cityYield) => cityYield.value() > 4)\n    ) {\n      const wonders = availableWonders.map((cityBuild) => cityBuild.item());\n\n      cityBuild.build(wonders[Math.floor(Math.random() * wonders.length)]);\n    }\n\n    if (randomSelection) {\n      cityBuild.build(randomSelection);\n    }\n  }\n\n  cityLost(city: City, player: Player | null, destroyed: boolean): void {\n    // Can't retaliate against ourselves, we deserved it...\n    if (!player) {\n      return;\n    }\n\n    const playerWorld = this.#playerWorldRegistry.getByPlayer(this.player());\n\n    if (destroyed) {\n      // REVENGE!\n      this.#enemyCitiesToAttack.push(\n        ...playerWorld\n          .entries()\n          .filter((playerTile: PlayerTile) =>\n            hasPlayerCity(playerTile.tile(), this.player(), this.#cityRegistry)\n          )\n          .map((playerTile: PlayerTile) => playerTile.tile())\n      );\n      this.#enemyUnitsToAttack.push(\n        ...playerWorld\n          .entries()\n          .filter((playerTile: PlayerTile) =>\n            this.#unitRegistry\n              .getByTile(playerTile.tile())\n              .some((unit) => unit.player() === player)\n          )\n          .map((playerTile: PlayerTile) => playerTile.tile())\n      );\n\n      return;\n    }\n\n    this.#citiesToLiberate.push(city.tile());\n  }\n\n  unitDestroyed(unit: Unit, player: Player | null): void {\n    const city = this.#cityRegistry.getByTile(unit.tile()),\n      tileUnits = this.#unitRegistry.getByTile(unit.tile());\n\n    if (city && city.player() === this.player() && tileUnits.length < 2) {\n      this.buildItemInCity(city);\n\n      this.#playerTreasuryRegistry.getByPlayer(this.player()).buy(city);\n    }\n  }\n}\n\nexport default SimpleAIClient;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Client from './Client';\nimport Player from '@civ-clone/core-player/Player';\n\nexport interface IClientRegistry extends IEntityRegistry<Client> {\n  getByPlayer(player: Player): Client;\n}\n\nexport class ClientRegistry\n  extends EntityRegistry<Client>\n  implements IClientRegistry {\n  constructor() {\n    super(Client);\n  }\n\n  getByPlayer(player: Player): Client {\n    const clients = this.getBy('player', player);\n\n    if (clients.length !== 1) {\n      throw new TypeError('Wrong number of Clients for Player.');\n    }\n\n    return clients[0];\n  }\n}\n\nexport const instance: ClientRegistry = new ClientRegistry();\n\nexport default ClientRegistry;\n", "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class American extends Civilization {}\n\nexport default American;\n", "import American from './American';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'American',\n  nation: 'America',\n  colors: ['#0055A4', '#FFF'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(American, name, value))\n);\n", "import American from './American';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Washington',\n  'New York',\n  'Los Angeles',\n  'Chicago',\n  'Houston',\n  'Phoenix',\n  'Philadelphia',\n  'San Antonio',\n  'San Diego',\n  'Dallas',\n  'San Jose',\n  'Austin',\n  'Jacksonville',\n  'Fort Worth',\n  'Columbus',\n  'San Francisco',\n  'Charlotte',\n  'Indianapolis',\n  'Seattle',\n  'Denver',\n  'Boston',\n  'El Paso',\n  'Detroit',\n  'Nashville',\n  'Portland',\n  'Memphis',\n  'Oklahoma City',\n  'Las Vegas',\n  'Louisville',\n  'Baltimore',\n  'Milwaukee',\n  'Albuquerque',\n  'Tucson',\n  'Fresno',\n  'Mesa',\n  'Sacramento',\n  'Atlanta',\n  'Kansas City',\n  'Colorado Springs',\n  'Miami',\n  'Raleigh',\n  'Omaha',\n  'Long Beach',\n  'Virginia Beach',\n  'Oakland',\n  'Minneapolis',\n  'Tulsa',\n  'Arlington',\n  'Tampa',\n  'New Orleans',\n  'Wichita',\n  'Cleveland',\n  'Bakersfield',\n  'Aurora',\n  'Anaheim',\n  'Honolulu',\n  'Santa Ana',\n  'Riverside',\n  'Corpus Christi',\n  'Lexington',\n  'Stockton',\n  'Henderson',\n  'Saint Paul',\n  'St. Louis',\n  'Cincinnati',\n  'Pittsburgh',\n  'Greensboro',\n  'Anchorage',\n  'Plano',\n  'Lincoln',\n  'Orlando',\n  'Irvine',\n  'Newark',\n  'Toledo',\n  'Durham',\n  'Chula Vista',\n  'Fort Wayne',\n  'Jersey City',\n  'St. Petersburg',\n  'Laredo',\n  'Madison',\n  'Chandler',\n  'Buffalo',\n  'Lubbock',\n  'Scottsdale',\n  'Reno',\n  'Glendale',\n  'Gilbert',\n  'Winston\u2013Salem',\n  'North Las Vegas',\n  'Norfolk',\n  'Chesapeake',\n  'Garland',\n  'Irving',\n  'Hialeah',\n  'Fremont',\n  'Boise',\n  'Richmond',\n  'Baton Rouge',\n  'Spokane',\n  'Des Moines',\n  'Tacoma',\n  'San Bernardino',\n  'Modesto',\n  'Fontana',\n  'Santa Clarita',\n  'Birmingham',\n  'Oxnard',\n  'Fayetteville',\n  'Moreno Valley',\n  'Rochester',\n  'Glendale',\n  'Huntington Beach',\n  'Salt Lake City',\n  'Grand Rapids',\n  'Amarillo',\n  'Yonkers',\n  'Aurora',\n  'Montgomery',\n  'Akron',\n  'Little Rock',\n  'Huntsville',\n  'Augusta',\n  'Port St. Lucie',\n  'Grand Prairie',\n  'Columbus',\n  'Tallahassee',\n  'Overland Park',\n  'Tempe',\n  'McKinney',\n  'Mobile',\n  'Cape Coral',\n  'Shreveport',\n  'Frisco',\n  'Knoxville',\n  'Worcester',\n  'Brownsville',\n  'Vancouver',\n  'Fort Lauderdale',\n  'Sioux Falls',\n  'Ontario',\n  'Chattanooga',\n  'Providence',\n  'Newport News',\n  'Rancho Cucamonga',\n  'Santa Rosa',\n  'Oceanside',\n  'Salem',\n  'Elk Grove',\n  'Garden Grove',\n  'Pembroke Pines',\n  'Peoria',\n  'Eugene',\n  'Corona',\n  'Cary',\n  'Springfield',\n  'Fort Collins',\n  'Jackson',\n  'Alexandria',\n  'Hayward',\n  'Lancaster',\n  'Lakewood',\n  'Clarksville',\n  'Palmdale',\n  'Salinas',\n  'Springfield',\n  'Hollywood',\n  'Pasadena',\n  'Sunnyvale',\n  'Macon',\n  'Kansas City',\n  'Pomona',\n  'Escondido',\n  'Killeen',\n  'Naperville',\n  'Joliet',\n  'Bellevue',\n  'Rockford',\n  'Savannah',\n  'Paterson',\n  'Torrance',\n  'Bridgeport',\n  'McAllen',\n  'Mesquite',\n  'Syracuse',\n  'Midland',\n  'Pasadena',\n  'Murfreesboro',\n  'Miramar',\n  'Dayton',\n  'Fullerton',\n  'Olathe',\n  'Orange',\n  'Thornton',\n  'Roseville',\n  'Denton',\n  'Waco',\n  'Surprise',\n  'Carrollton',\n  'West Valley City',\n  'Charleston',\n  'Warren',\n  'Hampton',\n  'Gainesville',\n  'Visalia',\n  'Coral Springs',\n  'Columbia',\n  'Cedar Rapids',\n  'Sterling Heights',\n  'New Haven',\n  'Stamford',\n  'Concord',\n  'Kent',\n  'Santa Clara',\n  'Elizabeth',\n  'Round Rock',\n  'Thousand Oaks',\n  'Lafayette',\n  'Athens',\n  'Topeka',\n  'Simi Valley',\n  'Fargo',\n  'Norman',\n  'Columbia',\n  'Abilene',\n  'Wilmington',\n  'Hartford',\n  'Victorville',\n  'Pearland',\n  'Vallejo',\n  'Ann Arbor',\n  'Berkeley',\n  'Allentown',\n  'Richardson',\n  'Odessa',\n  'Arvada',\n  'Cambridge',\n  'Sugar Land',\n  'Beaumont',\n  'Lansing',\n  'Evansville',\n  'Rochester',\n  'Independence',\n  'Fairfield',\n  'Provo',\n  'Clearwater',\n  'College Station',\n  'West Jordan',\n  'Carlsbad',\n  'El Monte',\n  'Murrieta',\n  'Temecula',\n  'Springfield',\n  'Palm Bay',\n  'Costa Mesa',\n  'Westminster',\n  'North Charleston',\n  'Miami Gardens',\n  'Manchester',\n  'High Point',\n  'Downey',\n  'Clovis',\n  'Pompano Beach',\n  'Pueblo',\n  'Elgin',\n  'Lowell',\n  'Antioch',\n  'West Palm Beach',\n  'Peoria',\n  'Everett',\n  'Ventura',\n  'Centennial',\n  'Lakeland',\n  'Gresham',\n  'Richmond',\n  'Billings',\n  'Inglewood',\n  'Broken Arrow',\n  'Sandy Springs',\n  'Jurupa Valley',\n  'Hillsboro',\n  'Waterbury',\n  'Santa Maria',\n  'Boulder',\n  'Greeley',\n  'Daly City',\n  'Meridian',\n  'Lewisville',\n  'Davie',\n  'West Covina',\n  'League City',\n  'Tyler',\n  'Norwalk',\n  'San Mateo',\n  'Green Bay',\n  'Wichita Falls',\n  'Sparks',\n  'Lakewood',\n  'Burbank',\n  'Rialto',\n  'Allen',\n  'El Cajon',\n  'Las Cruces',\n  'Renton',\n  'Davenport',\n  'South Bend',\n  'Vista',\n  'Tuscaloosa',\n  'Clinton',\n  'Edison',\n  'Woodbridge',\n  'San Angelo',\n  'Kenosha',\n  'Vacaville',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, American, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Aztec extends Civilization {}\n\nexport default Aztec;\n", "import Aztec from './Aztec';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Aztec',\n  nation: 'Aztec',\n  colors: ['#A1DAB5', '#EA6B76'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Aztec, name, value))\n);\n", "import Aztec from './Aztec';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Tenochtitlan',\n  'Teotihuacan',\n  'Tlatelolco',\n  'Texcoco',\n  'Tlaxcala',\n  'Calixtlahuaca',\n  'Xochicalco',\n  'Tlacopan',\n  'Atzcapotzalco',\n  'Tzintzuntzan',\n  'Malinalco',\n  'Tula',\n  'Tamuin',\n  'Teayo',\n  'Cempoala',\n  'Chalco',\n  'Tlalmanalco',\n  'Ixtapaluca',\n  'Huexotla',\n  'Tepexpan',\n  'Tepetlaoxtoc',\n  'Chiconautla',\n  'Zitlaltepec',\n  'Coyotepec',\n  'Tequixquiac',\n  'Jilotzingo',\n  'Tlapanaloya',\n  'Tultitan',\n  'Ecatepec',\n  'Coatepec',\n  'Chalchiuites',\n  'Chiauhita',\n  'Chapultepec',\n  'Itzapalapa',\n  'Ayotzinco',\n  'Iztapam',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Aztec, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Babylonian extends Civilization {}\n\nexport default Babylonian;\n", "import Babylonian from './Babylonian';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Babylonian',\n  nation: 'Babylon',\n  colors: ['#D0B8A6', '#2f7b00'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Babylonian, name, value))\n);\n", "import Babylonian from './Babylonian';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Babilim',\n  'Eshnunna',\n  'Diniktum',\n  'Tutub',\n  'Der',\n  'Sippar',\n  'Kutha',\n  'Jemdet Nasr',\n  'Kish',\n  'Borsippa',\n  'Mashkan-shapir',\n  'Dilbat',\n  'Nippur',\n  'Marad',\n  'Adab',\n  'Isin',\n  'Kisurra',\n  'Shuruppak',\n  'Bad-tibira',\n  'Zabalam',\n  'Umma',\n  'Girsu',\n  'Lagash',\n  'Urum',\n  'Uruk',\n  'Larsa',\n  'Ur',\n  'Kuara',\n  'Eridu',\n  'Akshak',\n  'Akkad',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Babylonian, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Chinese extends Civilization {}\n\nexport default Chinese;\n", "import Chinese from './Chinese';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Chinese',\n  nation: 'China',\n  colors: ['#ee1c25', '#ff0'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Chinese, name, value))\n);\n", "import Chinese from './Chinese';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Beijing',\n  'Shanghai',\n  'Chongqing',\n  'Tianjin',\n  'Guangzhou',\n  'Shenzhen\u2020',\n  'Chengdu',\n  'Nanjing',\n  'Wuhan',\n  \"Xi'an\",\n  'Hangzhou',\n  'Dongguan',\n  'Foshan',\n  'Shenyang',\n  'Harbin',\n  'Qingdao',\n  'Dalian',\n  'Jinan',\n  'Zhengzhou',\n  'Changsha',\n  'Kunming',\n  'Changchun',\n  '\u00DCr\u00FCmqi',\n  'Shantou',\n  'Hefei',\n  'Shijiazhuang',\n  'Ningbo',\n  'Taiyuan',\n  'Nanning',\n  'Xiamen\u2020',\n  'Fuzhou',\n  'Changzhou',\n  'Wenzhou',\n  'Nanchang',\n  'Tangshan',\n  'Guiyang',\n  'Wuxi',\n  'Lanzhou',\n  'Zhongshan',\n  'Handan',\n  \"Huai'an\",\n  'Weifang',\n  'Zibo',\n  'Shaoxing',\n  'Yantai',\n  'Huizhou',\n  'Luoyang',\n  'Nantong',\n  'Baotou',\n  'Liuzhou',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Chinese, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Egyptian extends Civilization {}\n\nexport default Egyptian;\n", "import Egyptian from './Egyptian';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Egyptian',\n  nation: 'Egypt',\n  colors: ['#CE1126', '#FFF'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Egyptian, name, value))\n);\n", "import Egyptian from './Egyptian';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Cairo',\n  'Alexandria',\n  'Gizeh',\n  'Shubra El-Kheima',\n  'Port Said',\n  'Suez',\n  'Luxor',\n  'al-Mansura',\n  'El-Mahalla El-Kubra',\n  'Tanta',\n  'Asyut',\n  'Ismailia',\n  'Fayyum',\n  'Zagazig',\n  'Aswan',\n  'Damietta',\n  'Damanhur',\n  'al-Minya',\n  'Beni Suef',\n  'Qena',\n  'Sohag',\n  'Hurghada',\n  '6th of October City',\n  'Shibin El Kom',\n  'Banha',\n  'Kafr el-Sheikh',\n  'Arish',\n  'Mallawi',\n  '10th of Ramadan City',\n  'Bilbais',\n  'Marsa Matruh',\n  'Idfu',\n  'Mit Ghamr',\n  'Al-Hamidiyya',\n  'Desouk',\n  'Qalyub',\n  'Abu Kabir',\n  'Kafr el-Dawwar',\n  'Girga',\n  'Akhmim',\n  'Matarey',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Egyptian, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class English extends Civilization {}\n\nexport default English;\n", "import English from './English';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'English',\n  nation: 'England',\n  colors: ['#FFF', '#C8102E'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(English, name, value))\n);\n", "import English from './English';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'London',\n  'Birmingham',\n  'Liverpool',\n  'Leeds',\n  'Sheffield',\n  'Bristol',\n  'Manchester',\n  'Leicester',\n  'Coventry',\n  'Kingston upon Hull',\n  'Stoke-on-Trent',\n  'Wolverhampton',\n  'Nottingham',\n  'Plymouth',\n  'Southampton',\n  'Reading',\n  'Derby',\n  'Dudley',\n  'Newcastle upon Tyne',\n  'Northampton',\n  'Portsmouth',\n  'Luton',\n  'Preston',\n  'Sunderland',\n  'Norwich',\n  'Walsall',\n  'Bournemouth',\n  'Southend-on-Sea',\n  'Swindon',\n  'Huddersfield',\n  'Poole',\n  'Oxford',\n  'Middlesbrough',\n  'Blackpool',\n  'Oldbury',\n  'Boldon',\n  'Ipswich',\n  'York',\n  'West Bromwich',\n  'Peterborough',\n  'Stockport',\n  'Brighton',\n  'Slough',\n  'Gloucester',\n  'Rotherham',\n  'Cambridge',\n  'Exeter',\n  'Eastbourne',\n  'Sutton Coldfield',\n  'Blackburn',\n  'Colchester',\n  'Oldham',\n  'St Helens',\n  'Woking',\n  'Chesterfield',\n  'Crawley',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, English, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class French extends Civilization {}\n\nexport default French;\n", "import French from './French';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'French',\n  nation: 'France',\n  colors: ['#FFF', '#0055A4'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(French, name, value))\n);\n", "import French from './French';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Paris',\n  'Marseille',\n  'Lyon',\n  'Toulouse',\n  'Nice',\n  'Nantes',\n  'Strasbourg',\n  'Montpellier',\n  'Bordeaux',\n  'Lille',\n  'Rennes',\n  'Reims',\n  'Le Havre',\n  'Saint-\u00C9tienne',\n  'Toulon',\n  'Grenoble',\n  'Dijon',\n  'N\u00EEmes',\n  'Angers',\n  'Villeurbanne',\n  'Le Mans',\n  'Saint-Denis',\n  'Aix-en-Provence',\n  'Clermont-Ferrand',\n  'Brest',\n  'Limoges',\n  'Tours',\n  'Amiens',\n  'Perpignan',\n  'Metz',\n  'Besan\u00E7on',\n  'Boulogne-Billancourt',\n  'Orl\u00E9ans',\n  'Mulhouse',\n  'Rouen',\n  'Saint-Denis',\n  'Caen',\n  'Argenteuil',\n  'Saint-Paul',\n  'Montreuil',\n  'Nancy',\n  'Roubaix',\n  'Tourcoing',\n  'Nanterre',\n  'Avignon',\n  'Vitry-sur-Seine',\n  'Cr\u00E9teil',\n  'Dunkirk',\n  'Poitiers',\n  'Asni\u00E8res-sur-Seine',\n  'Courbevoie',\n  'Versailles',\n  'Colombes',\n  'Fort-de-France',\n  'Aulnay-sous-Bois',\n  'Saint-Pierre',\n  'Rueil-Malmaison',\n  'Pau',\n  'Aubervilliers',\n  'Le Tampon',\n  'Champigny-sur-Marne',\n  'Antibes',\n  'B\u00E9ziers',\n  'La Rochelle',\n  'Saint-Maur-des-Foss\u00E9s',\n  'Cannes',\n  'Calais',\n  'Saint-Nazaire',\n  'M\u00E9rignac',\n  'Drancy',\n  'Colmar',\n  'Ajaccio',\n  'Bourges',\n  'Issy-les-Moulineaux',\n  'Levallois-Perret',\n  'La Seyne-sur-Mer',\n  'Quimper',\n  'Noisy-le-Grand',\n  \"Villeneuve-d'Ascq\",\n  'Neuilly-sur-Seine',\n  'Valence',\n  'Antony',\n  'Cergy',\n  'V\u00E9nissieux',\n  'Pessac',\n  'Troyes',\n  'Clichy',\n  'Ivry-sur-Seine',\n  'Chamb\u00E9ry',\n  'Lorient',\n  'Les Abymes',\n  'Montauban',\n  'Sarcelles',\n  'Niort',\n  'Villejuif',\n  'Saint-Andr\u00E9',\n  'Hy\u00E8res',\n  'Saint-Quentin',\n  'Beauvais',\n  '\u00C9pinay-sur-Seine',\n  'Cayenne',\n  'Maisons-Alfort',\n  'Cholet',\n  'Meaux',\n  'Chelles',\n  'Pantin',\n  '\u00C9vry',\n  'Fontenay-sous-Bois',\n  'Fr\u00E9jus',\n  'Vannes',\n  'Bondy',\n  'Le Blanc-Mesnil',\n  'La Roche-sur-Yon',\n  'Saint-Louis',\n  'Arles',\n  'Clamart',\n  'Narbonne',\n  'Annecy',\n  'Sartrouville',\n  'Grasse',\n  'Laval',\n  'Belfort',\n  'Bobigny',\n  '\u00C9vreux',\n  'Vincennes',\n  'Montrouge',\n  'Sevran',\n  'Albi',\n  'Charleville-M\u00E9zi\u00E8res',\n  'Suresnes',\n  'Martigues',\n  'Corbeil-Essonnes',\n  'Saint-Ouen',\n  'Bayonne',\n  'Cagnes-sur-Mer',\n  'Brive-la-Gaillarde',\n  'Carcassonne',\n  'Massy',\n  'Blois',\n  'Aubagne',\n  'Saint-Brieuc',\n  'Ch\u00E2teauroux',\n  'Chalon-sur-Sa\u00F4ne',\n  'Mantes-la-Jolie',\n  'Meudon',\n  'Saint-Malo',\n  'Ch\u00E2lons-en-Champagne',\n  'Alfortville',\n  'S\u00E8te',\n  'Salon-de-Provence',\n  'Vaulx-en-Velin',\n  'Puteaux',\n  'Rosny-sous-Bois',\n  'Saint-Herblain',\n  'Gennevilliers',\n  'Le Cannet',\n  'Livry-Gargan',\n  'Saint-Priest',\n  'Istres',\n  'Valenciennes',\n  'Choisy-le-Roi',\n  'Caluire-et-Cuire',\n  'Boulogne-sur-Mer',\n  'Bastia',\n  'Angoul\u00EAme',\n  'Garges-l\u00E8s-Gonesse',\n  'Castres',\n  'Thionville',\n  'Wattrelos',\n  'Talence',\n  'Saint-Laurent-du-Maroni',\n  'Douai',\n  'Noisy-le-Sec',\n  'Tarbes',\n  'Arras',\n  'Al\u00E8s',\n  'La Courneuve',\n  'Bourg-en-Bresse',\n  'Compi\u00E8gne',\n  'Gap',\n  'Melun',\n  'Le Lamentin',\n  'Rez\u00E9',\n  'Saint-Germain-en-Laye',\n  'Marcq-en-Bar\u0153ul',\n  'Gagny',\n  'Anglet',\n  'Draguignan',\n  'Chartres',\n  'Bron',\n  'Bagneux',\n  'Colomiers',\n  \"Saint-Martin-d'H\u00E8res\",\n  'Pontault-Combault',\n  'Montlu\u00E7on',\n  'Jou\u00E9-l\u00E8s-Tours',\n  'Saint-Joseph',\n  'Poissy',\n  'Savigny-sur-Orge',\n  'Cherbourg-Octeville',\n  'Mont\u00E9limar',\n  'Villefranche-sur-Sa\u00F4ne',\n  'Stains',\n  'Saint-Beno\u00EEt',\n  'Bagnolet',\n  'Ch\u00E2tillon',\n  'Le Port',\n  'Sainte-Genevi\u00E8ve-des-Bois',\n  '\u00C9chirolles',\n  'Roanne',\n  'Villepinte',\n  'Saint-Chamond',\n  'Conflans-Sainte-Honorine',\n  'Auxerre',\n  'Nevers',\n  'Neuilly-sur-Marne',\n  'La Ciotat',\n  'Tremblay-en-France',\n  'Thonon-les-Bains',\n  'Vitrolles',\n  'Haguenau',\n  'Six-Fours-les-Plages',\n  'Agen',\n  'Creil',\n  'Annemasse',\n  'Saint-Rapha\u00EBl',\n  'Marignane',\n  'Romans-sur-Is\u00E8re',\n  'Montigny-le-Bretonneux',\n  'Le Perreux-sur-Marne',\n  'Franconville',\n  'M\u00E2con',\n  'Saint-Leu',\n  'Cambrai',\n  'Ch\u00E2tenay-Malabry',\n  'Sainte-Marie',\n  'Villeneuve-Saint-Georges',\n  'Houilles',\n  '\u00C9pinal',\n  'Lens',\n  'Li\u00E9vin',\n  'Les Mureaux',\n  'Schiltigheim',\n  'La Possession',\n  'Meyzieu',\n  'Dreux',\n  'Nogent-sur-Marne',\n  'Plaisir',\n  'Mont-de-Marsan',\n  'Palaiseau',\n  'Ch\u00E2tellerault',\n  'Goussainville',\n  \"L'Ha\u00FF-les-Roses\",\n  'Viry-Ch\u00E2tillon',\n  'Vigneux-sur-Seine',\n  'Chatou',\n  'Trappes',\n  'Clichy-sous-Bois',\n  'Rillieux-la-Pape',\n  \"Villenave-'Ornon\",\n  'Maubeuge',\n  'Charenton-le-Pont',\n  'Malakoff',\n  'Matoury',\n  'Dieppe',\n  'Athis-Mons',\n  'Savigny-le-Temple',\n  'P\u00E9rigueux',\n  'Baie-Mahault',\n  'Vandoeuvre-l\u00E8s-Nancy',\n  'Pontoise',\n  'Aix-les-Bains',\n  'Cachan',\n  'Vienne',\n  'Thiais',\n  'Orange',\n  'Saint-M\u00E9dard-en-Jalles',\n  'Villemomble',\n  'Saint-Cloud',\n  'Saint-Laurent-du-Var',\n  'Yerres',\n  'Saint-\u00C9tienne-du-Rouvray',\n  'Sotteville-l\u00E8s-Rouen',\n  'Draveil',\n  'Le Chesnay',\n  'Bois-Colombes',\n  'Le Plessis-Robinson',\n  'La Garenne-Colombes',\n  'Lambersart',\n  'Soissons',\n  'Pierrefitte-sur-Seine',\n  'Carpentras',\n  'Villiers-sur-Marne',\n  'Vanves',\n  'Menton',\n  'Bergerac',\n  'Ermont',\n  'Bezons',\n  'Grigny',\n  'Guyancourt',\n  'Saumur',\n  'Herblay',\n  'Ris-Orangis',\n  'Villiers-le-Bel',\n  'Bourgoin-Jallieu',\n  'Vierzon',\n  'Le Gosier',\n  'D\u00E9cines-Charpieu',\n  'H\u00E9nin-Beaumont',\n  'Fresnes',\n  'Aurillac',\n  'Sannois',\n  'Vallauris',\n  'Illkirch-Graffenstaden',\n  'Alen\u00E7on',\n  '\u00C9lancourt',\n  'Tournefeuille',\n  'B\u00E8gles',\n  'Gonesse',\n  'Oullins',\n  'Brunoy',\n  'Taverny',\n  'Armenti\u00E8res',\n  'Montfermeil',\n  'Rambouillet',\n  'Villeparisis',\n  'Le Kremlin-Bic\u00EAtre',\n  'Sucy-en-Brie',\n  'Kourou',\n  'Montb\u00E9liard',\n  'Romainville',\n  'Cavaillon',\n  'Saint-Dizier',\n  'Br\u00E9tigny-sur-Orge',\n  'Saint-S\u00E9bastien-sur-Loire',\n  'Saintes',\n  'La Teste-de-Buch',\n  'Villeneuve-la-Garenne',\n  'B\u00E9thune',\n  'Bussy-Saint-Georges',\n  'Vichy',\n  'La Garde',\n  'Agde',\n  'Laon',\n  'Sens',\n  'Lunel',\n  'Miramas',\n  'Biarritz',\n  'Le Grand-Quevilly',\n  'Orvault',\n  'Les Ulis',\n  'Champs-sur-Marne',\n  'Rochefort',\n  'Muret',\n  'Sainte-Anne',\n  'Eaubonne',\n  '\u00C9tampes',\n  'Gradignan',\n  'Vernon',\n  'Petit-Bourg',\n  'Libourne',\n  'Abbeville',\n  'Rodez',\n  \"Saint-Ouen-l'Aum\u00F4ne\",\n  'Torcy',\n  'Maisons-Laffitte',\n  'Montgeron',\n  'Villeneuve-sur-Lot',\n  'Cormeilles-en-Parisis',\n  '\u00C9pernay',\n  'S\u00E8vres',\n  'Dole',\n  'Le Robert',\n  'Le Bouscat',\n  'Blagnac',\n  'Frontignan',\n  'Cenon',\n  'Mandelieu-la-Napoule',\n  'Vertou',\n  'Les Lilas',\n  'Bruay-la-Buissi\u00E8re',\n  'Les Pavillons-sous-Bois',\n  'Chaumont',\n  'Roissy-en-Brie',\n  'Le Moule',\n  'Le Petit-Quevilly',\n  'Manosque',\n  'Saint-Mand\u00E9',\n  'Fontenay-aux-Roses',\n  'Orly',\n  'Le Creusot',\n  'Oyonnax',\n  'La Madeleine',\n  'Sainte-Suzanne',\n  'Millau',\n  'Combs-la-Ville',\n  'Fontaine',\n  'Deuil-la-Barre',\n  'Coudekerque-Branche',\n  'Auch',\n  'Lanester',\n  'Beaune',\n  'Montigny-l\u00E8s-Metz',\n  'Hazebrouck',\n  'Longjumeau',\n  'Sainte-Foy-l\u00E8s-Lyon',\n  'Forbach',\n  'Sarreguemines',\n  'Mons-en-Bar\u0153ul',\n  'La Valette-du-Var',\n  'H\u00E9rouville-Saint-Clair',\n  'Morsang-sur-Orge',\n  'Grande-Synthe',\n  'La Celle-Saint-Cloud',\n  'Lisieux',\n  'Croix',\n  'Dammarie-les-Lys',\n  'V\u00E9lizy-Villacoublay',\n  'Wasquehal',\n  'Saint-Gratien',\n  'Halluin',\n  'Neuilly-Plaisance',\n  'Montmorency',\n  'Dax',\n  'Lagny-sur-Marne',\n  'Le M\u00E9e-sur-Seine',\n  'Saint-Genis-Laval',\n  'Fleury-les-Aubrais',\n  'Loos',\n  'Gif-sur-Yvette',\n  'Denain',\n  'Saint-Di\u00E9-des-Vosges',\n  'Sainte-Rose',\n  'Saint-Michel-sur-Orge',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, French, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class German extends Civilization {}\n\nexport default German;\n", "import German from './German';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'German',\n  nation: 'Germany',\n  colors: ['#000', '#FC0'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(German, name, value))\n);\n", "import German from './German';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Berlin',\n  'Hamburg',\n  'Munich',\n  'Cologne',\n  'Frankfurt',\n  'Stuttgart',\n  'D\u00FCsseldorf',\n  'Dortmund',\n  'Essen',\n  'Leipzig',\n  'Bremen',\n  'Dresden',\n  'Hanover',\n  'Nuremberg',\n  'Duisburg',\n  'Bochum',\n  'Wuppertal',\n  'Bielefeld',\n  'Bonn',\n  'M\u00FCnster',\n  'Karlsruhe',\n  'Mannheim',\n  'Augsburg',\n  'Wiesbaden',\n  'Gelsenkirchen',\n  'M\u00F6nchengladbach',\n  'Braunschweig',\n  'Chemnitz',\n  'Kiel',\n  'Aachen',\n  'Halle',\n  'Magdeburg',\n  'Freiburg',\n  'Krefeld',\n  'L\u00FCbeck',\n  'Oberhausen',\n  'Erfurt',\n  'Mainz',\n  'Rostock',\n  'Kassel',\n  'Hagen',\n  'Hamm',\n  'Saarbr\u00FCcken',\n  'M\u00FClheim an der Ruhr',\n  'Potsdam',\n  'Ludwigshafen am Rhein',\n  'Oldenburg',\n  'Leverkusen',\n  'Osnabr\u00FCck',\n  'Solingen',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, German, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Greek extends Civilization {}\n\nexport default Greek;\n", "import Greek from './Greek';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Greek',\n  nation: 'Greece',\n  colors: ['#2175D8', '#FFF'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Greek, name, value))\n);\n", "import Greek from './Greek';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Athens',\n  'Thessaloniki',\n  'Patras',\n  'Piraeus',\n  'Larissa',\n  'Heraklion',\n  'Peristeri',\n  'Kallithea',\n  'Acharnes',\n  'Kalamaria',\n  'Nikaia',\n  'Glyfada',\n  'Volos',\n  'Ilio',\n  'Ilioupoli',\n  'Keratsini',\n  'Evosmos',\n  'Chalandri',\n  'Nea Smyrni',\n  'Marousi',\n  'Agios Dimitrios',\n  'Zografou',\n  'Egaleo',\n  'Nea Ionia',\n  'Ioannina',\n  'Palaio Faliro',\n  'Korydallos',\n  'Trikala',\n  'Vyronas',\n  'Agia Paraskevi',\n  'Galatsi',\n  'Agrinio',\n  'Chalcis',\n  'Petroupoli',\n  'Serres',\n  'Alexandroupoli',\n  'Xanthi',\n  'Katerini',\n  'Kalamata',\n  'Kavala',\n  'Chania',\n  'Lamia',\n  'Komotini',\n  'Irakleio',\n  'Rhodes',\n  'Kifissia',\n  'Stavroupoli',\n  'Chaidari',\n  'Drama',\n  'Veria',\n  'Alimos',\n  'Kozani',\n  'Polichni',\n  'Karditsa',\n  'Sykies',\n  'Ampelokipoi',\n  'Pylaia',\n  'Agioi Anargyroi',\n  'Argyroupoli',\n  'Ano Liosia',\n  'Nea Ionia',\n  'Rethymno',\n  'Ptolemaida',\n  'Tripoli',\n  'Cholargos',\n  'Vrilissia',\n  'Aspropyrgos',\n  'Corinth',\n  'Gerakas',\n  'Metamorfosi',\n  'Giannitsa',\n  'Voula',\n  'Kamatero',\n  'Mytilene',\n  'Neapoli',\n  'Eleftherio-Kordelio',\n  'Chios',\n  'Agia Varvara',\n  'Kaisariani',\n  'Nea Filadelfeia',\n  'Moschato',\n  'Perama',\n  'Salamina',\n  'Eleusis',\n  'Corfu',\n  'Pyrgos',\n  'Megara',\n  'Kilkis',\n  'Dafni',\n  'Thebes',\n  'Melissia',\n  'Argos',\n  'Arta',\n  'Artemida',\n  'Livadeia',\n  'Pefki',\n  'Oraiokastro',\n  'Aigio',\n  'Kos',\n  'Koropi',\n  'Preveza',\n  'Naousa',\n  'Orestiada',\n  'Peraia',\n  'Edessa',\n  'Florina',\n  'Panorama',\n  'Nea Erythraia1',\n  'Elliniko1',\n  'Amaliada',\n  'Pallini',\n  'Sparta',\n  'Agios Ioannis Rentis',\n  'Thermi',\n  'Vari',\n  'Nea Makri',\n  'Tavros',\n  'Alexandreia',\n  'Menemeni',\n  'Paiania',\n  'Kalyvia Thorikou',\n  'Nafplio',\n  'Drapetsona',\n  'Efkarpia',\n  'Papagou',\n  'Nafpaktos',\n  'Kastoria',\n  'Grevena',\n  'Pefka',\n  'Nea Alikarnassos',\n  'Missolonghi',\n  'Gazi',\n  'Ierapetra',\n  'Kalymnos',\n  'Rafina',\n  'Loutraki',\n  'Agios Nikolaos',\n  'Ermoupoli',\n  'Ialysos',\n  'Mandra',\n  'Tyrnavos',\n  'Glyka Nera',\n  'Ymittos',\n  'Neo Psychiko',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Greek, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Indian extends Civilization {}\n\nexport default Indian;\n", "import Indian from './Indian';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Indian',\n  nation: 'India',\n  colors: ['#138808', '#FF9933'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Indian, name, value))\n);\n", "import Indian from './Indian';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Delhi',\n  'Mumbai',\n  'Bangalore',\n  'Hyderabad',\n  'Ahmedabad',\n  'Chennai',\n  'Kolkata',\n  'Surat',\n  'Pune',\n  'Jaipur',\n  'Lucknow',\n  'Kanpur',\n  'Nagpur',\n  'Indore',\n  'Thane',\n  'Bhopal',\n  'Visakhapatnam',\n  'Pimpri-Chinchwad',\n  'Patna',\n  'Vadodara',\n  'Ghaziabad',\n  'Ludhiana',\n  'Agra',\n  'Nashik',\n  'Faridabad',\n  'Meerut',\n  'Rajkot',\n  'Kalyan-Dombivli',\n  'Vasai-Virar',\n  'Varanasi',\n  'Srinagar',\n  'Aurangabad',\n  'Dhanbad',\n  'Amritsar',\n  'Navi Mumbai',\n  'Allahabad',\n  'Howrah',\n  'Ranchi',\n  'Gwalior',\n  'Jabalpur',\n  'Coimbatore',\n  'Vijayawada',\n  'Jodhpur',\n  'Madurai',\n  'Raipur',\n  'Kota',\n  'Chandigarh',\n  'Guwahati',\n  'Solapur',\n  'Hubli\u2013Dharwad',\n  'Tiruchirappalli',\n  'Bareilly',\n  'Moradabad',\n  'Mysore',\n  'Tiruppur',\n  'Gurgaon',\n  'Aligarh',\n  'Jalandhar',\n  'Bhubaneswar',\n  'Salem',\n  'Mira-Bhayandar',\n  'Warangal',\n  'Jalgaon',\n  'Guntur',\n  'Bhiwandi',\n  'Saharanpur',\n  'Gorakhpur',\n  'Bikaner',\n  'Amravati',\n  'Noida',\n  'Jamshedpur',\n  'Bhilai',\n  'Cuttack',\n  'Firozabad',\n  'Kochi',\n  'Nellore',\n  'Bhavnagar',\n  'Dehradun',\n  'Durgapur',\n  'Asansol',\n  'Rourkela',\n  'Nanded',\n  'Kolhapur',\n  'Ajmer',\n  'Akola',\n  'Gulbarga',\n  'Jamnagar',\n  'Ujjain',\n  'Loni',\n  'Siliguri',\n  'Jhansi',\n  'Ulhasnagar',\n  'Jammu',\n  'Sangli-Miraj & Kupwad',\n  'Mangalore',\n  'Erode',\n  'Belgaum',\n  'Ambattur',\n  'Tirunelveli',\n  'Malegaon',\n  'Gaya',\n  'Thiruvananthapuram',\n  'Udaipur',\n  'Maheshtala',\n  'Davanagere',\n  'Kozhikode',\n  'Kurnool',\n  'Rajpur Sonarpur',\n  'Rajahmundry',\n  'Bokaro',\n  'South Dumdum',\n  'Bellary',\n  'Patiala',\n  'Gopalpur',\n  'Agartala',\n  'Bhagalpur',\n  'Muzaffarnagar',\n  'Bhatpara',\n  'Panihati',\n  'Latur',\n  'Dhule',\n  'Tirupati',\n  'Rohtak',\n  'Korba',\n  'Bhilwara',\n  'Berhampur',\n  'Muzaffarpur',\n  'Ahmednagar',\n  'Mathura',\n  'Kollam',\n  'Avadi',\n  'Kadapa',\n  'Kamarhati',\n  'Sambalpur',\n  'Bilaspur',\n  'Shahjahanpur',\n  'Satara',\n  'Bijapur',\n  'Kakinada',\n  'Rampur',\n  'Shimoga',\n  'Chandrapur',\n  'Junagadh',\n  'Thrissur',\n  'Alwar',\n  'Bardhaman',\n  'Kulti',\n  'Nizamabad',\n  'Parbhani',\n  'Tumkur',\n  'Khammam',\n  'Ozhukarai',\n  'Bihar Sharif',\n  'Panipat',\n  'Darbhanga',\n  'Bally',\n  'Aizawl',\n  'Dewas',\n  'Ichalkaranji',\n  'Karnal',\n  'Bathinda',\n  'Jalna',\n  'Eluru',\n  'Barasat',\n  'Kirari Suleman Nagar',\n  'Purnia',\n  'Satna',\n  'Mau',\n  'Sonipat',\n  'Farrukhabad',\n  'Sagar',\n  'Durg',\n  'Imphal',\n  'Ratlam',\n  'Hapur',\n  'Arrah',\n  'Anantapur',\n  'Karimnagar',\n  'Etawah',\n  'Ambarnath',\n  'North Dumdum',\n  'Bharatpur',\n  'Begusarai',\n  'New Delhi',\n  'Gandhidham',\n  'Baranagar',\n  'Tiruvottiyur',\n  'Pondicherry',\n  'Sikar',\n  'Thoothukudi',\n  'Rewa',\n  'Mirzapur',\n  'Raichur',\n  'Pali',\n  'Ramagundam',\n  'Haridwar',\n  'Vijayanagaram',\n  'Katihar',\n  'Nagercoil',\n  'Sri Ganganagar',\n  'Karawal Nagar',\n  'Mango',\n  'Thanjavur',\n  'Bulandshahr',\n  'Uluberia',\n  'Katni',\n  'Sambhal',\n  'Singrauli',\n  'Nadiad',\n  'Secunderabad',\n  'Naihati',\n  'Yamunanagar',\n  'Bidhannagar',\n  'Pallavaram',\n  'Bidar',\n  'Munger',\n  'Panchkula',\n  'Burhanpur',\n  'Raurkela Industrial Township',\n  'Kharagpur',\n  'Dindigul',\n  'Gandhinagar',\n  'Hospet',\n  'Nangloi Jat',\n  'Malda',\n  'Ongole',\n  'Deoghar',\n  'Chapra',\n  'Haldia',\n  'Khandwa',\n  'Nandyal',\n  'Morena',\n  'Amroha',\n  'Anand',\n  'Bhind',\n  'Bhalswa Jahangir Pur',\n  'Madhyamgram',\n  'Bhiwani',\n  'Berhampore',\n  'Ambala',\n  'Morbi',\n  'Fatehpur',\n  'Raebareli',\n  'Mahaboobnagar',\n  'Chittoor',\n  'Bhusawal',\n  'Orai',\n  'Bahraich',\n  'Vellore',\n  'Mehsana',\n  'Raiganj',\n  'Sirsa',\n  'Danapur',\n  'Serampore',\n  'Sultan Pur Majra',\n  'Guna',\n  'Jaunpur',\n  'Panvel',\n  'Shivpuri',\n  'Surendranagar Dudhrej',\n  'Unnao',\n  'Chinsurah',\n  'Alappuzha',\n  'Kottayam',\n  'Machilipatnam',\n  'Shimla',\n  'Adoni',\n  'Udupi',\n  'Tenali',\n  'Proddatur',\n  'Saharsa',\n  'Hindupur',\n  'Sasaram',\n  'Hajipur',\n  'Bhimavaram',\n  'Kumbakonam',\n  'Dehri',\n  'Madanapalle',\n  'Siwan',\n  'Bettiah',\n  'Guntakal',\n  'Srikakulam',\n  'Motihari',\n  'Dharmavaram',\n  'Gudivada',\n  'Phagwara',\n  'Narasaraopet',\n  'Suryapet',\n  'Miryalaguda',\n  'Tadipatri',\n  'Karaikudi',\n  'Kishanganj',\n  'Jamalpur',\n  'Ballia',\n  'Kavali',\n  'Tadepalligudem',\n  'Amaravati',\n  'Buxar',\n  'Jehanabad',\n  'Aurangabad',\n  'Gangtok',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Indian, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Mongol extends Civilization {}\n\nexport default Mongol;\n", "import Mongol from './Mongol';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Mongol',\n  nation: 'Mongolia',\n  colors: ['#DA2032', '#0066B3'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Mongol, name, value))\n);\n", "import Mongol from './Mongol';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Ulaanbaatar',\n  'Erdenet',\n  'Darkhan',\n  'Choibalsan',\n  'M\u00F6r\u00F6n',\n  'Nalaikh',\n  'Bayankhongor',\n  '\u00D6lgii',\n  'Khovd',\n  'Arvaikheer',\n  'Ulaangom',\n  'Baganuur',\n  'Sainshand',\n  'Tsetserleg',\n  'S\u00FCkhbaatar',\n  '\u00D6nd\u00F6rkhaan',\n  'Dalanzadgad',\n  'Z\u00FC\u00FCnkharaa',\n  'Uliastai',\n  'Altai',\n  'Baruun-Urt',\n  'Mandalgovi',\n  'Zuunmod',\n  'Zamyn-\u00DC\u00FCd',\n  'Bulgan',\n  'Kharkhorin',\n  'Choir',\n  'Bor-\u00D6nd\u00F6r',\n  'Sharyngo',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Mongol, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Roman extends Civilization {}\n\nexport default Roman;\n", "import Roman from './Roman';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Roman',\n  nation: 'Rome',\n  colors: ['#A20101', '#D1B24F'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Roman, name, value))\n);\n", "import Roman from './Roman';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Roma',\n  'Ariminum',\n  'Belum',\n  'Placentia',\n  'Tarraco',\n  'Italica',\n  'Mod',\n  'Salernum',\n  'Bononia',\n  'Forum Livii',\n  'Regium Lepidi',\n  'Aquileia',\n  'Ascrivium',\n  'Valentia Edetanorum',\n  'Scalabis',\n  'Villa Euracini',\n  'Palma',\n  'Colonia Narbo Martius',\n  'Massa',\n  'Pistoria',\n  'Segovia',\n  'Gerunda',\n  'Pompaelo',\n  'Naissus',\n  'Brigantium',\n  'Florentia',\n  'Vesontio',\n  'Lutetia Parisiorum',\n  'Atuatuca Tungrorum',\n  'Iulia Romula Hispalis',\n  'Augusta Raurica',\n  'Noviodunum',\n  'Lugdunum',\n  'Siscia',\n  'Marsonia',\n  'Augusta Treverorum',\n  'Castra Legionis',\n  'Augusta Taurinorum',\n  'Augusta Praetoria Salassorum',\n  'Emerita Augusta',\n  'Norba Caesarina',\n  'Lucus Augusta',\n  'Caesarea',\n  'Bracara Augusta',\n  'Novaesium',\n  'Castra Vetera',\n  'Pons Drusi',\n  'Ovilava',\n  'Iuvavum',\n  'Augusta Vindelicorum',\n  'Turicum',\n  'Asturica Augusta',\n  'Borbetomagus',\n  'Caesaraugusta',\n  'Sirmium',\n  'Sorviodurum',\n  'Mogontiacum',\n  'Argentoratum',\n  'Bonna',\n  'Noviomagus',\n  'Castellum apud Confluentes',\n  'Divodurum',\n  'Caesaromagus',\n  'Ambianum',\n  'Faventia Paterna Barcino',\n  'Abila',\n  'Lousonna',\n  'Ulpia Noviomagus Batavorum',\n  'Rigomagus',\n  'Aquae Mattiacorum',\n  'Mursa',\n  'Emona',\n  'Vindonissa',\n  'Aventicum',\n  'Praetorium Agrippinae',\n  'Lugdunum Batavorum',\n  'Aequum',\n  'Londinium',\n  'Albanianis',\n  'Lauri',\n  'Durovernum Cantiacorum',\n  'Regulbium',\n  'Rutupiae',\n  'Viminacium',\n  'Camulodunum',\n  'Traiectum',\n  'Matilo',\n  'Forum Hadriani',\n  'Nigrum Pullum',\n  'Lindum Colonia',\n  'Ratae Corieltauvorum',\n  'Durocobrivis',\n  'Colonia Agrippina',\n  'Durocornovium',\n  'Verulamium',\n  'Letocetum',\n  'Dubris',\n  'Danum',\n  'Mediolanum',\n  'Isca Dumnoniorum',\n  'Blestium',\n  'Viroconium Cornoviorum',\n  'Aquae Sulis',\n  'Durnovaria',\n  'Lindinis',\n  'Ad Flexum',\n  'Clausentum',\n  'Venta Belgarum',\n  'Calleva Atrebatum',\n  'Duroliponte',\n  'Concangis',\n  'Condate',\n  'Corinium Dobunnorum',\n  'Eboracum',\n  'Luguvalium',\n  'Arae Flaviae',\n  'Isca Augusta',\n  'Lagentium',\n  'Lopodunum',\n  'Moridunum',\n  'Venta Silurum',\n  'Deva Victrix',\n  'Mamucium',\n  'Olicana',\n  'Vinovia',\n  'Bonames',\n  'Coria',\n  'Gerulata',\n  'Vindobona',\n  'Biriciana',\n  'Cannstatt Castrum',\n  'Colonia Nervia Glevensium',\n  'Sumelocenna',\n  'Lopodunum',\n  'Traiectum ad Nicrem',\n  'Castra Batavar',\n  'Nida',\n  'Lactodurum',\n  'Bovium',\n  'Burgodunum',\n  'Lentia',\n  'Aquae Granni',\n  'Complutum',\n  'Aeminium',\n  'Traiectum ad Mosam',\n  'Coriovallum',\n  'Portus Lemanis',\n  'Andautonia',\n  'Salona',\n  'Cibalae',\n  'Aquae Helveticae',\n  'Aquincum',\n  'Apulum',\n  'Pons Aelius',\n  'Durovigutum',\n  'Aelia Capitolina',\n  'Ala',\n  'Castra Regina',\n  'Theranda',\n  'Pomaria',\n  'Partiscum',\n  'Gesoriacum',\n  'Aurelia Aquensis',\n  'Urbs Aurelianorum',\n  'Venetiae',\n  'Ragusium',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Roman, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Russian extends Civilization {}\n\nexport default Russian;\n", "import Russian from './Russian';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Russian',\n  nation: 'Russia',\n  colors: ['#0032A0', '#DA291C'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Russian, name, value))\n);\n", "import Russian from './Russian';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'Moscow',\n  'Saint Petersburg',\n  'Novosibirsk',\n  'Yekaterinburg',\n  'Nizhny Novgorod',\n  'Kazan',\n  'Chelyabinsk',\n  'Omsk',\n  'Samara',\n  'Ufa',\n  'Rostov-on-Don',\n  'Krasnoyarsk',\n  'Voronezh',\n  'Perm',\n  'Volgograd',\n  'Krasnodar',\n  'Saratov',\n  'Tyumen',\n  'Makhachkala',\n  'Tolyatti',\n  'Barnaul',\n  'Ulyanovsk',\n  'Izhevsk',\n  'Vladivostok',\n  'Irkutsk',\n  'Khabarovsk',\n  'Yaroslavl',\n  'Tomsk',\n  'Orenburg',\n  'Kemerovo',\n  'Novokuznetsk',\n  'Tula',\n  'Ryazan',\n  'Kirov',\n  'Astrakhan',\n  'Naberezhnye Chelny',\n  'Sochi',\n  'Penza',\n  'Lipetsk',\n  'Cheboksary',\n  'Balashikha',\n  'Kaliningrad',\n  'Kursk',\n  'Stavropol',\n  'Ulan-Ude',\n  'Bryansk',\n  'Tver',\n  'Magnitogorsk',\n  'Ivanovo',\n  'Belgorod',\n  'Surgut',\n  'Vladimir',\n  'Arkhangelsk',\n  'Nizhny Tagil',\n  'Kaluga',\n  'Chita',\n  'Saransk',\n  'Yakutsk',\n  'Smolensk',\n  'Podolsk',\n  'Volzhsky',\n  'Vladikavkaz',\n  'Vologda',\n  'Cherepovets',\n  'Kurgan',\n  'Oryol',\n  'Grozny',\n  'Murmansk',\n  'Tambov',\n  'Petrozavodsk',\n  'Sterlitamak',\n  'Kostroma',\n  'Nizhnevartovsk',\n  'Novorossiysk',\n  'Yoshkar-Ola',\n  'Taganrog',\n  'Komsomolsk-on-Amur',\n  'Khimki',\n  'Syktyvkar',\n  'Nalchik',\n  'Nizhnekamsk',\n  'Shakhty',\n  'Dzerzhinsk',\n  'Bratsk',\n  'Orsk',\n  'Angarsk',\n  'Engels',\n  'Blagoveshchensk',\n  'Stary Oskol',\n  'Veliky Novgorod',\n  'Korolyov',\n  'Pskov',\n  'Mytishchi',\n  'Biysk',\n  'Lyubertsy',\n  'Prokopyevsk',\n  'Yuzhno-Sakhalinsk',\n  'Balakovo',\n  'Armavir',\n  'Rybinsk',\n  'Severodvinsk',\n  'Abakan',\n  'Petropavlovsk-Kamchatsky',\n  'Norilsk',\n  'Syzran',\n  'Volgodonsk',\n  'Ussuriysk',\n  'Kamensk-Uralsky',\n  'Novocherkassk',\n  'Zlatoust',\n  'Elektrostal',\n  'Almetyevsk',\n  'Krasnogorsk',\n  'Salavat',\n  'Miass',\n  'Nakhodka',\n  'Kopeysk',\n  'Pyatigorsk',\n  'Rubtsovsk',\n  'Berezniki',\n  'Kolomna',\n  'Maykop',\n  'Odintsovo',\n  'Khasavyurt',\n  'Kovrov',\n  'Kislovodsk',\n  'Neftekamsk',\n  'Nefteyugansk',\n  'Novocheboksarsk',\n  'Serpukhov',\n  'Shchyolkovo',\n  'Novomoskovsk',\n  'Bataysk',\n  'Pervouralsk',\n  'Domodedovo',\n  'Derbent',\n  'Cherkessk',\n  'Orekhovo-Zuyevo',\n  'Nevinnomyssk',\n  'Dimitrovgrad',\n  'Nazran',\n  'Kyzyl',\n  'Oktyabrsky',\n  'Obninsk',\n  'Kaspiysk',\n  'Novy Urengoy',\n  'Ramenskoye',\n  'Kamyshin',\n  'Murom',\n  'Zhukovsky',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Russian, i === 0))\n);\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\n\nexport class Zulu extends Civilization {}\n\nexport default Zulu;\n", "import Zulu from './Zulu';\nimport Attribute from '@civ-clone/core-civilization/Attribute';\nimport { instance as attributeRegistryInstance } from '@civ-clone/core-civilization/AttributeRegistry';\n\nObject.entries({\n  people: 'Zulu',\n  nation: 'Zulus',\n  colors: ['#FFFD1E', '#000'],\n}).forEach(([name, value]: [string, any]): void =>\n  attributeRegistryInstance.register(new Attribute(Zulu, name, value))\n);\n", "import Zulu from './Zulu';\nimport CityName from '@civ-clone/core-civilization/CityName';\nimport { instance as cityNameRegistryInstance } from '@civ-clone/core-civilization/CityNameRegistry';\n\n([\n  'uMgungundlovu',\n  'Nobamba',\n  'Bulawayo',\n  'KwaDukuza',\n  'Nongoma',\n  'oNdini',\n  'Nodwengu',\n  'Ndondakusuka',\n  'Babanango',\n  'Khangela',\n  'Kwahlomendlini',\n  'Hlobane',\n  'eThekwini',\n  'Mlambongwenya',\n  'Eziqwaqweni',\n  'Isiphezi',\n  'Masotsheni',\n  'Mtunzini',\n  'Nyakamubi',\n  'Hlatikulu',\n  'Mthonjaneni',\n  'Empangeni',\n  'Pongola',\n  'Tungela',\n  'Kwamashu',\n  'Ingwavuma',\n  'Hluhluwe',\n  'Mtubatuba',\n  'Mhlahlandlela',\n  'Mthatha',\n  'Maseru',\n  'Lobamba',\n  'Qunu',\n] as string[]).forEach((name, i): void =>\n  cityNameRegistryInstance.register(new CityName(name, Zulu, i === 0))\n);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport AdvancedFlight from './AdvancedFlight';\n\nadvanceRegistryInstance.register(AdvancedFlight);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Alphabet from './Alphabet';\n\nadvanceRegistryInstance.register(Alphabet);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Astronomy from './Astronomy';\n\nadvanceRegistryInstance.register(Astronomy);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport AtomicTheory from './AtomicTheory';\n\nadvanceRegistryInstance.register(AtomicTheory);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Automobile from './Automobile';\n\nadvanceRegistryInstance.register(Automobile);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Banking from './Banking';\n\nadvanceRegistryInstance.register(Banking);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport BridgeBuilding from './BridgeBuilding';\n\nadvanceRegistryInstance.register(BridgeBuilding);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport BronzeWorking from './BronzeWorking';\n\nadvanceRegistryInstance.register(BronzeWorking);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport CeremonialBurial from './CeremonialBurial';\n\nadvanceRegistryInstance.register(CeremonialBurial);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Chemistry from './Chemistry';\n\nadvanceRegistryInstance.register(Chemistry);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Chivalry from './Chivalry';\n\nadvanceRegistryInstance.register(Chivalry);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport CodeOfLaws from './CodeOfLaws';\n\nadvanceRegistryInstance.register(CodeOfLaws);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Combustion from './Combustion';\n\nadvanceRegistryInstance.register(Combustion);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Communism from './Communism';\n\nadvanceRegistryInstance.register(Communism);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Computers from './Computers';\n\nadvanceRegistryInstance.register(Computers);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Conscription from './Conscription';\n\nadvanceRegistryInstance.register(Conscription);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Construction from './Construction';\n\nadvanceRegistryInstance.register(Construction);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Corporation from './Corporation';\n\nadvanceRegistryInstance.register(Corporation);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Currency from './Currency';\n\nadvanceRegistryInstance.register(Currency);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Democracy from './Democracy';\n\nadvanceRegistryInstance.register(Democracy);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Electricity from './Electricity';\n\nadvanceRegistryInstance.register(Electricity);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Electronics from './Electronics';\n\nadvanceRegistryInstance.register(Electronics);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Engineering from './Engineering';\n\nadvanceRegistryInstance.register(Engineering);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Explosives from './Explosives';\n\nadvanceRegistryInstance.register(Explosives);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Feudalism from './Feudalism';\n\nadvanceRegistryInstance.register(Feudalism);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Flight from './Flight';\n\nadvanceRegistryInstance.register(Flight);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport FusionPower from './FusionPower';\n\nadvanceRegistryInstance.register(FusionPower);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport GeneticEngineering from './GeneticEngineering';\n\nadvanceRegistryInstance.register(GeneticEngineering);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Gunpowder from './Gunpowder';\n\nadvanceRegistryInstance.register(Gunpowder);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport HorsebackRiding from './HorsebackRiding';\n\nadvanceRegistryInstance.register(HorsebackRiding);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Industrialization from './Industrialization';\n\nadvanceRegistryInstance.register(Industrialization);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Invention from './Invention';\n\nadvanceRegistryInstance.register(Invention);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport IronWorking from './IronWorking';\n\nadvanceRegistryInstance.register(IronWorking);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport LaborUnion from './LaborUnion';\n\nadvanceRegistryInstance.register(LaborUnion);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Literacy from './Literacy';\n\nadvanceRegistryInstance.register(Literacy);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Magnetism from './Magnetism';\n\nadvanceRegistryInstance.register(Magnetism);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport MapMaking from './MapMaking';\n\nadvanceRegistryInstance.register(MapMaking);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Masonry from './Masonry';\n\nadvanceRegistryInstance.register(Masonry);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport MassProduction from './MassProduction';\n\nadvanceRegistryInstance.register(MassProduction);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Mathematics from './Mathematics';\n\nadvanceRegistryInstance.register(Mathematics);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Medicine from './Medicine';\n\nadvanceRegistryInstance.register(Medicine);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Metallurgy from './Metallurgy';\n\nadvanceRegistryInstance.register(Metallurgy);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Monarchy from './Monarchy';\n\nadvanceRegistryInstance.register(Monarchy);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Mysticism from './Mysticism';\n\nadvanceRegistryInstance.register(Mysticism);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Navigation from './Navigation';\n\nadvanceRegistryInstance.register(Navigation);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport NuclearFission from './NuclearFission';\n\nadvanceRegistryInstance.register(NuclearFission);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport NuclearPower from './NuclearPower';\n\nadvanceRegistryInstance.register(NuclearPower);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Philosophy from './Philosophy';\n\nadvanceRegistryInstance.register(Philosophy);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Physics from './Physics';\n\nadvanceRegistryInstance.register(Physics);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Plastics from './Plastics';\n\nadvanceRegistryInstance.register(Plastics);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Pottery from './Pottery';\n\nadvanceRegistryInstance.register(Pottery);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Railroad from './Railroad';\n\nadvanceRegistryInstance.register(Railroad);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Recycling from './Recycling';\n\nadvanceRegistryInstance.register(Recycling);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Refining from './Refining';\n\nadvanceRegistryInstance.register(Refining);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Religion from './Religion';\n\nadvanceRegistryInstance.register(Religion);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Robotics from './Robotics';\n\nadvanceRegistryInstance.register(Robotics);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Rocketry from './Rocketry';\n\nadvanceRegistryInstance.register(Rocketry);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport SpaceFlight from './SpaceFlight';\n\nadvanceRegistryInstance.register(SpaceFlight);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport SteamEngine from './SteamEngine';\n\nadvanceRegistryInstance.register(SteamEngine);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Steel from './Steel';\n\nadvanceRegistryInstance.register(Steel);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Superconductor from './Superconductor';\n\nadvanceRegistryInstance.register(Superconductor);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport TheoryOfGravity from './TheoryOfGravity';\n\nadvanceRegistryInstance.register(TheoryOfGravity);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport TheRepublic from './TheRepublic';\n\nadvanceRegistryInstance.register(TheRepublic);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport TheWheel from './TheWheel';\n\nadvanceRegistryInstance.register(TheWheel);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Trade from './Trade';\n\nadvanceRegistryInstance.register(Trade);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport University from './University';\n\nadvanceRegistryInstance.register(University);\n", null, "import { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport Writing from './Writing';\n\nadvanceRegistryInstance.register(Writing);\n", null, "import BuildingComplete from '@civ-clone/core-city-build/Rules/BulidingComplete';\nimport CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\n\nexport const getRules: (engine?: Engine) => BuildingComplete[] = (\n  engine: Engine = engineInstance\n): BuildingComplete[] => [\n  new BuildingComplete(\n    new Effect((cityBuild: CityBuild, built: any): void => {\n      engine.emit('city:building-complete', cityBuild, built);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport {\n  CityBuildRegistry,\n  instance as cityBuildRegistryInstance,\n} from '@civ-clone/core-city-build/CityBuildRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport Captured from '@civ-clone/core-city/Rules/Captured';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  cityRegistry?: CityRegistry,\n  unitRegistry?: UnitRegistry,\n  cityGrowthRegistry?: CityGrowthRegistry,\n  cityBuildRegistry?: CityBuildRegistry,\n  engine?: Engine\n) => Captured[] = (\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n  cityBuildRegistry: CityBuildRegistry = cityBuildRegistryInstance,\n  engine: Engine = engineInstance\n): Captured[] => [\n  new Captured(\n    new Effect((capturedCity: City): void =>\n      cityBuildRegistry.getByCity(capturedCity).progress().set(0)\n    )\n  ),\n  new Captured(\n    new Effect((capturedCity: City): void =>\n      cityGrowthRegistry.getByCity(capturedCity).shrink()\n    )\n  ),\n  new Captured(\n    new Effect(\n      (capturedCity: City, capturingPlayer: Player, player: Player): void => {\n        engine.emit('city:captured', capturedCity, capturingPlayer, player);\n      }\n    )\n  ),\n  new Captured(\n    new Effect((capturedCity: City): void =>\n      unitRegistry\n        .getByCity(capturedCity)\n        .forEach((unit: Unit) => unit.destroy())\n    )\n  ),\n];\n\nexport default getRules;\n", "import { IConstructor } from \"@civ-clone/core-registry/Registry\";\nimport Yield from './Yield';\n\nconst negate = (value: Yield | number): number => {\n  if (value instanceof Yield) {\n    return -value.value();\n  }\n\n  return -value;\n};\n\nexport class NegativeYield extends Yield {\n  add(value: Yield | number, provider: string = ''): void {\n    super.add(negate(value), provider);\n  }\n\n  set(value: Yield | number, provider: string = ''): void {\n    super.set(negate(value), provider);\n  }\n\n  subtract(value: Yield | number, provider: string = ''): void {\n    super.subtract(negate(value), provider);\n  }\n}\n\nexport default NegativeYield;\n\nexport const makeNegative = (Target: IConstructor): void => {\n  ['add', 'set', 'subtract'].forEach((property) =>\n    Object.defineProperty(\n      Target.prototype,\n      property,\n      Object.getOwnPropertyDescriptor(NegativeYield.prototype, property) ||\n        Object.create(null)\n    )\n  );\n};\n", "import Food from '@civ-clone/base-terrain-yield-food/Food';\nimport { makeNegative } from '@civ-clone/core-yield/NegativeYield';\n\nexport class PopulationSupportFood extends Food {}\n\nmakeNegative(PopulationSupportFood);\n\nexport default PopulationSupportFood;\n", "import Food from '@civ-clone/base-terrain-yield-food/Food';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { makeNegative } from '@civ-clone/core-yield/NegativeYield';\n\nexport class UnitSupportFood extends Food {\n  #unit: Unit | null;\n\n  constructor(value: Yield | number = 0, unit: Unit | null = null) {\n    super(value, unit ? unit.id() : 'none');\n\n    this.#unit = unit;\n\n    this.addKey('unit');\n  }\n\n  unit(): Unit | null {\n    return this.#unit;\n  }\n}\n\nmakeNegative(UnitSupportFood);\n\nexport default UnitSupportFood;\n", "import Production from '@civ-clone/base-terrain-yield-production/Production';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { makeNegative } from '@civ-clone/core-yield/NegativeYield';\n\nexport class UnitSupportProduction extends Production {\n  #unit: Unit | null;\n\n  constructor(value: Yield | number = 0, unit: Unit | null = null) {\n    super(value, unit ? unit.id() : 'none');\n\n    this.#unit = unit;\n\n    this.addKey('unit');\n  }\n\n  unit(): Unit | null {\n    return this.#unit;\n  }\n}\n\nmakeNegative(UnitSupportProduction);\n\nexport default UnitSupportProduction;\n", "import { Air, Fortifiable, Naval, Worker } from '@civ-clone/civ1-unit/Types';\nimport {\n  Anarchy,\n  Communism,\n  Democracy,\n  Despotism,\n  Monarchy,\n  Republic,\n} from '@civ-clone/civ1-government/Governments';\nimport {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '@civ-clone/core-government/PlayerGovernmentRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Cost from '@civ-clone/core-city/Rules/Cost';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Government from '@civ-clone/core-government/Government';\nimport PopulationSupportFood from '@civ-clone/base-city-yield-population-support-food/PopulationSupportFood';\nimport { Settlers } from '@civ-clone/civ1-unit/Units';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitSupportFood from '@civ-clone/base-city-yield-unit-support-food/UnitSupportFood';\nimport UnitSupportProduction from '@civ-clone/base-city-yield-unit-support-production/UnitSupportProduction';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: (\n  cityGrowthRegistry?: CityGrowthRegistry,\n  playerGovernmentRegistry?: PlayerGovernmentRegistry,\n  unitRegistry?: UnitRegistry\n) => Cost[] = (\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n  playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance\n): Cost[] => [\n  new Cost(\n    new Effect(\n      (city: City): Yield =>\n        new PopulationSupportFood(cityGrowthRegistry.getByCity(city).size() * 2)\n    )\n  ),\n\n  ...(\n    [\n      [Settlers, 1, Anarchy, Despotism],\n      [Settlers, 2, Communism, Democracy, Monarchy, Republic],\n    ] as [typeof Unit, number, ...typeof Government[]][]\n  ).map(\n    ([UnitType, cost, ...governments]) =>\n      new Cost(\n        new Criterion((city: City): boolean =>\n          unitRegistry\n            .getByCity(city)\n            .some((unit: Unit): boolean => unit instanceof UnitType)\n        ),\n        new Criterion((city: City): boolean =>\n          playerGovernmentRegistry.getByPlayer(city.player()).is(...governments)\n        ),\n        new Effect((city: City): Yield[] =>\n          unitRegistry\n            .getByCity(city)\n            .filter((unit: Unit): boolean => unit instanceof UnitType)\n            .map((unit: Unit) => new UnitSupportFood(cost, unit) as Yield)\n        )\n      )\n  ),\n\n  new Cost(\n    new Criterion((city: City): boolean =>\n      playerGovernmentRegistry.getByPlayer(city.player()).is(Anarchy, Despotism)\n    ),\n    new Criterion((city: City): boolean => {\n      const cityGrowth = cityGrowthRegistry.getByCity(city);\n\n      return (\n        unitRegistry\n          .getByCity(city)\n          .filter((unit: Unit): boolean =>\n            [Air, Fortifiable, Naval, Worker].some(\n              (UnitType) => unit instanceof UnitType\n            )\n          ).length > cityGrowth.size()\n      );\n    }),\n    new Effect((city: City): Yield[] => {\n      const cityGrowth = cityGrowthRegistry.getByCity(city);\n\n      return unitRegistry\n        .getByCity(city)\n        .filter((unit: Unit): boolean =>\n          [Air, Fortifiable, Naval, Worker].some(\n            (UnitType) => unit instanceof UnitType\n          )\n        )\n        .slice(cityGrowth.size())\n        .map((unit) => new UnitSupportProduction(1, unit) as Yield);\n    })\n  ),\n\n  new Cost(\n    new Criterion((city: City): boolean =>\n      playerGovernmentRegistry\n        .getByPlayer(city.player())\n        .is(Communism, Democracy, Monarchy, Republic)\n    ),\n    new Effect((city: City): Yield[] =>\n      unitRegistry\n        .getByCity(city)\n        .filter((unit: Unit): boolean =>\n          [Air, Fortifiable, Naval, Worker].some(\n            (UnitType) => unit instanceof UnitType\n          )\n        )\n        .map((unit) => new UnitSupportProduction(1, unit) as Yield)\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  AvailableCityBuildItemsRegistry,\n  instance as availableCityBuildItemsRegistryInstance,\n} from '@civ-clone/core-city-build/AvailableCityBuildItemsRegistry';\nimport {\n  CityBuildRegistry,\n  instance as cityBuildRegistryInstance,\n} from '@civ-clone/core-city-build/CityBuildRegistry';\nimport {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport { Irrigation, Road } from '@civ-clone/civ1-world/TileImprovements';\nimport {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport City from '@civ-clone/core-city/City';\nimport CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport CityGrowth from '@civ-clone/core-city-growth/CityGrowth';\nimport Created from '@civ-clone/core-city/Rules/Created';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\nimport assignWorkers from '../../lib/assignWorkers';\nimport Criterion from '@civ-clone/core-rule/Criterion';\n\nexport const getRules: (\n  tileImprovementRegistry?: TileImprovementRegistry,\n  cityBuildRegistry?: CityBuildRegistry,\n  cityGrowthRegistry?: CityGrowthRegistry,\n  cityRegistry?: CityRegistry,\n  playerWorldRegistry?: PlayerWorldRegistry,\n  ruleRegistry?: RuleRegistry,\n  availableBuildItemsRegistry?: AvailableCityBuildItemsRegistry,\n  engine?: Engine\n) => Created[] = (\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n  cityBuildRegistry: CityBuildRegistry = cityBuildRegistryInstance,\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  availableBuildItemsRegistry: AvailableCityBuildItemsRegistry = availableCityBuildItemsRegistryInstance,\n  engine: Engine = engineInstance\n): Created[] => [\n  ...([Irrigation, Road] as typeof TileImprovement[]).map(\n    (TileImprovementType) =>\n      new Created(\n        new Criterion((city: City) =>\n          tileImprovementRegistry\n            .getByTile(city.tile())\n            .every(\n              (tileImprovement) =>\n                !(tileImprovement instanceof TileImprovementType)\n            )\n        ),\n        new Effect((city: City): void =>\n          tileImprovementRegistry.register(new TileImprovementType(city.tile()))\n        )\n      )\n  ),\n  new Created(\n    new Effect((city: City): void =>\n      cityBuildRegistry.register(\n        new CityBuild(city, availableBuildItemsRegistry, ruleRegistry)\n      )\n    )\n  ),\n  new Created(\n    new Effect((city: City): void =>\n      cityGrowthRegistry.register(new CityGrowth(city, ruleRegistry))\n    )\n  ),\n  new Created(new Effect((city: City): void => cityRegistry.register(city))),\n  new Created(\n    new Effect((city: City): void => {\n      engine.emit('city:created', city);\n    })\n  ),\n  new Created(\n    new Effect((city: City): void =>\n      assignWorkers(city, playerWorldRegistry, cityGrowthRegistry)\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Destroyed from '@civ-clone/core-city/Rules/Destroyed';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Irrigation } from '@civ-clone/civ1-world/TileImprovements';\nimport Player from '@civ-clone/core-player/Player';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  tileImprovementRegistry?: TileImprovementRegistry,\n  cityRegistry?: CityRegistry,\n  engine?: Engine,\n  unitRegistry?: UnitRegistry\n) => Destroyed[] = (\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  engine: Engine = engineInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance\n): Destroyed[] => [\n  new Destroyed(\n    new Effect((city: City): void =>\n      tileImprovementRegistry\n        .getByTile(city.tile())\n        .filter(\n          (improvement: TileImprovement): boolean =>\n            improvement instanceof Irrigation\n        )\n        .forEach((irrigation: TileImprovement): void =>\n          tileImprovementRegistry.unregister(irrigation)\n        )\n    )\n  ),\n\n  new Destroyed(\n    new Effect((city: City, player: Player | null): void => {\n      engine.emit('city:destroyed', city, player);\n    })\n  ),\n\n  new Destroyed(\n    new Effect((city: City): void =>\n      unitRegistry.getByCity(city).forEach((unit: Unit) => unit.destroy())\n    )\n  ),\n];\n\nexport default getRules;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport CityGrowth from '../CityGrowth';\n\nexport class FoodExhausted extends Rule<[CityGrowth], void> {}\n\nexport default FoodExhausted;\n", "import CityGrowth from '@civ-clone/core-city-growth/CityGrowth';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport FoodExhausted from '@civ-clone/core-city-growth/Rules/FoodExhausted';\n\nexport const getRules: () => FoodExhausted[] = (): FoodExhausted[] => [\n  new FoodExhausted(\n    new Effect((cityGrowth: CityGrowth): void => cityGrowth.shrink())\n  ),\n];\n\nexport default getRules;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport CityGrowth from '@civ-clone/core-city-growth/CityGrowth';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport FoodStorage from '@civ-clone/core-city-growth/Rules/FoodStorage';\nimport FoodExhausted from '@civ-clone/core-city-growth/Rules/FoodExhausted';\n\nexport const getRules: (ruleRegistry?: RuleRegistry) => FoodStorage[] = (\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): FoodStorage[] => [\n  new FoodStorage(\n    new Criterion(\n      (cityGrowth: CityGrowth): boolean =>\n        cityGrowth.progress().value() >= cityGrowth.cost().value()\n    ),\n    new Effect((cityGrowth: CityGrowth): void => cityGrowth.grow())\n  ),\n  new FoodStorage(\n    new Criterion(\n      (cityGrowth: CityGrowth): boolean => cityGrowth.progress().value() < 0\n    ),\n    new Effect((cityGrowth: CityGrowth): void => {\n      ruleRegistry.process(FoodExhausted, cityGrowth);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport CityGrowth from '@civ-clone/core-city-growth/CityGrowth';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Grow from '@civ-clone/core-city-growth/Rules/Grow';\nimport Tile from '@civ-clone/core-world/Tile';\nimport assignWorkers from '../../lib/assignWorkers';\n\nexport const getRules: (\n  cityGrowthRegistry?: CityGrowthRegistry,\n  playerWorldRegistry?: PlayerWorldRegistry\n) => Grow[] = (\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance\n): Grow[] => [\n  new Grow(new Effect((cityGrowth: CityGrowth): void => cityGrowth.empty())),\n  new Grow(\n    new Effect((cityGrowth: CityGrowth): void =>\n      cityGrowth.cost().set((cityGrowth.size() + 1) * 10, 'city-grow')\n    )\n  ),\n  new Grow(\n    new Criterion(\n      (cityGrowth: CityGrowth): boolean =>\n        cityGrowth.city().tilesWorked().length < cityGrowth.size() + 1\n    ),\n    new Effect((cityGrowth: CityGrowth): void =>\n      assignWorkers(cityGrowth.city(), playerWorldRegistry, cityGrowthRegistry)\n    )\n  ),\n\n  new Grow(\n    new Criterion(\n      (cityGrowth: CityGrowth): boolean =>\n        cityGrowth.city().tilesWorked().length > cityGrowth.size() + 1\n    ),\n    new Effect((cityGrowth: CityGrowth): void =>\n      cityGrowth\n        .city()\n        .tilesWorked()\n        .entries()\n        .slice(cityGrowth.size() + 1)\n        .forEach((tile: Tile): void =>\n          cityGrowth.city().tilesWorked().unregister(tile)\n        )\n    )\n  ),\n];\n\nexport default getRules;\n", "import Cost from '@civ-clone/core-city-growth/Rules/Cost';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport CityGrowth from '@civ-clone/core-city-growth/CityGrowth';\n\nexport const getRules: () => Cost[] = (): Cost[] => [\n  new Cost(\n    new Effect((cityGrowth: CityGrowth): number => 10 * (cityGrowth.size() + 1))\n  ),\n];\n\nexport default getRules;\n", "import Trade from '@civ-clone/base-terrain-yield-trade/Trade';\nimport { makeNegative } from '@civ-clone/core-yield/NegativeYield';\n\nexport class Corruption extends Trade {}\n\nmakeNegative(Corruption);\n\nexport default Corruption;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Happiness extends Yield {}\n\nexport default Happiness;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Luxuries extends Yield {}\n\nexport default Luxuries;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Research extends Yield {}\n\nexport default Research;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Unhappiness extends Yield {}\n\nexport default Unhappiness;\n", "export { Food, Production } from '@civ-clone/civ1-world/Yields';\nexport { Corruption } from '@civ-clone/base-city-yield-corruption/Corruption';\nexport { FoodStorage } from '@civ-clone/core-city-growth/Yields/FoodStorage';\nexport { Gold } from '@civ-clone/base-city-yield-gold/Gold';\nexport { Happiness } from '@civ-clone/base-city-yield-happiness/Happiness';\nexport { Luxuries } from '@civ-clone/base-city-yield-luxuries/Luxuries';\nexport { PopulationSupportFood } from '@civ-clone/base-city-yield-population-support-food/PopulationSupportFood';\nexport { Research } from '@civ-clone/base-city-yield-research/Research';\nexport { Trade } from '@civ-clone/base-terrain-yield-trade/Trade';\nexport { Unhappiness } from '@civ-clone/base-city-yield-unhappiness/Unhappiness';\nexport { UnitSupportFood } from '@civ-clone/base-city-yield-unit-support-food/UnitSupportFood';\nexport { UnitSupportProduction } from '@civ-clone/base-city-yield-unit-support-production/UnitSupportProduction';\n", "import City from '@civ-clone/core-city/City';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport class CivilDisorder extends Rule<[City, Yield[]?], void> {}\n\nexport default CivilDisorder;\n", "import City from '../City';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport class ProcessYield extends Rule<[Yield, City, Yield[]], void> {}\n\nexport default ProcessYield;\n", "import City from '@civ-clone/core-city/City';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Unit from '../Unit';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport class Unsupported extends Rule<[City, Unit, Yield], void> {}\n\nexport default Unsupported;\n", "import {\n  CityBuildRegistry,\n  instance as cityBuildRegistryInstance,\n} from '@civ-clone/core-city-build/CityBuildRegistry';\nimport {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport { Food, Production } from '@civ-clone/civ1-world/Yields';\nimport {\n  FoodStorage,\n  UnitSupportFood,\n  UnitSupportProduction,\n} from '../../Yields';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport City from '@civ-clone/core-city/City';\nimport CivilDisorder from '@civ-clone/core-city-happiness/Rules/CivilDisorder';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport ProcessYield from '@civ-clone/core-city/Rules/ProcessYield';\nimport Unsupported from '@civ-clone/core-unit/Rules/Unsupported';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: (\n  cityBuildRegistry?: CityBuildRegistry,\n  cityGrowthRegistry?: CityGrowthRegistry,\n  unitRegistry?: UnitRegistry,\n  ruleRegistry?: RuleRegistry\n) => ProcessYield[] = (\n  cityBuildRegistry: CityBuildRegistry = cityBuildRegistryInstance,\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): ProcessYield[] => [\n  new ProcessYield(\n    new Criterion(\n      (cityYield: Yield): cityYield is Food => cityYield instanceof Food\n    ),\n    new Effect((cityYield: Food, city: City, cityYields: Yield[]): void => {\n      const cityGrowth = cityGrowthRegistry.getByCity(city),\n        foodStorage = new FoodStorage(cityYield);\n\n      cityYields.forEach((cityYield) => {\n        if (\n          !(cityYield instanceof UnitSupportFood) ||\n          foodStorage.value() >= 0\n        ) {\n          return;\n        }\n\n        const unit = cityYield.unit();\n\n        if (unit === null) {\n          return;\n        }\n\n        ruleRegistry.process(Unsupported, city, unit, cityYield as Yield);\n\n        foodStorage.subtract(cityYield as Yield);\n      });\n\n      cityGrowth.add(foodStorage);\n      cityGrowth.check();\n    })\n  ),\n\n  new ProcessYield(\n    new Criterion(\n      (cityYield: Yield): cityYield is Production =>\n        cityYield instanceof Production\n    ),\n    new Effect(\n      (cityYield: Production, city: City, cityYields: Yield[]): void => {\n        const cityBuild = cityBuildRegistry.getByCity(city),\n          availableProduction = cityYield.clone();\n\n        (cityYields as (Yield | UnitSupportProduction)[])\n          .filter(\n            (cityYield): cityYield is UnitSupportProduction =>\n              cityYield instanceof UnitSupportProduction\n          )\n          .sort(\n            (yieldA, yieldB) =>\n              (yieldA.unit()?.tile().distanceFrom(city.tile()) ?? 0) -\n              (yieldB.unit()?.tile().distanceFrom(city.tile()) ?? 0)\n          )\n          .forEach((cityYield) => {\n            if (availableProduction.value() >= 0) {\n              return;\n            }\n\n            const unit = cityYield.unit();\n\n            if (unit === null) {\n              return;\n            }\n\n            ruleRegistry.process(Unsupported, city, unit, cityYield as Yield);\n\n            availableProduction.subtract(cityYield as Yield);\n          });\n\n        const updatedCityYields = city.yields();\n\n        // No production happens when there's civil disorder.\n        if (\n          !ruleRegistry\n            .get(CivilDisorder)\n            .some((rule: CivilDisorder): boolean =>\n              rule.validate(city, updatedCityYields)\n            )\n        ) {\n          cityBuild.add(availableProduction);\n        }\n\n        cityBuild.check();\n      }\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport CityGrowth from '@civ-clone/core-city-growth/CityGrowth';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Shrink from '@civ-clone/core-city-growth/Rules/Shrink';\nimport Tile from '@civ-clone/core-world/Tile';\nimport assignWorkers from '../../lib/assignWorkers';\n\nexport const getRules: (\n  cityGrowthRegistry?: CityGrowthRegistry,\n  playerWorldRegistry?: PlayerWorldRegistry\n) => Shrink[] = (\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance\n): Shrink[] => [\n  new Shrink(\n    new Criterion((cityGrowth: CityGrowth): boolean => cityGrowth.size() > 0),\n    new Effect((cityGrowth: CityGrowth): void =>\n      cityGrowth.cost().set((cityGrowth.size() + 1) * 10, 'city-shrink')\n    )\n  ),\n\n  new Shrink(\n    new Criterion((cityGrowth: CityGrowth): boolean => cityGrowth.size() > 0),\n    new Criterion(\n      (cityGrowth: CityGrowth): boolean =>\n        cityGrowth.city().tilesWorked().length > cityGrowth.size() + 1\n    ),\n    new Effect((cityGrowth: CityGrowth): void =>\n      cityGrowth\n        .city()\n        .tilesWorked()\n        .entries()\n        .slice(cityGrowth.size() + 1)\n        .forEach((tile: Tile): void =>\n          cityGrowth.city().tilesWorked().unregister(tile)\n        )\n    )\n  ),\n\n  new Shrink(\n    new Criterion((cityGrowth: CityGrowth): boolean => cityGrowth.size() > 0),\n    new Criterion(\n      (cityGrowth: CityGrowth): boolean =>\n        cityGrowth.city().tilesWorked().length < cityGrowth.size() + 1\n    ),\n    new Effect((cityGrowth: CityGrowth): void =>\n      assignWorkers(cityGrowth.city(), playerWorldRegistry, cityGrowthRegistry)\n    )\n  ),\n\n  // TODO: this needs to potentially be associated to an attacking user...\n  new Shrink(\n    new Criterion((cityGrowth: CityGrowth): boolean => cityGrowth.size() <= 0),\n    new Effect((cityGrowth: CityGrowth): void => cityGrowth.city().destroy())\n  ),\n];\n\nexport default getRules;\n", "import City from '@civ-clone/core-city/City';\nimport CityImprovement from './CityImprovement';\nimport {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\n\nexport interface ICityImprovementRegistry\n  extends IEntityRegistry<CityImprovement> {\n  getByCity(city: City, includeDestroyed?: boolean): CityImprovement[];\n}\n\nexport class CityImprovementRegistry\n  extends EntityRegistry<CityImprovement>\n  implements ICityImprovementRegistry\n{\n  constructor() {\n    super(CityImprovement);\n  }\n\n  getByCity(city: City, includeDestroyed: boolean = false) {\n    return this.filter(\n      (cityImprovement: CityImprovement): boolean =>\n        cityImprovement.city() === city && !cityImprovement.destroyed()\n    );\n  }\n}\n\nexport const instance: CityImprovementRegistry = new CityImprovementRegistry();\n\nexport default CityImprovementRegistry;\n", "import {\n  Anarchy,\n  Communism,\n  Democracy,\n  Despotism,\n  Monarchy,\n  Republic,\n} from '@civ-clone/civ1-government/Governments';\nimport {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport { Corruption, Trade } from '../../Yields';\nimport {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '@civ-clone/core-government/PlayerGovernmentRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Government from '@civ-clone/core-government/Government';\nimport { High } from '@civ-clone/core-rule/Priorities';\nimport Palace from '@civ-clone/base-city-improvement-palace/Palace';\nimport Priority from '@civ-clone/core-rule/Priority';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport YieldRule from '@civ-clone/core-city/Rules/Yield';\nimport { reduceYield } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry,\n  playerGovernmentRegistry?: PlayerGovernmentRegistry\n) => YieldRule[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance\n): YieldRule[] => [\n  new YieldRule(\n    new High(),\n    new Effect((city: City, yields: Yield[]) => {\n      // Corruption Formula: p223-224, Wilson, J.L & Emrich A. (1992). Sid Meier's Civilization, or Rome on 640K a Day. Rocklin, CA: Prima Publishing\n      const playerGovernment = playerGovernmentRegistry.getByPlayer(\n          city.player()\n        ),\n        [capital] = cityImprovementRegistry\n          .filter(\n            (cityImprovement) =>\n              cityImprovement instanceof Palace &&\n              city.player() === cityImprovement.city().player()\n          )\n          .map((cityImprovement) => cityImprovement.city()),\n        currentTrade = reduceYield(yields, Trade),\n        distanceFromCapital = playerGovernment.is(Communism)\n          ? 10\n          : playerGovernment.is(Democracy)\n          ? 0\n          : capital\n          ? capital.tile().distanceFrom(city.tile())\n          : 32,\n        // These values could be provided by `Rule`s to allow other government types to be created\n        [governmentModifier] = (\n          [\n            [Anarchy, 8],\n            [Communism, 20],\n            [Democracy, 0],\n            [Despotism, 12],\n            [Monarchy, 16],\n            [Republic, 24],\n          ] as [typeof Government, number][]\n        )\n          .filter(([GovernmentType]) => playerGovernment.is(GovernmentType))\n          .map(([, modifier]) => modifier);\n\n      return new Corruption(\n        governmentModifier\n          ? // Assuming `floor` here, although it might be `round`ed... Need to check in Civ.\n            Math.min(\n              Math.floor(\n                (currentTrade * distanceFromCapital * 3) /\n                  (10 * governmentModifier)\n              ),\n              currentTrade\n            )\n          : 0,\n        distanceFromCapital.toFixed(2)\n      );\n    })\n  ),\n\n  new YieldRule(\n    new Priority(0), // X High\n    new Effect((city: City) =>\n      city\n        .tilesWorked()\n        .entries()\n        .flatMap((tile) =>\n          tile.yields(city.player()).flatMap(\n            (tileYield: Yield) =>\n              new (tileYield.constructor as typeof Yield)(\n                tileYield.value(),\n                tile.id() +\n                  ': ' +\n                  tileYield\n                    .values()\n                    .map(([, provider]) => provider)\n                    .join('-')\n              )\n          )\n        )\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityBuild as CityBuildAction,\n  ChangeProduction,\n} from '@civ-clone/core-city-build/PlayerActions';\nimport {\n  CityBuildRegistry,\n  instance as cityBuildRegistryInstance,\n} from '@civ-clone/core-city-build/CityBuildRegistry';\nimport {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport Action from '@civ-clone/core-player/Rules/Action';\nimport City from '@civ-clone/core-city/City';\nimport CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getRules: (\n  cityBuildRegistry?: CityBuildRegistry,\n  cityRegistry?: CityRegistry\n) => Action[] = (\n  cityBuildRegistry: CityBuildRegistry = cityBuildRegistryInstance,\n  cityRegistry: CityRegistry = cityRegistryInstance\n): Action[] => {\n  return [\n    new Action(\n      new Criterion((player: Player): boolean =>\n        cityRegistry\n          .getByPlayer(player)\n          .map((city: City): CityBuild => cityBuildRegistry.getByCity(city))\n          .some((cityBuild: CityBuild): boolean => !cityBuild.building())\n      ),\n      new Effect((player: Player) =>\n        cityRegistry\n          .getByPlayer(player)\n          .map((city: City): CityBuild => cityBuildRegistry.getByCity(city))\n          .filter((cityBuild: CityBuild): boolean => !cityBuild.building())\n          .map(\n            (cityBuild: CityBuild): CityBuildAction =>\n              new CityBuildAction(player, cityBuild)\n          )\n      )\n    ),\n    new Action(\n      new Criterion((player: Player): boolean =>\n        cityRegistry\n          .getByPlayer(player)\n          .map((city: City): CityBuild => cityBuildRegistry.getByCity(city))\n          .some((cityBuild: CityBuild): boolean => !!cityBuild.building())\n      ),\n      new Effect((player: Player) =>\n        cityRegistry\n          .getByPlayer(player)\n          .map((city: City): CityBuild => cityBuildRegistry.getByCity(city))\n          .filter((cityBuild: CityBuild): boolean => !!cityBuild.building())\n          .map(\n            (cityBuild: CityBuild): ChangeProduction =>\n              new ChangeProduction(player, cityBuild)\n          )\n      )\n    ),\n  ];\n};\n\nexport default getRules;\n", "import {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport { Attack } from '@civ-clone/civ1-unit/Actions';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Defeated from '@civ-clone/core-unit/Rules/Defeated';\nimport Effect from '@civ-clone/core-rule/Effect';\n\nexport const getRules: (\n  cityRegistry?: CityRegistry,\n  cityGrowthRegistry?: CityGrowthRegistry,\n  engine?: Engine\n) => Defeated[] = (\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n  engine: Engine = engineInstance\n): Defeated[] => [\n  new Defeated(\n    new Criterion(\n      (defeated, by, action) =>\n        action instanceof Attack &&\n        action.to() === defeated.tile() &&\n        cityRegistry.getByTile(action.to()) !== null\n    ),\n    new Effect((defeated) => {\n      const city = cityRegistry.getByTile(defeated.tile())!,\n        cityGrowth = cityGrowthRegistry.getByCity(city);\n\n      cityGrowth.shrink();\n    })\n  ),\n  new Defeated(\n    new Effect((defeated, by, action) =>\n      engine.emit('unit:defeated', defeated, by, action)\n    )\n  ),\n];\n\nexport default getRules;\n", "import City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Unsupported from '@civ-clone/core-unit/Rules/Unsupported';\n\nexport const getRules = (): Unsupported[] => [\n  new Unsupported(new Effect((city: City, unit: Unit) => unit.destroy())),\n];\n\nexport default getRules;\n", "import cityBuildingComplete from './Rules/City/building-complete';\nimport cityCaptured from './Rules/City/captured';\nimport cityCost from './Rules/City/cost';\nimport cityCreated from './Rules/City/created';\nimport cityDestroyed from './Rules/City/destroyed';\nimport cityFoodExhausted from './Rules/City/food-exhausted';\nimport cityFoodStorage from './Rules/City/food-storage';\nimport cityGrow from './Rules/City/grow';\nimport cityGrowthCost from './Rules/City/growth-cost';\nimport cityProcessYield from './Rules/City/process-yield';\nimport cityShrink from './Rules/City/shrink';\nimport cityYield from './Rules/City/yield';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport playerAction from './Rules/Player/action';\nimport unitDefeated from './Rules/Unit/defeated';\nimport unitUnsupported from './Rules/Unit/unsupported';\n\nruleRegistryInstance.register(\n  ...cityBuildingComplete(),\n  ...cityCaptured(),\n  ...cityCost(),\n  ...cityCreated(),\n  ...cityDestroyed(),\n  ...cityFoodExhausted(),\n  ...cityFoodStorage(),\n  ...cityGrow(),\n  ...cityGrowthCost(),\n  ...cityProcessYield(),\n  ...cityShrink(),\n  ...cityYield(),\n  ...playerAction(),\n  ...unitDefeated(),\n  ...unitUnsupported()\n);\n", null, "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Unhappiness from '@civ-clone/base-city-yield-unhappiness/Unhappiness';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { makeNegative } from '@civ-clone/core-yield/NegativeYield';\n\nexport class CityImprovementContent extends Unhappiness {\n  #cityImprovement: CityImprovement;\n\n  constructor(value: number | Yield, cityImprovement: CityImprovement) {\n    super(value, cityImprovement.id());\n\n    this.#cityImprovement = cityImprovement;\n\n    this.addKey('cityImprovement');\n  }\n\n  cityImprovement(): CityImprovement {\n    return this.#cityImprovement;\n  }\n}\n\nmakeNegative(CityImprovementContent);\n\nexport default CityImprovementContent;\n", "import Happiness from '@civ-clone/base-city-yield-happiness/Happiness';\n\nexport class LuxuryHappiness extends Happiness {}\n\nexport default LuxuryHappiness;\n", "import Unhappiness from '@civ-clone/base-city-yield-unhappiness/Unhappiness';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { makeNegative } from '@civ-clone/core-yield/NegativeYield';\n\nexport class MartialLaw extends Unhappiness {\n  #unit: Unit;\n\n  constructor(value: number | Yield, unit: Unit) {\n    super(value, unit.id());\n\n    this.#unit = unit;\n\n    this.addKey('unit');\n  }\n\n  unit(): Unit {\n    return this.#unit;\n  }\n}\n\nmakeNegative(MartialLaw);\n\nexport default MartialLaw;\n", "import Unhappiness from '@civ-clone/base-city-yield-unhappiness/Unhappiness';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport class MilitaryUnhappiness extends Unhappiness {\n  #unit: Unit;\n\n  constructor(value: number | Yield, unit: Unit) {\n    super(value, unit.id());\n\n    this.#unit = unit;\n\n    this.addKey('unit');\n  }\n\n  unit(): Unit {\n    return this.#unit;\n  }\n}\n\nexport default MilitaryUnhappiness;\n", "import Unhappiness from '@civ-clone/base-city-yield-unhappiness/Unhappiness';\n\nexport class PopulationUnhappiness extends Unhappiness {}\n\nexport default PopulationUnhappiness;\n", "export { Research } from '@civ-clone/base-city-yield-research/Research';\n", "export { CityImprovementContent } from '@civ-clone/base-city-yield-city-improvement-content/CityImprovementContent';\nexport { Gold } from '@civ-clone/civ1-city/Yields';\nexport { Happiness } from '@civ-clone/base-city-yield-happiness/Happiness';\nexport { Luxuries } from '@civ-clone/base-city-yield-luxuries/Luxuries';\nexport { LuxuryHappiness } from '@civ-clone/base-city-yield-luxury-happiness/LuxuryHappiness';\nexport { MartialLaw } from '@civ-clone/base-city-yield-martial-law-content/MartialLaw';\nexport { MilitaryUnhappiness } from '@civ-clone/base-city-yield-military-unhappiness/MilitaryUnhappiness';\nexport { PopulationUnhappiness } from '@civ-clone/base-city-yield-population-unhappiness/PopulationUnhappiness';\nexport { Production } from '@civ-clone/civ1-world/Yields';\nexport { Research } from '@civ-clone/civ1-science/Yields';\nexport { Unhappiness } from '@civ-clone/base-city-yield-unhappiness/Unhappiness';\n", "import City from '@civ-clone/core-city/City';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport class CelebrateLeader extends Rule<[City, Yield[]?], void> {}\n\nexport default CelebrateLeader;\n", "import {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport { Happiness, Unhappiness } from '../../Yields';\nimport CelebrateLeader from '@civ-clone/core-city-happiness/Rules/CelebrateLeader';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { reduceYields } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules: (\n  cityGrowthRegistry?: CityGrowthRegistry\n) => CelebrateLeader[] = (\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance\n): CelebrateLeader[] => [\n  new CelebrateLeader(\n    new Criterion(\n      (city: City): boolean => cityGrowthRegistry.getByCity(city).size() > 2\n    ),\n    new Criterion((city: City, yields: Yield[] = city.yields()): boolean => {\n      const [happiness, unhappiness] = reduceYields(\n        yields,\n        Happiness,\n        Unhappiness\n      );\n\n      // TODO: This might not have to be 0, it needs to be worked out properly based on the city size\n      return (\n        unhappiness === 0 &&\n        Math.floor(happiness) >= cityGrowthRegistry.getByCity(city).size() / 2\n      );\n    })\n  ),\n];\n\nexport default getRules;\n", "import { Air, Fortifiable, Naval } from '@civ-clone/civ1-unit/Types';\nimport {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport { Democracy, Republic } from '@civ-clone/civ1-government/Governments';\nimport { MilitaryUnhappiness, PopulationUnhappiness } from '../../Yields';\nimport {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '@civ-clone/core-government/PlayerGovernmentRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport City from '@civ-clone/core-city/City';\nimport CityYield from '@civ-clone/core-city/Rules/Yield';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Government from '@civ-clone/core-government/Government';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: (\n  cityGrowthRegistry?: CityGrowthRegistry,\n  playerGovernmentRegistry?: PlayerGovernmentRegistry,\n  unitRegistry?: UnitRegistry\n) => CityYield[] = (\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n  playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance\n): CityYield[] => [\n  new CityYield(\n    // TODO: factor in difficulty levels\n    new Effect(\n      (city: City): Yield =>\n        new PopulationUnhappiness(\n          Math.max(cityGrowthRegistry.getByCity(city).size() - 5, 0)\n        )\n    )\n  ),\n\n  ...(\n    [\n      [Republic, 1],\n      [Democracy, 2],\n    ] as [typeof Government, number][]\n  ).map(\n    ([GovernmentType, discontent]) =>\n      new CityYield(\n        new Criterion((city: City): boolean => {\n          try {\n            return playerGovernmentRegistry\n              .getByPlayer(city.player())\n              .is(GovernmentType);\n          } catch (e) {\n            return false;\n          }\n        }),\n        new Criterion(\n          (city: City): boolean =>\n            unitRegistry\n              .getByCity(city)\n              .filter(\n                (unit) =>\n                  [Air, Fortifiable, Naval].some(\n                    (UnitType) => unit instanceof UnitType\n                  ) && unit.tile() !== city.tile()\n              ).length > 0\n        ),\n        new Effect((city: City): Yield[] =>\n          unitRegistry\n            .getByCity(city)\n            .filter(\n              (unit) =>\n                [Air, Fortifiable, Naval].some(\n                  (UnitType) => unit instanceof UnitType\n                ) && unit.tile() !== city.tile()\n            )\n            .map((unit) => new MilitaryUnhappiness(discontent, unit) as Yield)\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import { Happiness, Unhappiness } from '../../Yields';\nimport City from '@civ-clone/core-city/City';\nimport CivilDisorder from '@civ-clone/core-city-happiness/Rules/CivilDisorder';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { reduceYields } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules: () => CivilDisorder[] = (): CivilDisorder[] => [\n  new CivilDisorder(\n    new Criterion((city: City, yields: Yield[] = city.yields()): boolean => {\n      const [happiness, unhappiness] = reduceYields(\n        yields,\n        Happiness,\n        Unhappiness\n      );\n\n      return unhappiness > happiness;\n    })\n  ),\n];\n\nexport default getRules;\n", "import Criteria from '../Criteria';\nimport Criterion from '../Criterion';\n\nexport class Or<C extends any[] = any[]> extends Criteria<C> {\n  validate(...args: C): boolean {\n    return (\n      !this.criteria().length ||\n      this.criteria().some((criterion: Criterion<C>): boolean =>\n        criterion.validate(...args)\n      )\n    );\n  }\n}\n\nexport default Or;\n", "import {\n  Anarchy,\n  Communism,\n  Despotism,\n  Monarchy,\n} from '@civ-clone/civ1-government/Governments';\nimport {\n  Cathedral,\n  Colosseum,\n  Temple,\n} from '@civ-clone/civ1-city-improvement/CityImprovements';\nimport {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport {\n  CityImprovementContent,\n  Happiness,\n  Luxuries,\n  LuxuryHappiness,\n  MartialLaw,\n  Unhappiness,\n} from '../../Yields';\nimport {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '@civ-clone/core-government/PlayerGovernmentRegistry';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Advance from '@civ-clone/core-science/Advance';\nimport City from '@civ-clone/core-city/City';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Cost from '@civ-clone/core-city/Rules/Cost';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Fortifiable } from '@civ-clone/civ1-unit/Types';\nimport High from '@civ-clone/core-rule/Priorities/High';\nimport { Low } from '@civ-clone/core-rule/Priorities';\nimport { Mysticism } from '@civ-clone/civ1-science/Advances';\nimport Or from '@civ-clone/core-rule/Criteria/Or';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { reduceYield } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules: (\n  ruleRegistry?: RuleRegistry,\n  cityGrowthRegistry?: CityGrowthRegistry,\n  cityImprovementRegistry?: CityImprovementRegistry,\n  playerGovernmentRegistry?: PlayerGovernmentRegistry,\n  playerResearchRegistry?: PlayerResearchRegistry,\n  unitRegistry?: UnitRegistry\n) => Cost[] = (\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance,\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance\n): Cost[] => [\n  new Cost(\n    new Criterion((city: City): boolean =>\n      playerGovernmentRegistry\n        .getByPlayer(city.player())\n        .is(Anarchy, Communism, Despotism, Monarchy)\n    ),\n    new Effect((city: City, yields: Yield[]): Yield[] =>\n      unitRegistry\n        .getByTile(city.tile())\n        .filter((unit: Unit): boolean => unit instanceof Fortifiable)\n        .slice(0, Math.min(4, reduceYield(yields, Unhappiness)))\n        .map((unit) => new MartialLaw(1, unit) as Yield)\n    )\n  ),\n\n  ...(\n    [\n      [Temple, 1],\n      [Temple, 1, Mysticism],\n      [Colosseum, 3],\n      [Cathedral, 4],\n    ] as [typeof CityImprovement, number, ...typeof Advance[]][]\n  ).map(\n    ([CityImprovementType, value, ...advances]) =>\n      new Cost(\n        new Low(),\n        new Criterion((city: City): boolean =>\n          cityImprovementRegistry\n            .getByCity(city)\n            .some(\n              (cityImprovement: CityImprovement): boolean =>\n                cityImprovement instanceof CityImprovementType\n            )\n        ),\n        new Or(\n          new Criterion((city: City): boolean => advances.length === 0),\n          new Criterion((city: City): boolean =>\n            advances.every((AdvanceType) =>\n              playerResearchRegistry\n                .getByPlayer(city.player())\n                .completed(AdvanceType)\n            )\n          )\n        ),\n        new Criterion(\n          (city: City, yields: Yield[]) => reduceYield(yields, Unhappiness) > 0\n        ),\n        new Effect(\n          (city: City, yields: Yield[]): Yield =>\n            new CityImprovementContent(\n              Math.min(value, reduceYield(yields, Unhappiness)),\n              cityImprovementRegistry\n                .getByCity(city)\n                .filter(\n                  (cityImprovement) =>\n                    cityImprovement instanceof CityImprovementType\n                )[0]\n            ) as Yield\n        )\n      )\n  ),\n\n  new Cost(\n    new High(),\n    new Effect(\n      (city: City, yields: Yield[]): Yield =>\n        new LuxuryHappiness(\n          Math.floor(reduceYield(yields, Luxuries) / 2),\n          Luxuries.name\n        )\n    )\n  ),\n];\n\nexport default getRules;\n", "import Player from '../Player';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class TurnStart extends Rule<[Player], void> {}\n\nexport default TurnStart;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport CelebrateLeader from '@civ-clone/core-city-happiness/Rules/CelebrateLeader';\nimport CivilDisorder from '@civ-clone/core-city-happiness/Rules/CivilDisorder';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Low } from '@civ-clone/core-rule/Priorities';\nimport Player from '@civ-clone/core-player/Player';\nimport TurnStart from '@civ-clone/core-player/Rules/TurnStart';\n\nexport const getRules: (\n  cityRegistry?: CityRegistry,\n  ruleRegistry?: RuleRegistry,\n  engine?: Engine\n) => TurnStart[] = (\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  engine = engineInstance\n): TurnStart[] => [\n  new TurnStart(\n    new Low(),\n    new Effect((player: Player): void =>\n      cityRegistry.getByPlayer(player).forEach((city: City) => {\n        if (\n          ruleRegistry\n            .get(CivilDisorder)\n            .some((rule: CivilDisorder): boolean =>\n              rule.validate(city, city.yields())\n            )\n        ) {\n          engine.emit('city:civil-disorder', city);\n        }\n\n        if (\n          ruleRegistry\n            .get(CelebrateLeader)\n            .some((rule: CelebrateLeader): boolean =>\n              rule.validate(city, city.yields())\n            )\n        ) {\n          engine.emit('city:leader-celebration', city);\n        }\n      })\n    )\n  ),\n];\n\nexport default getRules;\n", "import { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport celebrateLeader from './Rules/City/celebrate-leader';\nimport cityYield from './Rules/City/yield';\nimport civilDisorder from './Rules/City/civil-disorder';\nimport cost from './Rules/City/cost';\nimport turnStart from './Rules/Player/turn-start';\n\nruleRegistryInstance.register(\n  ...celebrateLeader(),\n  ...cityYield(),\n  ...civilDisorder(),\n  ...cost(),\n  ...turnStart()\n);\n", null, "import {\n  Aqueduct,\n  Bank,\n  Barracks,\n  Cathedral,\n  CityWalls,\n  Colosseum,\n  Courthouse,\n  Factory,\n  Granary,\n  HydroPlant,\n  Library,\n  ManufacturingPlant,\n  Marketplace,\n  MassTransit,\n  NuclearPlant,\n  Palace,\n  PowerPlant,\n  RecyclingCenter,\n  SdiDefence,\n  Temple,\n  University,\n} from './CityImprovements';\nimport { instance as availableCityBuildItemsRegistryInstance } from '@civ-clone/core-city-build/AvailableCityBuildItemsRegistry';\n\navailableCityBuildItemsRegistryInstance.register(\n  Aqueduct,\n  Bank,\n  Barracks,\n  Cathedral,\n  CityWalls,\n  Colosseum,\n  Courthouse,\n  Factory,\n  Granary,\n  HydroPlant,\n  Library,\n  ManufacturingPlant,\n  Marketplace,\n  MassTransit,\n  NuclearPlant,\n  Palace,\n  PowerPlant,\n  RecyclingCenter,\n  SdiDefence,\n  Temple,\n  University\n);\n", "import {\n  Aqueduct,\n  Bank,\n  Cathedral,\n  CityWalls,\n  Colosseum,\n  Courthouse,\n  Factory,\n  Granary,\n  HydroPlant,\n  Library,\n  ManufacturingPlant,\n  Marketplace,\n  MassTransit,\n  NuclearPlant,\n  Palace,\n  PowerPlant,\n  RecyclingCenter,\n  SdiDefence,\n  Temple,\n  University,\n} from '../../CityImprovements';\nimport {\n  Banking,\n  CeremonialBurial,\n  CodeOfLaws,\n  Construction,\n  Currency,\n  Electronics,\n  Industrialization,\n  Masonry,\n  MassProduction,\n  NuclearPower,\n  Pottery,\n  Recycling,\n  Refining,\n  Religion,\n  Robotics,\n  Superconductor,\n  University as UniversityAdvance,\n  Writing,\n} from '@civ-clone/civ1-science/Advances';\nimport { Build, IBuildCriterion } from '@civ-clone/core-city-build/Rules/Build';\nimport {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport Advance from '@civ-clone/core-science/Advance';\nimport City from '@civ-clone/core-city/City';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry,\n  playerResearchRegistry?: PlayerResearchRegistry\n) => Build[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n): Build[] => [\n  new Build(\n    new Effect(\n      (city: City, BuildItem: IConstructor): IBuildCriterion =>\n        new Criterion(\n          (): boolean =>\n            !cityImprovementRegistry\n              .getByCity(city)\n              .some(\n                (improvement: CityImprovement): boolean =>\n                  improvement instanceof BuildItem\n              )\n        )\n    )\n  ),\n  ...(\n    [\n      [Aqueduct, Construction],\n      [CityWalls, Masonry],\n      [Colosseum, Construction],\n      [Courthouse, CodeOfLaws],\n      [Granary, Pottery],\n      [Library, Writing],\n      [Marketplace, Currency],\n      [Palace, Masonry],\n      [Temple, CeremonialBurial],\n      [Bank, Banking],\n      [Cathedral, Religion],\n      [Factory, Industrialization],\n      [HydroPlant, Electronics],\n      [MassTransit, MassProduction],\n      [ManufacturingPlant, Robotics],\n      [NuclearPlant, NuclearPower],\n      [PowerPlant, Refining],\n      [RecyclingCenter, Recycling],\n      [SdiDefence, Superconductor],\n      [University, UniversityAdvance],\n    ] as [typeof CityImprovement, typeof Advance][]\n  ).map(\n    ([CityImprovementType, RequiredAdvance]): Build =>\n      new Build(\n        new Criterion(\n          (city: City, BuildItem: IConstructor): boolean =>\n            BuildItem === CityImprovementType\n        ),\n        new Effect(\n          (city: City): IBuildCriterion =>\n            new Criterion((): boolean =>\n              playerResearchRegistry\n                .getByPlayer(city.player())\n                .completed(RequiredAdvance)\n            )\n        )\n      )\n  ),\n  ...(\n    [\n      [Bank, Marketplace],\n      [University, Library],\n      [HydroPlant, Factory],\n      [NuclearPlant, Factory],\n      [PowerPlant, Factory],\n      [ManufacturingPlant, HydroPlant, NuclearPlant, PowerPlant],\n    ] as [typeof CityImprovement, ...typeof CityImprovement[]][]\n  ).map(\n    ([Improvement, ...Requires]): Build =>\n      new Build(\n        new Criterion(\n          (city: City, BuildItem: IConstructor): boolean =>\n            BuildItem === Improvement\n        ),\n        new Effect(\n          (city: City): IBuildCriterion =>\n            new Criterion((): boolean =>\n              cityImprovementRegistry\n                .getByCity(city)\n                .some((improvement: CityImprovement): boolean =>\n                  Requires.some(\n                    (Required: typeof CityImprovement): boolean =>\n                      improvement instanceof Required\n                  )\n                )\n            )\n        )\n      )\n  ),\n  ...(\n    [\n      [Courthouse, Palace],\n      [HydroPlant, NuclearPlant, PowerPlant],\n      [NuclearPlant, PowerPlant, HydroPlant],\n      [PowerPlant, HydroPlant, NuclearPlant],\n    ] as [typeof CityImprovement, ...typeof CityImprovement[]][]\n  ).map(\n    ([Improvement, ...Prevents]) =>\n      new Build(\n        new Criterion(\n          (city: City, BuildItem: IConstructor): boolean =>\n            BuildItem === Improvement\n        ),\n        new Effect(\n          (city: City): IBuildCriterion =>\n            new Criterion((): boolean =>\n              cityImprovementRegistry\n                .getByCity(city)\n                .every(\n                  (improvement: CityImprovement): boolean =>\n                    !Prevents.some(\n                      (Prevent: typeof CityImprovement): boolean =>\n                        improvement instanceof Prevent\n                    )\n                )\n            )\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Aqueduct,\n  Bank,\n  Barracks,\n  Cathedral,\n  CityWalls,\n  Colosseum,\n  Courthouse,\n  Factory,\n  Granary,\n  HydroPlant,\n  Library,\n  ManufacturingPlant,\n  Marketplace,\n  MassTransit,\n  NuclearPlant,\n  Palace,\n  PowerPlant,\n  RecyclingCenter,\n  SdiDefence,\n  Temple,\n  University,\n} from '../../CityImprovements';\nimport {\n  BuildCost,\n  buildCost,\n} from '@civ-clone/core-city-build/Rules/BuildCost';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Buildable from '@civ-clone/core-city-build/Buildable';\n\nexport const getRules: () => BuildCost[] = () => [\n  ...(\n    [\n      [Aqueduct, 120],\n      [Barracks, 40],\n      [CityWalls, 120],\n      [Colosseum, 100],\n      [Courthouse, 80],\n      [Granary, 60],\n      [Library, 80],\n      [Marketplace, 80],\n      [Palace, 200],\n      [Temple, 40],\n      [Bank, 120],\n      [Cathedral, 160],\n      [Factory, 200],\n      [HydroPlant, 240],\n      [MassTransit, 160],\n      [ManufacturingPlant, 320],\n      [NuclearPlant, 160],\n      [PowerPlant, 160],\n      [RecyclingCenter, 200],\n      [SdiDefence, 200],\n      [University, 160],\n    ] as [typeof CityImprovement, number][]\n  ).flatMap(\n    ([CityImprovementType, cost]: [\n      typeof CityImprovement,\n      number\n    ]): BuildCost[] =>\n      buildCost(CityImprovementType as unknown as typeof Buildable, cost)\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport Captured from '@civ-clone/core-city/Rules/Captured';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Palace } from '../../CityImprovements';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry,\n  randomNumberGenerator?: () => number\n) => Captured[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): Captured[] => [\n  new Captured(\n    new Effect((capturedCity: City): void => {\n      const cityImprovements = cityImprovementRegistry\n          .getByCity(capturedCity)\n          .filter((cityImprovement) => !(cityImprovement instanceof Wonder)),\n        [palace] = cityImprovements.filter(\n          (cityImprovement) => cityImprovement instanceof Palace\n        );\n\n      if (palace) {\n        palace.destroy();\n\n        cityImprovements.splice(cityImprovements.indexOf(palace), 1);\n      }\n\n      while (cityImprovements.length > 0 && randomNumberGenerator() > 0.7) {\n        const randomImprovement =\n          cityImprovements[\n            Math.floor(randomNumberGenerator() * cityImprovements.length)\n          ];\n\n        if (!randomImprovement) {\n          break;\n        }\n\n        randomImprovement.destroy();\n\n        cityImprovements.splice(cityImprovements.indexOf(randomImprovement), 1);\n      }\n    })\n  ),\n];\n\nexport default getRules;\n", "import CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Gold from '@civ-clone/base-city-yield-gold/Gold';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { makeNegative } from '@civ-clone/core-yield/NegativeYield';\n\nexport class CityImprovementMaintenanceGold extends Gold {\n  #cityImprovement: CityImprovement | null;\n\n  constructor(\n    value: Yield | number = 0,\n    cityImprovement: CityImprovement | null = null\n  ) {\n    super(value, cityImprovement ? cityImprovement.id() : 'none');\n\n    this.#cityImprovement = cityImprovement;\n\n    this.addKey('cityImprovement');\n  }\n\n  cityImprovement(): CityImprovement | null {\n    return this.#cityImprovement;\n  }\n}\n\nmakeNegative(CityImprovementMaintenanceGold);\n\nexport default CityImprovementMaintenanceGold;\n", "export { Gold, Production } from '@civ-clone/civ1-city/Yields';\nexport { CityImprovementMaintenanceGold } from '@civ-clone/base-city-yield-city-improvement-maintenance-gold/CityImprovementMaintenanceGold';\nexport { Corruption } from '@civ-clone/base-city-yield-corruption/Corruption';\nexport { FoodStorage } from '@civ-clone/core-city-growth/Yields/FoodStorage';\nexport { Luxuries } from '@civ-clone/base-city-yield-luxuries/Luxuries';\nexport { Research } from '@civ-clone/civ1-science/Yields';\nexport { Trade } from '@civ-clone/base-terrain-yield-trade/Trade';\n", "import {\n  Aqueduct,\n  Bank,\n  Barracks,\n  Cathedral,\n  CityWalls,\n  Colosseum,\n  Courthouse,\n  Factory,\n  Granary,\n  HydroPlant,\n  Library,\n  ManufacturingPlant,\n  Marketplace,\n  MassTransit,\n  NuclearPlant,\n  Palace,\n  PowerPlant,\n  RecyclingCenter,\n  SdiDefence,\n  Temple,\n  University,\n} from '../../CityImprovements';\nimport { Automobile, Gunpowder } from '@civ-clone/civ1-science/Advances';\nimport {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport Advance from '@civ-clone/core-science/Advance';\nimport City from '@civ-clone/core-city/City';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport { CityImprovementMaintenanceGold } from '../../Yields';\nimport Cost from '@civ-clone/core-city/Rules/Cost';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry,\n  playerResearchRegistry?: PlayerResearchRegistry\n) => Cost[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n): Cost[] => [\n  ...(\n    [\n      [Aqueduct, CityImprovementMaintenanceGold, 2],\n      [Bank, CityImprovementMaintenanceGold, 3],\n      [Cathedral, CityImprovementMaintenanceGold, 3],\n      [CityWalls, CityImprovementMaintenanceGold, 2],\n      [Colosseum, CityImprovementMaintenanceGold, 2],\n      [Courthouse, CityImprovementMaintenanceGold, 1],\n      [Factory, CityImprovementMaintenanceGold, 4],\n      [Granary, CityImprovementMaintenanceGold, 1],\n      [HydroPlant, CityImprovementMaintenanceGold, 4],\n      [Library, CityImprovementMaintenanceGold, 1],\n      [ManufacturingPlant, CityImprovementMaintenanceGold, 6],\n      [Marketplace, CityImprovementMaintenanceGold, 1],\n      [MassTransit, CityImprovementMaintenanceGold, 4],\n      [NuclearPlant, CityImprovementMaintenanceGold, 2],\n      [Palace, CityImprovementMaintenanceGold, 0],\n      [PowerPlant, CityImprovementMaintenanceGold, 4],\n      [RecyclingCenter, CityImprovementMaintenanceGold, 2],\n      [SdiDefence, CityImprovementMaintenanceGold, 4],\n      [Temple, CityImprovementMaintenanceGold, 1],\n      [University, CityImprovementMaintenanceGold, 3],\n    ] as [\n      typeof CityImprovement,\n      typeof CityImprovementMaintenanceGold,\n      number\n    ][]\n  ).map(\n    ([CityImprovementType, YieldType, cost]): Cost =>\n      new Cost(\n        new Criterion((city: City): boolean =>\n          cityImprovementRegistry\n            .getByCity(city)\n            .some(\n              (cityImprovement: CityImprovement): boolean =>\n                cityImprovement instanceof CityImprovementType\n            )\n        ),\n        new Effect((city: City): Yield => {\n          const [cityImprovement] = cityImprovementRegistry\n            .getByCity(city)\n            .filter(\n              (cityImprovement) =>\n                cityImprovement instanceof CityImprovementType\n            );\n\n          return new YieldType(cost, cityImprovement) as Yield;\n        })\n      )\n  ),\n\n  ...(\n    [\n      [Barracks, CityImprovementMaintenanceGold, 0, null, Gunpowder],\n      [Barracks, CityImprovementMaintenanceGold, 1, Gunpowder, Automobile],\n      [Barracks, CityImprovementMaintenanceGold, 2, Automobile, null],\n    ] as [\n      typeof CityImprovement,\n      typeof CityImprovementMaintenanceGold,\n      number,\n      typeof Advance | null,\n      typeof Advance | null\n    ][]\n  ).map(\n    ([\n      CityImprovementType,\n      YieldType,\n      cost,\n      RequiredAdvance,\n      ObsoletingAdvance,\n    ]): Cost =>\n      new Cost(\n        new Criterion((city: City): boolean =>\n          cityImprovementRegistry\n            .getByCity(city)\n            .some(\n              (cityImprovement: CityImprovement): boolean =>\n                cityImprovement instanceof CityImprovementType\n            )\n        ),\n        new Criterion(\n          (city: City): boolean =>\n            RequiredAdvance === null ||\n            playerResearchRegistry\n              .getByPlayer(city.player())\n              .completed(RequiredAdvance)\n        ),\n        new Criterion(\n          (city: City): boolean =>\n            ObsoletingAdvance === null ||\n            !playerResearchRegistry\n              .getByPlayer(city.player())\n              .completed(ObsoletingAdvance)\n        ),\n        new Effect((city: City): Yield => {\n          const [cityImprovement] = cityImprovementRegistry\n            .getByCity(city)\n            .filter(\n              (cityImprovement) =>\n                cityImprovement instanceof CityImprovementType\n            );\n\n          return new YieldType(cost, cityImprovement) as Yield;\n        })\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Created from '@civ-clone/core-city/Rules/Created';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Palace } from '../../CityImprovements';\n\nexport const getRules: (\n  cityRegistry?: CityRegistry,\n  cityImprovementRegistry?: CityImprovementRegistry,\n  ruleRegistry?: RuleRegistry\n) => Created[] = (\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): Created[] => [\n  new Created(\n    new Criterion(\n      (city: City): boolean =>\n        cityRegistry.getByPlayer(city.player()).length === 0\n    ),\n    new Effect((city: City): void =>\n      cityImprovementRegistry.register(new Palace(city, ruleRegistry))\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Destroyed from '@civ-clone/core-city/Rules/Destroyed';\nimport Effect from '@civ-clone/core-rule/Effect';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry\n) => Destroyed[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance\n): Destroyed[] => [\n  new Destroyed(\n    new Criterion(\n      (city: City): boolean =>\n        cityImprovementRegistry.getByCity(city).length > 0\n    ),\n    new Effect((city: City): void =>\n      cityImprovementRegistry\n        .getByCity(city)\n        .forEach((cityImprovement) => cityImprovement.destroy())\n    )\n  ),\n];\n\nexport default getRules;\n", "import { Aqueduct, Granary } from '../../CityImprovements';\nimport {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport CityGrowth from '@civ-clone/core-city-growth/CityGrowth';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { FoodStorage } from '../../Yields';\nimport Grow from '@civ-clone/core-city-growth/Rules/Grow';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry\n) => Grow[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance\n): Grow[] => [\n  new Grow(\n    new Criterion(\n      (cityGrowth: CityGrowth): boolean =>\n        !cityImprovementRegistry\n          .getByCity(cityGrowth.city())\n          .some(\n            (improvement: CityImprovement): boolean =>\n              improvement instanceof Aqueduct\n          )\n    ),\n    new Criterion((cityGrowth: CityGrowth): boolean => cityGrowth.size() > 10),\n    new Effect((cityGrowth: CityGrowth): void => cityGrowth.shrink())\n  ),\n  new Grow(\n    new Criterion((cityGrowth: CityGrowth): boolean =>\n      cityImprovementRegistry\n        .getByCity(cityGrowth.city())\n        .some(\n          (improvement: CityImprovement): boolean =>\n            improvement instanceof Granary\n        )\n    ),\n    new Effect((cityGrowth: CityGrowth): void =>\n      cityGrowth.add(new FoodStorage(cityGrowth.cost().value() / 2))\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport City from '@civ-clone/core-city/City';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Created from '@civ-clone/core-city-improvement/Rules/Created';\nimport Effect from '@civ-clone/core-rule/Effect';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry,\n  engine?: Engine\n) => Created[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  engine: Engine = engineInstance\n): Created[] => [\n  new Created(\n    new Effect((cityImprovement: CityImprovement): void =>\n      cityImprovementRegistry.register(cityImprovement)\n    )\n  ),\n  new Created(\n    new Effect((cityImprovement: CityImprovement, city: City): void => {\n      engine.emit('city-improvement:created', cityImprovement, city);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Bank,\n  Courthouse,\n  Factory,\n  HydroPlant,\n  Library,\n  ManufacturingPlant,\n  Marketplace,\n  NuclearPlant,\n  PowerPlant,\n  University,\n} from '../../CityImprovements';\nimport {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport { Corruption, Gold, Luxuries, Production, Research } from '../../Yields';\nimport City from '@civ-clone/core-city/City';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Low from '@civ-clone/core-rule/Priorities/Low';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport YieldModifier from '@civ-clone/core-city/Rules/YieldModifier';\nimport { reduceYield } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry\n) => YieldModifier[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance\n): YieldModifier[] => [\n  ...(\n    [\n      [Marketplace, Gold, 0.5],\n      [Marketplace, Luxuries, 0.5],\n      [Bank, Gold, 0.5],\n      [Bank, Luxuries, 0.5],\n      [Library, Research, 0.5],\n      [University, Research, 0.5],\n      [Factory, Production, 0.5],\n      [PowerPlant, Production, 0.5],\n      [HydroPlant, Production, 0.5],\n      [NuclearPlant, Production, 0.5],\n      [ManufacturingPlant, Production, 0.5],\n      [Courthouse, Corruption, 0.5],\n      // [RecyclingCenter, Pollution, -0.5],\n      // [HydroPlant, Pollution, -0.5],\n      // [MassTransit, Pollution, -0.5],\n    ] as [typeof CityImprovement, typeof Yield, number][]\n  ).map(\n    ([Improvement, YieldType, multiplier]: [\n      typeof CityImprovement,\n      typeof Yield,\n      number\n    ]): YieldModifier =>\n      new YieldModifier(\n        new Low(),\n        new Criterion((city: City): boolean =>\n          cityImprovementRegistry\n            .getByCity(city)\n            .some(\n              (improvement: CityImprovement): boolean =>\n                improvement instanceof Improvement\n            )\n        ),\n        new Effect(\n          (city: City, yields: Yield[]): Yield =>\n            new YieldType(\n              Math.floor(reduceYield(yields, YieldType) * multiplier),\n              Improvement.name\n            )\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport {\n  UnitImprovementRegistry,\n  instance as unitImprovementRegistryInstance,\n} from '@civ-clone/core-unit-improvement/UnitImprovementRegistry';\nimport { Barracks } from '../../CityImprovements';\nimport City from '@civ-clone/core-city/City';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Created from '@civ-clone/core-unit/Rules/Created';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport { Veteran } from '@civ-clone/civ1-unit/UnitImprovements';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry,\n  unitImprovementRegistry?: UnitImprovementRegistry\n) => Created[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  unitImprovementRegistry: UnitImprovementRegistry = unitImprovementRegistryInstance\n): Created[] => [\n  new Created(\n    new Criterion((unit: Unit): boolean => unit.city() !== null),\n    new Criterion((unit: Unit): boolean =>\n      cityImprovementRegistry\n        .getByCity(unit.city()!)\n        .some(\n          (cityImprovement: CityImprovement) =>\n            cityImprovement instanceof Barracks\n        )\n    ),\n    new Effect((unit: Unit): void =>\n      unitImprovementRegistry.register(new Veteran(unit))\n    )\n  ),\n];\n\nexport default getRules;\n", "import { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport cityBuild from './Rules/City/build';\nimport cityBuildCost from './Rules/City/build-cost';\nimport cityCaptured from './Rules/City/captured';\nimport cityCost from './Rules/City/cost';\nimport cityCreated from './Rules/City/created';\nimport cityDestroyed from './Rules/City/destroyed';\nimport cityGrow from './Rules/City/grow';\nimport cityImprovementCreated from './Rules/CityImprovement/created';\nimport cityYieldModifier from './Rules/City/yield-modifier';\nimport unitCreated from './Rules/Unit/created';\n\nruleRegistryInstance.register(\n  ...cityBuild(),\n  ...cityBuildCost(),\n  ...cityCaptured(),\n  ...cityCost(),\n  ...cityCreated(),\n  ...cityDestroyed(),\n  ...cityGrow(),\n  ...cityImprovementCreated(),\n  ...cityYieldModifier(),\n  ...unitCreated()\n);\n", null, "import CityName from '@civ-clone/core-civilization/CityName';\nimport CityNameRegistry, {\n  instance as cityNameRegistryInstance,\n} from '@civ-clone/core-civilization/CityNameRegistry';\n\nexport const registerCityNames: (\n  cityNameRegistry?: CityNameRegistry\n) => void = (\n  cityNameRegistry: CityNameRegistry = cityNameRegistryInstance\n): void => {\n  // List taken from Civ 1 and Civ 2 city names combined and sorted\n  (\n    [\n      'Bergen',\n      'Cannae',\n      'Capua',\n      'Cordoba',\n      'Cremona',\n      'Crete',\n      'Cunaxa',\n      'Damascus',\n      'Dublin',\n      'Genoa',\n      'Ghent',\n      'Issus',\n      'Lisbon',\n      'Mecca',\n      'Melbourne',\n      'Milan',\n      'Naples',\n      'Pisa',\n      'Prague',\n      'Salamis',\n      'Salzburg',\n      'Seville',\n      'Sidon',\n      'Sydney',\n      'Tarsus',\n      'Toronto',\n      'Turin',\n      'Tyre',\n      'Utica',\n      'Venice',\n      'Verona',\n    ] as string[]\n  ).forEach((name): void =>\n    cityNameRegistry.register(new CityName(name, null))\n  );\n};\n\nexport default registerCityNames;\n", "export { American } from '@civ-clone/base-civilization-american/American';\nexport { Aztec } from '@civ-clone/base-civilization-aztec/Aztec';\nexport { Babylonian } from '@civ-clone/base-civilization-babylonian/Babylonian';\nexport { Chinese } from '@civ-clone/base-civilization-chinese/Chinese';\nexport { Egyptian } from '@civ-clone/base-civilization-egyptian/Egyptian';\nexport { English } from '@civ-clone/base-civilization-english/English';\nexport { French } from '@civ-clone/base-civilization-french/French';\nexport { German } from '@civ-clone/base-civilization-german/German';\nexport { Greek } from '@civ-clone/base-civilization-greek/Greek';\nexport { Indian } from '@civ-clone/base-civilization-indian/Indian';\nexport { Mongol } from '@civ-clone/base-civilization-mongol/Mongol';\nexport { Roman } from '@civ-clone/base-civilization-roman/Roman';\nexport { Russian } from '@civ-clone/base-civilization-russian/Russian';\nexport { Zulu } from '@civ-clone/base-civilization-zulu/Zulu';\n", "import {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\nimport Civilization from './Civilization';\n\nexport interface ICivilizationRegistry\n  extends IConstructorRegistry<Civilization> {}\n\nexport class CivilizationRegistry\n  extends ConstructorRegistry<Civilization>\n  implements ICivilizationRegistry\n{\n  constructor() {\n    super(Civilization);\n  }\n}\n\nexport const instance: CivilizationRegistry = new CivilizationRegistry();\n\nexport default CivilizationRegistry;\n", "import {\n  American,\n  Aztec,\n  Babylonian,\n  Chinese,\n  Egyptian,\n  English,\n  French,\n  German,\n  Greek,\n  Indian,\n  Mongol,\n  Roman,\n  Russian,\n  Zulu,\n} from './Civilizations';\nimport {\n  CivilizationRegistry,\n  instance as civilizationRegistryInstance,\n} from '@civ-clone/core-civilization/CivilizationRegistry';\n\nexport const registerCivilizations: (\n  civilizationRegistry?: CivilizationRegistry\n) => void = (\n  civilizationRegistry: CivilizationRegistry = civilizationRegistryInstance\n): void => {\n  civilizationRegistry.register(\n    American,\n    Aztec,\n    Babylonian,\n    Chinese,\n    Egyptian,\n    English,\n    French,\n    German,\n    Greek,\n    Indian,\n    Mongol,\n    Roman,\n    Russian,\n    Zulu\n  );\n};\n\nexport default registerCivilizations;\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport American from '../American';\n\nexport class AbrahamLincoln extends Leader {\n  static civilization(): typeof Civilization {\n    return American;\n  }\n\n  name(): string {\n    return 'Abraham Lincoln';\n  }\n}\n\nexport default AbrahamLincoln;\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport American from '../American';\n\nexport class GeorgeWashington extends Leader {\n  static civilization(): typeof Civilization {\n    return American;\n  }\n\n  name(): string {\n    return 'George Washington';\n  }\n}\n\nexport default GeorgeWashington;\n", "export { AbrahamLincoln } from './Leaders/AbrahamLincoln';\nexport { GeorgeWashington } from './Leaders/GeorgeWashington';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Aztec from '../Aztec';\n\nexport class MoctezumaII extends Leader {\n  static civilization(): typeof Civilization {\n    return Aztec;\n  }\n\n  name(): string {\n    return 'Moctezuma II';\n  }\n}\n\nexport default MoctezumaII;\n", "export { MoctezumaII } from './Leaders/MoctezumaII';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Babylonian from '../Babylonian';\n\nexport class Hammurabi extends Leader {\n  static civilization(): typeof Civilization {\n    return Babylonian;\n  }\n\n  name(): string {\n    return 'Hammurabi';\n  }\n}\n\nexport default Hammurabi;\n", "export { Hammurabi } from './Leaders/Hammurabi';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Chinese from '../Chinese';\n\nexport class MaoZedong extends Leader {\n  static civilization(): typeof Civilization {\n    return Chinese;\n  }\n\n  name(): string {\n    return 'Mao Zedong';\n  }\n}\n\nexport default MaoZedong;\n", "export { MaoZedong } from './Leaders/MaoZedong';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Egyptian from '../Egyptian';\n\nexport class RamessesII extends Leader {\n  static civilization(): typeof Civilization {\n    return Egyptian;\n  }\n\n  name(): string {\n    return 'Ramesses II';\n  }\n}\n\nexport default RamessesII;\n", "export { RamessesII } from './Leaders/RamessesII';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport English from '../English';\n\nexport class ElizabethI extends Leader {\n  static civilization(): typeof Civilization {\n    return English;\n  }\n\n  name(): string {\n    return 'Elizabeth I';\n  }\n}\n\nexport default ElizabethI;\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport English from '../English';\n\nexport class WinstonChurchill extends Leader {\n  static civilization(): typeof Civilization {\n    return English;\n  }\n\n  name(): string {\n    return 'Winston Churchill';\n  }\n}\n\nexport default WinstonChurchill;\n", "export { ElizabethI } from './Leaders/ElizabethI';\nexport { WinstonChurchill } from './Leaders/WinstonChurchill';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport French from '../French';\n\nexport class NapoleonI extends Leader {\n  static civilization(): typeof Civilization {\n    return French;\n  }\n\n  name(): string {\n    return 'Napoleon I';\n  }\n}\n\nexport default NapoleonI;\n", "export { NapoleonI } from './Leaders/NapoleonI';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport German from '../German';\n\nexport class FrederickTheGreat extends Leader {\n  static civilization(): typeof Civilization {\n    return German;\n  }\n\n  name(): string {\n    return 'Frederick the Great';\n  }\n}\n\nexport default FrederickTheGreat;\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport German from '../German';\n\nexport class OttoVonBismarck extends Leader {\n  static civilization(): typeof Civilization {\n    return German;\n  }\n\n  name(): string {\n    return 'Otto von Bismarck';\n  }\n}\n\nexport default OttoVonBismarck;\n", "export { FrederickTheGreat } from './Leaders/FrederickTheGreat';\nexport { OttoVonBismarck } from './Leaders/OttoVonBismarck';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Greek from '../Greek';\n\nexport class AlexanderTheGreat extends Leader {\n  static civilization(): typeof Civilization {\n    return Greek;\n  }\n\n  name(): string {\n    return 'Alexander the Great';\n  }\n}\n\nexport default AlexanderTheGreat;\n", "export { AlexanderTheGreat } from './Leaders/AlexanderTheGreat';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Indian from '../Indian';\n\nexport class MahatmaGandhi extends Leader {\n  static civilization(): typeof Civilization {\n    return Indian;\n  }\n\n  name(): string {\n    return 'Mahatma Gandhi';\n  }\n}\n\nexport default MahatmaGandhi;\n", "export { MahatmaGandhi } from './Leaders/MahatmaGandhi';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Mongol from '../Mongol';\n\nexport class GenghisKhan extends Leader {\n  static civilization(): typeof Civilization {\n    return Mongol;\n  }\n\n  name(): string {\n    return 'Genghis Khan';\n  }\n}\n\nexport default GenghisKhan;\n", "export { GenghisKhan } from './Leaders/GenghisKhan';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Roman from '../Roman';\n\nexport class JuliusCaesar extends Leader {\n  static civilization(): typeof Civilization {\n    return Roman;\n  }\n\n  name(): string {\n    return 'Julius Caesar';\n  }\n}\n\nexport default JuliusCaesar;\n", "export { JuliusCaesar } from './Leaders/JuliusCaesar';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Russian from '../Russian';\n\nexport class CatherineTheGreat extends Leader {\n  static civilization(): typeof Civilization {\n    return Russian;\n  }\n\n  name(): string {\n    return 'Catherine the Great';\n  }\n}\n\nexport default CatherineTheGreat;\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Russian from '../Russian';\n\nexport class JosephStalin extends Leader {\n  static civilization(): typeof Civilization {\n    return Russian;\n  }\n\n  name(): string {\n    return 'Joseph Stalin';\n  }\n}\n\nexport default JosephStalin;\n", "export { CatherineTheGreat } from './Leaders/CatherineTheGreat';\nexport { JosephStalin } from './Leaders/JosephStalin';\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Zulu from '../Zulu';\n\nexport class Shaka extends Leader {\n  static civilization(): typeof Civilization {\n    return Zulu;\n  }\n\n  name(): string {\n    return 'Shaka';\n  }\n}\n\nexport default Shaka;\n", "export { Shaka } from './Leaders/Shaka';\n", "export { AbrahamLincoln } from '@civ-clone/base-civilization-american/Leaders';\nexport { MoctezumaII } from '@civ-clone/base-civilization-aztec/Leaders';\nexport { Hammurabi } from '@civ-clone/base-civilization-babylonian/Leaders';\nexport { MaoZedong } from '@civ-clone/base-civilization-chinese/Leaders';\nexport { RamessesII } from '@civ-clone/base-civilization-egyptian/Leaders';\nexport { ElizabethI } from '@civ-clone/base-civilization-english/Leaders';\nexport { NapoleonI } from '@civ-clone/base-civilization-french/Leaders';\nexport { FrederickTheGreat } from '@civ-clone/base-civilization-german/Leaders';\nexport { AlexanderTheGreat } from '@civ-clone/base-civilization-greek/Leaders';\nexport { MahatmaGandhi } from '@civ-clone/base-civilization-indian/Leaders';\nexport { GenghisKhan } from '@civ-clone/base-civilization-mongol/Leaders';\nexport { JuliusCaesar } from '@civ-clone/base-civilization-roman/Leaders';\nexport { JosephStalin } from '@civ-clone/base-civilization-russian/Leaders';\nexport { Shaka } from '@civ-clone/base-civilization-zulu/Leaders';\n", "import {\n  AbrahamLincoln,\n  MoctezumaII,\n  Hammurabi,\n  MaoZedong,\n  RamessesII,\n  ElizabethI,\n  NapoleonI,\n  FrederickTheGreat,\n  AlexanderTheGreat,\n  MahatmaGandhi,\n  GenghisKhan,\n  JuliusCaesar,\n  JosephStalin,\n  Shaka,\n} from './Leaders';\nimport {\n  LeaderRegistry,\n  instance as leaderRegistryInstance,\n} from '@civ-clone/core-civilization/LeaderRegistry';\n\nexport const registerLeaders: (leaderRegistry?: LeaderRegistry) => void = (\n  leaderRegistry: LeaderRegistry = leaderRegistryInstance\n): void => {\n  leaderRegistry.register(\n    AbrahamLincoln,\n    MoctezumaII,\n    Hammurabi,\n    MaoZedong,\n    RamessesII,\n    ElizabethI,\n    NapoleonI,\n    FrederickTheGreat,\n    AlexanderTheGreat,\n    MahatmaGandhi,\n    GenghisKhan,\n    JuliusCaesar,\n    JosephStalin,\n    Shaka\n  );\n};\n\nexport default registerLeaders;\n", "import Trait from '@civ-clone/core-civilization/Trait';\n\nexport class Aggression extends Trait {}\n\nexport default Aggression;\n", "import Aggression from '../Aggression';\nimport Leader from '@civ-clone/core-civilization/Leader';\n\nexport class Aggressive extends Aggression {\n  constructor(LeaderType: typeof Leader) {\n    super(LeaderType, 1);\n  }\n}\n\nexport default Aggressive;\n", "import Trait from '@civ-clone/core-civilization/Trait';\n\nexport class Militarism extends Trait {}\n\nexport default Militarism;\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Militarism from '../Militarism';\n\nexport class Civilized extends Militarism {\n  constructor(LeaderType: typeof Leader) {\n    super(LeaderType, 0);\n  }\n}\n\nexport default Civilized;\n", "import Trait from '@civ-clone/core-civilization/Trait';\n\nexport class Development extends Trait {}\n\nexport default Development;\n", "import Development from '../Development';\nimport Leader from '@civ-clone/core-civilization/Leader';\n\nexport class Expansionist extends Development {\n  constructor(LeaderType: typeof Leader) {\n    super(LeaderType, 1);\n  }\n}\n\nexport default Expansionist;\n", "import Aggression from '../Aggression';\nimport Leader from '@civ-clone/core-civilization/Leader';\n\nexport class Friendly extends Aggression {\n  constructor(LeaderType: typeof Leader) {\n    super(LeaderType, 0);\n  }\n}\n\nexport default Friendly;\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Militarism from '../Militarism';\n\nexport class Militaristic extends Militarism {\n  constructor(LeaderType: typeof Leader) {\n    super(LeaderType, 1);\n  }\n}\n\nexport default Militaristic;\n", "import Aggression from '../Aggression';\nimport Leader from '@civ-clone/core-civilization/Leader';\n\nexport class Normal extends Aggression {\n  constructor(LeaderType: typeof Leader) {\n    super(LeaderType, 0.5);\n  }\n}\n\nexport default Normal;\n", "import Development from '../Development';\nimport Leader from '@civ-clone/core-civilization/Leader';\n\nexport class Normal extends Development {\n  constructor(LeaderType: typeof Leader) {\n    super(LeaderType, 0.5);\n  }\n}\n\nexport default Normal;\n", "import Leader from '@civ-clone/core-civilization/Leader';\nimport Militarism from '../Militarism';\n\nexport class Normal extends Militarism {\n  constructor(LeaderType: typeof Leader) {\n    super(LeaderType, 0.5);\n  }\n}\n\nexport default Normal;\n", "import Development from '../Development';\nimport Leader from '@civ-clone/core-civilization/Leader';\n\nexport class Perfectionist extends Development {\n  constructor(LeaderType: typeof Leader) {\n    super(LeaderType, 0);\n  }\n}\n\nexport default Perfectionist;\n", "import {\n  AbrahamLincoln,\n  AlexanderTheGreat,\n  ElizabethI,\n  FrederickTheGreat,\n  GenghisKhan,\n  Hammurabi,\n  JosephStalin,\n  JuliusCaesar,\n  MahatmaGandhi,\n  MaoZedong,\n  MoctezumaII,\n  NapoleonI,\n  RamessesII,\n  Shaka,\n} from './Leaders';\nimport {\n  TraitRegistry,\n  instance as traitRegistryInstance,\n} from '@civ-clone/core-civilization/TraitRegistry';\nimport Aggressive from '@civ-clone/base-leader-trait-aggression/Aggression/Aggressive';\nimport Civilized from '@civ-clone/base-leader-trait-militarism/Militarism/Civilized';\nimport Expansionist from '@civ-clone/base-leader-trait-development/Development/Expansionist';\nimport Friendly from '@civ-clone/base-leader-trait-aggression/Aggression/Friendly';\nimport Leader from '@civ-clone/core-civilization/Leader';\nimport Militaristic from '@civ-clone/base-leader-trait-militarism/Militarism/Militaristic';\nimport NormalAggression from '@civ-clone/base-leader-trait-aggression/Aggression/Normal';\nimport NormalDevelopment from '@civ-clone/base-leader-trait-development/Development/Normal';\nimport NormalMilitarism from '@civ-clone/base-leader-trait-militarism/Militarism/Normal';\nimport Perfectionist from '@civ-clone/base-leader-trait-development/Development/Perfectionist';\n\ntype LeaderTrait =\n  | typeof Friendly\n  | typeof NormalAggression\n  | typeof Aggressive\n  | typeof Perfectionist\n  | typeof NormalDevelopment\n  | typeof Expansionist\n  | typeof Civilized\n  | typeof NormalMilitarism\n  | typeof Militaristic;\n\nexport const registerTraits: (traitRegistry?: TraitRegistry) => void = (\n  traitRegistry: TraitRegistry = traitRegistryInstance\n): void => {\n  // @see https://www.civfanatics.com/civ1/cia/allcivs.htm\n  (\n    [\n      [AbrahamLincoln, Friendly, NormalDevelopment, Civilized],\n      [MoctezumaII, NormalAggression, Perfectionist, Civilized],\n      [Hammurabi, Friendly, Perfectionist, Civilized],\n      [MaoZedong, NormalAggression, NormalDevelopment, Civilized],\n      [RamessesII, NormalAggression, NormalDevelopment, Civilized],\n      [ElizabethI, NormalAggression, Expansionist, NormalMilitarism],\n      [NapoleonI, Aggressive, Expansionist, Civilized],\n      [FrederickTheGreat, Aggressive, Perfectionist, Civilized],\n      [AlexanderTheGreat, NormalAggression, Expansionist, Militaristic],\n      [MahatmaGandhi, Friendly, Perfectionist, NormalMilitarism],\n      [GenghisKhan, Aggressive, Expansionist, Militaristic],\n      [JuliusCaesar, NormalAggression, Expansionist, Civilized],\n      [JosephStalin, Aggressive, NormalDevelopment, Militaristic],\n      [Shaka, Aggressive, NormalDevelopment, NormalMilitarism],\n    ] as [typeof Leader, ...LeaderTrait[]][]\n  ).forEach(([LeaderType, ...traits]): void =>\n    traits.forEach((TraitType: LeaderTrait): void =>\n      traitRegistry.register(new TraitType(LeaderType))\n    )\n  );\n};\n\nexport default registerTraits;\n", null, "import Rule from '@civ-clone/core-rule/Rule';\nimport Part from '../Part';\nimport YieldValue from '@civ-clone/core-yield/Yield';\n\nexport class Yield extends Rule<[Part], YieldValue | YieldValue[]> {}\n\nexport default Yield;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Buildable from '@civ-clone/core-city-build/Buildable';\nimport City from '@civ-clone/core-city/City';\nimport { IDataObject } from '@civ-clone/core-data-object/DataObject';\nimport PartYield from './Rules/Yield';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport interface IPart extends IDataObject {\n  city(): City;\n  yields(): Yield[];\n}\n\nexport class Part extends Buildable implements IPart {\n  #city: City;\n  #ruleRegistry: RuleRegistry;\n\n  constructor(city: City, ruleRegistry: RuleRegistry = ruleRegistryInstance) {\n    super();\n\n    this.#city = city;\n    this.#ruleRegistry = ruleRegistry;\n\n    this.addKey('city', 'yields');\n  }\n\n  public static build(\n    city: City,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ): Part {\n    return new this(city, ruleRegistry);\n  }\n\n  city(): City {\n    return this.#city;\n  }\n\n  yields(): Yield[] {\n    return this.#ruleRegistry.process(PartYield, this).flat();\n  }\n}\n\nexport default Part;\n", "import Part from '@civ-clone/core-spaceship/Part';\n\nexport class Fuel extends Part {}\n\nexport default Fuel;\n", "import Part from '@civ-clone/core-spaceship/Part';\n\nexport class Habitation extends Part {}\n\nexport default Habitation;\n", "import Layout from '../Layout';\nimport Part from '../Part';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Slot from '../Slot';\n\nexport class ChooseSlot extends Rule<[Part, Layout], Slot> {}\n\nexport default ChooseSlot;\n", "import Layout from '../Layout';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Slot from '../Slot';\n\nexport class Active extends Rule<[Slot, Layout], boolean> {}\n\nexport default Active;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport ChooseSlot from './Rules/ChooseSlot';\nimport Part from './Part';\nimport Slot from './Slot';\nimport Active from './Rules/Active';\n\nconst isBetween = (n: number, x: number, y: number): boolean => x <= n && n < y;\n\nexport interface ILayout extends IDataObject {\n  activeSlots(): Slot[];\n  get(x: number, y: number): Slot | null;\n  getAdjacent(slot: Slot): Slot[];\n  getFreeSlot(part: Part): Slot | null;\n  height(): number;\n  inactiveSlots(): Slot[];\n  slots(): Slot[];\n  width(): number;\n}\n\nexport class Layout extends DataObject implements ILayout {\n  #cachedSearch = new Map<string, Slot>();\n  #height: number;\n  #ruleRegistry: RuleRegistry;\n  #slots: Slot[] = [];\n  #width: number;\n\n  constructor(\n    height: number,\n    width: number,\n    slots: Slot[],\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.addKey('activeSlots', 'height', 'inactiveSlots', 'slots', 'width');\n\n    this.#height = height;\n    this.#ruleRegistry = ruleRegistry;\n    this.#width = width;\n\n    this.#slots.push(...slots);\n  }\n\n  activeSlots(): Slot[] {\n    return this.#slots.filter((slot) =>\n      this.#ruleRegistry.process(Active, slot, this).every((result) => result)\n    );\n  }\n\n  get(x: number, y: number): Slot | null {\n    if (x < 0 || x >= this.#width || y < 0 || y >= this.#height) {\n      return null;\n    }\n\n    const key = [x, y].toString();\n\n    if (!this.#cachedSearch.has(key)) {\n      const [slot] = this.#slots.filter(\n        (slot) =>\n          isBetween(x, slot.x(), slot.x() + slot.width()) &&\n          isBetween(y, slot.y(), slot.y() + slot.height())\n      );\n\n      this.#cachedSearch.set(key, slot ?? null);\n    }\n\n    return this.#cachedSearch.get(key)!;\n  }\n\n  getAdjacent(slot: Slot): Slot[] {\n    const adjacentSlots = new Set<Slot>();\n\n    for (let x = slot.x(), maxX = slot.x() + slot.width() - 1; x <= maxX; x++) {\n      const above = this.get(x, slot.y() - 1),\n        below = this.get(x, slot.y() + slot.height());\n\n      if (above) {\n        adjacentSlots.add(above);\n      }\n\n      if (below) {\n        adjacentSlots.add(below);\n      }\n    }\n\n    for (\n      let y = slot.y(), maxY = slot.y() + slot.height() - 1;\n      y <= maxY;\n      y++\n    ) {\n      const before = this.get(slot.x() - 1, y),\n        after = this.get(slot.x() + slot.width(), y);\n\n      if (before) {\n        adjacentSlots.add(before);\n      }\n\n      if (after) {\n        adjacentSlots.add(after);\n      }\n    }\n\n    return [...adjacentSlots.values()].filter(\n      (adjacentSlot) => adjacentSlot !== slot\n    );\n  }\n\n  getFreeSlot(part: Part): Slot | null {\n    const [slot] = this.#ruleRegistry.process(ChooseSlot, part, this);\n\n    return slot ?? null;\n  }\n\n  height(): number {\n    return this.#height;\n  }\n\n  inactiveSlots(): Slot[] {\n    return this.#slots.filter((slot) =>\n      this.#ruleRegistry.process(Active, slot, this).some((result) => !result)\n    );\n  }\n\n  slots(): Slot[] {\n    return this.#slots;\n  }\n\n  width(): number {\n    return this.#width;\n  }\n}\n\nexport default Layout;\n", "import Part from '@civ-clone/core-spaceship/Part';\n\nexport class LifeSupport extends Part {}\n\nexport default LifeSupport;\n", "import Part from '@civ-clone/core-spaceship/Part';\n\nexport class Power extends Part {}\n\nexport default Power;\n", "import Part from '@civ-clone/core-spaceship/Part';\n\nexport class Propulsion extends Part {}\n\nexport default Propulsion;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport Part from './Part';\n\nexport interface ISlot extends IDataObject {\n  accepts(part: Part): boolean;\n  empty(): boolean;\n  fill(part: Part): void;\n  height(): number;\n  part(): Part | null;\n  width(): number;\n  x(): number;\n  y(): number;\n}\n\nexport class Slot extends DataObject implements ISlot {\n  #accepts: typeof Part[] = [];\n  #height: number;\n  #part: Part | null = null;\n  #width: number;\n  #x: number;\n  #y: number;\n\n  constructor(\n    x: number,\n    y: number,\n    height: number,\n    width: number,\n    accepts: typeof Part[]\n  ) {\n    super();\n\n    this.addKey('height', 'part', 'width', 'x', 'y');\n\n    this.#height = height;\n    this.#width = width;\n    this.#x = x;\n    this.#y = y;\n    this.#accepts.push(...accepts);\n  }\n\n  accepts(part: Part): boolean {\n    return this.#accepts.some(\n      (PartType: typeof Part) => part instanceof PartType\n    );\n  }\n\n  empty(): boolean {\n    return this.#part === null;\n  }\n\n  fill(part: Part): void {\n    if (!this.accepts(part)) {\n      return;\n    }\n\n    this.#part = part;\n  }\n\n  height(): number {\n    return this.#height;\n  }\n\n  part(): Part | null {\n    return this.#part;\n  }\n\n  width(): number {\n    return this.#width;\n  }\n\n  x(): number {\n    return this.#x;\n  }\n\n  y(): number {\n    return this.#y;\n  }\n}\n\nexport default Slot;\n", "import Part from '@civ-clone/core-spaceship/Part';\n\nexport class Structural extends Part {}\n\nexport default Structural;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Fuel from '@civ-clone/base-spaceship-fuel/Fuel';\nimport Habitation from '@civ-clone/base-spaceship-habitation/Habitation';\nimport Layout from '@civ-clone/core-spaceship/Layout';\nimport LifeSupport from '@civ-clone/base-spaceship-life-support/LifeSupport';\nimport Power from '@civ-clone/base-spaceship-power/Power';\nimport Propulsion from '@civ-clone/base-spaceship-propulsion/Propulsion';\nimport Slot from '@civ-clone/core-spaceship/Slot';\nimport Structural from '@civ-clone/base-spaceship-structural/Structural';\n\n// . null\n// # Power\n// S Structural\n// F Fuel\n// ~ Propulsion\n// L LifeSupport\n// H Habitation\n\n// .........F~~\n// .##..##.SSS\n// .##..##.SF~~\n// SSSSSSSSSF~~\n// LLHHLLHHSSS\n// LLHHLLHHSF~~\n// HHLLHHLLSF~~\n// HHLLHHLLSSS\n// SSSSSSSSSF~~\n// .##..##.SF~~\n// .##..##.SSS\n// .........F~~\nexport class Default extends Layout {\n  constructor(ruleRegistry: RuleRegistry = ruleRegistryInstance) {\n    super(\n      12,\n      12,\n      [\n        // .........F~~\n        new Slot(9, 0, 1, 1, [Fuel]),\n        new Slot(10, 0, 1, 2, [Propulsion]),\n\n        // .##..##.SSS\n        new Slot(1, 1, 2, 2, [Power]),\n        new Slot(5, 1, 2, 2, [Power]),\n        new Slot(8, 1, 1, 1, [Structural]),\n        new Slot(9, 1, 1, 1, [Structural]),\n        new Slot(10, 1, 1, 1, [Structural]),\n\n        // .##..##.SF~~\n        new Slot(8, 2, 1, 1, [Structural]),\n        new Slot(9, 2, 1, 1, [Fuel]),\n        new Slot(10, 2, 1, 2, [Propulsion]),\n\n        // SSSSSSSSSF~~\n        new Slot(0, 3, 1, 1, [Structural]),\n        new Slot(1, 3, 1, 1, [Structural]),\n        new Slot(2, 3, 1, 1, [Structural]),\n        new Slot(3, 3, 1, 1, [Structural]),\n        new Slot(4, 3, 1, 1, [Structural]),\n        new Slot(5, 3, 1, 1, [Structural]),\n        new Slot(6, 3, 1, 1, [Structural]),\n        new Slot(7, 3, 1, 1, [Structural]),\n        new Slot(8, 3, 1, 1, [Structural]),\n        new Slot(9, 3, 1, 1, [Fuel]),\n        new Slot(10, 3, 1, 2, [Propulsion]),\n\n        // LLHHLLHHSSS\n        new Slot(0, 4, 2, 2, [LifeSupport]),\n        new Slot(2, 4, 2, 2, [Habitation]),\n        new Slot(4, 4, 2, 2, [LifeSupport]),\n        new Slot(6, 4, 2, 2, [Habitation]),\n        new Slot(8, 4, 1, 1, [Structural]),\n        new Slot(9, 4, 1, 1, [Structural]),\n        new Slot(10, 4, 1, 1, [Structural]),\n\n        // LLHHLLHHSF~~\n        new Slot(8, 5, 1, 1, [Structural]),\n        new Slot(9, 5, 1, 1, [Fuel]),\n        new Slot(10, 5, 1, 2, [Propulsion]),\n\n        // HHLLHHLLSF~~\n        new Slot(0, 6, 2, 2, [Habitation]),\n        new Slot(2, 6, 2, 2, [LifeSupport]),\n        new Slot(4, 6, 2, 2, [Habitation]),\n        new Slot(6, 6, 2, 2, [LifeSupport]),\n        new Slot(8, 6, 1, 1, [Structural]),\n        new Slot(9, 6, 1, 1, [Fuel]),\n        new Slot(10, 6, 1, 2, [Propulsion]),\n\n        // HHLLHHLLSSS\n        new Slot(8, 7, 1, 1, [Structural]),\n        new Slot(9, 7, 1, 1, [Structural]),\n        new Slot(10, 7, 1, 1, [Structural]),\n\n        // SSSSSSSSSF~~\n        new Slot(0, 8, 1, 1, [Structural]),\n        new Slot(1, 8, 1, 1, [Structural]),\n        new Slot(2, 8, 1, 1, [Structural]),\n        new Slot(3, 8, 1, 1, [Structural]),\n        new Slot(4, 8, 1, 1, [Structural]),\n        new Slot(5, 8, 1, 1, [Structural]),\n        new Slot(6, 8, 1, 1, [Structural]),\n        new Slot(7, 8, 1, 1, [Structural]),\n        new Slot(8, 8, 1, 1, [Structural]),\n        new Slot(9, 8, 1, 1, [Fuel]),\n        new Slot(10, 8, 1, 2, [Propulsion]),\n\n        // .##..##.SF~~\n        new Slot(1, 9, 2, 2, [Power]),\n        new Slot(5, 9, 2, 2, [Power]),\n        new Slot(8, 9, 1, 1, [Structural]),\n        new Slot(9, 9, 1, 1, [Fuel]),\n        new Slot(10, 9, 1, 2, [Propulsion]),\n\n        // .##..##.SSS\n        new Slot(8, 10, 1, 1, [Structural]),\n        new Slot(9, 10, 1, 1, [Structural]),\n        new Slot(10, 10, 1, 1, [Structural]),\n\n        // .........F~~\n        new Slot(9, 11, 1, 1, [Fuel]),\n        new Slot(10, 11, 1, 2, [Propulsion]),\n      ],\n      ruleRegistry\n    );\n  }\n}\n\nexport default Default;\n", "import ConstructorRegistry from '@civ-clone/core-registry/ConstructorRegistry';\nimport Layout from './Layout';\n\nexport class LayoutRegistry extends ConstructorRegistry<Layout> {\n  constructor() {\n    super(Layout);\n  }\n}\n\nexport const instance = new LayoutRegistry();\n\nexport default LayoutRegistry;\n", "import Default from './Default';\nimport { instance as layoutRegistryInstance } from '@civ-clone/core-spaceship/LayoutRegistry';\n\nlayoutRegistryInstance.register(Default);\n", null, "import Player from '@civ-clone/core-player/Player';\n\nexport interface IInteraction {\n  isBetween(...players: Player[]): boolean;\n  players(): Player[];\n}\n\nexport class Interaction implements IInteraction {\n  #players: Player[] = [];\n\n  constructor(...players: Player[]) {\n    this.#players.push(...players);\n  }\n\n  isBetween(...players: Player[]): boolean {\n    return (\n      players.every((player: Player): boolean =>\n        this.#players.includes(player)\n      ) && players.length === this.#players.length\n    );\n  }\n\n  players(): Player[] {\n    return this.#players;\n  }\n}\n\nexport default Interaction;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Interaction from './Interaction';\nimport Player from '@civ-clone/core-player/Player';\n\nexport interface IInteractionRegistry extends IEntityRegistry<Interaction> {\n  getByPlayer(player: Player): Interaction[];\n  getByPlayers(...players: Player[]): Interaction[];\n}\n\nexport class InteractionRegistry\n  extends EntityRegistry<Interaction>\n  implements IInteractionRegistry {\n  constructor() {\n    super(Interaction);\n  }\n\n  getByPlayer(player: Player): Interaction[] {\n    return this.entries().filter((interaction: Interaction): boolean =>\n      interaction.players().includes(player)\n    );\n  }\n\n  getByPlayers(...players: Player[]): Interaction[] {\n    return this.entries().filter((interaction: Interaction): boolean =>\n      interaction.isBetween(...players)\n    );\n  }\n}\n\nexport const instance: InteractionRegistry = new InteractionRegistry();\n\nexport default InteractionRegistry;\n", "import Interaction from '@civ-clone/core-diplomacy/Interaction';\nimport Player from '@civ-clone/core-player/Player';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport class Contact extends Interaction {\n  constructor(...units: Unit[]) {\n    const players = units.map((unit: Unit): Player => unit.player());\n\n    super(...players);\n  }\n}\n\nexport default Contact;\n", "export { Contact } from '@civ-clone/base-diplomacy-interaction-contact/Contact';\n", "import {\n  InteractionRegistry,\n  instance as interactionRegistryInstance,\n} from '@civ-clone/core-diplomacy/InteractionRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport { Contact } from '../../Interactions';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  interactionRegistry?: InteractionRegistry,\n  unitRegistry?: UnitRegistry\n) => Moved[] = (\n  interactionRegistry: InteractionRegistry = interactionRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance\n): Moved[] => [\n  new Moved(\n    new Criterion((unit: Unit): boolean =>\n      unit\n        .tile()\n        .getNeighbours()\n        .some((tile: Tile): boolean =>\n          unitRegistry\n            .getByTile(tile)\n            .some(\n              (tileUnit: Unit): boolean => tileUnit.player() !== unit.player()\n            )\n        )\n    ),\n    new Effect((unit: Unit): void =>\n      unit\n        .tile()\n        .getNeighbours()\n        .forEach((tile: Tile): void =>\n          unitRegistry\n            .getByTile(tile)\n            .filter(\n              (tileUnit: Unit): boolean => tileUnit.player() !== unit.player()\n            )\n            .forEach((tileUnit: Unit): void =>\n              interactionRegistry.register(new Contact(unit, tileUnit))\n            )\n        )\n    )\n  ),\n];\n\nexport default getRules;\n", "import { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport unitMoved from './Rules/Unit/moved';\n\nruleRegistryInstance.register(...unitMoved());\n", null, "import Civilization from '@civ-clone/core-civilization/Civilization';\nimport World from '@civ-clone/core-world/World';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Generator from '@civ-clone/core-world-generator/Generator';\n\nexport type Coordinates = {\n  x: number;\n  y: number;\n};\n\n// TODO: Maybe break this and the `Registry` out into another package when the time comes.\nexport class CivilizationStartTile {\n  #civilizationType: typeof Civilization;\n  #mapGenerator: typeof Generator;\n  #startTile: Coordinates;\n\n  constructor(\n    CivilizationType: typeof Civilization,\n    MapGenerator: typeof Generator,\n    startTile: Coordinates\n  ) {\n    this.#civilizationType = CivilizationType;\n    this.#mapGenerator = MapGenerator;\n    this.#startTile = startTile;\n  }\n\n  civilizationType(): typeof Civilization {\n    return this.#civilizationType;\n  }\n\n  mapGenerator(): typeof Generator {\n    return this.#mapGenerator;\n  }\n\n  startTile(): Coordinates {\n    return this.#startTile;\n  }\n\n  startTileForMap(world: World): Tile {\n    const { x, y } = this.#startTile;\n\n    return world.get(x, y);\n  }\n}\n\nexport default CivilizationStartTile;\n", "export const coordsToIndex = (\n  height: number,\n  width: number,\n  x: number,\n  y: number\n): number => {\n  while (x < 0) {\n    x += width;\n  }\n\n  while (y < 0) {\n    y += height;\n  }\n\n  x = x % width;\n  y = y % height;\n\n  return y * width + x;\n};\n\nexport default coordsToIndex;\n", "export const indexToCoords = (\n  height: number,\n  width: number,\n  index: number\n): [number, number] => {\n  const total: number = height * width;\n\n  while (index < 0) {\n    index += total;\n  }\n\n  index = index % total;\n\n  return [index % width, Math.floor(index / width)];\n};\n\nexport default indexToCoords;\n", "import indexToCoords from './indexToCoords';\n\nexport const distanceFrom = (\n  height: number,\n  width: number,\n  from: number,\n  to: number\n): number => {\n  const [fromX, fromY]: [number, number] = indexToCoords(height, width, from),\n    [toX, toY]: [number, number] = indexToCoords(height, width, to),\n    map: [number, number][] = [\n      [-1, 1],\n      [-1, 0],\n      [-1, -1],\n      [0, 1],\n      [0, 0],\n      [0, -1],\n      [1, 1],\n      [1, 0],\n      [1, -1],\n    ],\n    [shortestDistance]: number[] = map\n      .map(([x, y]: [number, number]): [number, number] => [\n        x * width,\n        y * height,\n      ])\n      .map(([x, y]: [number, number]): [number, number] => [\n        fromX - toX + x,\n        fromY - toY + y,\n      ])\n      .map((coords: [number, number]): number => Math.hypot(...coords))\n      .sort((a: number, b: number): number => a - b);\n\n  return shortestDistance;\n};\n\nexport default distanceFrom;\n", "import coordsToIndex from './coordsToIndex';\nimport indexToCoords from './indexToCoords';\n\nexport const getNeighbours = (\n  height: number,\n  width: number,\n  index: number,\n  directNeighbours: boolean = true\n): number[] => {\n  const [x, y] = indexToCoords(height, width, index),\n    n = coordsToIndex(height, width, x, y - 1),\n    ne = coordsToIndex(height, width, x + 1, y - 1),\n    e = coordsToIndex(height, width, x + 1, y),\n    se = coordsToIndex(height, width, x + 1, y),\n    s = coordsToIndex(height, width, x, y + 1),\n    sw = coordsToIndex(height, width, x - 1, y + 1),\n    w = coordsToIndex(height, width, x - 1, y),\n    nw = coordsToIndex(height, width, x - 1, y - 1);\n\n  return directNeighbours ? [n, e, s, w] : [n, ne, e, se, s, sw, w, nw];\n};\n\nexport default getNeighbours;\n", "import Terrain from '@civ-clone/core-terrain/Terrain';\nimport coordsToIndex from './lib/coordsToIndex';\nimport distanceFrom from './lib/distanceFrom';\nimport getNeighbours from './lib/getNeighbours';\nimport indexToCoords from './lib/indexToCoords';\n\nexport interface IGenerator {\n  coordsToIndex(x: number, y: number): number;\n  distanceFrom(from: number, to: number): number;\n  generate(): Promise<Terrain[]>;\n  getNeighbours(index: number, directNeighbours: boolean): number[];\n  height(): number;\n  indexToCoords(index: number): [number, number];\n  options(): { [key: string]: any };\n  width(): number;\n}\n\nexport class Generator implements IGenerator {\n  #height: number;\n  #options: { [key: string]: any };\n  #width: number;\n\n  constructor(\n    height: number,\n    width: number,\n    options: { [key: string]: any } = {}\n  ) {\n    this.#height = height;\n    this.#options = options;\n    this.#width = width;\n  }\n\n  coordsToIndex(x: number, y: number): number {\n    return coordsToIndex(this.#height, this.#width, x, y);\n  }\n\n  distanceFrom(from: number, to: number): number {\n    return distanceFrom(this.#height, this.#width, from, to);\n  }\n\n  generate(): Promise<Terrain[]> {\n    throw new Error(\n      `Generator#generate(): Must be overridden in '${this.constructor.name}'.`\n    );\n  }\n\n  getNeighbours(index: number, directNeighbours: boolean = true): number[] {\n    return getNeighbours(this.#height, this.#width, index, directNeighbours);\n  }\n\n  height(): number {\n    return this.#height;\n  }\n\n  indexToCoords(index: number): [number, number] {\n    return indexToCoords(this.#height, this.#width, index);\n  }\n\n  options(): { [key: string]: any } {\n    return this.#options;\n  }\n\n  width(): number {\n    return this.#width;\n  }\n}\n\nexport default Generator;\n", "import Arctic from '@civ-clone/base-terrain-arctic/Arctic';\nimport Desert from '@civ-clone/base-terrain-desert/Desert';\nimport Forest from '@civ-clone/base-terrain-forest/Forest';\nimport Generator from '@civ-clone/core-world-generator/Generator';\nimport Grassland from '@civ-clone/base-terrain-grassland/Grassland';\nimport Hills from '@civ-clone/base-terrain-hills/Hills';\nimport Jungle from '@civ-clone/base-terrain-jungle/Jungle';\nimport Mountains from '@civ-clone/base-terrain-mountains/Mountains';\nimport Ocean from '@civ-clone/base-terrain-ocean/Ocean';\nimport Plains from '@civ-clone/base-terrain-plains/Plains';\nimport River from '@civ-clone/base-terrain-river/River';\nimport Swamp from '@civ-clone/base-terrain-swamp/Swamp';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport Tundra from '@civ-clone/base-terrain-tundra/Tundra';\n\ntype StringTerrain =\n  | 'A'\n  | 'D'\n  | 'F'\n  | 'G'\n  | 'H'\n  | 'J'\n  | 'M'\n  | 'O'\n  | 'P'\n  | 'R'\n  | 'S'\n  | 'T';\n\ntype TerrainLookup = { [key in StringTerrain]: typeof Terrain };\n\nconst terrainLookup: TerrainLookup = {\n  A: Arctic,\n  D: Desert,\n  F: Forest,\n  G: Grassland,\n  H: Hills,\n  J: Jungle,\n  M: Mountains,\n  O: Ocean,\n  P: Plains,\n  R: River,\n  S: Swamp,\n  T: Tundra,\n};\n\nexport class Earth extends Generator {\n  async generate(): Promise<Terrain[]> {\n    // Map data from MAP>PIC converted using `civ1-asset-extractor`.\n    return (\n      // Excludes all the `TerrainFeature`s since we'll rely on those being added via the `Created` `Rule`s in\n      //  `civ1-world`\n      (\n        Array.from(\n          `OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\nOOOOOOOOOOOOOOOOOOOOOOOOOAAAAAAAOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\nOOOOOOOOOOOOOOOAAOAOAAAOAAAAAAAAOOOOOOAOOOOOGGOOOOOTAGOOOOOOOOOOOOOOOOOOOOOOOOOO\nOOOOTTTTAOOOOAAAAAAAAOOOOAAAAAATOOOOOAAOOOOOOOOOOOOOOOAAOOOOOTOOOOOOOOOOOOOOOOOO\nOOOTTTTTTTTTAAOAOAAAAAOOOAAAAATOOOOOOOOOOOOOOOAOOOOOFFAAFFFFFOOFFFOOOOFFFOOOOOOO\nOTPTGPPPPTTTTTOTAAAOOAOOOAAAATOOOOOOOOOOOOOOOAOOAAOFFGAFFFFFFFAFFFFFFFFFFOTOOOOO\nOOOOOPGTPTOOTTAAAAAAAAOOAAGGOOOOOOOOOOGAAOOOOOOGOGFFFGFFFFFFFFAFFAFFFFFGFGGOOOOO\nOOOOOGGFGPPTTAAOOOAOTOOOAGOOOOAOOOOOOAFGFPGFOAAFGTGFFFFFFFFFFFFFFFGFFGOGFFOOOOOO\nOOOOPMGFPPPPTTOOOATAAOOOOOOOOOOOOOOOGFPGGFOFFFFFFGFFFFFFFFFFFFFFGFFFFGOOFOOOOOOO\nOOOOPMGFGPPOTTTAATTTTOOOOOOOOOOHOOOPFGOGGGFFFGFGGGFFFFFFFFFFFFFFFFFFOOOOFGOOOOOO\nOOOOPHFFGPGOPPPOPTTTTOOOOOOOOOGROOOOOPOGFGFFGFFFGFGFGGFGGFFFGFFFFFFFGOOOOPOOOOOO\nOOOOGGHFGPPPPPPPPPTPPOOOOOOOOOOFOOOFOOOFFFRFFFFRGFPFFPFGPFGFFOFFFFFGPPGOOOOOOOOO\nOOOGGGMGGGPPPOPPPPPOPOOOOOOOOOGGOOOGPPFFFGRRFRRRGGFGGGGGPGGFFFFDPPPPPPOOOOOOOOOO\nOOOGGFMGRGRPGORRGOPOOOOOOOOOOOOOOGRGGGGFFGFRFRPGPGGGGGPPPPPPPPPPPPPPGPGOOOOOOOOO\nOOGGGMMGRGRGGGGOOOOOOOOOOOOOOOOOGGRMMGGGGPGRPRRPPPPPPPPPPPPPPPPPPPPPGPGOPGOOOOOO\nOOGGPPHGRRRGGGOOOOOOOOOOOOOOOOOOPGGGGFGRRGPRPDOOPPOPPPDPDDDPPPPPPDPPPGOOGOOOOOOO\nOOGFPPFGGRGGGPOOOOOOOOOOOOOOOOPPPPOGHOOGRFOOOHPOGPPDPDPDDPPPPPPDDPPOPGOOMGOOOOOO\nOOGPPDDGGRGGOOOOOOOOOOOOOOOOOOPPPOOOGHOOOGPPPPPOPPPPDPPHPDDDDDDPPPGOOOOOOPOOOOOO\nOOPOGDDPOOOPOOOOOOOOOOOOOOOOOOOOOOOOOGOOOOOPPPPGPPPPPPHHMHHHHHHHHMHPGOOGOOOOOOOO\nOOPOGDDOOOOPOOOOOOOOOOOOOOOOOOGPPDDOOOOOOOOPPRRHPPPDPPHPGHMMMMMHHHPPPGOOOOOOOOOO\nOOOOGDGOOOOOOOOOOOOOOOOOOOOOOODPHHPPPGODPOPPPGRRPPPPPHHRDPGMHHMHHPPRRROOOOOOOOOO\nOOOOGGPOPOOOGPOOOOOOOOOOOOOOOPPHDDDPPPPDDRGDPPDOPPPPHPRRDGGGHHHHHPGPPPOOOOOOOOOO\nOOOOOGGPGOOOOGPOOOOOOOOOOOOOPPDDDDDPDDDDDRDOPDDOOOOHHRRDPGGRGGGHGPGGPOOOOOOOOOOO\nOOOOOOOOGGOOOOOOOOOOOOOOOOOOPDDDDDDDDDDDSRSODDDDDDOOOOPPGGGRRPPGFGGGOOOGOOOOOOOO\nOOOOOOOOOGOOOOOOOOOOOOOOOOOPDDDDDDPPPDDDDRDOOPDDDDPOOOOGGGGGOOGGGGGOOOOPGOOOOOOO\nOOOOOOOOOPPOGPPGOOOOOOOOOOODDDDDDDPDDDDDDRDDOODDDDOOOOOOGGGOOOPPGGOOOOOGGOOOOOOO\nOOOOOOOOOOPGFPPPGOOOOOOOOOODDDDDDDDPDPDPPDHHDOOPDOOOOOOOGGOOOOOGGGGOOOOOFGOOOOOO\nOOOOOOOOOOOGHGGGGGGOOOOOOOOPPDPPPPDDDPPPPPPMDPOOGOOOOOOOPGOOOOOOOGGOOOOOOGOOOOOO\nOOOOOOOOOOOHJJJGGGGROOOOOOOOPPDPPPPPPPPPPPPHMDPOOOOOOOOOOGOOOOOOOOOOOPOOOOOOOOOO\nOOOOOOOOOOGHJRRJJRRRGOOOOOOOOPPPGOPPGPGGGGGGMDDPOOOOOOOOOOOOOOOOOOOGPPOOGPOOOOOO\nOOOOOOOOOOPGJJRRRRJGFGGOOOOOOOOOOOOGGGGJJJGGODPPOOOOOOOOOOOOOOOGFGOOPGFGGGOGOOOO\nOOOOOOOOOOOFGGJJGJJFGGGPOOOOOOOOOOOGGJJRRRGGHPPOOOOOOOOOOOOOOOOOGFOOGOPGOOOPGGOO\nOOOOOOOOOOOGHGGGGGGGGGGOOOOOOOOOOOOGGRRRJJHOGGOOOOOOOOOOOOOOOOOOOGOOOOOOOOOOOGGO\nOOOOOOOOOOOOGMFGGGGGGPOOOOOOOOOOOOOOGRJJJGHMGOOOOOOOOOOOOOOOOOOOOPPOOOOOGOOOOOOO\nOOOOOOOOOOOOGFMGGFGPPPOOOOOOOOOOOOOORRGGGGGMPOOOOOOOOOOOOOOOOOOOOOGOOOOOOOPGOOOO\nOOOOOOOOOOOOOOHMGGRPGGOOOOOOOOOOOOOOOGGGGGGHGOOOOOOOOOOOOOOOOOOOOOOOOOOGGPGPGGOO\nOOOOOOOOOOOOOOGHGGRGGOOOOOOOOOOOOOOOODPPGGGGGGOOOOOOOOOOOOOOOOOOOOOOOOOGGPPPPGOO\nOOOOOOOOOOOOOOGMGPRROOOOOOOOOOOOOOOOPPPPPPPGGGOPOOOOOOOOOOOOOOOOOOOOGGPPPDDDPPPO\nOOOOOOOOOOOOOOGMGGGPOOOOOOOOOOOOOOOOHPDDPPGGOOOPOOOOOOOOOOOOOOOOOOOGGGPDDDDDDPFO\nOOOOOOOOOOOOOOPMGGGOOOOOOOOOOOOOOOOOOPPDPPGGOOOGOOOOOOOOOOOOOOOOOOOGPDDDDDDDDPPO\nOOOOOOOOOOOOOOOMGPOOOOOOOOOOOOOOOOOOOHPPPGGGOOGPOOOOOOOOOOOOOOOOOOOGDDDDDPDDDPGO\nOOOOOOOOOOOOOOOGGOOOOOOOOOOOOOOOOOOOOHPPGHGOOOPOOOOOOOOOOOOOOOOOOOODDDDDDDPDDHFO\nOOOOOOOOOOOOOOOPGOOOOOOOOOOOOOOOOOOOOODPGHGOOOOOOOOOOOOOOOOOOOOOOOODDDOOGDDDHGOO\nOOOOOOOOOOOOOOOOGOOOOOOOOOOOOOOOOOOOOOPGGGOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOGHHHGOOO\nOOOOOOOOOOOOOOOOFOOOOOOOOOOOOOOOOOOOOOGOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOPGOOOO\nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\n`.replace(/\\n/g, '')\n        ) as StringTerrain[]\n      ).map((terrainId) => new terrainLookup[terrainId]())\n    );\n  }\n\n  height(): number {\n    return 50;\n  }\n\n  width(): number {\n    return 80;\n  }\n}\n\nexport default Earth;\n", "import CivilizationStartTile, { Coordinates } from './CivilizationStartTile';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport Earth from './Earth';\n\nexport class EarthStartTile extends CivilizationStartTile {\n  constructor(CivilizationType: typeof Civilization, startTile: Coordinates) {\n    super(CivilizationType, Earth, startTile);\n  }\n}\n\nexport default EarthStartTile;\n", "import Civilization from '@civ-clone/core-civilization/Civilization';\nimport CivilizationStartTile from './CivilizationStartTile';\nimport EntityRegistry from '@civ-clone/core-registry/EntityRegistry';\nimport Tile from '@civ-clone/core-world/Tile';\nimport World from '@civ-clone/core-world/World';\n\nexport class CivilizationStartTileRegistry extends EntityRegistry<CivilizationStartTile> {\n  constructor() {\n    super(CivilizationStartTile);\n  }\n\n  getByCivilization(\n    CivilizationType: typeof Civilization\n  ): CivilizationStartTile {\n    const [startTile] = this.getBy('civilizationType', CivilizationType);\n\n    if (!startTile) {\n      throw new TypeError(\n        `${CivilizationType.name} does not have a registered start tile.`\n      );\n    }\n\n    return startTile;\n  }\n\n  getStartTileByCivilizationAndWorld(\n    CivilizationType: typeof Civilization,\n    world: World\n  ): Tile {\n    return this.getByCivilization(CivilizationType).startTileForMap(world);\n  }\n}\n\nexport const instance: CivilizationStartTileRegistry =\n  new CivilizationStartTileRegistry();\n\nexport default CivilizationStartTileRegistry;\n", "import CivilizationStartTile from './CivilizationStartTile';\nimport CivilizationStartTileRegistry from './CivilizationStartTileRegistry';\nimport Earth from './Earth';\n\nexport class EarthStartTileRegistry extends CivilizationStartTileRegistry {\n  entries(): CivilizationStartTile[] {\n    return super\n      .entries()\n      .filter((startTile) => startTile.mapGenerator() === Earth);\n  }\n}\n\nexport const instance: EarthStartTileRegistry = new EarthStartTileRegistry();\n\nexport default EarthStartTileRegistry;\n", "import {\n  American,\n  Aztec,\n  Babylonian,\n  Chinese,\n  Egyptian,\n  English,\n  French,\n  German,\n  Greek,\n  Indian,\n  Mongol,\n  Roman,\n  Russian,\n  Zulu,\n} from '@civ-clone/civ1-civilization/Civilizations';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport { Coordinates } from './CivilizationStartTile';\nimport EarthStartTile from './EarthStartTile';\nimport { instance as earthStartTileRegistryInstance } from './EarthStartTileRegistry';\n\nearthStartTileRegistryInstance.register(\n  ...(\n    [\n      [American, { x: 12, y: 18 }],\n      [Aztec, { x: 5, y: 23 }],\n      [Babylonian, { x: 45, y: 22 }],\n      [Chinese, { x: 66, y: 19 }],\n      [Egyptian, { x: 41, y: 24 }],\n      [English, { x: 31, y: 14 }],\n      [French, { x: 33, y: 16 }],\n      [German, { x: 38, y: 15 }],\n      [Greek, { x: 39, y: 18 }],\n      [Indian, { x: 57, y: 26 }],\n      [Mongol, { x: 49, y: 19 }],\n      [Roman, { x: 36, y: 19 }],\n      [Russian, { x: 44, y: 12 }],\n      [Zulu, { x: 42, y: 42 }],\n    ] as [typeof Civilization, Coordinates][]\n  ).map(\n    ([CivilizationType, startTile]) =>\n      new EarthStartTile(CivilizationType, startTile)\n  )\n);\n", null, "import Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Year from '@civ-clone/core-game-year/Rules/Year';\n\nexport const getRules: () => Year[] = (): Year[] => [\n  new Year(\n    new Criterion((turn: number): boolean => turn < 252),\n    new Effect((turn: number): number => turn * 20 - 4020)\n  ),\n  new Year(\n    new Criterion((turn: number): boolean => turn > 251),\n    new Criterion((turn: number): boolean => turn < 302),\n    new Effect((turn: number): number => (turn - 151) * 10 + 1000)\n  ),\n  new Year(\n    new Criterion((turn: number): boolean => turn > 301),\n    new Criterion((turn: number): boolean => turn < 352),\n    new Effect((turn: number): number => (turn - 201) * 5 + 1500)\n  ),\n  new Year(\n    new Criterion((turn: number): boolean => turn > 351),\n    new Criterion((turn: number): boolean => turn < 402),\n    new Effect((turn: number): number => (turn - 251) * 2 + 1750)\n  ),\n  new Year(\n    new Criterion((turn: number): boolean => turn > 401),\n    new Effect((turn: number): number => turn - 301 + 1850)\n  ),\n];\n\nexport default getRules;\n", "import { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport turnYear from './Rules/Turn/year';\n\nruleRegistryInstance.register(...turnYear());\n", null, "import { Advance, City, Gold, Unit } from '../../GoodyHuts';\nimport {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport { Grassland, Plains, River } from '@civ-clone/civ1-world/Terrains';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport Action from '@civ-clone/core-goody-hut/Rules/Action';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Food from '@civ-clone/base-terrain-yield-food/Food';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport PlayerUnit from '@civ-clone/core-unit/Unit';\nimport Production from '@civ-clone/base-terrain-yield-production/Production';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport Trade from '@civ-clone/base-terrain-yield-trade/Trade';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry,\n  cityRegistry?: CityRegistry\n) => Action[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  cityRegistry: CityRegistry = cityRegistryInstance\n): Action[] => [\n  // TODO: Have an action for when there are no actions (\"The hut is long abandoned...\")\n  new Action(\n    new Criterion(\n      (goodyHut: GoodyHut, unit: PlayerUnit): boolean =>\n        playerResearchRegistry.getByPlayer(unit.player()).available().length > 0\n    ),\n    new Effect(\n      (goodyHut: GoodyHut, unit: PlayerUnit) => new Advance(goodyHut, unit)\n    )\n  ),\n  new Action(\n    new Criterion((goodyHut) =>\n      [Grassland, Plains, River].some(\n        (TerrainType: typeof Terrain) =>\n          goodyHut.tile().terrain() instanceof TerrainType\n      )\n    ),\n    new Criterion(\n      (goodyHut: GoodyHut, unit: PlayerUnit) =>\n        goodyHut\n          .tile()\n          .getSurroundingArea()\n          .score(null, [\n            [Food, 8],\n            [Production, 3],\n            [Trade, 1],\n          ]) >= 150\n    ),\n    new Criterion((goodyHut) =>\n      goodyHut\n        .tile()\n        .getSurroundingArea(4)\n        .every((tile) => cityRegistry.getByTile(tile) === null)\n    ),\n    new Effect(\n      (goodyHut: GoodyHut, unit: PlayerUnit) => new City(goodyHut, unit)\n    )\n  ),\n  new Action(\n    new Effect(\n      (goodyHut: GoodyHut, unit: PlayerUnit) => new Gold(goodyHut, unit)\n    )\n  ),\n  new Action(\n    new Effect(\n      (goodyHut: GoodyHut, unit: PlayerUnit) => new Unit(goodyHut, unit)\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport ActionPerformed from '@civ-clone/core-goody-hut/Rules/ActionPerformed';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport Action from '@civ-clone/core-goody-hut/Action';\n\nexport const getRules: (engine?: Engine) => ActionPerformed[] = (\n  engine: Engine = engineInstance\n): ActionPerformed[] => [\n  new ActionPerformed(\n    new Effect((goodyHut: GoodyHut, action: Action): void => {\n      engine.emit('goody-hut:action-performed', goodyHut, action);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  GoodyHutRegistry,\n  instance as goodyHutRegistryInstance,\n} from '@civ-clone/core-goody-hut/GoodyHutRegistry';\nimport Discovered from '@civ-clone/core-goody-hut/Rules/Discovered';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  goodyHutRegistry?: GoodyHutRegistry,\n  engine?: Engine,\n  randomNumberGenerator?: () => number\n) => Discovered[] = (\n  goodyHutRegistry: GoodyHutRegistry = goodyHutRegistryInstance,\n  engine: Engine = engineInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): Discovered[] => [\n  new Discovered(\n    new Effect((goodyHut: GoodyHut): void =>\n      goodyHutRegistry.unregister(goodyHut)\n    )\n  ),\n  new Discovered(\n    new Effect((goodyHut: GoodyHut, unit: Unit): void => {\n      const availableGoodyHutActions = goodyHut.actions(unit),\n        randomAction =\n          availableGoodyHutActions[\n            Math.floor(\n              availableGoodyHutActions.length * randomNumberGenerator()\n            )\n          ];\n\n      goodyHut.action(randomAction);\n    })\n  ),\n  new Discovered(\n    new Effect((goodyHut: GoodyHut, unit: Unit): void => {\n      engine.emit('goody-hut:discovered', goodyHut, unit);\n    })\n  ),\n];\n\nexport default getRules;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport class Distribution extends Rule<[Tile], void> {}\n\nexport default Distribution;\n", "import {\n  GoodyHutRegistry,\n  instance as goodyHutRegistryInstance,\n} from '@civ-clone/core-goody-hut/GoodyHutRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Distribution from '@civ-clone/core-goody-hut/Rules/Distribution';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport const getRules: (\n  goodyHutRegistry?: GoodyHutRegistry,\n  randomNumberGenerator?: () => number\n) => Distribution[] = (\n  goodyHutRegistry: GoodyHutRegistry = goodyHutRegistryInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): Distribution[] => [\n  new Distribution(new Criterion((tile: Tile): boolean => tile.isLand())),\n  new Distribution(\n    new Criterion((tile: Tile): boolean =>\n      tile\n        .getSurroundingArea(3)\n        .every(\n          (tile: Tile): boolean => goodyHutRegistry.getByTile(tile) === null\n        )\n    )\n  ),\n  new Distribution(\n    new Criterion((): boolean => randomNumberGenerator() < 0.05)\n  ),\n];\n\nexport default getRules;\n", "import {\n  GoodyHutRegistry,\n  instance as goodyHutRegistryInstance,\n} from '@civ-clone/core-goody-hut/GoodyHutRegistry';\nimport { Horseman, Swordman } from '@civ-clone/civ1-unit/Units';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitRule from '@civ-clone/base-goody-hut-unit/Rules/Unit';\n\nexport const getRules: (\n  goodyHutRegistry?: GoodyHutRegistry,\n  randomNumberGenerator?: () => number,\n  ruleRegistry?: RuleRegistry\n) => UnitRule[] = (\n  goodyHutRegistry: GoodyHutRegistry = goodyHutRegistryInstance,\n  randomNumberGenerator: () => number = (): number => Math.random(),\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): UnitRule[] => [\n  new UnitRule(\n    new Effect((goodyHut: GoodyHut, unit: Unit): Unit => {\n      const availableUnits = [Horseman, Swordman],\n        RandomUnit =\n          availableUnits[\n            Math.floor(availableUnits.length * randomNumberGenerator())\n          ];\n\n      // TODO: detect nearby city, same as civ1\n      // https://forums.civfanatics.com/threads/when-do-bribed-units-become-owned.648334/#post-15510296\n      return new RandomUnit(null, unit.player(), unit.tile(), ruleRegistry);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  GoodyHutRegistry,\n  instance as goodyHutRegistryInstance,\n} from '@civ-clone/core-goody-hut/GoodyHutRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\n\nexport const getRules: (goodyHutRegistry?: GoodyHutRegistry) => Moved[] = (\n  goodyHutRegistry: GoodyHutRegistry = goodyHutRegistryInstance\n): Moved[] => [\n  new Moved(\n    new Criterion(\n      (unit: Unit): boolean => goodyHutRegistry.getByTile(unit.tile()) !== null\n    ),\n    new Effect((unit): void => {\n      const goodyHut = goodyHutRegistry.getByTile(unit.tile());\n\n      (goodyHut as GoodyHut).process(unit);\n    })\n  ),\n];\n\nexport default getRules;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport World from '../World';\n\ntype BuiltArgs = [World];\n\nexport class Built extends Rule<BuiltArgs, void> {}\n\nexport default Built;\n", "import {\n  GoodyHutRegistry,\n  instance as goodyHutRegistryInstance,\n} from '@civ-clone/core-goody-hut/GoodyHutRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Built from '@civ-clone/core-world/Rules/Built';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport Tile from '@civ-clone/core-world/Tile';\nimport World from '@civ-clone/core-world/World';\nimport Distribution from '@civ-clone/core-goody-hut/Rules/Distribution';\n\nexport const getRules: (\n  goodyHutRegistry?: GoodyHutRegistry,\n  ruleRegistry?: RuleRegistry\n) => Built[] = (\n  goodyHutRegistry: GoodyHutRegistry = goodyHutRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): Built[] => [\n  new Built(\n    new Effect((world: World): void => {\n      const goodyHutRules = ruleRegistry.get(Distribution);\n\n      world.forEach((tile: Tile): void => {\n        if (\n          goodyHutRules.every((rule: Distribution): boolean =>\n            rule.validate(tile)\n          )\n        ) {\n          goodyHutRegistry.register(new GoodyHut(tile));\n        }\n      });\n    })\n  ),\n];\n\nexport default getRules;\n", "import goodyHutAction from './Rules/GoodyHut/action';\nimport goodyHutActionPerformed from './Rules/GoodyHut/action-performed';\nimport goodyHutDiscovered from './Rules/GoodyHut/discovered';\nimport goodyHutDistribution from './Rules/GoodyHut/distribution';\nimport goodyHutUnit from './Rules/GoodyHut/unit';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport unitMoved from './Rules/Unit/moved';\nimport worldBuilt from './Rules/World/built';\n\nruleRegistryInstance.register(\n  ...goodyHutAction(),\n  ...goodyHutActionPerformed(),\n  ...goodyHutDiscovered(),\n  ...goodyHutDistribution(),\n  ...goodyHutUnit(),\n  ...unitMoved(),\n  ...worldBuilt()\n);\n", null, "import {\n  Communism,\n  Democracy,\n  Despotism,\n  Monarchy,\n  Republic,\n} from './Governments';\nimport { instance as availableGovernmentRegistryInstance } from '@civ-clone/core-government/AvailableGovernmentRegistry';\n\navailableGovernmentRegistryInstance.register(\n  Communism,\n  Democracy,\n  Despotism,\n  Monarchy,\n  Republic\n);\n", "import {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '@civ-clone/core-government/PlayerGovernmentRegistry';\nimport { Anarchy } from '../../Governments';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerAction from '@civ-clone/core-player/PlayerAction';\nimport { Revolution } from '../..//PlayerActions';\nimport Action from '@civ-clone/core-player/Rules/Action';\n\nexport const getRules: (\n  playerGovernmentRegistry?: PlayerGovernmentRegistry\n) => Action[] = (\n  playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance\n): Action[] => [\n  new Action(\n    new Criterion(\n      (player: Player): boolean =>\n        !playerGovernmentRegistry.getByPlayer(player).is(Anarchy)\n    ),\n    new Effect((player: Player): PlayerAction[] => [\n      new Revolution(player, playerGovernmentRegistry.getByPlayer(player)),\n    ])\n  ),\n];\n\nexport default getRules;\n", "import {\n  AvailableGovernmentRegistry,\n  instance as availableGovernmentRegistryInstance,\n} from '@civ-clone/core-government/AvailableGovernmentRegistry';\nimport {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '@civ-clone/core-government/PlayerGovernmentRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Added from '@civ-clone/core-player/Rules/Added';\nimport { Despotism } from '../../Governments';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport High from '@civ-clone/core-rule/Priorities/High';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerGovernment from '@civ-clone/core-government/PlayerGovernment';\n\nexport const getRules: (\n  availableGovernmentRegistry?: AvailableGovernmentRegistry,\n  playerGovernmentRegistry?: PlayerGovernmentRegistry,\n  ruleRegistry?: RuleRegistry\n) => Added[] = (\n  availableGovernmentRegistry: AvailableGovernmentRegistry = availableGovernmentRegistryInstance,\n  playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): Added[] => [\n  new Added(\n    new High(),\n    new Effect((player: Player): void => {\n      const playerGovernment = new PlayerGovernment(\n        player,\n        availableGovernmentRegistry,\n        ruleRegistry\n      );\n\n      playerGovernment.set(new Despotism());\n\n      playerGovernmentRegistry.register(playerGovernment);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Communism as CommunismAdvance,\n  Democracy as DemocracyAdvance,\n  Monarchy as MonarchyAdvance,\n  TheRepublic,\n} from '@civ-clone/civ1-science/Advances';\nimport {\n  Communism,\n  Democracy,\n  Despotism,\n  Monarchy,\n  Republic,\n} from '../../Governments';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport Availability from '@civ-clone/core-government/Rules/Availability';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Government from '@civ-clone/core-government/Government';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry\n) => Availability[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n): Availability[] => [\n  new Availability(\n    new Criterion(\n      (GovernmentType: typeof Government): boolean =>\n        GovernmentType === Despotism\n    )\n  ),\n  ...[\n    [Communism, CommunismAdvance],\n    [Democracy, DemocracyAdvance],\n    [Monarchy, MonarchyAdvance],\n    [Republic, TheRepublic],\n  ].map(\n    ([AvailableGovernment, RequiredAdvance]) =>\n      new Availability(\n        new Criterion(\n          (GovernmentType: typeof Government): boolean =>\n            GovernmentType === AvailableGovernment\n        ),\n        new Criterion((GovernmentType: typeof Government, player: Player) => {\n          const playerResearch = playerResearchRegistry.getByPlayer(player);\n\n          return playerResearch.completed(RequiredAdvance);\n        })\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport Changed from '@civ-clone/core-government/Rules/Changed';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Government from '@civ-clone/core-government/Government';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerTile from '@civ-clone/core-player-world/PlayerTile';\n\nexport const getRules: (\n  engine?: Engine,\n  playerWorldRegistry?: PlayerWorldRegistry\n) => Changed[] = (\n  engine: Engine = engineInstance,\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance\n): Changed[] => [\n  new Changed(\n    new Effect((player: Player, government: Government): void => {\n      engine.emit('player:government:changed', player, government);\n    })\n  ),\n  new Changed(\n    new Criterion((player: Player) => {\n      try {\n        playerWorldRegistry.getByPlayer(player);\n\n        return true;\n      } catch (e) {\n        if (\n          e instanceof TypeError &&\n          e.message.match(/Wrong number of player worlds exist/)\n        ) {\n          return false;\n        }\n\n        throw e;\n      }\n    }),\n    new Effect((player: Player): void => {\n      const playerWorld = playerWorldRegistry.getByPlayer(player);\n\n      playerWorld\n        .entries()\n        .forEach((tile: PlayerTile): void =>\n          tile.tile().clearYieldCache(player)\n        );\n    })\n  ),\n];\n\nexport default getRules;\n", "import { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport action from './Rules/Player/action';\nimport added from './Rules/Player/added';\nimport availability from './Rules/Governments/availability';\nimport governmentChanged from './Rules/Player/government-changed';\n\nruleRegistryInstance.register(\n  ...action(),\n  ...added(),\n  ...availability(),\n  ...governmentChanged()\n);\n", null, "import Player from '../Player';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class TurnEnd extends Rule<[Player], void> {}\n\nexport default TurnEnd;\n", "import {\n  CurrentPlayerRegistry,\n  instance as currentPlayerRegistryInstance,\n} from '@civ-clone/core-player/CurrentPlayerRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Player from '@civ-clone/core-player/Player';\nimport TurnEnd from '@civ-clone/core-player/Rules/TurnEnd';\n\nexport const getEvents: (\n  currentPlayerRegistry?: CurrentPlayerRegistry,\n  ruleRegistry?: RuleRegistry,\n  engine?: Engine\n) => [string, (player: Player) => void][] = (\n  currentPlayerRegistry: CurrentPlayerRegistry = currentPlayerRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  engine: Engine = engineInstance\n): [string, (player: Player) => void][] => [\n  [\n    'player:turn-end',\n    (player: Player): void => {\n      currentPlayerRegistry.unregister(player);\n\n      ruleRegistry.process(TurnEnd, player);\n\n      const [nextPlayer] = currentPlayerRegistry.entries();\n\n      if (!nextPlayer) {\n        engine.emit('turn:end');\n\n        return;\n      }\n\n      engine.emit('player:turn-start', nextPlayer);\n    },\n  ],\n];\n\nexport default getEvents;\n", "import {\n  ClientRegistry,\n  instance as clientRegistryInstance,\n} from '@civ-clone/core-client/ClientRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Player from '@civ-clone/core-player/Player';\nimport TurnStart from '@civ-clone/core-player/Rules/TurnStart';\n\nexport const getEvents: (\n  clientRegistry?: ClientRegistry,\n  engine?: Engine,\n  ruleRegistry?: RuleRegistry\n) => [string, (player: Player) => void][] = (\n  clientRegistry: ClientRegistry = clientRegistryInstance,\n  engine: Engine = engineInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): [string, (player: Player) => void][] => [\n  [\n    'player:turn-start',\n    (player: Player): void => {\n      ruleRegistry.process(TurnStart, player);\n\n      const client = clientRegistry.getByPlayer(player);\n\n      client\n        .takeTurn()\n        .catch((error) => console.error(error))\n        .finally((): void => {\n          engine.emit('player:turn-end', player);\n        });\n    },\n  ],\n];\n\nexport default getEvents;\n", "import {\n  CurrentPlayerRegistry,\n  instance as currentPlayerRegistryInstance,\n} from '@civ-clone/core-player/CurrentPlayerRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  PlayerRegistry,\n  instance as playerRegistryInstance,\n} from '@civ-clone/core-player/PlayerRegistry';\n\nexport const getEvents: (\n  playerRegistry?: PlayerRegistry,\n  currentPlayerRegistry?: CurrentPlayerRegistry,\n  engine?: Engine\n) => [string, () => any][] = (\n  playerRegistry: PlayerRegistry = playerRegistryInstance,\n  currentPlayerRegistry: CurrentPlayerRegistry = currentPlayerRegistryInstance,\n  engine: Engine = engineInstance\n): [string, () => any][] => [\n  [\n    'turn:start',\n    (): void => {\n      currentPlayerRegistry.register(...playerRegistry.entries());\n\n      const [currentPlayer] = currentPlayerRegistry.entries();\n\n      engine.emit('player:turn-start', currentPlayer);\n    },\n  ],\n];\n\nexport default getEvents;\n", "import { instance as engineInstance } from '@civ-clone/core-engine/Engine';\nimport playerTurnEnd from './Events/Player/turn-end';\nimport playerTurnStart from './Events/Player/turn-start';\nimport turnEnd from './Events/Turn/start';\n\n[...playerTurnEnd(), ...playerTurnStart(), ...turnEnd()].forEach(\n  ([event, handler]) => engineInstance.on(event, handler)\n);\n", "import Player from '../Player';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Defeated extends Rule<[Player, Player | null], void> {}\n\nexport default Defeated;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Captured from '@civ-clone/core-city/Rules/Captured';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Defeated from '@civ-clone/core-player/Rules/Defeated';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getRules: (\n  cityRegistry?: CityRegistry,\n  ruleRegistry?: RuleRegistry\n) => Captured[] = (\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): Captured[] => [\n  new Captured(\n    new Criterion(\n      (\n        capturedCity: City,\n        capturingPlayer: Player,\n        originalPlayer: Player\n      ): boolean =>\n        cityRegistry\n          .getByPlayer(originalPlayer)\n          .filter((city: City) => city !== capturedCity).length === 0\n      // TODO: check for \"total annihilation\" setting and check number of units\n      // && unitRegistry.getByPlayer(destroyedCity.player()).length === 0\n    ),\n    new Effect(\n      (capturedCity: City, capturingPlayer: Player, player: Player): void => {\n        ruleRegistry.process(Defeated, player, capturingPlayer);\n      }\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Defeated from '@civ-clone/core-player/Rules/Defeated';\nimport Destroyed from '@civ-clone/core-city/Rules/Destroyed';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getRules: (\n  cityRegistry?: CityRegistry,\n  ruleRegistry?: RuleRegistry\n) => Destroyed[] = (\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): Destroyed[] => [\n  new Destroyed(\n    new Criterion(\n      (destroyedCity: City, destroyingPlayer: Player | null): boolean =>\n        cityRegistry\n          .getByPlayer(destroyedCity.player())\n          .filter((city: City) => city !== destroyedCity).length === 0\n      // TODO: check for \"total annihilation\" setting and check number of units\n      // && unitRegistry.getByPlayer(destroyedCity.player()).length === 0\n    ),\n    new Effect((city: City, destroyingPlayer: Player | null) =>\n      ruleRegistry.process(Defeated, city.player(), destroyingPlayer)\n    )\n  ),\n];\n\nexport default getRules;\n", "import Action from '@civ-clone/core-player/Rules/Action';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport EndTurn from '@civ-clone/base-player-action-end-turn/EndTurn';\nimport Player from '@civ-clone/core-player/Player';\nimport Priority from '@civ-clone/core-rule/Priority';\n\n// Defined here so we can reference it\nconst endOfTurnRule = new Action(\n  // `Low` is probably enough in most cases, but just to make sure, it's over 9000\n  new Priority(9001),\n  new Criterion((player: Player) => {\n    // Prevent infinite recursion...\n    endOfTurnRule.disable();\n\n    const otherActions = player.mandatoryActions();\n\n    endOfTurnRule.enable();\n\n    return otherActions.length === 0;\n  }),\n  new Effect((player: Player) => [new EndTurn(player, null)])\n);\n\nexport const getRules: () => Action[] = (): Action[] => [endOfTurnRule];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport Added from '@civ-clone/core-player/Rules/Added';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getRules: (engine?: Engine) => Added[] = (\n  engine: Engine = engineInstance\n): Added[] => [\n  new Added(\n    new Effect((player: Player): void => {\n      engine.emit('player:added', player);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  CurrentPlayerRegistry,\n  instance as currentPlayerRegistryInstance,\n} from '@civ-clone/core-player/CurrentPlayerRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  PlayerRegistry,\n  instance as playerRegistryInstance,\n} from '@civ-clone/core-player/PlayerRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Defeated from '@civ-clone/core-player/Rules/Defeated';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getRules: (\n  currentPlayerRegistry?: CurrentPlayerRegistry,\n  playerRegistry?: PlayerRegistry,\n  engine?: Engine\n) => Defeated[] = (\n  currentPlayerRegistry: CurrentPlayerRegistry = currentPlayerRegistryInstance,\n  playerRegistry: PlayerRegistry = playerRegistryInstance,\n  engine: Engine = engineInstance\n): Defeated[] => [\n  new Defeated(\n    new Criterion((player: Player) => currentPlayerRegistry.includes(player)),\n    new Effect((player: Player) => currentPlayerRegistry.unregister(player))\n  ),\n  new Defeated(\n    new Criterion((player: Player) => playerRegistry.includes(player)),\n    new Effect((player: Player) => playerRegistry.unregister(player))\n  ),\n  new Defeated(\n    new Effect((player: Player, capturingPlayer: Player | null): void => {\n      engine.emit('player:defeated', player, capturingPlayer);\n    })\n  ),\n];\n\nexport default getRules;\n", "import Player from '../Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport class Spawn extends Rule<[Player, Tile], void> {}\n\nexport default Spawn;\n", "import {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport Settlers from '@civ-clone/base-unit-settlers/Settlers';\nimport Spawn from '@civ-clone/core-player/Rules/Spawn';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport const getRules: (ruleRegistry?: RuleRegistry) => Spawn[] = (\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): Spawn[] => [\n  new Spawn(\n    new Effect((player: Player, tile: Tile): void => {\n      new Settlers(null, player, tile, ruleRegistry);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Food from '@civ-clone/base-terrain-yield-food/Food';\nimport High from '@civ-clone/core-rule/Priorities/High';\nimport Player from '@civ-clone/core-player/Player';\nimport ProcessYield from '@civ-clone/core-city/Rules/ProcessYield';\nimport Production from '@civ-clone/base-terrain-yield-production/Production';\nimport Trade from '@civ-clone/base-terrain-yield-trade/Trade';\nimport TurnStart from '@civ-clone/core-player/Rules/TurnStart';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { reduceYields } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules: (\n  ruleRegistry?: RuleRegistry,\n  cityRegistry?: CityRegistry,\n  unitRegistry?: UnitRegistry\n) => TurnStart[] = (\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance\n): TurnStart[] => [\n  new TurnStart(\n    new High(),\n    new Effect((player: Player): void => {\n      // This will need to be excluded/replaced/updated if the base yields change, but having a dynamic approach here\n      // causes the wrong values to be processed.\n      cityRegistry.getByPlayer(player).forEach((city: City): void => {\n        const cityYields = city.yields();\n\n        reduceYields(cityYields, Food, Production, Trade)\n          .reduce(\n            (yields: Yield[], yieldValue, index) => {\n              yields[index].set(yieldValue, 'Consolidated');\n\n              return yields;\n            },\n            [\n              new Food(0, 'Consolidated'),\n              new Production(0, 'Consolidated'),\n              new Trade(0, 'Consolidated'),\n            ]\n          )\n          .forEach((cityYield: Yield) =>\n            ruleRegistry.process(ProcessYield, cityYield, city, cityYields)\n          );\n      });\n    })\n  ),\n\n  new TurnStart(\n    new Effect((player: Player): void =>\n      unitRegistry.getByPlayer(player).forEach((unit: Unit): void => {\n        if (unit.destroyed()) {\n          return;\n        }\n\n        unit.moves().set(unit.movement());\n\n        const busyAction = unit.busy();\n\n        if (!busyAction) {\n          unit.setActive();\n          unit.setWaiting(false);\n\n          return;\n        }\n\n        if (!busyAction.validate()) {\n          return;\n        }\n\n        busyAction.process();\n        // It's the job of the `DelayedAction` to set the `Unit` as active, otherwise `Action`s that chain `Busy` will\n        // end up being cleared here.\n      })\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\nimport VisibilityChanged from '@civ-clone/core-player-world/Rules/Player/VisibilityChanged';\n\nexport const getRules: (engine?: Engine) => VisibilityChanged[] = (\n  engine: Engine = engineInstance\n): VisibilityChanged[] => [\n  new VisibilityChanged(\n    new Effect((tile: Tile, player: Player): void => {\n      engine.emit('player:visibility-changed', tile, player);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  PlayerRegistry,\n  instance as playerRegistryInstance,\n} from '@civ-clone/core-player/PlayerRegistry';\nimport {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport Built from '@civ-clone/core-tile-improvement/Rules/Built';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport const getRules: (\n  playerRegistry?: PlayerRegistry,\n  playerWorldRegistry?: PlayerWorldRegistry\n) => Built[] = (\n  playerRegistry: PlayerRegistry = playerRegistryInstance,\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance\n): Built[] => [\n  new Built(\n    new Effect((tile: Tile) => {\n      tile.clearYieldCache(null);\n\n      playerRegistry.forEach((player) => {\n        const playerWorld = playerWorldRegistry.getByPlayer(player),\n          playerTile = playerWorld.getByTile(tile);\n\n        if (playerTile === null) {\n          return;\n        }\n\n        tile.clearYieldCache(player);\n      });\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Defeated from '@civ-clone/core-player/Rules/Defeated';\nimport Destroyed from '@civ-clone/core-unit/Rules/Destroyed';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  cityRegistry?: CityRegistry,\n  ruleRegistry?: RuleRegistry\n) => Destroyed[] = (\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): Destroyed[] => [\n  new Destroyed(\n    new Criterion(\n      (unit: Unit, destroyingPlayer: Player | null) =>\n        cityRegistry.getByPlayer(unit.player()).length === 0\n      // TODO: check for \"total annihilation\" setting and check number of units\n      // && unitRegistry.getByPlayer(unit.player()).length === 0\n    ),\n    new Effect((unit: Unit, destroyingPlayer: Player | null) =>\n      ruleRegistry.process(Defeated, unit.player(), destroyingPlayer)\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Visibility from '@civ-clone/core-unit/Rules/Visibility';\n\nexport const getRules: (\n  playerWorldRegistry?: PlayerWorldRegistry\n) => Visibility[] = (\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance\n): Visibility[] => [\n  new Visibility(\n    new Effect((tile: Tile, player: Player) => {\n      tile.clearYieldCache(player);\n\n      const playerWorld = playerWorldRegistry.getByPlayer(player);\n\n      playerWorld.register(tile);\n\n      const playerTile = playerWorld.getByTile(tile)!;\n\n      playerTile.update();\n    })\n  ),\n];\n\nexport default getRules;\n", "import Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '@civ-clone/core-world/Tile';\nimport World from '@civ-clone/core-world/World';\n\nexport class PickStartTile extends Rule<[World, Player, Tile[]], Tile> {}\n\nexport default PickStartTile;\n", "import {\n  CivilizationRegistry,\n  instance as civilizationRegistryInstance,\n} from '@civ-clone/core-civilization/CivilizationRegistry';\nimport {\n  ClientRegistry,\n  instance as clientRegistryInstance,\n} from '@civ-clone/core-client/ClientRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  PlayerRegistry,\n  instance as playerRegistryInstance,\n} from '@civ-clone/core-player/PlayerRegistry';\nimport {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Built from '@civ-clone/core-world/Rules/Built';\nimport Client from '@civ-clone/core-civ-client/Client';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Food from '@civ-clone/base-terrain-yield-food/Food';\nimport Grassland from '@civ-clone/base-terrain-grassland/Grassland';\nimport PickStartTile from '@civ-clone/core-world-generator/Rules/PickStartTile';\nimport Plains from '@civ-clone/base-terrain-plains/Plains';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerWorld from '@civ-clone/core-player-world/PlayerWorld';\nimport Production from '@civ-clone/base-terrain-yield-production/Production';\nimport River from '@civ-clone/base-terrain-river/River';\nimport Tile from '@civ-clone/core-world/Tile';\nimport Trade from '@civ-clone/base-terrain-yield-trade/Trade';\nimport World from '@civ-clone/core-world/World';\nimport Spawn from '@civ-clone/core-player/Rules/Spawn';\n\nexport const getRules: (\n  civilizationRegistry?: CivilizationRegistry,\n  clientRegistry?: ClientRegistry,\n  engine?: Engine,\n  playerRegistry?: PlayerRegistry,\n  playerWorldRegistry?: PlayerWorldRegistry,\n  ruleRegistry?: RuleRegistry,\n  randomNumberGenerator?: () => number\n) => Built[] = (\n  civilizationRegistry: CivilizationRegistry = civilizationRegistryInstance,\n  clientRegistry: ClientRegistry = clientRegistryInstance,\n  engine: Engine = engineInstance,\n  playerRegistry: PlayerRegistry = playerRegistryInstance,\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  randomNumberGenerator: () => number = (): number => Math.random()\n): Built[] => [\n  new Built(\n    new Effect((world: World): void =>\n      playerRegistry\n        .entries()\n        .forEach((player: Player): void =>\n          playerWorldRegistry.register(new PlayerWorld(player, world))\n        )\n    )\n  ),\n  new Built(\n    new Effect((world: World): void => {\n      const tileCache: Map<Tile, number> = new Map(),\n        areaCache: Map<Tile, number> = new Map(),\n        tileScore = (tile: Tile, player: Player | null = null): number => {\n          if (!tileCache.has(tile)) {\n            tileCache.set(\n              tile,\n              tile.score(player, [\n                [Food, 8],\n                [Production, 3],\n                [Trade, 1],\n              ])\n            );\n          }\n\n          return tileCache.get(tile)!;\n        },\n        areaScore = (tile: Tile, player: Player | null = null): number => {\n          if (!areaCache.has(tile)) {\n            areaCache.set(\n              tile,\n              tile\n                .getSurroundingArea()\n                .entries()\n                .reduce(\n                  (total: number, tile: Tile): number =>\n                    total + tileScore(tile, player),\n                  0\n                )\n            );\n          }\n\n          return areaCache.get(tile)!;\n        };\n\n      engine.emit('world:generate-start-tiles');\n\n      const usedStartSquares: Tile[] = [],\n        startingSquares = world\n          .entries()\n          .filter((tile: Tile) =>\n            [Grassland, Plains, River].some(\n              (TerrainType) => tile.terrain() instanceof TerrainType\n            )\n          )\n          .map((tile: Tile) => ({\n            tile,\n            score: areaScore(tile),\n          }))\n          .sort(({ score: scoreA }, { score: scoreB }) => scoreB - scoreA)\n          .map(({ tile }) => tile);\n\n      engine.emit('world:start-tiles', startingSquares);\n\n      (clientRegistry.entries() as Client[])\n        .reduce(\n          (promise: Promise<void>, client: Client): Promise<void> =>\n            promise.then(async () => {\n              const player = client.player();\n\n              await client.chooseCivilization(civilizationRegistry.entries());\n\n              civilizationRegistry.unregister(\n                player.civilization().sourceClass()\n              );\n\n              const [startingSquare] = ruleRegistry.process(\n                PickStartTile,\n                world,\n                player,\n                usedStartSquares\n              );\n\n              if (!startingSquare) {\n                throw new TypeError('Not enough `startingSquare`s.');\n              }\n\n              usedStartSquares.push(startingSquare);\n\n              ruleRegistry.process(Spawn, player, startingSquare);\n            }),\n          Promise.resolve()\n        )\n        .then(() => engine.emit('game:start'));\n    })\n  ),\n  new Built(\n    new Effect((world: World): void => {\n      engine.emit('world:built', world);\n    })\n  ),\n];\n\nexport default getRules;\n", "import cityCaptured from './Rules/City/captured';\nimport cityDestroyed from './Rules/City/destroyed';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport playerAction from './Rules/Player/action';\nimport playerAdded from './Rules/Player/added';\nimport playerDefeated from './Rules/Player/defeated';\nimport playerSpawn from './Rules/Player/spawn';\nimport playerTurnStart from './Rules/Player/turn-start';\nimport playerVisibilityChanged from './Rules/Player/visibility-changed';\nimport tileImprovementBuilt from './Rules/TileImprovement/built';\nimport unitDestroyed from './Rules/Unit/destroyed';\nimport unitVisibility from './Rules/Unit/visibility';\nimport worldBuilt from './Rules/World/built';\n\nruleRegistryInstance.register(\n  ...cityCaptured(),\n  ...cityDestroyed(),\n  ...playerAction(),\n  ...playerAdded(),\n  ...playerDefeated(),\n  ...playerSpawn(),\n  ...playerTurnStart(),\n  ...playerVisibilityChanged(),\n  ...tileImprovementBuilt(),\n  ...unitDestroyed(),\n  ...unitVisibility(),\n  ...worldBuilt()\n);\n", null, "import {\n  AdvancedFlight,\n  Alphabet,\n  Astronomy,\n  AtomicTheory,\n  Automobile,\n  Banking,\n  BridgeBuilding,\n  BronzeWorking,\n  CeremonialBurial,\n  Chemistry,\n  Chivalry,\n  CodeOfLaws,\n  Combustion,\n  Communism,\n  Computers,\n  Conscription,\n  Construction,\n  Corporation,\n  Currency,\n  Democracy,\n  Electricity,\n  Electronics,\n  Engineering,\n  Explosives,\n  Feudalism,\n  Flight,\n  FusionPower,\n  GeneticEngineering,\n  Gunpowder,\n  HorsebackRiding,\n  Industrialization,\n  Invention,\n  IronWorking,\n  LaborUnion,\n  Literacy,\n  Magnetism,\n  MapMaking,\n  Masonry,\n  MassProduction,\n  Mathematics,\n  Medicine,\n  Metallurgy,\n  Monarchy,\n  Mysticism,\n  Navigation,\n  NuclearFission,\n  NuclearPower,\n  Philosophy,\n  Physics,\n  Plastics,\n  Pottery,\n  Railroad,\n  Recycling,\n  Refining,\n  Religion,\n  Robotics,\n  Rocketry,\n  SpaceFlight,\n  SteamEngine,\n  Steel,\n  Superconductor,\n  TheRepublic,\n  TheWheel,\n  TheoryOfGravity,\n  Trade,\n  University,\n  Writing,\n} from './Advances';\nimport { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\n\nadvanceRegistryInstance.register(\n  AdvancedFlight,\n  Alphabet,\n  Astronomy,\n  AtomicTheory,\n  Automobile,\n  Banking,\n  BridgeBuilding,\n  BronzeWorking,\n  CeremonialBurial,\n  Chemistry,\n  Chivalry,\n  CodeOfLaws,\n  Combustion,\n  Communism,\n  Computers,\n  Conscription,\n  Construction,\n  Corporation,\n  Currency,\n  Democracy,\n  Electricity,\n  Electronics,\n  Engineering,\n  Explosives,\n  Feudalism,\n  Flight,\n  FusionPower,\n  GeneticEngineering,\n  Gunpowder,\n  HorsebackRiding,\n  Industrialization,\n  Invention,\n  IronWorking,\n  LaborUnion,\n  Literacy,\n  Magnetism,\n  MapMaking,\n  Masonry,\n  MassProduction,\n  Mathematics,\n  Medicine,\n  Metallurgy,\n  Monarchy,\n  Mysticism,\n  Navigation,\n  NuclearFission,\n  NuclearPower,\n  Philosophy,\n  Physics,\n  Plastics,\n  Pottery,\n  Railroad,\n  Recycling,\n  Refining,\n  Religion,\n  Robotics,\n  Rocketry,\n  SpaceFlight,\n  SteamEngine,\n  Steel,\n  Superconductor,\n  TheRepublic,\n  TheWheel,\n  TheoryOfGravity,\n  Trade,\n  University,\n  Writing\n);\n", "export { ChooseResearch } from './PlayerActions/ChooseResearch';\n", "import {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport Action from '@civ-clone/core-player/Rules/Action';\nimport { ChooseResearch } from '../../PlayerActions';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerAction from '@civ-clone/core-player/PlayerAction';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry\n) => Action[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n): Action[] => [\n  new Action(\n    new Criterion(\n      (player: Player): boolean =>\n        playerResearchRegistry.getByPlayer(player).researching() === null\n    ),\n    new Criterion(\n      (player: Player): boolean =>\n        playerResearchRegistry.getByPlayer(player).available().length > 0\n    ),\n    new Effect((player: Player): PlayerAction[] => [\n      new ChooseResearch(player, playerResearchRegistry.getByPlayer(player)),\n    ])\n  ),\n];\n\nexport default getRules;\n", "import {\n  AdvanceRegistry,\n  instance as advanceRegistryInstance,\n} from '@civ-clone/core-science/AdvanceRegistry';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Added from '@civ-clone/core-player/Rules/Added';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerResearch from '@civ-clone/core-science/PlayerResearch';\n\nexport const getRules: (\n  advanceRegistry?: AdvanceRegistry,\n  playerResearchRegistry?: PlayerResearchRegistry,\n  ruleRegistry?: RuleRegistry,\n  randomNumberGenerator?: () => number\n) => Added[] = (\n  advanceRegistry: AdvanceRegistry = advanceRegistryInstance,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): Added[] => [\n  new Added(\n    new Effect((player: Player): void =>\n      playerResearchRegistry.register(\n        new PlayerResearch(player, advanceRegistry, ruleRegistry)\n      )\n    )\n  ),\n  new Added(\n    new Effect((player: Player): void => {\n      const playerResearch = playerResearchRegistry.getByPlayer(player);\n\n      for (\n        let i = 0,\n          max = Math.min(\n            playerResearch.available().length,\n            Math.floor(4 * randomNumberGenerator())\n          );\n        i < max;\n        i++\n      ) {\n        const available = playerResearch.available();\n\n        playerResearch.addAdvance(\n          available[Math.floor(randomNumberGenerator() * available.length)]\n        );\n      }\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport Captured from '@civ-clone/core-city/Rules/Captured';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Advance from '@civ-clone/core-science/Advance';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry,\n  randomNumberGenerator?: () => number\n) => Captured[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): Captured[] => [\n  new Captured(\n    new Criterion(\n      (capturedCity: City, capturingPlayer: Player, player: Player): boolean =>\n        playerResearchRegistry\n          .getByPlayer(player)\n          .complete()\n          .some(\n            (advance) =>\n              !playerResearchRegistry\n                .getByPlayer(capturingPlayer)\n                .completed(advance.constructor as typeof Advance)\n          )\n    ),\n    // TODO: have `Player#chooseAdvance` or something\n    new Effect(\n      (capturedCity: City, capturingPlayer: Player, player: Player): void => {\n        const capturingPlayerResearch =\n          playerResearchRegistry.getByPlayer(capturingPlayer);\n        const available = playerResearchRegistry\n          .getByPlayer(player)\n          .complete()\n          .filter(\n            (advance) =>\n              !capturingPlayerResearch.completed(\n                advance.constructor as typeof Advance\n              )\n          );\n\n        capturingPlayerResearch.addAdvance(\n          available.map((advance) => advance.constructor as typeof Advance)[\n            Math.floor(randomNumberGenerator() * available.length)\n          ]\n        );\n      }\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport Advance from '@civ-clone/core-science/Advance';\nimport Complete from '@civ-clone/core-science/Rules/Complete';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport PlayerResearch from '@civ-clone/core-science/PlayerResearch';\n\nexport const getRules: (engine?: Engine) => Complete[] = (\n  engine: Engine = engineInstance\n): Complete[] => [\n  new Complete(\n    new Effect((playerResearch: PlayerResearch, advance: Advance): void => {\n      engine.emit('player:research-complete', playerResearch, advance);\n    })\n  ),\n];\n\nexport default getRules;\n", "import Advance from '@civ-clone/core-science/Advance';\nimport Cost from '@civ-clone/core-science/Rules/Cost';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport PlayerResearch from '@civ-clone/core-science/PlayerResearch';\n\n// see: https://forums.civfanatics.com/threads/how-many-bulbs-need-for-the-current-tech.376195/#post-13810088\nexport const getRules: () => Cost[] = (): Cost[] => [\n  new Cost(\n    new Effect(\n      (CostAdvance: typeof Advance, playerResearch: PlayerResearch): number =>\n        (playerResearch.complete().length + 1) *\n        (6 +\n          2 *\n            // playerResearch.player()\n            //   .difficultyLevel ||\n            0)\n    )\n  ),\n];\n\nexport default getRules;\n", "import CivilDisorder from '@civ-clone/core-city-happiness/Rules/CivilDisorder';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport ProcessYield from '@civ-clone/core-city/Rules/ProcessYield';\nimport { Research } from '../../Yields';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry,\n  ruleRegistry?: RuleRegistry\n) => ProcessYield[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): ProcessYield[] => [\n  new ProcessYield(\n    new Criterion((cityYield: Yield): boolean => cityYield instanceof Research),\n    new Criterion(\n      (cityYield: Yield, city: City, yields: Yield[]) =>\n        !ruleRegistry\n          .get(CivilDisorder)\n          .some((rule: CivilDisorder): boolean => rule.validate(city, yields))\n    ),\n    new Effect((cityYield: Yield, city: City): void =>\n      playerResearchRegistry.getByPlayer(city.player()).add(cityYield)\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  AdvancedFlight,\n  Alphabet,\n  Astronomy,\n  AtomicTheory,\n  Automobile,\n  Banking,\n  BridgeBuilding,\n  BronzeWorking,\n  CeremonialBurial,\n  Chemistry,\n  Chivalry,\n  CodeOfLaws,\n  Combustion,\n  Communism,\n  Computers,\n  Conscription,\n  Construction,\n  Corporation,\n  Currency,\n  Democracy,\n  Electricity,\n  Electronics,\n  Engineering,\n  Explosives,\n  Feudalism,\n  Flight,\n  FusionPower,\n  GeneticEngineering,\n  Gunpowder,\n  HorsebackRiding,\n  Industrialization,\n  Invention,\n  IronWorking,\n  LaborUnion,\n  Literacy,\n  Magnetism,\n  MapMaking,\n  Masonry,\n  MassProduction,\n  Mathematics,\n  Medicine,\n  Metallurgy,\n  Monarchy,\n  Mysticism,\n  Navigation,\n  NuclearFission,\n  NuclearPower,\n  Philosophy,\n  Physics,\n  Plastics,\n  Railroad,\n  Recycling,\n  Refining,\n  Religion,\n  Robotics,\n  Rocketry,\n  SpaceFlight,\n  SteamEngine,\n  Steel,\n  Superconductor,\n  TheRepublic,\n  TheWheel,\n  TheoryOfGravity,\n  Trade,\n  University,\n  Writing,\n} from '../../Advances';\nimport Advance from '@civ-clone/core-science/Advance';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Requirements from '@civ-clone/core-science/Rules/Requirements';\n\nexport const getRules: () => Requirements[] = (): Requirements[] => [\n  ...(\n    [\n      [AdvancedFlight, Flight, Electricity],\n      [Astronomy, Mathematics, Mysticism],\n      [AtomicTheory, TheoryOfGravity, Physics],\n      [Automobile, Combustion, Steel],\n      [Banking, TheRepublic, Trade],\n      [BridgeBuilding, Construction, IronWorking],\n      [Chemistry, University, Medicine],\n      [Chivalry, Feudalism, HorsebackRiding],\n      [CodeOfLaws, Alphabet],\n      [Combustion, Refining, Explosives],\n      [Communism, Philosophy, Industrialization],\n      [Computers, Electronics, Mathematics],\n      [Conscription, Explosives, TheRepublic],\n      [Construction, Currency, Masonry],\n      [Corporation, Banking, Industrialization],\n      [Currency, BronzeWorking],\n      [Democracy, Philosophy, Literacy],\n      [Electricity, Metallurgy, Magnetism],\n      [Electronics, Engineering, Electricity],\n      [Engineering, Construction, TheWheel],\n      [Explosives, Gunpowder, Chemistry],\n      [Feudalism, Masonry, Monarchy],\n      [Flight, Combustion, Physics],\n      [FusionPower, NuclearPower, Superconductor],\n      [GeneticEngineering, Corporation, Medicine],\n      [Gunpowder, Invention, IronWorking],\n      [Industrialization, Railroad, Banking],\n      [Invention, Engineering, Literacy],\n      [IronWorking, BronzeWorking],\n      [LaborUnion, MassProduction, Communism],\n      [Literacy, CodeOfLaws, Writing],\n      [Magnetism, Navigation, Physics],\n      [MapMaking, Alphabet],\n      [MassProduction, Corporation, Automobile],\n      [Mathematics, Alphabet, Masonry],\n      [Medicine, Philosophy, Trade],\n      [Metallurgy, Gunpowder, University],\n      [Monarchy, CodeOfLaws, Mysticism],\n      [Mysticism, CeremonialBurial],\n      [Navigation, Astronomy, MapMaking],\n      [NuclearFission, MassProduction, AtomicTheory],\n      [NuclearPower, NuclearFission, Electronics],\n      [Philosophy, Mysticism, Literacy],\n      [Physics, Navigation, Mathematics],\n      [Plastics, Refining, SpaceFlight],\n      [Railroad, BridgeBuilding, SteamEngine],\n      [Recycling, Democracy, MassProduction],\n      [Refining, Corporation, Chemistry],\n      [Religion, Philosophy, Writing],\n      [Robotics, Computers, Plastics],\n      [Rocketry, Electronics, AdvancedFlight],\n      [SpaceFlight, Computers, Rocketry],\n      [SteamEngine, Invention, Physics],\n      [Steel, Metallurgy, Industrialization],\n      [Superconductor, MassProduction, Plastics],\n      [TheRepublic, CodeOfLaws, Literacy],\n      [TheoryOfGravity, Astronomy, University],\n      [Trade, CodeOfLaws, Currency],\n      [University, Philosophy, Mathematics],\n      [Writing, Alphabet],\n    ] as [typeof Advance, ...typeof Advance[]][]\n  ).map(\n    ([AdvanceWithRequirements, ...requiredAdvances]): Requirements =>\n      new Requirements(\n        new Criterion(\n          (CheckAdvance: typeof Advance): boolean =>\n            CheckAdvance === AdvanceWithRequirements\n        ),\n        new Effect(\n          (\n            CheckAdvance: typeof Advance,\n            discoveredAdvances: Advance[]\n          ): boolean =>\n            requiredAdvances.every((RequiredAdvance: typeof Advance): boolean =>\n              discoveredAdvances.some(\n                (advance: Advance): boolean =>\n                  advance instanceof RequiredAdvance\n              )\n            )\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport Advance from '@civ-clone/core-science/Advance';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport PlayerResearch from '@civ-clone/core-science/PlayerResearch';\nimport Started from '@civ-clone/core-science/Rules/Started';\n\nexport const getRules: (engine?: Engine) => Started[] = (\n  engine: Engine = engineInstance\n): Started[] => [\n  new Started(\n    new Effect(\n      (\n        playerResearch: PlayerResearch,\n        AdvanceToResearch: typeof Advance\n      ): void => {\n        engine.emit('player:research', playerResearch, AdvanceToResearch);\n      }\n    )\n  ),\n];\n\nexport default getRules;\n", "import action from './Rules/Player/action';\nimport added from './Rules/Player/added';\nimport captured from './Rules/City/captured';\nimport complete from './Rules/Research/complete';\nimport cost from './Rules/Research/cost';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport processYield from './Rules/City/process-yield';\nimport requirements from './Rules/Research/requirements';\nimport started from './Rules/Research/started';\n\nruleRegistryInstance.register(\n  ...action(),\n  ...added(),\n  ...captured(),\n  ...complete(),\n  ...cost(),\n  ...processYield(),\n  ...requirements(),\n  ...started()\n);\n", null, "export { Fuel } from '@civ-clone/base-spaceship-fuel/Fuel';\nexport { Habitation } from '@civ-clone/base-spaceship-habitation/Habitation';\nexport { LifeSupport } from '@civ-clone/base-spaceship-life-support/LifeSupport';\nexport { Power } from '@civ-clone/base-spaceship-power/Power';\nexport { Propulsion } from '@civ-clone/base-spaceship-propulsion/Propulsion';\nexport { Structural } from '@civ-clone/base-spaceship-structural/Structural';\n", "import {\n  Fuel,\n  Habitation,\n  LifeSupport,\n  Power,\n  Propulsion,\n  Structural,\n} from './Parts';\nimport { instance as availableBuildItemsRegistryInstance } from '@civ-clone/core-city-build/AvailableCityBuildItemsRegistry';\n\navailableBuildItemsRegistryInstance.register(\n  Fuel,\n  Habitation,\n  LifeSupport,\n  Power,\n  Propulsion,\n  Structural\n);\n", "import Part from '../Part';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Spaceship from '../Spaceship';\n\nexport class Built extends Rule<[Part, Spaceship], void> {}\n\nexport default Built;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Spaceship from '../Spaceship';\n\nexport class ChanceOfSuccess extends Rule<[Spaceship], number> {}\n\nexport default ChanceOfSuccess;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Spaceship from '../Spaceship';\n\nexport class FlightTime extends Rule<[Spaceship], number> {}\n\nexport default FlightTime;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Spaceship from '../Spaceship';\n\nexport class Landed extends Rule<[Spaceship], void> {}\n\nexport default Landed;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Spaceship from '../Spaceship';\n\nexport class Launch extends Rule<[Spaceship], void> {}\n\nexport default Launch;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Spaceship from '../Spaceship';\n\nexport class Lost extends Rule<[Spaceship], void> {}\n\nexport default Lost;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport Built from './Rules/Built';\nimport ChanceOfSuccess from './Rules/ChanceOfSuccess';\nimport ChooseSlot from './Rules/ChooseSlot';\nimport FlightTime from './Rules/FlightTime';\nimport Landed from './Rules/Landed';\nimport Launch from './Rules/Launch';\nimport Layout from './Layout';\nimport Lost from './Rules/Lost';\nimport Part from './Part';\nimport Player from '@civ-clone/core-player/Player';\nimport Slot from './Slot';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport interface ISpaceship extends IDataObject {\n  activeParts(): Part[];\n  add(part: Part): void;\n  chanceOfSuccess(): number;\n  check(): void;\n  flightTime(): number;\n  inactiveParts(): Part[];\n  launch(): void;\n  launched(): false | number;\n  layout(): Layout;\n  player(): Player;\n  successful(): boolean | null;\n  yields(): Yield[];\n}\n\nexport class Spaceship extends DataObject implements ISpaceship {\n  #launched: false | number = false;\n  #layout: Layout;\n  #player: Player;\n  #randomNumberGenerator: () => number;\n  #ruleRegistry: RuleRegistry;\n  #successful: boolean | null = null;\n  #turn: Turn;\n\n  constructor(\n    player: Player,\n    layout: Layout,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    turn: Turn = turnInstance,\n    randomNumberGenerator: () => number = () => Math.random()\n  ) {\n    super();\n\n    this.#player = player;\n    this.#layout = layout;\n    this.#ruleRegistry = ruleRegistry;\n    this.#turn = turn;\n    this.#randomNumberGenerator = randomNumberGenerator;\n\n    this.addKey(\n      'activeParts',\n      'chanceOfSuccess',\n      'flightTime',\n      'inactiveParts',\n      'launched',\n      'layout',\n      'player',\n      'successful',\n      'yields'\n    );\n  }\n\n  activeParts(): Part[] {\n    return this.#layout\n      .activeSlots()\n      .filter((slot: Slot) => !slot.empty())\n      .map((slot: Slot) => slot.part()!);\n  }\n\n  add(part: Part): void {\n    const [slot] = this.#ruleRegistry.process(ChooseSlot, part, this.#layout);\n\n    if (!slot) {\n      return;\n    }\n\n    slot.fill(part);\n    this.#ruleRegistry.process(Built, part, this);\n  }\n\n  chanceOfSuccess(): number {\n    return Math.max(...this.#ruleRegistry.process(ChanceOfSuccess, this), 0);\n  }\n\n  check(): void {\n    if (\n      this.#successful !== null ||\n      this.#launched === false ||\n      this.#launched + this.flightTime() < this.#turn.value()\n    ) {\n      return;\n    }\n\n    this.#successful = this.chanceOfSuccess() > this.#randomNumberGenerator();\n\n    if (this.#successful) {\n      this.#ruleRegistry.process(Landed, this);\n\n      return;\n    }\n\n    this.#ruleRegistry.process(Lost, this);\n  }\n\n  /**\n   * Returns the number of turns the flight is estimated to take.\n   */\n  flightTime(): number {\n    return Math.min(...this.#ruleRegistry.process(FlightTime, this), Infinity);\n  }\n\n  inactiveParts(): Part[] {\n    return this.#layout\n      .inactiveSlots()\n      .filter((slot: Slot) => !slot.empty())\n      .map((slot: Slot) => slot.part()!);\n  }\n\n  launch(): void {\n    this.#ruleRegistry.process(Launch, this);\n\n    this.#launched = this.#turn.value();\n  }\n\n  launched(): false | number {\n    return this.#launched;\n  }\n\n  layout(): Layout {\n    return this.#layout;\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  successful(): boolean | null {\n    return this.#successful;\n  }\n\n  yields(): Yield[] {\n    return this.activeParts().flatMap((part: Part) => part.yields());\n  }\n}\n\nexport default Spaceship;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Player from '@civ-clone/core-player/Player';\nimport Spaceship from './Spaceship';\n\nexport interface ISpaceshipRegistry extends IEntityRegistry<Spaceship> {\n  getActiveByPlayer(player: Player): Spaceship | null;\n}\n\nexport class SpaceshipRegistry\n  extends EntityRegistry<Spaceship>\n  implements ISpaceshipRegistry\n{\n  constructor() {\n    super(Spaceship);\n  }\n\n  getActiveByPlayer(player: Player): Spaceship | null {\n    const [spaceship] = this.getBy('player', player).filter(\n      (spaceship) =>\n        spaceship.launched() === false || spaceship.successful() === null\n    );\n\n    if (!spaceship) {\n      return null;\n    }\n\n    return spaceship;\n  }\n}\n\nexport const instance = new SpaceshipRegistry();\n\nexport default SpaceshipRegistry;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Player from '@civ-clone/core-player/Player';\nimport Wonder from './Wonder';\n\nexport interface IWonderRegistry extends IEntityRegistry<Wonder> {\n  getByCity(city: City): Wonder[];\n  getByPlayer(player: Player): Wonder[];\n}\n\nexport class WonderRegistry\n  extends EntityRegistry<Wonder>\n  implements IWonderRegistry\n{\n  constructor() {\n    super(Wonder);\n  }\n\n  getByCity(city: City): Wonder[] {\n    return this.getBy('city', city);\n  }\n\n  getByPlayer(player: Player): Wonder[] {\n    return this.filter((wonder: Wonder) => wonder.city().player() === player);\n  }\n}\n\nexport const instance: WonderRegistry = new WonderRegistry();\n\nexport default WonderRegistry;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class ApolloProgram extends Wonder {}\n\nexport default ApolloProgram;\n", "import { Build, IBuildCriterion } from '@civ-clone/core-city-build/Rules/Build';\nimport {\n  Fuel,\n  Habitation,\n  LifeSupport,\n  Power,\n  Propulsion,\n  Structural,\n} from '../../Parts';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  SpaceshipRegistry,\n  instance as spaceshipRegistryInstance,\n} from '@civ-clone/core-spaceship/SpaceshipRegistry';\nimport {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport Advance from '@civ-clone/core-science/Advance';\nimport ApolloProgram from '@civ-clone/base-wonder-apolloprogram/ApolloProgram';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Part from '@civ-clone/core-spaceship/Part';\nimport Plastics from '@civ-clone/base-science-advance-plastics/Plastics';\nimport Robotics from '@civ-clone/base-science-advance-robotics/Robotics';\nimport SpaceFlight from '@civ-clone/base-science-advance-spaceflight/SpaceFlight';\n\nexport const getRules = (\n  wonderRegistry: WonderRegistry = wonderRegistryInstance,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  spaceshipRegistry: SpaceshipRegistry = spaceshipRegistryInstance\n): Build[] => [\n  new Build(\n    new Criterion((city: City, BuildItem: IConstructor): boolean =>\n      Object.prototype.isPrototypeOf.call(Part, BuildItem)\n    ),\n    new Effect(\n      () =>\n        new Criterion(() =>\n          wonderRegistry.some((wonder) => wonder instanceof ApolloProgram)\n        )\n    )\n  ),\n\n  new Build(\n    new Criterion((city: City, BuildItem: IConstructor): boolean =>\n      Object.prototype.isPrototypeOf.call(Part, BuildItem)\n    ),\n    new Effect(\n      (city: City) =>\n        new Criterion(() => {\n          const spaceship = spaceshipRegistry.getActiveByPlayer(city.player());\n\n          if (spaceship === null) {\n            return false;\n          }\n\n          return spaceship.launched() === false;\n        })\n    )\n  ),\n\n  ...(\n    [\n      [Structural, SpaceFlight],\n      [Fuel, Plastics],\n      [Propulsion, Plastics],\n      [Habitation, Robotics],\n      [LifeSupport, Robotics],\n      [Power, Robotics],\n    ] as [typeof Part, typeof Advance][]\n  ).map(\n    ([PartType, RequiredAdvance]): Build =>\n      new Build(\n        new Criterion(\n          (city: City, BuildItem: IConstructor): boolean =>\n            BuildItem === PartType\n        ),\n        new Effect(\n          (city: City): IBuildCriterion =>\n            new Criterion((): boolean =>\n              playerResearchRegistry\n                .getByPlayer(city.player())\n                .completed(RequiredAdvance)\n            )\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  BuildCost,\n  buildCost,\n} from '@civ-clone/core-city-build/Rules/BuildCost';\nimport {\n  Fuel,\n  Habitation,\n  LifeSupport,\n  Power,\n  Propulsion,\n  Structural,\n} from '../../Parts';\nimport Part from '@civ-clone/core-spaceship/Part';\n\nexport const getRules = (): BuildCost[] => [\n  ...(\n    [\n      [Fuel, 160],\n      [Habitation, 320],\n      [LifeSupport, 320],\n      [Power, 320],\n      [Propulsion, 160],\n      [Structural, 80],\n    ] as [typeof Part, number][]\n  ).flatMap(([PartType, cost]: [typeof Part, number]): BuildCost[] =>\n    buildCost(PartType, cost)\n  ),\n];\n\nexport default getRules;\n", "import {\n  CurrentPlayerRegistry,\n  instance as currentPlayerRegistryInstance,\n} from '@civ-clone/core-player/CurrentPlayerRegistry';\nimport {\n  LayoutRegistry,\n  instance as layoutRegistryInstance,\n} from '@civ-clone/core-spaceship/LayoutRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  SpaceshipRegistry,\n  instance as spaceshipRegistryInstance,\n} from '@civ-clone/core-spaceship/SpaceshipRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport ApolloProgram from '@civ-clone/base-wonder-apolloprogram/ApolloProgram';\nimport { BuildableInstance } from '@civ-clone/core-city-build/Buildable';\nimport BuildingComplete from '@civ-clone/core-city-build/Rules/BulidingComplete';\nimport CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Default from '@civ-clone/civ1-default-spaceship-layout/Default';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Part from '@civ-clone/core-spaceship/Part';\nimport Player from '@civ-clone/core-player/Player';\nimport Spaceship from '@civ-clone/core-spaceship/Spaceship';\n\nexport const getRules = (\n  currentPlayerRegistry: CurrentPlayerRegistry = currentPlayerRegistryInstance,\n  spaceshipRegistry: SpaceshipRegistry = spaceshipRegistryInstance,\n  layoutRegistry: LayoutRegistry = layoutRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  turn: Turn = turnInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): BuildingComplete[] => [\n  new BuildingComplete(\n    new Criterion(\n      (cityBuild: CityBuild, buildItem: BuildableInstance): buildItem is Part =>\n        buildItem instanceof ApolloProgram\n    ),\n    new Effect(() => {\n      // TODO: if there is more than one layout, ask the player to choose.\n      const [LayoutType] = layoutRegistry.entries() as typeof Default[],\n        layout = new LayoutType(ruleRegistry);\n\n      currentPlayerRegistry\n        .entries()\n        .forEach((player: Player) =>\n          spaceshipRegistry.register(\n            new Spaceship(\n              player,\n              layout,\n              ruleRegistry,\n              turn,\n              randomNumberGenerator\n            )\n          )\n        );\n    })\n  ),\n  new BuildingComplete(\n    new Criterion(\n      (cityBuild: CityBuild, buildItem: BuildableInstance): buildItem is Part =>\n        buildItem instanceof Part\n    ),\n    new Criterion(\n      (cityBuild: CityBuild, buildItem: BuildableInstance) =>\n        spaceshipRegistry.getActiveByPlayer(\n          (buildItem as Part).city().player()\n        ) !== null\n    ),\n    new Effect((cityBuild: CityBuild, buildItem: BuildableInstance) => {\n      const part = buildItem as Part;\n\n      spaceshipRegistry.getActiveByPlayer(part.city().player())!.add(part);\n    })\n  ),\n];\n\nexport default getRules;\n", "import CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Part from '@civ-clone/core-spaceship/Part';\nimport Spend from '@civ-clone/core-treasury/Rules/Spend';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: () => Spend[] = (): Spend[] => [\n  new Spend(\n    new Criterion(\n      (cityBuild: CityBuild): boolean =>\n        typeof cityBuild.building() !== 'undefined' &&\n        Object.isPrototypeOf.call(Part, cityBuild.building()!.item())\n    ),\n    new Criterion(\n      (cityBuild: CityBuild): boolean => cityBuild.progress().value() === 0\n    ),\n    new Effect((cityBuild: CityBuild, cost: Yield): Yield => {\n      cost.add(cityBuild.remaining() * 8);\n\n      return cost;\n    })\n  ),\n\n  new Spend(\n    new Criterion(\n      (cityBuild: CityBuild): boolean =>\n        typeof cityBuild.building() !== 'undefined' &&\n        Object.isPrototypeOf.call(Part, cityBuild.building()!.item())\n    ),\n    new Criterion(\n      (cityBuild: CityBuild): boolean => cityBuild.progress().value() > 0\n    ),\n    new Effect((cityBuild: CityBuild, cost: Yield): Yield => {\n      cost.add(cityBuild.remaining() * 4);\n\n      return cost;\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  SpaceshipRegistry,\n  instance as spaceshipRegistryInstance,\n} from '@civ-clone/core-spaceship/SpaceshipRegistry';\nimport Action from '@civ-clone/core-player/Rules/Action';\nimport Player from '@civ-clone/core-player/Player';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport LaunchSpaceship from '@civ-clone/base-player-action-launch-spaceship/LaunchSpaceship';\n\nexport const getRules = (\n  spaceshipRegistry: SpaceshipRegistry = spaceshipRegistryInstance\n): Action[] => [\n  new Action(\n    new Criterion(\n      (player: Player): boolean =>\n        spaceshipRegistry.getActiveByPlayer(player) !== null\n    ),\n    new Effect((player: Player): LaunchSpaceship[] => [\n      new LaunchSpaceship(player, spaceshipRegistry.getActiveByPlayer(player)!),\n    ])\n  ),\n];\n\nexport default getRules;\n", "import {\n  Fuel,\n  Habitation,\n  LifeSupport,\n  Power,\n  Propulsion,\n  Structural,\n} from '../../Parts';\nimport Active from '@civ-clone/core-spaceship/Rules/Active';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Layout from '@civ-clone/core-spaceship/Layout';\nimport Part from '@civ-clone/core-spaceship/Part';\nimport Slot from '@civ-clone/core-spaceship/Slot';\n\nconst propulsion = new Active(\n  new Criterion((slot: Slot) => slot.part() instanceof Propulsion),\n  new Effect((slot: Slot, layout: Layout) => {\n    propulsion.disable();\n\n    const activeSlots = layout.activeSlots();\n\n    propulsion.enable();\n\n    return layout\n      .getAdjacent(slot)\n      .some(\n        (adjacentSlot: Slot) =>\n          adjacentSlot.part() instanceof Fuel &&\n          activeSlots.includes(adjacentSlot)\n      );\n  })\n);\n\nexport const getRules = (): Active[] => [\n  new Active(new Effect((slot: Slot) => slot.part() !== null)),\n\n  new Active(\n    new Criterion((slot: Slot) =>\n      [Fuel, Habitation, LifeSupport, Power].some(\n        (PartType: typeof Part) => slot.part() instanceof PartType\n      )\n    ),\n    new Effect((slot: Slot, layout: Layout) =>\n      layout\n        .getAdjacent(slot)\n        .some((adjacentSlot: Slot) => adjacentSlot.part() instanceof Structural)\n    )\n  ),\n\n  propulsion,\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport Built from '@civ-clone/core-spaceship/Rules/Built';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Part from '@civ-clone/core-spaceship/Part';\n\nexport const getRules = (engine: Engine = engineInstance): Built[] => [\n  new Built(\n    new Effect((part: Part) => {\n      engine.emit('player:spaceship:part-built', part.city().player());\n    })\n  ),\n];\n\nexport default getRules;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Energy extends Yield {}\n\nexport default Energy;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class LifeSupport extends Yield {}\n\nexport default LifeSupport;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Mass extends Yield {}\n\nexport default Mass;\n", "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class Population extends Yield {}\n\nexport default Population;\n", "export { Energy } from '@civ-clone/base-spaceship-yield-energy/Energy';\nexport { LifeSupport } from '@civ-clone/base-spaceship-yield-life-support/LifeSupport';\nexport { Mass } from '@civ-clone/base-spaceship-yield-mass/Mass';\nexport { Population } from '@civ-clone/base-spaceship-yield-population/Population';\n", "import { Energy, LifeSupport, Population } from '../../Yields';\nimport { Fuel, Propulsion } from '../../Parts';\nimport ChanceOfSuccess from '@civ-clone/core-spaceship/Rules/ChanceOfSuccess';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Part from '@civ-clone/core-spaceship/Part';\nimport Spaceship from '@civ-clone/core-spaceship/Spaceship';\nimport YieldValue from '@civ-clone/core-yield/Yield';\n\nexport const getRules = (): ChanceOfSuccess[] => [\n  new ChanceOfSuccess(\n    new Effect((spaceship: Spaceship) => {\n      const [\n        totalEnergy,\n        requiredEnergy,\n        totalLifeSupport,\n        requiredLifeSupport,\n        population,\n      ] = spaceship.yields().reduce(\n        (\n          [\n            totalEnergy,\n            requiredEnergy,\n            totalLifeSupport,\n            requiredLifeSupport,\n            population,\n          ],\n          shipYield: YieldValue\n        ) => {\n          if (shipYield instanceof Energy && shipYield.value() > 0) {\n            totalEnergy += shipYield.value();\n          }\n\n          if (shipYield instanceof Energy && shipYield.value() < 0) {\n            requiredEnergy += Math.abs(shipYield.value());\n          }\n\n          if (shipYield instanceof LifeSupport && shipYield.value() > 0) {\n            totalLifeSupport += shipYield.value();\n          }\n\n          if (shipYield instanceof LifeSupport && shipYield.value() < 0) {\n            requiredLifeSupport += Math.abs(shipYield.value());\n          }\n\n          if (shipYield instanceof Population) {\n            population += shipYield.value();\n          }\n\n          return [\n            totalEnergy,\n            requiredEnergy,\n            totalLifeSupport,\n            requiredLifeSupport,\n            population,\n          ];\n        },\n        [0, 0, 0, 0, 0]\n      );\n\n      const [totalFuel, totalPropulsion] = spaceship.activeParts().reduce(\n        ([totalFuel, totalPropulsion], part: Part) => {\n          if (part instanceof Fuel) {\n            totalFuel++;\n          }\n\n          if (part instanceof Propulsion) {\n            totalPropulsion++;\n          }\n\n          return [totalFuel, totalPropulsion];\n        },\n        [0, 0]\n      );\n\n      if (\n        [\n          totalEnergy,\n          totalLifeSupport,\n          population,\n          totalFuel,\n          totalPropulsion,\n        ].some((value) => value === 0)\n      ) {\n        return 0;\n      }\n\n      const fuelToPropulsionRatio = Math.min(totalFuel / totalPropulsion, 1),\n        lifeSupportRatio = Math.min(requiredLifeSupport / totalLifeSupport, 1),\n        energyRatio = Math.min(requiredEnergy / totalEnergy, 1);\n\n      return fuelToPropulsionRatio * lifeSupportRatio * energyRatio;\n    })\n  ),\n];\n\nexport default getRules;\n", "import ChooseSlot from '@civ-clone/core-spaceship/Rules/ChooseSlot';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Layout from '@civ-clone/core-spaceship/Layout';\nimport Part from '@civ-clone/core-spaceship/Part';\nimport Slot from '@civ-clone/core-spaceship/Slot';\nimport { Structural } from '../../Parts';\n\nexport const getRules = (): ChooseSlot[] => [\n  new ChooseSlot(\n    new Criterion((part: Part) => part instanceof Structural),\n    new Criterion(\n      (part: Part, layout: Layout) =>\n        layout\n          .slots()\n          .filter((slot: Slot) => slot.accepts(part) && slot.empty()).length > 0\n    ),\n    new Effect((part: Part, layout: Layout) => {\n      const availableSlots = layout\n          .slots()\n          .filter((slot: Slot) => slot.accepts(part) && slot.empty())!,\n        [slot] = availableSlots.sort(\n          (a, b) =>\n            layout\n              .getAdjacent(b)\n              .filter((slot: Slot) => slot.part() instanceof Structural)\n              .length -\n              layout\n                .getAdjacent(a)\n                .filter((slot: Slot) => slot.part() instanceof Structural)\n                .length ||\n            layout.getAdjacent(b).filter((slot: Slot) => !slot.empty()).length -\n              layout.getAdjacent(a).filter((slot: Slot) => !slot.empty())\n                .length ||\n            Math.abs(a.x() - 8) - Math.abs(b.x() - 8) ||\n            Math.abs(a.y() - 6) - Math.abs(b.y() - 6)\n        );\n\n      return slot;\n    })\n  ),\n  new ChooseSlot(\n    new Criterion((part: Part) => !(part instanceof Structural)),\n    new Criterion(\n      (part: Part, layout: Layout) =>\n        layout\n          .slots()\n          .filter((slot: Slot) => slot.accepts(part) && slot.empty()).length > 0\n    ),\n    new Effect((part: Part, layout: Layout) => {\n      const availableSlots = layout\n          .slots()\n          .filter((slot: Slot) => slot.accepts(part) && slot.empty())!,\n        [slot] = availableSlots.sort(\n          (a, b) =>\n            layout.getAdjacent(b).filter((slot: Slot) => !slot.empty()).length -\n              layout.getAdjacent(a).filter((slot: Slot) => !slot.empty())\n                .length ||\n            Math.abs(a.x() - 8) - Math.abs(b.x() - 8) ||\n            Math.abs(a.y() - 6) - Math.abs(b.y() - 6)\n        );\n\n      return slot;\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport { Year, instance as yearInstance } from '@civ-clone/core-game-year/Year';\nimport FlightTime from '@civ-clone/core-spaceship/Rules/FlightTime';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Mass } from '../../Yields';\nimport { Propulsion } from '../../Parts';\nimport Spaceship from '@civ-clone/core-spaceship/Spaceship';\nimport { reduceYield } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules = (\n  year: Year = yearInstance,\n  turn: Turn = turnInstance\n): FlightTime[] => [\n  new FlightTime(\n    new Effect((spaceship: Spaceship) => {\n      const mass = reduceYield(spaceship.yields(), Mass),\n        propulsion = spaceship\n          .activeParts()\n          .reduce(\n            (total, part) => total + (part instanceof Propulsion ? 1 : 0),\n            0\n          ),\n        years = Math.trunc((mass / 20 / (1 + propulsion * 10)) * 10) / 10,\n        currentYear = year.value(),\n        targetYear = currentYear + years;\n\n      let targetTurn = turn.value();\n\n      // convert to whole `Turn`s\n      while (year.value(targetTurn) < targetYear) {\n        targetTurn++;\n      }\n\n      return targetTurn;\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Spaceship from '@civ-clone/core-spaceship/Spaceship';\nimport Landed from '@civ-clone/core-spaceship/Rules/Landed';\n\nexport const getRules = (engine: Engine = engineInstance): Landed[] => [\n  new Landed(\n    new Effect((spaceship: Spaceship) => {\n      engine.emit('player:spaceship:landed', spaceship.player());\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  LayoutRegistry,\n  instance as layoutRegistryInstance,\n} from '@civ-clone/core-spaceship/LayoutRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  SpaceshipRegistry,\n  instance as spaceshipRegistryInstance,\n} from '@civ-clone/core-spaceship/SpaceshipRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport Default from '@civ-clone/civ1-default-spaceship-layout/Default';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Lost from '@civ-clone/core-spaceship/Rules/Lost';\nimport Spaceship from '@civ-clone/core-spaceship/Spaceship';\n\nexport const getRules = (\n  spaceshipRegistry: SpaceshipRegistry = spaceshipRegistryInstance,\n  layoutRegistry: LayoutRegistry = layoutRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  turn: Turn = turnInstance,\n  engine: Engine = engineInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): Lost[] => [\n  new Lost(\n    new Effect((spaceship: Spaceship) => {\n      engine.emit('player:spaceship:lost', spaceship.player());\n    })\n  ),\n\n  new Lost(\n    new Effect((spaceship: Spaceship) => {\n      // TODO: if there is more than one layout, ask the player to choose.\n      const [LayoutType] = layoutRegistry.entries() as typeof Default[],\n        layout = new LayoutType(ruleRegistry);\n\n      spaceshipRegistry.register(\n        new Spaceship(\n          spaceship.player(),\n          layout,\n          ruleRegistry,\n          turn,\n          randomNumberGenerator\n        )\n      );\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Energy,\n  LifeSupport as LifeSupportYield,\n  Mass,\n  Population,\n} from '../../Yields';\nimport {\n  Fuel,\n  Habitation,\n  LifeSupport,\n  Power,\n  Propulsion,\n  Structural,\n} from '../../Parts';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Part from '@civ-clone/core-spaceship/Part';\nimport Yield from '@civ-clone/core-spaceship/Rules/Yield';\nimport YieldValue from '@civ-clone/core-yield/Yield';\n\nexport const getRules = (): Yield[] => [\n  ...(\n    [\n      [Fuel, Mass, 400],\n\n      [Habitation, Energy, -50],\n      [Habitation, LifeSupportYield, -100],\n      [Habitation, Mass, 1600],\n      [Habitation, Population, 10000],\n\n      [LifeSupport, Energy, -50],\n      [LifeSupport, LifeSupportYield, 100],\n      [LifeSupport, Mass, 1600],\n\n      [Power, Energy, 100],\n      [Power, Mass, 400],\n\n      [Propulsion, Mass, 400],\n\n      // All SS Structural = 3900\n      // This is weird, in the original game, the values are 200 for five of the pieces, but 100 for the others, so this\n      //  should be 114.705882352941176... I'll keep at 100 for now!\n      [Structural, Mass, 100],\n    ] as [typeof Part, typeof YieldValue, number][]\n  ).map(\n    ([PartType, YieldType, value]) =>\n      new Yield(\n        new Criterion((part: Part) => part instanceof PartType),\n        new Effect((part: Part) => new YieldType(value, part.id()))\n      )\n  ),\n];\n\nexport default getRules;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Turn from '../Turn';\n\nexport class Start extends Rule<[Turn], void> {}\n\nexport default Start;\n", "import {\n  SpaceshipRegistry,\n  instance as spaceshipRegistryInstance,\n} from '@civ-clone/core-spaceship/SpaceshipRegistry';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Spaceship from '@civ-clone/core-spaceship/Spaceship';\nimport Start from '@civ-clone/core-turn-based-game/Rules/Start';\n\nexport const getRules = (\n  spaceshipRegistry: SpaceshipRegistry = spaceshipRegistryInstance\n): Start[] => [\n  new Start(\n    new Effect(() => {\n      spaceshipRegistry\n        .entries()\n        .forEach((spaceship: Spaceship) => spaceship.check());\n    })\n  ),\n];\n\nexport default getRules;\n", "import cityBuild from './Rules/City/build';\nimport cityBuildCost from './Rules/City/build-cost';\nimport cityBuildingComplete from './Rules/City/building-complete';\nimport citySpend from './Rules/City/spend';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport playerAction from './Rules/Player/action';\nimport spaceshipActive from './Rules/Spaceship/active';\nimport spaceshipBuilt from './Rules/Spaceship/built';\nimport spaceshipChanceOfSuccess from './Rules/Spaceship/chance-of-success';\nimport spaceshipChooseSlot from './Rules/Spaceship/choose-slot';\nimport spaceshipFlightTime from './Rules/Spaceship/flight-time';\nimport spaceshipLanded from './Rules/Spaceship/landed';\nimport spaceshipLost from './Rules/Spaceship/lost';\nimport spaceshipYield from './Rules/Spaceship/yield';\nimport turnStart from './Rules/Turn/start';\n\nruleRegistryInstance.register(\n  ...cityBuild(),\n  ...cityBuildCost(),\n  ...cityBuildingComplete(),\n  ...citySpend(),\n  ...playerAction(),\n  ...spaceshipActive(),\n  ...spaceshipBuilt(),\n  ...spaceshipChanceOfSuccess(),\n  ...spaceshipChooseSlot(),\n  ...spaceshipFlightTime(),\n  ...spaceshipLanded(),\n  ...spaceshipLost(),\n  ...spaceshipYield(),\n  ...turnStart()\n);\n", null, "import Yield from '@civ-clone/core-yield/Yield';\n\nexport class TradeRate extends Yield {\n  static tradeYield: typeof Yield;\n}\n\nexport default TradeRate;\n", "import LuxuriesYield from '@civ-clone/base-city-yield-luxuries/Luxuries';\nimport TradeRate from '@civ-clone/core-trade-rate/TradeRate';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport class Luxuries extends TradeRate {\n  static tradeYield: typeof Yield = LuxuriesYield;\n}\n\nexport default Luxuries;\n", "import { Research as ResearchYield } from '@civ-clone/base-city-yield-research/Research';\nimport TradeRate from '@civ-clone/core-trade-rate/TradeRate';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport class Research extends TradeRate {\n  static tradeYield: typeof Yield = ResearchYield;\n}\n\nexport default Research;\n", "import Gold from '@civ-clone/base-city-yield-gold/Gold';\nimport TradeRate from '@civ-clone/core-trade-rate/TradeRate';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport class Tax extends TradeRate {\n  static tradeYield: typeof Yield = Gold;\n}\n\nexport default Tax;\n", "export { Luxuries } from '@civ-clone/base-trade-rate-luxuries/Luxuries';\nexport { Research } from '@civ-clone/base-trade-rate-research/Research';\nexport { Tax } from '@civ-clone/base-trade-rate-tax/Tax';\n", "import {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\nimport TradeRate from './TradeRate';\n\nexport interface IAvailableTradeRateRegistry\n  extends IConstructorRegistry<TradeRate> {}\n\nexport class AvailableTradeRateRegistry\n  extends ConstructorRegistry<TradeRate>\n  implements IAvailableTradeRateRegistry\n{\n  constructor() {\n    super(TradeRate);\n  }\n}\n\nexport const instance: AvailableTradeRateRegistry =\n  new AvailableTradeRateRegistry();\n\nexport default AvailableTradeRateRegistry;\n", "import { Luxuries, Research, Tax } from './TradeRates';\nimport { instance as availableTradeRatesRegistryInstance } from '@civ-clone/core-trade-rate/AvailableTradeRateRegistry';\n\navailableTradeRatesRegistryInstance.register(Luxuries, Research, Tax);\n", "export { Corruption } from '@civ-clone/base-city-yield-corruption/Corruption';\nexport { Trade } from '@civ-clone/base-terrain-yield-trade/Trade';\n", "import Player from '@civ-clone/core-player/Player';\nimport TradeRate from './TradeRate';\nimport DataObject, {\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\n\nexport interface IPlayerTradeRates extends IDataObject {\n  all(): TradeRate[];\n  balance(fixed: TradeRate): void;\n  get(Type: typeof TradeRate): TradeRate;\n  player(): Player;\n  set(Type: typeof TradeRate, value: number): void;\n  setAll(ratesAndValues: [typeof TradeRate, number][]): void;\n  total(): number;\n}\n\nexport class PlayerTradeRates extends DataObject implements IPlayerTradeRates {\n  #fudgeFactor: number = 100;\n  #player: Player;\n  #rates: TradeRate[] = [];\n\n  constructor(player: Player, ...rates: TradeRate[]) {\n    super();\n\n    this.#player = player;\n    this.#rates = rates;\n\n    this.addKey('all');\n  }\n\n  all(): TradeRate[] {\n    return [...this.#rates];\n  }\n\n  balance(fixed: TradeRate): void {\n    if (this.total() === 1) {\n      return;\n    }\n\n    const available = 1 - fixed.value(),\n      others = this.#rates.filter((rate: TradeRate) => rate !== fixed),\n      current = others.reduce(\n        (total: number, rate: TradeRate): number => total + rate.value(),\n        0\n      );\n    others.forEach((rate: TradeRate): void =>\n      rate.set((rate.value() / current) * available)\n    );\n\n    if (this.total() < 1) {\n      others[Math.floor(others.length * Math.random())].add(1 - this.total());\n    }\n\n    if (this.total() > 1) {\n      others[Math.floor(others.length * Math.random())].subtract(\n        1 - this.total()\n      );\n    }\n  }\n\n  get(TradeRateType: typeof TradeRate): TradeRate {\n    const [tradeRate] = this.#rates.filter(\n      (rate: TradeRate): boolean => rate instanceof TradeRateType\n    );\n\n    return tradeRate;\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  set(Type: typeof TradeRate, value: number): void {\n    const rate = this.get(Type);\n\n    rate.set(value);\n\n    this.balance(rate);\n  }\n\n  setAll(ratesAndValues: [typeof TradeRate, number][]): void {\n    if (ratesAndValues.reduce((total, [, value]) => total + value, 0) !== 1) {\n      throw new TypeError(`Invalid rates provided, must sum to 1.`);\n    }\n\n    ratesAndValues.forEach(([Type, value]) => this.get(Type).set(value));\n  }\n\n  total(): number {\n    return (\n      Math.round(\n        this.#rates.reduce(\n          (total: number, rate: TradeRate): number => total + rate.value(),\n          0\n        ) * this.#fudgeFactor\n      ) / this.#fudgeFactor\n    );\n  }\n}\n\nexport default PlayerTradeRates;\n", "import {\n  EntityRegistry,\n  IEntityRegistry,\n} from '@civ-clone/core-registry/EntityRegistry';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerTradeRates from './PlayerTradeRates';\n\nexport interface IPlayerTradeRatesRegistry\n  extends IEntityRegistry<PlayerTradeRates> {\n  getByPlayer(player: Player): PlayerTradeRates;\n}\n\nexport class PlayerTradeRatesRegistry\n  extends EntityRegistry\n  implements IPlayerTradeRatesRegistry\n{\n  constructor() {\n    super(PlayerTradeRates);\n  }\n\n  getByPlayer(player: Player): PlayerTradeRates {\n    const playerTradeRates = this.getBy('player', player);\n\n    if (playerTradeRates.length !== 1) {\n      throw new TypeError('Wrong number of PlayerTradeRates for player');\n    }\n\n    return playerTradeRates[0];\n  }\n}\n\nexport const instance: PlayerTradeRatesRegistry =\n  new PlayerTradeRatesRegistry();\n\nexport default PlayerTradeRatesRegistry;\n", "import {\n  AvailableTradeRateRegistry,\n  instance as availableTradeRateRegistryInstance,\n} from '@civ-clone/core-trade-rate/AvailableTradeRateRegistry';\nimport { Corruption, Trade } from '../../Yields';\nimport {\n  PlayerTradeRatesRegistry,\n  instance as playerTradeRatesRegistryInstance,\n} from '@civ-clone/core-trade-rate/PlayerTradeRatesRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport TradeRate from '@civ-clone/core-trade-rate/TradeRate';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { Yield as YieldRule } from '@civ-clone/core-city/Rules/Yield';\nimport { reduceYield } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules: (\n  availableTradeRateRegistry?: AvailableTradeRateRegistry,\n  playerTradeRatesRegistry?: PlayerTradeRatesRegistry\n) => YieldRule[] = (\n  availableTradeRateRegistry: AvailableTradeRateRegistry = availableTradeRateRegistryInstance,\n  playerTradeRatesRegistry: PlayerTradeRatesRegistry = playerTradeRatesRegistryInstance\n): YieldRule[] => [\n  new YieldRule(\n    new Effect((city: City, yields: Yield[]): Yield[] => {\n      const playerRates = playerTradeRatesRegistry.getByPlayer(city.player()),\n        total = Math.max(0, reduceYield(yields, Trade));\n\n      let remaining = total;\n\n      return availableTradeRateRegistry\n        .entries()\n        .map((TradeRateType: IConstructor<TradeRate>): Yield => {\n          const TradeYield = (TradeRateType as typeof TradeRate).tradeYield,\n            value = Math.min(\n              Math.ceil(\n                total *\n                  playerRates.get(TradeRateType as typeof TradeRate).value()\n              ),\n              remaining\n            );\n\n          remaining -= value;\n\n          return new TradeYield(value, TradeRateType.name);\n        });\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  PlayerTradeRatesRegistry,\n  instance as playerTradeRateRegistryInstance,\n} from '@civ-clone/core-trade-rate/PlayerTradeRatesRegistry';\nimport Action from '@civ-clone/core-player/Rules/Action';\nimport { AdjustTradeRates } from '../../PlayerActions';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerAction from '@civ-clone/core-player/PlayerAction';\n\nexport const getRules: (\n  playerTradeRateRegistry?: PlayerTradeRatesRegistry\n) => Action[] = (\n  playerTradeRateRegistry: PlayerTradeRatesRegistry = playerTradeRateRegistryInstance\n): Action[] => [\n  new Action(\n    new Effect((player: Player): PlayerAction[] => [\n      new AdjustTradeRates(player, playerTradeRateRegistry.getByPlayer(player)),\n    ])\n  ),\n];\n\nexport default getRules;\n", "import {\n  AvailableTradeRateRegistry,\n  instance as availableTradeRateRegistryInstance,\n} from '@civ-clone/core-trade-rate/AvailableTradeRateRegistry';\nimport {\n  PlayerTradeRatesRegistry,\n  instance as playerTradeRatesRegistryInstance,\n} from '@civ-clone/core-trade-rate/PlayerTradeRatesRegistry';\nimport { Research, Tax, Luxuries } from '../../TradeRates';\nimport Added from '@civ-clone/core-player/Rules/Added';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport PlayerTradeRates from '@civ-clone/core-trade-rate/PlayerTradeRates';\nimport TradeRate from '@civ-clone/core-trade-rate/TradeRate';\n\nexport const getRules: (\n  availableTradeRateRegistry?: AvailableTradeRateRegistry,\n  playerTradeRatesRegistry?: PlayerTradeRatesRegistry\n) => Added[] = (\n  availableTradeRateRegistry: AvailableTradeRateRegistry = availableTradeRateRegistryInstance,\n  playerTradeRatesRegistry: PlayerTradeRatesRegistry = playerTradeRatesRegistryInstance\n): Added[] => [\n  new Added(\n    new Effect((player) => {\n      const defaultRates = [new Tax(0.5), new Research(0.5), new Luxuries(0)],\n        availableRates = availableTradeRateRegistry.entries(),\n        playerTradeRates = new PlayerTradeRates(\n          player,\n          ...availableRates.map(\n            (TradeRateType: IConstructor<TradeRate>): TradeRate => {\n              const [defaultRate] = defaultRates.filter(\n                (rate: TradeRate): boolean => rate instanceof TradeRateType\n              );\n\n              return new TradeRateType(defaultRate || 0);\n            }\n          )\n        );\n      playerTradeRatesRegistry.register(playerTradeRates);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  AvailableTradeRateRegistry,\n  instance as availableTradeRateRegistryInstance,\n} from '@civ-clone/core-trade-rate/AvailableTradeRateRegistry';\nimport {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport High from '@civ-clone/core-rule/Priorities/High';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Player from '@civ-clone/core-player/Player';\nimport ProcessYield from '@civ-clone/core-city/Rules/ProcessYield';\nimport TradeRate from '@civ-clone/core-trade-rate/TradeRate';\nimport TurnStart from '@civ-clone/core-player/Rules/TurnStart';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { reduceYields } from '@civ-clone/core-yield/lib/reduceYields';\n\nlet cachedTradeRateYields: typeof Yield[] = [];\n\nexport const getRules: (\n  ruleRegistry?: RuleRegistry,\n  cityRegistry?: CityRegistry,\n  availableTradeRateRegistry?: AvailableTradeRateRegistry\n) => TurnStart[] = (\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  availableTradeRateRegistry: AvailableTradeRateRegistry = availableTradeRateRegistryInstance\n): TurnStart[] => [\n  new TurnStart(\n    new High(),\n    new Effect((player: Player): void => {\n      if (cachedTradeRateYields.length === 0) {\n        availableTradeRateRegistry\n          .entries()\n          .forEach((TradeRateType: IConstructor<TradeRate>): number =>\n            cachedTradeRateYields.push(\n              (TradeRateType as typeof TradeRate).tradeYield\n            )\n          );\n      }\n\n      cityRegistry.getByPlayer(player).forEach((city: City): void => {\n        const cityYields = city.yields();\n\n        reduceYields(cityYields, ...cachedTradeRateYields)\n          .reduce(\n            (yields: Yield[], yieldValue, index) => {\n              yields[index].set(yieldValue, 'Consolidated');\n\n              return yields;\n            },\n            cachedTradeRateYields.map(\n              (YieldType: typeof Yield) => new YieldType()\n            )\n          )\n          .forEach((cityYield: Yield) =>\n            ruleRegistry.process(ProcessYield, cityYield, city, cityYields)\n          );\n      });\n    })\n  ),\n];\n\nexport default getRules;\n", "import { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport cityYield from './Rules/City/yield';\nimport playerAction from './Rules/Player/action';\nimport playerAdded from './Rules/Player/added';\nimport playerTurnStart from './Rules/Player/turn-start';\n\nruleRegistryInstance.register(\n  ...cityYield(),\n  ...playerAction(),\n  ...playerAdded(),\n  ...playerTurnStart()\n);\n", null, "import CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Spend from '@civ-clone/core-treasury/Rules/Spend';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: () => Spend[] = (): Spend[] => [\n  // @see https://forums.civfanatics.com/threads/buy-unit-building-wonder-price.576026/\n  new Spend(\n    new Criterion(\n      (cityBuild: CityBuild): boolean =>\n        typeof cityBuild.building() !== 'undefined' &&\n        Object.isPrototypeOf.call(Unit, cityBuild.building()!.item())\n    ),\n    new Criterion(\n      (cityBuild: CityBuild): boolean => cityBuild.progress().value() === 0\n    ),\n    new Effect((cityBuild: CityBuild, cost: Yield): Yield => {\n      const price = cityBuild.remaining() / 10;\n\n      cost.add(Math.floor((price + 4) * 10 * price));\n\n      return cost;\n    })\n  ),\n\n  new Spend(\n    new Criterion(\n      (cityBuild: CityBuild): boolean =>\n        typeof cityBuild.building() !== 'undefined' &&\n        Object.isPrototypeOf.call(Unit, cityBuild.building()!.item())\n    ),\n    new Criterion(\n      (cityBuild: CityBuild): boolean => cityBuild.progress().value() > 0\n    ),\n    new Effect((cityBuild: CityBuild, cost: Yield): Yield => {\n      const price = cityBuild.remaining() / 10;\n\n      cost.add(Math.floor(5 * price ** 2 + 20 * price));\n\n      return cost;\n    })\n  ),\n\n  new Spend(\n    new Criterion(\n      (cityBuild: CityBuild): boolean =>\n        typeof cityBuild.building() !== 'undefined' &&\n        Object.isPrototypeOf.call(CityImprovement, cityBuild.building()!.item())\n    ),\n    new Criterion(\n      (cityBuild: CityBuild): boolean => cityBuild.progress().value() === 0\n    ),\n    new Effect((cityBuild: CityBuild, cost: Yield): Yield => {\n      cost.add(cityBuild.remaining() * 4);\n\n      return cost;\n    })\n  ),\n\n  new Spend(\n    new Criterion(\n      (cityBuild: CityBuild): boolean =>\n        typeof cityBuild.building() !== 'undefined' &&\n        Object.isPrototypeOf.call(CityImprovement, cityBuild.building()!.item())\n    ),\n    new Criterion(\n      (cityBuild: CityBuild): boolean => cityBuild.progress().value() > 0\n    ),\n    new Effect((cityBuild: CityBuild, cost: Yield): Yield => {\n      cost.add(cityBuild.remaining() * 2);\n\n      return cost;\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport Action from '@civ-clone/core-player/Rules/Action';\nimport City from '@civ-clone/core-city/City';\nimport { CompleteProduction } from '../../PlayerActions';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerAction from '@civ-clone/core-player/PlayerAction';\n\nexport const getRules: (cityRegistry?: CityRegistry) => Action[] = (\n  cityRegistry: CityRegistry = cityRegistryInstance\n): Action[] => [\n  new Action(\n    new Effect((player: Player): PlayerAction[] =>\n      cityRegistry\n        .getByPlayer(player)\n        .map((city: City) => new CompleteProduction(player, city))\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  PlayerTreasuryRegistry,\n  instance as playerTreasuryRegistryInstance,\n} from '@civ-clone/core-treasury/PlayerTreasuryRegistry';\nimport Added from '@civ-clone/core-player/Rules/Added';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerTreasury from '@civ-clone/core-treasury/PlayerTreasury';\n\nexport const getRules: (\n  playerTreasuryRegistry?: PlayerTreasuryRegistry\n) => Added[] = (\n  playerTreasuryRegistry: PlayerTreasuryRegistry = playerTreasuryRegistryInstance\n): Added[] => [\n  new Added(\n    new Effect((player: Player): void =>\n      playerTreasuryRegistry.register(new PlayerTreasury(player))\n    )\n  ),\n];\n\nexport default getRules;\n", "export { CityImprovementMaintenanceGold } from '@civ-clone/base-city-yield-city-improvement-maintenance-gold/CityImprovementMaintenanceGold';\nexport { Gold } from '@civ-clone/base-city-yield-gold/Gold';\n", "import City from '@civ-clone/core-city/City';\nimport PlayerTreasury from '../PlayerTreasury';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class Updated extends Rule<[PlayerTreasury, City], void> {}\n\nexport default Updated;\n", "import { CityImprovementMaintenanceGold, Gold } from '../../Yields';\nimport {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  PlayerTreasuryRegistry,\n  instance as playerTreasuryRegistryInstance,\n} from '@civ-clone/core-treasury/PlayerTreasuryRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport BuildItem from '@civ-clone/core-city-build/BuildItem';\nimport Buildable from '@civ-clone/core-city-build/Buildable';\nimport City from '@civ-clone/core-city/City';\nimport CivilDisorder from '@civ-clone/core-city-happiness/Rules/CivilDisorder';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport ProcessYield from '@civ-clone/core-city/Rules/ProcessYield';\nimport Updated from '@civ-clone/core-treasury/Rules/Updated';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: (\n  playerTreasuryRegistry?: PlayerTreasuryRegistry,\n  ruleRegistry?: RuleRegistry,\n  cityImprovementRegistry?: CityImprovementRegistry,\n  engine?: Engine\n) => ProcessYield[] = (\n  playerTreasuryRegistry: PlayerTreasuryRegistry = playerTreasuryRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  engine: Engine = engineInstance\n): ProcessYield[] => [\n  new ProcessYield(\n    new Criterion((cityYield: Yield): boolean => cityYield instanceof Gold),\n    new Effect((cityYield: Yield, city: City, yields: Yield[]): void => {\n      const playerTreasury = playerTreasuryRegistry.getByPlayer(city.player());\n\n      yields.forEach((cityYield) => {\n        if (cityYield instanceof CityImprovementMaintenanceGold) {\n          if (playerTreasury.value() < cityYield.value()) {\n            const cityImprovement = cityYield.cityImprovement()!,\n              buildItem = new BuildItem(\n                cityImprovement.constructor as typeof Buildable,\n                city,\n                ruleRegistry\n              );\n\n            cityImprovementRegistry.unregister(cityImprovement);\n\n            playerTreasury.add(buildItem.cost().value());\n\n            engine.emit('city:unsupported-improvement', city, cityImprovement);\n\n            return;\n          }\n\n          playerTreasury.subtract(cityYield.value(), city.name());\n        }\n      });\n    })\n  ),\n\n  new ProcessYield(\n    new Criterion((cityYield: Yield): boolean => cityYield instanceof Gold),\n    new Criterion(\n      (cityYield: Yield, city: City, yields: Yield[]) =>\n        !ruleRegistry\n          .get(CivilDisorder)\n          .some((rule: CivilDisorder): boolean => rule.validate(city, yields))\n    ),\n    new Effect((cityYield: Yield, city: City): void => {\n      const playerTreasury = playerTreasuryRegistry.getByPlayer(city.player());\n\n      playerTreasury.add(cityYield, city.name());\n\n      ruleRegistry.process(Updated, playerTreasury, city);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport PlayerTreasury from '@civ-clone/core-treasury/PlayerTreasury';\nimport Updated from '@civ-clone/core-treasury/Rules/Updated';\n\nexport const getRules: (engine?: Engine) => Updated[] = (\n  engine: Engine = engineInstance\n): Updated[] => [\n  // TODO: sell city improvements\n  new Updated(\n    new Criterion(\n      (playerTreasury: PlayerTreasury): boolean => playerTreasury.value() < 0\n    ),\n    new Effect((playerTreasury: PlayerTreasury, city: City) => {\n      engine.emit(\n        'player:treasury-exhausted',\n        playerTreasury.player(),\n        playerTreasury,\n        city\n      );\n    })\n  ),\n];\n\nexport default getRules;\n", "import { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport citySpend from './Rules/City/spend';\nimport playerAction from './Rules/Player/action';\nimport playerAdded from './Rules/Player/added';\nimport processYields from './Rules/City/process-yield';\nimport treasuryUpdated from './Rules/Player/treasury-updated';\n\nruleRegistryInstance.register(\n  ...citySpend(),\n  ...playerAction(),\n  ...playerAdded(),\n  ...processYields(),\n  ...treasuryUpdated()\n);\n", null, "import {\n  Artillery,\n  Battleship,\n  Bomber,\n  Cannon,\n  Caravan,\n  Carrier,\n  Catapult,\n  Chariot,\n  Cruiser,\n  Diplomat,\n  Fighter,\n  Frigate,\n  Horseman,\n  Ironclad,\n  Knight,\n  MechanizedInfantry,\n  Musketman,\n  Nuclear,\n  Rifleman,\n  Sail,\n  Settlers,\n  Spearman,\n  Submarine,\n  Swordman,\n  Tank,\n  Transport,\n  Trireme,\n  Warrior,\n} from './Units';\nimport { instance as availableCityBuildItemsRegistryInstance } from '@civ-clone/core-city-build/AvailableCityBuildItemsRegistry';\n\navailableCityBuildItemsRegistryInstance.register(\n  Artillery,\n  Battleship,\n  Bomber,\n  Cannon,\n  Caravan,\n  Carrier,\n  Catapult,\n  Chariot,\n  Cruiser,\n  Diplomat,\n  Fighter,\n  Frigate,\n  Horseman,\n  Ironclad,\n  Knight,\n  MechanizedInfantry,\n  Musketman,\n  Nuclear,\n  Rifleman,\n  Sail,\n  Settlers,\n  Spearman,\n  Submarine,\n  Swordman,\n  Tank,\n  Transport,\n  Trireme,\n  Warrior\n);\n", "import { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Player from '@civ-clone/core-player/Player';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '../TileImprovement';\n\nexport class Available extends Rule<\n  [Tile, IConstructor<TileImprovement>, Player],\n  void\n> {}\n\nexport default Available;\n", "import {\n  Action,\n  hasMovesLeft,\n  isCurrentTile,\n  isNeighbouringTile,\n} from '@civ-clone/core-unit/Rules/Action';\nimport {\n  Air,\n  Fortifiable,\n  Land as LandUnit,\n  Naval,\n  NavalTransport,\n  Worker,\n} from '../../Types';\nimport {\n  Attack,\n  BuildIrrigation,\n  BuildMine,\n  BuildRailroad,\n  BuildRoad,\n  CaptureCity,\n  ClearForest,\n  ClearJungle,\n  ClearSwamp,\n  Disband,\n  Disembark,\n  Embark,\n  Fortify,\n  FoundCity,\n  Move,\n  NoOrders,\n  Pillage,\n  PlantForest,\n  Sleep,\n  Unload,\n} from '../../Actions';\nimport {\n  CityNameRegistry,\n  instance as cityNameRegistryInstance,\n} from '@civ-clone/core-civilization/CityNameRegistry';\nimport {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  Forest,\n  Jungle,\n  Plains,\n  River,\n  Swamp,\n} from '@civ-clone/civ1-world/Terrains';\nimport {\n  Irrigation,\n  Mine,\n  Railroad,\n  Road,\n} from '@civ-clone/civ1-world/TileImprovements';\nimport { Land, Water } from '@civ-clone/core-terrain/Types';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '@civ-clone/core-terrain-feature/TerrainFeatureRegistry';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport {\n  TransportRegistry,\n  instance as transportRegistryInstance,\n} from '@civ-clone/core-unit-transport/TransportRegistry';\nimport {\n  Turn,\n  instance as turnInstance,\n} from '@civ-clone/core-turn-based-game/Turn';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport {\n  UnitImprovementRegistry,\n  instance as unitImprovementRegistryInstance,\n} from '@civ-clone/core-unit-improvement/UnitImprovementRegistry';\nimport And from '@civ-clone/core-rule/Criteria/And';\nimport Available from '@civ-clone/core-tile-improvement/Rules/Available';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport DelayedAction from '@civ-clone/core-unit/DelayedAction';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { ITransport } from '@civ-clone/core-unit-transport/Transport';\nimport Or from '@civ-clone/core-rule/Criteria/Or';\nimport { Fighter, Settlers, Submarine } from '../../Units';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitAction from '@civ-clone/core-unit/Action';\n\nconst isLandUnit = new Criterion(\n    (unit: Unit, to: Tile, from: Tile = unit.tile()) => unit instanceof LandUnit\n  ),\n  isNavalUnit = new Criterion(\n    (unit: Unit, to: Tile, from: Tile = unit.tile()) => unit instanceof Naval\n  ),\n  tileHasCity = (tile: Tile, cityRegistry: CityRegistry): boolean =>\n    cityRegistry.getByTile(tile) !== null;\n\nexport const getRules: (\n  cityNameRegistry?: CityNameRegistry,\n  cityRegistry?: CityRegistry,\n  ruleRegistry?: RuleRegistry,\n  tileImprovementRegistry?: TileImprovementRegistry,\n  unitImprovementRegistry?: UnitImprovementRegistry,\n  unitRegistry?: UnitRegistry,\n  terrainFeatureRegistry?: TerrainFeatureRegistry,\n  transportRegistry?: TransportRegistry,\n  turn?: Turn\n) => Action[] = (\n  cityNameRegistry: CityNameRegistry = cityNameRegistryInstance,\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n  unitImprovementRegistry: UnitImprovementRegistry = unitImprovementRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance,\n  transportRegistry: TransportRegistry = transportRegistryInstance,\n  turn: Turn = turnInstance\n) => [\n  new Action(\n    isNeighbouringTile,\n    hasMovesLeft,\n    new Or(\n      // `LandUnit`s can move to other `Land` `Tile`s.\n      new And(\n        isLandUnit,\n        new Criterion(\n          (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n            from.isLand()\n        ),\n        new Criterion((unit: Unit, to: Tile): boolean => to.isLand()),\n        // Either there are no units, or they're the same `Player`.\n        new Criterion((unit: Unit, to: Tile): boolean =>\n          unitRegistry\n            .getByTile(to)\n            .every(\n              (tileUnit: Unit): boolean => tileUnit.player() === unit.player()\n            )\n        )\n      ),\n      new And(\n        isNavalUnit,\n        // `Naval` `Unit`s can either move from `Water` or a friendly `City`...\n        new Or(\n          new Criterion(\n            (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n              from.isWater()\n          ),\n          new Criterion(\n            (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n              cityRegistry.getByTile(from)?.player() === unit.player()\n          )\n        ),\n        // ...to `Water` or a friendly `City`.\n        new Or(\n          new Criterion((unit: Unit, to: Tile): boolean => to.isWater()),\n          new Criterion(\n            (unit: Unit, to: Tile): boolean =>\n              cityRegistry.getByTile(to)?.player() === unit.player()\n          )\n        )\n      ),\n      new Criterion((unit: Unit): boolean => unit instanceof Air)\n    ),\n\n    // This is analogous to the original Civilization unit adjacency rules.\n    // You may only move your `Unit` to the `Tile` if...\n    new Or(\n      new Criterion(\n        // ...it's not a `LandUnit` (`Air`, and `Naval` `Unit`s can ignore adjacency `Rule`s)...\n        (unit: Unit, to: Tile): boolean => !(unit instanceof LandUnit)\n      ),\n      // new Criterion(\n      //   // ...it's a `Diplomatic` `Unit`...\n      //   (unit: Unit, to: Tile): boolean => unit instanceof Diplomatic\n      // ),\n      new Criterion(\n        // ...there's not an enemy `Unit` adjacent to the current `Tile` and also the target `Tile`...\n        (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n          !(\n            from.getNeighbours().some((tile: Tile) =>\n              unitRegistry.getByTile(tile).some(\n                (tileUnit: Unit): boolean =>\n                  tileUnit instanceof LandUnit &&\n                  // Ignore `LandUnit`s in `Transport` on `Water`\n                  tileUnit.tile().terrain() instanceof Land &&\n                  tileUnit.player() !== unit.player()\n              )\n            ) &&\n            to.getNeighbours().some((tile: Tile) =>\n              unitRegistry.getByTile(tile).some(\n                (tileUnit: Unit): boolean =>\n                  tileUnit instanceof LandUnit &&\n                  // Ignore `LandUnit`s in `Transport` on `Water`\n                  tileUnit.tile().terrain() instanceof Land &&\n                  tileUnit.player() !== unit.player()\n              )\n            )\n          )\n      ),\n      new Criterion(\n        (unit: Unit, to: Tile): boolean =>\n          unitRegistry\n            .getByTile(to)\n            .filter(\n              (tileUnit: Unit): boolean => tileUnit.player() === unit.player()\n            ).length > 0\n      ),\n      new Criterion((unit: Unit, to: Tile): boolean => {\n        // ...or one of your `City`s.\n        const city = cityRegistry.getByTile(to);\n\n        if (city === null) {\n          return false;\n        }\n\n        return city.player() === unit.player();\n      })\n    ),\n    new Criterion((unit: Unit, to: Tile): boolean => {\n      // ...or one of your `City`s.\n      const city = cityRegistry.getByTile(to);\n\n      if (city === null) {\n        return true;\n      }\n\n      return city.player() === unit.player();\n    }),\n    new Criterion(\n      (unit: Unit, to: Tile): boolean =>\n        !unitRegistry\n          .getByTile(to)\n          .some((tileUnit) => tileUnit.player() !== unit.player())\n    ),\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n        new Move(from, to, unit, ruleRegistry) as UnitAction\n    )\n  ),\n\n  new Action(\n    isNeighbouringTile,\n    hasMovesLeft,\n    new Criterion((unit: Unit, to: Tile): boolean =>\n      unitRegistry\n        .getByTile(to)\n        .some((tileUnit: Unit): boolean => tileUnit.player() !== unit.player())\n    ),\n    // Where the Unit is either...\n    new Or(\n      new And(\n        // ...an Air Unit...\n        new Criterion((unit: Unit): boolean => unit instanceof Air),\n        // ...and either...\n        new Or(\n          // ...not every Unit on the Tile is another Air Unit...\n          new Criterion(\n            (unit: Unit, to: Tile): boolean =>\n              !unitRegistry\n                .getByTile(to)\n                .every((tileUnit: Unit): boolean => tileUnit instanceof Air)\n          ),\n          // ...or the Unit is a Fighter.\n          // TODO: `AirAttacker` type? This would allow Mobile SAM etc\n          new Criterion(\n            (unit: Unit, to: Tile): boolean => unit instanceof Fighter\n          )\n        )\n      ),\n      new And(\n        // ...or a Land Unit...\n        isLandUnit,\n        // ...and either...\n        new Or(\n          // ...the Tile has a City....\n          new Criterion((unit: Unit, to: Tile): boolean =>\n            tileHasCity(to, cityRegistry)\n          ),\n          // ...or it's attacking another Land Unit.\n          new Criterion((unit: Unit, to: Tile): boolean =>\n            unitRegistry\n              .getByTile(to)\n              .some((tileUnit: Unit): boolean => tileUnit instanceof LandUnit)\n          )\n        )\n      ),\n      new And(\n        // ...or a Naval Unit...\n        isNavalUnit,\n        new Or(\n          // ...that is either, not a `Submarine` (as they can only attack other `Naval` `Unit`s...\n          // TODO: Add a type for this? NavalBombardier?\n          new Criterion((unit: Unit, to: Tile) => !(unit instanceof Submarine)),\n          // ...or the `Tile` is `Water`.\n          new Criterion((unit: Unit, to: Tile) => to.isWater())\n        )\n      )\n    ),\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n        new Attack(from, to, unit, ruleRegistry, unitRegistry)\n    )\n  ),\n\n  new Action(\n    isNeighbouringTile,\n    hasMovesLeft,\n    isLandUnit,\n    new Criterion((unit: Unit, to: Tile): boolean =>\n      tileHasCity(to, cityRegistry)\n    ),\n    new Criterion(\n      (unit: Unit, to: Tile): boolean => unitRegistry.getByTile(to).length === 0\n    ),\n    new Criterion(\n      (unit: Unit, to: Tile): boolean =>\n        cityRegistry.getByTile(to)!.player() !== unit.player()\n    ),\n    new Effect((unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction => {\n      const city = cityRegistry.getByTile(to)!;\n\n      return new CaptureCity(from, to, unit, city, ruleRegistry) as UnitAction;\n    })\n  ),\n\n  new Action(\n    hasMovesLeft,\n    isCurrentTile,\n    new Criterion((unit: Unit): boolean => unit instanceof Fortifiable),\n    new Criterion(\n      (unit: Unit, to: Tile): boolean =>\n        tileImprovementRegistry\n          .getByTile(to)\n          // TODO: Pillagable(sp?)Improvement subclass? or `CanBePillaged` `Rule`...\n          .filter((improvement: TileImprovement): boolean =>\n            [Irrigation, Mine, Railroad, Road].some(\n              (Improvement: typeof TileImprovement): boolean =>\n                improvement instanceof Improvement\n            )\n          ).length > 0\n    ),\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n        new Pillage(from, to, unit, ruleRegistry, tileImprovementRegistry, turn)\n    )\n  ),\n\n  new Action(\n    hasMovesLeft,\n    isCurrentTile,\n    new Criterion((unit: Unit): boolean => unit instanceof Fortifiable),\n    new Criterion((unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n      from.isLand()\n    ),\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n        new Fortify(from, to, unit, ruleRegistry, turn, unitImprovementRegistry)\n    )\n  ),\n\n  new Action(\n    hasMovesLeft,\n    isCurrentTile,\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n        new Sleep(from, to, unit, ruleRegistry, turn)\n    )\n  ),\n\n  new Action(\n    hasMovesLeft,\n    isCurrentTile,\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n        new Disband(from, to, unit, ruleRegistry)\n    )\n  ),\n\n  new Action(\n    isCurrentTile,\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n        new NoOrders(from, to, unit, ruleRegistry)\n    )\n  ),\n\n  new Action(\n    hasMovesLeft,\n    isCurrentTile,\n    new Criterion((unit: Unit): boolean => unit instanceof Settlers),\n    new Criterion((unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n      from.isLand()\n    ),\n    new Criterion(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n        !tileHasCity(from, cityRegistry)\n    ),\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n        new FoundCity(from, to, unit, cityNameRegistry, ruleRegistry)\n    )\n  ),\n\n  ...(\n    [\n      [\n        Irrigation,\n        BuildIrrigation,\n        new Or(\n          new Criterion(\n            (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n              from.terrain() instanceof River\n          ),\n          new Criterion(\n            (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n              from\n                .getAdjacent()\n                .some(\n                  (tile: Tile): boolean =>\n                    tile.terrain() instanceof River ||\n                    tile.terrain() instanceof Water ||\n                    (tileImprovementRegistry\n                      .getByTile(tile)\n                      .some(\n                        (improvement: TileImprovement): boolean =>\n                          improvement instanceof Irrigation\n                      ) &&\n                      !tileHasCity(tile, cityRegistry))\n                )\n          )\n        ),\n      ],\n      [Mine, BuildMine],\n      [Road, BuildRoad],\n      [\n        Railroad,\n        BuildRailroad,\n        new Criterion((unit: Unit, to: Tile) =>\n          tileImprovementRegistry\n            .getByTile(to)\n            .some(\n              (tileImprovement: TileImprovement) =>\n                tileImprovement instanceof Road\n            )\n        ),\n      ],\n    ] as [typeof TileImprovement, typeof DelayedAction, ...Criterion[]][]\n  ).map(\n    ([Improvement, ActionType, ...additionalCriteria]: [\n      typeof TileImprovement,\n      typeof DelayedAction,\n      ...Criterion[]\n    ]): Action =>\n      new Action(\n        new Criterion((unit: Unit): boolean => unit instanceof Worker),\n        hasMovesLeft,\n        new Criterion(\n          (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n            ruleRegistry\n              .get(Available)\n              .some((rule: Available): boolean =>\n                rule.validate(from, Improvement, unit.player())\n              )\n        ),\n        isCurrentTile,\n        ...additionalCriteria,\n        new Effect(\n          (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n            new ActionType(from, to, unit, ruleRegistry, turn)\n        )\n      )\n  ),\n  ...(\n    [\n      [Jungle, ClearJungle],\n      [Forest, ClearForest],\n      [Plains, PlantForest],\n      [Swamp, ClearSwamp],\n    ] as [\n      typeof Terrain,\n      (\n        | typeof ClearJungle\n        | typeof ClearForest\n        | typeof PlantForest\n        | typeof ClearSwamp\n      )\n    ][]\n  ).map(\n    ([TerrainType, ActionType]: [\n      typeof Terrain,\n      (\n        | typeof ClearJungle\n        | typeof ClearForest\n        | typeof PlantForest\n        | typeof ClearSwamp\n      )\n    ]): Action =>\n      new Action(\n        hasMovesLeft,\n        isCurrentTile,\n        new Criterion((unit: Unit): boolean => unit instanceof Worker),\n        new Criterion(\n          (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n            from.terrain() instanceof TerrainType\n        ),\n        new Effect(\n          (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n            new ActionType(\n              from,\n              to,\n              unit,\n              ruleRegistry,\n              terrainFeatureRegistry,\n              turn\n            )\n        )\n      )\n  ),\n\n  new Action(\n    isNeighbouringTile,\n    hasMovesLeft,\n    isLandUnit,\n    new Criterion(\n      (unit: Unit, to: Tile): boolean => to.terrain() instanceof Water\n    ),\n    new Criterion((unit: Unit, to: Tile): boolean =>\n      unitRegistry\n        .getByTile(to)\n        .every((tileUnit: Unit): boolean => tileUnit.player() === unit.player())\n    ),\n    new Criterion((unit: Unit, to: Tile): boolean =>\n      unitRegistry\n        .getByTile(to)\n        .filter((tileUnit: Unit): boolean => tileUnit instanceof NavalTransport)\n        .some(\n          (tileUnit: Unit): boolean =>\n            (tileUnit as NavalTransport).hasCapacity() &&\n            (tileUnit as NavalTransport).canStow(unit)\n        )\n    ),\n    new Effect((unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction => {\n      const [transport] = unitRegistry\n        .getByTile(to)\n        .filter((tileUnit: Unit): boolean => tileUnit instanceof NavalTransport)\n        .filter(\n          (tileUnit: Unit): boolean =>\n            (tileUnit as NavalTransport).hasCapacity() &&\n            (tileUnit as NavalTransport).canStow(unit)\n        );\n\n      return new Embark(\n        from,\n        to,\n        unit,\n        transport as unknown as ITransport,\n        ruleRegistry\n      ) as UnitAction;\n    })\n  ),\n\n  new Action(\n    isNeighbouringTile,\n    new Criterion((unit: Unit): boolean => {\n      try {\n        transportRegistry.getByUnit(unit);\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }),\n    new Or(\n      new Criterion(\n        (unit: Unit, to: Tile): boolean => !(unit instanceof LandUnit)\n      ),\n      new Criterion((unit: Unit, to: Tile): boolean => to.isLand())\n    ),\n    new Criterion(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): boolean =>\n        transportRegistry.getByUnit(unit).transport().tile() === from\n    ),\n    new Effect((unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction => {\n      const transport = transportRegistry.getByUnit(unit).transport();\n\n      return new Disembark(\n        from,\n        to,\n        unit,\n        transport,\n        ruleRegistry\n      ) as UnitAction;\n    })\n  ),\n\n  new Action(\n    hasMovesLeft,\n    isCurrentTile,\n    new Criterion((unit: Unit): boolean => unit instanceof NavalTransport),\n    new Criterion((unit: Unit): boolean => (unit as NavalTransport).hasCargo()),\n    new Criterion((unit: Unit, to: Tile): boolean =>\n      to.getNeighbours().some((tile: Tile): boolean => tile.isLand())\n    ),\n    new Effect(\n      (unit: Unit, to: Tile, from: Tile = unit.tile()): UnitAction =>\n        new Unload(from, to, unit, ruleRegistry)\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  UnitImprovementRegistry,\n  instance as unitImprovementRegistryInstance,\n} from '@civ-clone/core-unit-improvement/UnitImprovementRegistry';\nimport Activate from '@civ-clone/core-unit/Rules/Activate';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitImprovement from '@civ-clone/core-unit-improvement/UnitImprovement';\nimport { Fortified } from '../../UnitImprovements';\n\nexport const getRules: (\n  unitImprovementRegistry?: UnitImprovementRegistry\n) => Activate[] = (\n  unitImprovementRegistry: UnitImprovementRegistry = unitImprovementRegistryInstance\n): Activate[] => [\n  new Activate(\n    new Criterion((unit: Unit): boolean => unit.moves().value() > 0),\n    new Effect((unit: Unit): void => unit.setActive())\n  ),\n  new Activate(\n    new Criterion((unit: Unit): boolean => unit.busy() !== null),\n    new Effect((unit: Unit): void => unit.setBusy())\n  ),\n  ...([Fortified] as [typeof UnitImprovement]).map(\n    (UnitImprovementType): Activate =>\n      new Activate(\n        new Criterion((unit: Unit): boolean =>\n          unitImprovementRegistry\n            .getByUnit(unit)\n            .some(\n              (unitImprovement: UnitImprovement): boolean =>\n                unitImprovement instanceof UnitImprovementType\n            )\n        ),\n        new Effect((unit: Unit): void =>\n          unitImprovementRegistry.unregister(\n            ...unitImprovementRegistry\n              .getByUnit(unit)\n              .filter(\n                (unitImprovement: UnitImprovement): boolean =>\n                  unitImprovement instanceof UnitImprovementType\n              )\n          )\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  AdvancedFlight,\n  Automobile,\n  BronzeWorking,\n  Chivalry,\n  Combustion,\n  Conscription,\n  Flight,\n  Gunpowder,\n  HorsebackRiding,\n  Industrialization,\n  IronWorking,\n  LaborUnion,\n  Magnetism,\n  MapMaking,\n  MassProduction,\n  Mathematics,\n  Metallurgy,\n  Navigation,\n  Robotics,\n  Rocketry,\n  SteamEngine,\n  Steel,\n  TheWheel,\n  Trade,\n  Writing,\n} from '@civ-clone/civ1-science/Advances';\nimport { Build, IBuildCriterion } from '@civ-clone/core-city-build/Rules/Build';\nimport {\n  Artillery,\n  Battleship,\n  Bomber,\n  Cannon,\n  Caravan,\n  Carrier,\n  Catapult,\n  Chariot,\n  Cruiser,\n  Diplomat,\n  Fighter,\n  Frigate,\n  Horseman,\n  Ironclad,\n  Knight,\n  MechanizedInfantry,\n  Musketman,\n  Nuclear,\n  Rifleman,\n  Sail,\n  Spearman,\n  Submarine,\n  Swordman,\n  Tank,\n  Transport,\n  Trireme,\n  Warrior,\n} from '../../Units';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport Advance from '@civ-clone/core-science/Advance';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport { Naval } from '../../Types';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry\n) => Build[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n): Build[] => [\n  // new Build(\n  //   new Effect((city: City): IBuildCriterion => new Criterion(\n  //     (): boolean => (city.production - city.units.length) > 0\n  //   ))\n  // ),\n\n  new Build(\n    new Criterion((city: City, BuildItem: IConstructor): boolean =>\n      Object.prototype.isPrototypeOf.call(Naval, BuildItem)\n    ),\n    new Effect(\n      (city: City): IBuildCriterion =>\n        new Criterion((): boolean => city.tile().isCoast())\n    )\n  ),\n  ...(\n    [\n      [Artillery, Robotics],\n      [Battleship, Steel],\n      [Bomber, AdvancedFlight],\n      [Cannon, Metallurgy],\n      [Carrier, AdvancedFlight],\n      [Caravan, Trade],\n      [Catapult, Mathematics],\n      [Chariot, TheWheel],\n      [Cruiser, Combustion],\n      [Diplomat, Writing],\n      [Fighter, Flight],\n      [Frigate, Magnetism],\n      [Horseman, HorsebackRiding],\n      [Ironclad, SteamEngine],\n      [Knight, Chivalry],\n      [MechanizedInfantry, LaborUnion],\n      [Musketman, Gunpowder],\n      [Nuclear, Rocketry],\n      [Rifleman, Conscription],\n      [Sail, Navigation],\n      [Spearman, BronzeWorking],\n      [Submarine, MassProduction],\n      [Swordman, IronWorking],\n      [Tank, Automobile],\n      [Transport, Industrialization],\n      [Trireme, MapMaking],\n    ] as [typeof Unit, typeof Advance][]\n  ).map(\n    ([UnitType, RequiredAdvance]): Build =>\n      new Build(\n        new Criterion(\n          (city: City, BuildItem: IConstructor): boolean =>\n            BuildItem === UnitType\n        ),\n        new Effect(\n          (city: City): IBuildCriterion =>\n            new Criterion((): boolean =>\n              playerResearchRegistry\n                .getByPlayer(city.player())\n                .completed(RequiredAdvance)\n            )\n        )\n      )\n  ),\n  ...(\n    [\n      [Cannon, Robotics],\n      [Catapult, Metallurgy],\n      [Chariot, Chivalry],\n      [Frigate, Industrialization],\n      [Horseman, Conscription],\n      [Ironclad, Combustion],\n      [Knight, Automobile],\n      [Musketman, Conscription],\n      [Sail, Magnetism],\n      [Spearman, Gunpowder],\n      [Swordman, Conscription],\n      [Trireme, Navigation],\n      [Warrior, Gunpowder],\n    ] as [typeof Unit, typeof Advance][]\n  ).map(\n    ([UnitType, ObseletionAdvance]): Build =>\n      new Build(\n        new Criterion(\n          (city: City, BuildItem: IConstructor): boolean =>\n            BuildItem === UnitType\n        ),\n        new Effect(\n          (city: City): IBuildCriterion =>\n            new Criterion(\n              (): boolean =>\n                !playerResearchRegistry\n                  .getByPlayer(city.player())\n                  .completed(ObseletionAdvance)\n            )\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  BuildCost,\n  buildCost,\n} from '@civ-clone/core-city-build/Rules/BuildCost';\nimport {\n  Artillery,\n  Battleship,\n  Bomber,\n  Cannon,\n  Caravan,\n  Carrier,\n  Catapult,\n  Chariot,\n  Cruiser,\n  Diplomat,\n  Fighter,\n  Frigate,\n  Horseman,\n  Ironclad,\n  Knight,\n  MechanizedInfantry,\n  Musketman,\n  Nuclear,\n  Rifleman,\n  Sail,\n  Settlers,\n  Spearman,\n  Submarine,\n  Swordman,\n  Tank,\n  Transport,\n  Trireme,\n  Warrior,\n} from '../../Units';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Buildable from '@civ-clone/core-city-build/Buildable';\n\nexport const getRules: () => BuildCost[] = (): BuildCost[] => [\n  ...(\n    [\n      [Artillery, 80],\n      [Battleship, 160],\n      [Bomber, 120],\n      [Cannon, 40],\n      [Caravan, 50],\n      [Carrier, 160],\n      [Catapult, 40],\n      [Chariot, 40],\n      [Cruiser, 80],\n      [Diplomat, 30],\n      [Fighter, 60],\n      [Frigate, 40],\n      [Horseman, 20],\n      [Ironclad, 50],\n      [Knight, 40],\n      [MechanizedInfantry, 50],\n      [Musketman, 30],\n      [Nuclear, 160],\n      [Rifleman, 30],\n      [Sail, 40],\n      [Settlers, 40],\n      [Spearman, 20],\n      [Submarine, 50],\n      [Swordman, 20],\n      [Tank, 80],\n      [Transport, 50],\n      [Trireme, 40],\n      [Warrior, 10],\n    ] as [typeof Unit, number][]\n  ).flatMap(([UnitType, cost]: [typeof Unit, number]): BuildCost[] =>\n    // Why does TS hate this inheritance so much, is this an anti-pattern?\n    buildCost(UnitType as unknown as typeof Buildable, cost)\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '@civ-clone/core-city-growth/CityGrowthRegistry';\nimport { BuildableInstance } from '@civ-clone/core-city-build/Buildable';\nimport BuildingComplete from '@civ-clone/core-city-build/Rules/BulidingComplete';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Settlers } from '../../Units';\n\nexport const getRules: (\n  cityGrowthRegistry?: CityGrowthRegistry\n) => BuildingComplete[] = (\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance\n): BuildingComplete[] => [\n  new BuildingComplete(\n    new Criterion(\n      (cityBuild: CityBuild, buildItem: BuildableInstance) =>\n        buildItem instanceof Settlers\n    ),\n    new Effect((cityBuild: CityBuild) =>\n      cityGrowthRegistry.getByCity(cityBuild.city()).shrink()\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Created from '@civ-clone/core-unit/Rules/Created';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  unitRegistry?: UnitRegistry,\n  engine?: Engine\n) => Created[] = (\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  engine: Engine = engineInstance\n): Created[] => [\n  new Created(new Effect((unit: Unit): void => unitRegistry.register(unit))),\n  new Created(new Effect((unit: Unit): void => unit.applyVisibility())),\n  new Created(\n    new Effect((unit: Unit): void => unit.moves().set(unit.movement()))\n  ),\n  new Created(\n    new Effect((unit: Unit): void => {\n      engine.emit('unit:created', unit);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Defeated from '@civ-clone/core-unit/Rules/Defeated';\nimport Destroyed from '@civ-clone/core-unit/Rules/Destroyed';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  cityRegistry?: CityRegistry,\n  ruleRegistry?: RuleRegistry,\n  tileImprovementRegistry?: TileImprovementRegistry,\n  unitRegistry?: UnitRegistry,\n  engine?: Engine\n) => Defeated[] = (\n  cityRegistry: CityRegistry = cityRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  engine: Engine = engineInstance\n): Defeated[] => [\n  new Defeated(\n    new Effect((unit: Unit, by: Unit): void => {\n      engine.emit('unit:defeated', unit, by);\n\n      ruleRegistry.process(Destroyed, unit, by.player());\n    })\n  ),\n  new Defeated(\n    new Criterion((unit: Unit) => cityRegistry.getByTile(unit.tile()) === null),\n    // TODO: Add `Fortress`es\n    // new Criterion((unit: Unit) =>\n    //   !tileImprovementRegistry.getByTile(unit.tile())\n    //     .some((tileImprovement) => tileImprovement instanceof Fortress)\n    // ),\n    new Criterion(\n      (unit: Unit) =>\n        unitRegistry\n          .getByTile(unit.tile())\n          .filter(\n            (tileUnit: Unit) =>\n              tileUnit !== unit && tileUnit.player() === unit.player()\n          ).length > 0\n    ),\n    new Effect((unit: Unit, by: Unit): void =>\n      unitRegistry.getByTile(unit.tile()).forEach((tileUnit) => {\n        if (!(tileUnit !== unit && tileUnit.player() === unit.player())) {\n          return;\n        }\n\n        ruleRegistry.process(Destroyed, unit, by.player());\n      })\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  UnitImprovementRegistry,\n  instance as unitImprovementRegistryInstance,\n} from '@civ-clone/core-unit-improvement/UnitImprovementRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Destroyed from '@civ-clone/core-unit/Rules/Destroyed';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  unitRegistry?: UnitRegistry,\n  unitImprovementRegistry?: UnitImprovementRegistry,\n  engine?: Engine\n) => Destroyed[] = (\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  unitImprovementRegistry: UnitImprovementRegistry = unitImprovementRegistryInstance,\n  engine: Engine = engineInstance\n): Destroyed[] => [\n  new Destroyed(\n    new Effect((unit: Unit, player: Player | null): void => {\n      engine.emit('unit:destroyed', unit, player);\n    })\n  ),\n  new Destroyed(\n    new Effect((unit: Unit): void => {\n      unit.setActive(false);\n      unit.setDestroyed();\n    })\n  ),\n  new Destroyed(\n    new Effect((unit: Unit): void =>\n      unitImprovementRegistry\n        .getByUnit(unit)\n        .forEach((unitImprovement) =>\n          unitImprovementRegistry.unregister(unitImprovement)\n        )\n    )\n  ),\n];\n\nexport default getRules;\n", "import { ITransport } from '../Transport';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class LostAtSea extends Rule<[ITransport], void> {}\n\nexport default LostAtSea;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { ITransport } from '@civ-clone/core-unit-transport/Transport';\nimport LostAtSea from '@civ-clone/core-unit-transport/Rules/LostAtSea';\n\nexport const getRules: (engine?: Engine) => LostAtSea[] = (\n  engine: Engine = engineInstance\n): LostAtSea[] => [\n  new LostAtSea(\n    new Effect((unit: ITransport): void => {\n      engine.emit('unit:lost-at-sea', unit);\n    })\n  ),\n  new LostAtSea(new Effect((unit: ITransport): void => unit.destroy(null))),\n];\n\nexport default getRules;\n", "import { Disembark, Move } from '../../Actions';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TransportRegistry,\n  instance as transportRegistryInstance,\n} from '@civ-clone/core-unit-transport/TransportRegistry';\nimport Action from '@civ-clone/core-unit/Action';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport LostAtSea from '@civ-clone/core-unit-transport/Rules/LostAtSea';\nimport Moved from '@civ-clone/core-unit/Rules/Moved';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport { NavalTransport } from '../../Types';\nimport { Fighter, Trireme } from '../../Units';\nimport CityRegistry, {\n  instance as cityRegistryInstance,\n} from '@civ-clone/core-city/CityRegistry';\nimport { ITransport } from '@civ-clone/core-unit-transport/Transport';\n\nexport const getRules: (\n  transportRegistry?: TransportRegistry,\n  ruleRegistry?: RuleRegistry,\n  randomNumberGenerator?: () => number,\n  engine?: Engine,\n  cityRegistry?: CityRegistry\n) => Moved[] = (\n  transportRegistry: TransportRegistry = transportRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  randomNumberGenerator: () => number = (): number => Math.random(),\n  engine: Engine = engineInstance,\n  cityRegistry: CityRegistry = cityRegistryInstance\n): Moved[] => [\n  new Moved(\n    new Effect((unit: Unit, action: Action): void => {\n      engine.emit('unit:moved', unit, action);\n    })\n  ),\n  new Moved(new Effect((unit: Unit): void => unit.applyVisibility())),\n  new Moved(\n    new Criterion((unit: Unit): boolean => unit.moves().value() <= 0.1),\n    new Effect((unit: Unit): void => unit.moves().set(0))\n  ),\n  new Moved(\n    new Criterion((unit: Unit): boolean => unit.moves().value() < 0.1),\n    new Effect((unit: Unit): void => unit.setActive(false))\n  ),\n  new Moved(\n    new Criterion((unit: Unit): boolean => unit instanceof NavalTransport),\n    new Criterion(\n      (unit: Unit, action: Action): boolean => action instanceof Move\n    ),\n    new Criterion((unit: Unit): boolean => (unit as NavalTransport).hasCargo()),\n    new Effect((unit: Unit, action: Action): void =>\n      (unit as NavalTransport)\n        .cargo()\n        .forEach((unit: Unit): void => unit.action(action.forUnit(unit)))\n    )\n  ),\n  new Moved(\n    new Criterion(\n      (unit: Unit, action: Action): boolean => action instanceof Disembark\n    ),\n    new Effect((unit: Unit): void => {\n      const manifest = transportRegistry.getByUnit(unit);\n\n      manifest.transport().unload(unit);\n\n      transportRegistry.unregister(manifest);\n    })\n  ),\n  new Moved(\n    new Criterion((unit: Unit): boolean => unit instanceof Trireme),\n    new Criterion((unit: Unit): boolean => unit.moves().value() === 0),\n    new Criterion((unit: Unit): boolean => !unit.tile().isCoast()),\n    new Criterion((): boolean => randomNumberGenerator() <= 0.5),\n    new Effect((unit: Unit): void => {\n      ruleRegistry.process(LostAtSea, unit as unknown as ITransport);\n    })\n  ),\n  new Moved(\n    new Criterion((unit: Unit): boolean => unit instanceof Fighter),\n    new Criterion((unit: Unit): boolean => unit.moves().value() === 0),\n    new Criterion(\n      (unit: Unit): boolean => cityRegistry.getByTile(unit.tile()) !== null\n    ),\n    new Effect((unit: Unit): void => {\n      ruleRegistry.process(LostAtSea, unit as unknown as ITransport);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Arctic,\n  Desert,\n  Forest,\n  Grassland,\n  Hills,\n  Jungle,\n  Mountains,\n  Ocean,\n  Plains,\n  River,\n  Swamp,\n  Tundra,\n} from '@civ-clone/civ1-world/Terrains';\nimport { Air, Land, Naval, NavalTransport } from '../../Types';\nimport {\n  BuildIrrigation,\n  BuildMine,\n  BuildRailroad,\n  BuildRoad,\n  ClearForest,\n  ClearJungle,\n  ClearSwamp,\n  Fortify,\n  Move,\n  Pillage,\n  PlantForest,\n  Sleep,\n} from '../../Actions';\nimport { Railroad, Road } from '@civ-clone/civ1-world/TileImprovements';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport {\n  TransportRegistry,\n  instance as transportRegistryInstance,\n} from '@civ-clone/core-unit-transport/TransportRegistry';\nimport Action from '@civ-clone/core-unit/Action';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport MovementCost from '@civ-clone/core-unit/Rules/MovementCost';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitAction from '@civ-clone/core-unit/Action';\n\n// I wonder if this would be easier to manage as a `Yield` on the `Terrain`?\nexport const baseTerrainMovementCost: [typeof Terrain, number][] = [\n  [Arctic, 2],\n  [Desert, 1],\n  [Forest, 2],\n  [Grassland, 1],\n  [Hills, 2],\n  [Jungle, 2],\n  [Mountains, 3],\n  [Ocean, 1],\n  [Plains, 1],\n  [River, 1],\n  [Swamp, 2],\n  [Tundra, 1],\n];\n\nexport const getRules: (\n  tileImprovementRegistry?: TileImprovementRegistry,\n  transportRegistry?: TransportRegistry\n) => MovementCost[] = (\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n  transportRegistry: TransportRegistry = transportRegistryInstance\n) => [\n  ...baseTerrainMovementCost.map(\n    ([TerrainType, cost]: [typeof Terrain, number]): MovementCost =>\n      new MovementCost(\n        new Criterion(\n          (unit: Unit, action: UnitAction) => action instanceof Move\n        ),\n        new Criterion((unit: Unit) => unit instanceof Land),\n        new Criterion(\n          (unit: Unit, action: Action): boolean =>\n            action.to().terrain() instanceof TerrainType\n        ),\n        new Effect((): number => cost)\n      )\n  ),\n  new MovementCost(\n    new Criterion((unit: Unit, action: UnitAction) => action instanceof Move),\n    new Criterion((unit: Unit) => unit instanceof Air || unit instanceof Naval),\n    new Effect(() => 1)\n  ),\n  new MovementCost(\n    new Criterion((unit: Unit, action: UnitAction) => action instanceof Move),\n    new Criterion((unit: Unit) => unit instanceof Land),\n    new Criterion((unit: Unit, action: Action) =>\n      tileImprovementRegistry\n        .getByTile(action.from())\n        .some(\n          (improvement: TileImprovement): boolean => improvement instanceof Road\n        )\n    ),\n    new Criterion((unit: Unit, action: Action): boolean =>\n      tileImprovementRegistry\n        .getByTile(action.to())\n        .some(\n          (improvement: TileImprovement): boolean => improvement instanceof Road\n        )\n    ),\n    new Effect((): number => 1 / 3)\n  ),\n\n  new MovementCost(\n    new Criterion((unit: Unit, action: UnitAction) => action instanceof Move),\n    new Criterion((unit: Unit) => unit instanceof Land),\n    new Criterion((unit: Unit, action: Action): boolean =>\n      tileImprovementRegistry\n        .getByTile(action.from())\n        .some(\n          (improvement: TileImprovement): boolean =>\n            improvement instanceof Railroad\n        )\n    ),\n    new Criterion((unit: Unit, action: Action): boolean =>\n      tileImprovementRegistry\n        .getByTile(action.to())\n        .some(\n          (improvement: TileImprovement): boolean =>\n            improvement instanceof Railroad\n        )\n    ),\n    // TODO: need to also protect against goto etc, like classic Civ does, although I'd rather that was done by evaluating\n    //  the moves and if a loop is detected auto-cancelling - this is pretty primitive.\n    // new Criterion((unit) => ! (unit.player() instanceof AIPlayer)),\n    new Effect((): number => 0)\n  ),\n\n  new MovementCost(\n    new Criterion((unit: Unit, action: UnitAction) => action instanceof Move),\n    new Criterion((unit: Unit): boolean => unit instanceof Land),\n    new Criterion((unit: Unit): boolean => {\n      try {\n        transportRegistry.getByUnit(unit);\n\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }),\n    new Criterion(\n      (unit: Unit): boolean =>\n        transportRegistry.getByUnit(unit).transport() instanceof NavalTransport\n    ),\n    new Effect((): number => 0)\n  ),\n\n  ...(\n    [\n      [BuildIrrigation, 2],\n      [BuildMine, 3],\n      [BuildRoad, 1],\n      [BuildRailroad, 2],\n      [ClearForest, 2],\n      [ClearJungle, 3],\n      [ClearSwamp, 3],\n      [Fortify, 1],\n      [Pillage, 1],\n      [PlantForest, 3],\n      [Sleep, 0],\n    ] as [typeof UnitAction, number][]\n  ).flatMap(([Action, moveCost]: [typeof UnitAction, number]): MovementCost[] =>\n    baseTerrainMovementCost.map(\n      ([TerrainType, terrainCost]: [typeof Terrain, number]): MovementCost =>\n        new MovementCost(\n          new Criterion(\n            (unit: Unit, action: UnitAction) => action instanceof Action\n          ),\n          new Criterion(\n            (unit: Unit) => unit.tile().terrain() instanceof TerrainType\n          ),\n          new Effect(() => moveCost * terrainCost)\n        )\n    )\n  ),\n];\n\nexport default getRules;\n", "import { ActiveUnit, InactiveUnit } from '../../PlayerActions';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Action from '@civ-clone/core-player/Rules/Action';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (unitRegistry?: UnitRegistry) => Action[] = (\n  unitRegistry: UnitRegistry = unitRegistryInstance\n): Action[] => {\n  return [\n    new Action(\n      new Criterion((player: Player): boolean =>\n        unitRegistry\n          .getByPlayer(player)\n          .some((unit) => unit.active() && unit.moves().value())\n      ),\n      new Effect((player: Player): ActiveUnit[] =>\n        unitRegistry\n          .getByPlayer(player)\n          .filter(\n            (unit: Unit): boolean => unit.active() && unit.moves().value() > 0\n          )\n          .sort(\n            (a: Unit, b: Unit): number =>\n              (a.waiting() ? 1 : 0) - (b.waiting() ? 1 : 0)\n          )\n          .map((unit: Unit): ActiveUnit => new ActiveUnit(player, unit))\n      )\n    ),\n    new Action(\n      new Criterion((player: Player): boolean =>\n        unitRegistry\n          .getByPlayer(player)\n          .some((unit) => !unit.active() || !unit.moves().value())\n      ),\n      new Effect((player: Player): InactiveUnit[] =>\n        unitRegistry\n          .getByPlayer(player)\n          .filter((unit: Unit) => !unit.active() || unit.moves().value() === 0)\n          .sort(\n            (a: Unit, b: Unit): number =>\n              (a.waiting() ? 1 : 0) - (b.waiting() ? 1 : 0)\n          )\n          .map((unit) => new InactiveUnit(player, unit))\n      )\n    ),\n  ];\n};\n\nexport default getRules;\n", "import Effect from '@civ-clone/core-rule/Effect';\nimport Sleep from '@civ-clone/base-unit-action-sleep/Sleep';\nimport Stowed from '@civ-clone/core-unit-transport/Rules/Stowed';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules = (): Stowed[] => [\n  new Stowed(\n    new Effect((unit: Unit) =>\n      unit.action(new Sleep(unit.tile(), unit.tile(), unit))\n    )\n  ),\n];\n\nexport default getRules;\n", "import { Attack, Defence } from '@civ-clone/core-unit/Yields';\nimport {\n  Artillery,\n  Battleship,\n  Bomber,\n  Cannon,\n  Caravan,\n  Carrier,\n  Catapult,\n  Chariot,\n  Cruiser,\n  Diplomat,\n  Fighter,\n  Frigate,\n  Horseman,\n  Ironclad,\n  Knight,\n  MechanizedInfantry,\n  Musketman,\n  Nuclear,\n  Rifleman,\n  Sail,\n  Settlers,\n  Spearman,\n  Submarine,\n  Swordman,\n  Tank,\n  Transport,\n  Trireme,\n  Warrior,\n} from '../../Units';\nimport {\n  Fortified as FortifiedUnitImprovement,\n  Veteran as VeteranUnitImprovement,\n} from '../../UnitImprovements';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  UnitImprovementRegistry,\n  instance as unitImprovementRegistryInstance,\n} from '@civ-clone/core-unit-improvement/UnitImprovementRegistry';\nimport {\n  Yield as UnitYield,\n  unitYield,\n} from '@civ-clone/core-unit/Rules/Yield';\nimport { BaseYield } from '@civ-clone/core-unit/Rules/Yield';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitImprovement from '@civ-clone/core-unit-improvement/UnitImprovement';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: (\n  unitImprovementRegistry?: UnitImprovementRegistry,\n  ruleRegistry?: RuleRegistry\n) => (UnitYield | BaseYield)[] = (\n  unitImprovementRegistry: UnitImprovementRegistry = unitImprovementRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance\n): (UnitYield | BaseYield)[] => [\n  ...(\n    [\n      [Artillery, 12, 2, 2],\n      [Battleship, 18, 12, 4, 2],\n      [Bomber, 12, 1, 8, 2],\n      [Cannon, 8],\n      [Caravan, 0],\n      [Carrier, 1, 12, 5, 2],\n      [Catapult, 6],\n      [Chariot, 4, 1, 2],\n      [Cruiser, 6, 6, 6, 2],\n      [Diplomat, 0, 0, 2],\n      [Fighter, 4, 2, 10, 2],\n      [Frigate, 2, 2, 3],\n      [Horseman, 2, 1, 2],\n      [Ironclad, 4, 4, 4],\n      [Knight, 4, 2, 2],\n      [MechanizedInfantry, 6, 6, 3],\n      [Musketman, 3, 2],\n      [Nuclear, 99, 0, 16],\n      [Rifleman, 3, 5],\n      [Sail, 1, 1, 3],\n      [Settlers, 0],\n      [Spearman, 1, 2],\n      [Submarine, 8, 2, 3, 2],\n      [Swordman, 3],\n      [Tank, 10, 5, 3],\n      [Transport, 0, 3, 4],\n      [Trireme, 1, 0, 3],\n      [Warrior],\n    ] as [typeof Unit, number, number?, number?, number?][]\n  ).flatMap(\n    ([UnitType, attack = 1, defence = 1, movement = 1, visibility = 1]: [\n      typeof Unit,\n      number,\n      number?,\n      number?,\n      number?\n    ]): (UnitYield | BaseYield)[] =>\n      unitYield(UnitType, attack, defence, movement, visibility)\n  ),\n\n  ...(\n    [\n      [FortifiedUnitImprovement, 1, Defence],\n      [VeteranUnitImprovement, 0.5, Attack, Defence],\n    ] as [typeof UnitImprovement, number, ...typeof Yield[]][]\n  ).flatMap(\n    ([UnitImprovementType, yieldModifier, ...YieldTypes]: [\n      typeof UnitImprovement,\n      number,\n      ...typeof Yield[]\n    ]): (UnitYield | BaseYield)[] =>\n      YieldTypes.map(\n        (YieldType: typeof Yield): UnitYield =>\n          new UnitYield(\n            new Criterion(\n              (unit: Unit, unitYield: Yield): boolean =>\n                unitYield instanceof YieldType\n            ),\n            new Criterion((unit: Unit): boolean =>\n              unitImprovementRegistry\n                .getByUnit(unit)\n                .some(\n                  (unitImprovement: UnitImprovement): boolean =>\n                    unitImprovement instanceof UnitImprovementType\n                )\n            ),\n            new Effect((unit: Unit, unitYield: Yield): void => {\n              const baseYield = new YieldType();\n\n              ruleRegistry.process(\n                BaseYield,\n                <typeof Unit>unit.constructor,\n                baseYield\n              );\n\n              unitYield.add(\n                baseYield.value() * yieldModifier,\n                UnitImprovementType.name\n              );\n            })\n          )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Unsupported from '@civ-clone/core-unit/Rules/Unsupported';\n\nexport const getRules: (engine?: Engine) => Unsupported[] = (\n  engine: Engine = engineInstance\n): Unsupported[] => [\n  new Unsupported(\n    new Effect((city: City, unit: Unit): void => {\n      engine.emit('unit:unsupported', city, unit);\n    })\n  ),\n];\n\nexport default getRules;\n", "import Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport ValidateMove from '@civ-clone/core-unit/Rules/ValidateMove';\n\nexport const getRules: (\n  randomNumberGenerator?: () => number\n) => ValidateMove[] = (\n  randomNumberGenerator: () => number = (): number => Math.random()\n) => [\n  new ValidateMove(\n    new Criterion(\n      (unit: Unit, movementCost: number): boolean =>\n        unit.moves().value() >= movementCost\n    ),\n    new Effect((unit: Unit, movementCost: number): boolean => {\n      unit.moves().subtract(movementCost);\n\n      return true;\n    })\n  ),\n\n  new ValidateMove(\n    new Criterion(\n      (unit: Unit, movementCost: number): boolean =>\n        unit.moves().value() < movementCost\n    ),\n    new Effect((unit: Unit, movementCost: number): boolean => {\n      const remainingMoves = unit.moves().value();\n\n      unit.moves().set(0);\n\n      return remainingMoves >= movementCost * 0.5 * randomNumberGenerator();\n    })\n  ),\n];\n\nexport default getRules;\n", "import action from './Rules/Unit/action';\nimport activate from './Rules/Unit/activate';\nimport build from './Rules/City/build';\nimport buildCost from './Rules/City/buildCost';\nimport buildingComplete from './Rules/City/buildingComplete';\nimport created from './Rules/Unit/created';\nimport defeated from './Rules/Unit/defeated';\nimport destroyed from './Rules/Unit/destroyed';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport lostAtSea from './Rules/Unit/lostAtSea';\nimport moved from './Rules/Unit/moved';\nimport movementCost from './Rules/Unit/movementCost';\nimport playerAction from './Rules/Player/action';\nimport stowed from './Rules/Unit/stowed';\nimport unitYield from './Rules/Unit/yield';\nimport unsupported from './Rules/Unit/unsupported';\nimport validateMove from './Rules/Unit/validateMove';\n\nruleRegistryInstance.register(\n  ...action(),\n  ...activate(),\n  ...build(),\n  ...buildCost(),\n  ...buildingComplete(),\n  ...created(),\n  ...defeated(),\n  ...destroyed(),\n  ...lostAtSea(),\n  ...moved(),\n  ...movementCost(),\n  ...playerAction(),\n  ...stowed(),\n  ...unitYield(),\n  ...unsupported(),\n  ...validateMove()\n);\n", null, "import Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport class Colossus extends Wonder {}\n\nexport default Colossus;\n", "import Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport class CopernicusObservatory extends Wonder {}\n\nexport default CopernicusObservatory;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class CureForCancer extends Wonder {}\n\nexport default CureForCancer;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class DarwinsVoyage extends Wonder {}\n\nexport default DarwinsVoyage;\n", "import Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport class GreatLibrary extends Wonder {}\n\nexport default GreatLibrary;\n", "import Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport class GreatWall extends Wonder {}\n\nexport default GreatWall;\n", "import Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport class HangingGardens extends Wonder {}\n\nexport default HangingGardens;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class HooverDam extends Wonder {}\n\nexport default HooverDam;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class IsaacNewtonsCollege extends Wonder {}\n\nexport default IsaacNewtonsCollege;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class JsBachsCathedral extends Wonder {}\n\nexport default JsBachsCathedral;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class Lighthouse extends Wonder {}\n\nexport default Lighthouse;\n", "import Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport class MagellansExpedition extends Wonder {}\n\nexport default MagellansExpedition;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class ManhattanProject extends Wonder {}\n\nexport default ManhattanProject;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class MichelangelosChapel extends Wonder {}\n\nexport default MichelangelosChapel;\n", "import Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport class Oracle extends Wonder {}\n\nexport default Oracle;\n", "import Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport class Pyramids extends Wonder {}\n\nexport default Pyramids;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class SetiProgram extends Wonder {}\n\nexport default SetiProgram;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class ShakespearesTheatre extends Wonder {}\n\nexport default ShakespearesTheatre;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class UnitedNations extends Wonder {}\n\nexport default UnitedNations;\n", "import { Wonder } from '@civ-clone/core-wonder/Wonder';\n\nexport class WomensSuffrage extends Wonder {}\n\nexport default WomensSuffrage;\n", "export { ApolloProgram } from '@civ-clone/base-wonder-apolloprogram/ApolloProgram';\nexport { Colossus } from '@civ-clone/base-wonder-colossus/Colossus';\nexport { CopernicusObservatory } from '@civ-clone/base-wonder-copernicus-observatory/CopernicusObservatory';\nexport { CureForCancer } from '@civ-clone/base-wonder-cureforcancer/CureForCancer';\nexport { DarwinsVoyage } from '@civ-clone/base-wonder-darwinsvoyage/DarwinsVoyage';\nexport { GreatLibrary } from '@civ-clone/base-wonder-great-library/GreatLibrary';\nexport { GreatWall } from '@civ-clone/base-wonder-great-wall/GreatWall';\nexport { HangingGardens } from '@civ-clone/base-wonder-hanging-gardens/HangingGardens';\nexport { HooverDam } from '@civ-clone/base-wonder-hooverdam/HooverDam';\nexport { IsaacNewtonsCollege } from '@civ-clone/base-wonder-isaacnewtonscollege/IsaacNewtonsCollege';\nexport { JsBachsCathedral } from '@civ-clone/base-wonder-jsbachscathedral/JsBachsCathedral';\nexport { Lighthouse } from '@civ-clone/base-wonder-lighthouse/Lighthouse';\nexport { MagellansExpedition } from '@civ-clone/base-wonder-magellans-expedition/MagellansExpedition';\nexport { ManhattanProject } from '@civ-clone/base-wonder-manhattanproject/ManhattanProject';\nexport { MichelangelosChapel } from '@civ-clone/base-wonder-michelangeloschapel/MichelangelosChapel';\nexport { Oracle } from '@civ-clone/base-wonder-oracle/Oracle';\nexport { Pyramids } from '@civ-clone/base-wonder-pyramids/Pyramids';\nexport { SetiProgram } from '@civ-clone/base-wonder-setiprogram/SetiProgram';\nexport { ShakespearesTheatre } from '@civ-clone/base-wonder-shakespearestheatre/ShakespearesTheatre';\nexport { UnitedNations } from '@civ-clone/base-wonder-unitednations/UnitedNations';\nexport { WomensSuffrage } from '@civ-clone/base-wonder-womenssuffrage/WomensSuffrage';\n", "import {\n  ApolloProgram,\n  Colossus,\n  CopernicusObservatory,\n  CureForCancer,\n  DarwinsVoyage,\n  GreatLibrary,\n  GreatWall,\n  HangingGardens,\n  HooverDam,\n  IsaacNewtonsCollege,\n  JsBachsCathedral,\n  Lighthouse,\n  MagellansExpedition,\n  ManhattanProject,\n  MichelangelosChapel,\n  Oracle,\n  Pyramids,\n  SetiProgram,\n  ShakespearesTheatre,\n  UnitedNations,\n  WomensSuffrage,\n} from './Wonders';\nimport { instance as availableCityBuildItemsRegistryInstance } from '@civ-clone/core-city-build/AvailableCityBuildItemsRegistry';\n\navailableCityBuildItemsRegistryInstance.register(\n  ApolloProgram,\n  Colossus,\n  CopernicusObservatory,\n  CureForCancer,\n  DarwinsVoyage,\n  GreatLibrary,\n  GreatWall,\n  HangingGardens,\n  HooverDam,\n  IsaacNewtonsCollege,\n  JsBachsCathedral,\n  Lighthouse,\n  MagellansExpedition,\n  ManhattanProject,\n  MichelangelosChapel,\n  Oracle,\n  Pyramids,\n  SetiProgram,\n  ShakespearesTheatre,\n  UnitedNations,\n  WomensSuffrage\n);\n", "import {\n  ApolloProgram,\n  Colossus,\n  CopernicusObservatory,\n  CureForCancer,\n  DarwinsVoyage,\n  GreatLibrary,\n  GreatWall,\n  HangingGardens,\n  HooverDam,\n  IsaacNewtonsCollege,\n  JsBachsCathedral,\n  Lighthouse,\n  MagellansExpedition,\n  ManhattanProject,\n  MichelangelosChapel,\n  Oracle,\n  Pyramids,\n  SetiProgram,\n  ShakespearesTheatre,\n  UnitedNations,\n  WomensSuffrage,\n} from '../../Wonders';\nimport {\n  Astronomy,\n  BronzeWorking,\n  CeremonialBurial,\n  Communism,\n  Computers,\n  Electronics,\n  GeneticEngineering,\n  Industrialization,\n  Literacy,\n  MapMaking,\n  Masonry,\n  Medicine,\n  Navigation,\n  NuclearFission,\n  Pottery,\n  Railroad,\n  Religion,\n  SpaceFlight,\n  TheoryOfGravity,\n} from '@civ-clone/civ1-science/Advances';\nimport { Build, IBuildCriterion } from '@civ-clone/core-city-build/Rules/Build';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport Advance from '@civ-clone/core-science/Advance';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry,\n  wonderRegistry?: WonderRegistry\n) => Build[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  wonderRegistry: WonderRegistry = wonderRegistryInstance\n): Build[] => [\n  new Build(\n    new Criterion((city: City, BuildItem: IConstructor): boolean =>\n      Object.isPrototypeOf.call(Wonder, BuildItem)\n    ),\n    new Effect(\n      (city: City, WonderType: IConstructor): IBuildCriterion =>\n        new Criterion(\n          (): boolean =>\n            wonderRegistry.filter(\n              (wonder: Wonder): boolean => wonder instanceof WonderType\n            ).length === 0\n        )\n    )\n  ),\n\n  ...(\n    [\n      [Colossus, BronzeWorking],\n      [CopernicusObservatory, Astronomy],\n      [GreatLibrary, Literacy],\n      [GreatWall, Masonry],\n      [HangingGardens, Pottery],\n      [Lighthouse, MapMaking],\n      [MagellansExpedition, Navigation],\n      [Oracle, CeremonialBurial],\n      [Pyramids, Masonry],\n      [ApolloProgram, SpaceFlight],\n      [CureForCancer, GeneticEngineering],\n      [DarwinsVoyage, Railroad],\n      [HooverDam, Electronics],\n      [IsaacNewtonsCollege, TheoryOfGravity],\n      [JsBachsCathedral, Religion],\n      [ManhattanProject, NuclearFission],\n      [MichelangelosChapel, Religion],\n      [SetiProgram, Computers],\n      [ShakespearesTheatre, Medicine],\n      [UnitedNations, Communism],\n      [WomensSuffrage, Industrialization],\n    ] as [typeof Wonder, typeof Advance][]\n  ).map(\n    ([UnitType, RequiredAdvance]): Build =>\n      new Build(\n        new Criterion(\n          (city: City, BuildItem: IConstructor): boolean =>\n            BuildItem === UnitType\n        ),\n        new Effect(\n          (city: City): IBuildCriterion =>\n            new Criterion((): boolean =>\n              playerResearchRegistry\n                .getByPlayer(city.player())\n                .completed(RequiredAdvance)\n            )\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  ApolloProgram,\n  Colossus,\n  CopernicusObservatory,\n  CureForCancer,\n  DarwinsVoyage,\n  GreatLibrary,\n  GreatWall,\n  HangingGardens,\n  HooverDam,\n  IsaacNewtonsCollege,\n  JsBachsCathedral,\n  Lighthouse,\n  MagellansExpedition,\n  ManhattanProject,\n  MichelangelosChapel,\n  Oracle,\n  Pyramids,\n  SetiProgram,\n  ShakespearesTheatre,\n  UnitedNations,\n  WomensSuffrage,\n} from '../../Wonders';\nimport {\n  BuildCost,\n  buildCost,\n} from '@civ-clone/core-city-build/Rules/BuildCost';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\nimport Buildable from '@civ-clone/core-city-build/Buildable';\n\nexport const getRules: () => BuildCost[] = (): BuildCost[] => [\n  ...(\n    [\n      [ApolloProgram, 600],\n      [Colossus, 200],\n      [CopernicusObservatory, 300],\n      [CureForCancer, 600],\n      [DarwinsVoyage, 300],\n      [GreatLibrary, 300],\n      [GreatWall, 300],\n      [HangingGardens, 300],\n      [HooverDam, 600],\n      [IsaacNewtonsCollege, 400],\n      [JsBachsCathedral, 400],\n      [Lighthouse, 200],\n      [MagellansExpedition, 400],\n      [ManhattanProject, 600],\n      [MichelangelosChapel, 300],\n      [Oracle, 300],\n      [Pyramids, 300],\n      [SetiProgram, 600],\n      [ShakespearesTheatre, 400],\n      [UnitedNations, 600],\n      [WomensSuffrage, 600],\n    ] as [typeof Wonder, number][]\n  ).flatMap(([WonderType, cost]: [typeof Wonder, number]): BuildCost[] =>\n    buildCost(WonderType as unknown as typeof Buildable, cost)\n  ),\n];\n\nexport default getRules;\n", "import {\n  CityBuildRegistry,\n  instance as cityBuildRegistryInstance,\n} from '@civ-clone/core-city-build/CityBuildRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport Buildable, {\n  BuildableInstance,\n} from '@civ-clone/core-city-build/Buildable';\nimport BuildingComplete from '@civ-clone/core-city-build/Rules/BulidingComplete';\nimport CityBuild from '@civ-clone/core-city-build/CityBuild';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport { DarwinsVoyage } from '../../Wonders';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport PlayerResearch from '@civ-clone/core-science/PlayerResearch';\nimport Started from '@civ-clone/core-science/Rules/Started';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport const getRules: (\n  cityBuildRegistry?: CityBuildRegistry,\n  playerResearchRegistry?: PlayerResearchRegistry,\n  ruleRegistry?: RuleRegistry,\n  wonderRegistry?: WonderRegistry,\n  engine?: Engine\n) => BuildingComplete[] = (\n  cityBuildRegistry: CityBuildRegistry = cityBuildRegistryInstance,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  wonderRegistry: WonderRegistry = wonderRegistryInstance,\n  engine: Engine = engineInstance\n): BuildingComplete[] => [\n  new BuildingComplete(\n    new Criterion(\n      (cityBuild: CityBuild, built: BuildableInstance): boolean =>\n        built instanceof Wonder\n    ),\n    new Effect((cityBuild: CityBuild, built: BuildableInstance): void => {\n      const WonderType = built.constructor as typeof Wonder;\n\n      wonderRegistry.register(built as Wonder);\n      cityBuildRegistry\n        .filter(\n          (cityBuild: CityBuild): boolean =>\n            cityBuild.building()?.item() ===\n            (WonderType as unknown as typeof Buildable)\n        )\n        .forEach((cityBuild: CityBuild): void => cityBuild.revalidate());\n    })\n  ),\n  new BuildingComplete(\n    new Criterion(\n      (cityBuild: CityBuild, built: BuildableInstance): boolean =>\n        built instanceof Wonder\n    ),\n    new Effect((cityBuild: CityBuild, built: BuildableInstance): void => {\n      engine.emit('wonder:built', built, cityBuild.city());\n    })\n  ),\n\n  new BuildingComplete(\n    new Criterion(\n      (cityBuild: CityBuild, built: BuildableInstance): boolean =>\n        built instanceof DarwinsVoyage\n    ),\n    new Effect((cityBuild: CityBuild): void => {\n      const playerResearch = playerResearchRegistry.getByPlayer(\n          cityBuild.city().player()\n        ),\n        createOnStarted = (action: () => void) => {\n          const onStarted = new Started(\n            new Criterion(\n              (startedPlayerResearch: PlayerResearch) =>\n                startedPlayerResearch === playerResearch\n            ),\n            new Effect(() => {\n              ruleRegistry.unregister(onStarted);\n\n              action();\n            })\n          );\n\n          ruleRegistry.register(onStarted);\n        },\n        completeResearch = () => {\n          playerResearch.add(playerResearch.cost());\n\n          createOnStarted(() => playerResearch.add(playerResearch.cost()));\n        };\n\n      if (playerResearch.researching() === null) {\n        createOnStarted(() => completeResearch());\n\n        return;\n      }\n\n      completeResearch();\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport const cityHasWonder = (\n  WonderType: typeof Wonder,\n  wonderRegistry: WonderRegistry = wonderRegistryInstance\n) =>\n  new Criterion((city: City): boolean =>\n    wonderRegistry\n      .getByCity(city)\n      .some((wonder: Wonder): boolean => wonder instanceof WonderType)\n  );\n\nexport const playerHasWonder = (\n  WonderType: typeof Wonder,\n  wonderRegistry: WonderRegistry = wonderRegistryInstance\n) =>\n  new Criterion((item: City | Unit): boolean =>\n    wonderRegistry\n      .getByPlayer(item.player())\n      .some((wonder: Wonder): boolean => wonder instanceof WonderType)\n  );\n", "import {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport Advance from '@civ-clone/core-science/Advance';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const discoveredByPlayer = (\n  AdvanceType: typeof Advance,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n) =>\n  new Criterion((item: City | Unit): boolean =>\n    playerResearchRegistry.getByPlayer(item.player()).completed(AdvanceType)\n  );\n\nexport const notDiscoveredByAnyPlayer = (\n  AdvanceType: typeof Advance | null,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n) =>\n  new Criterion(\n    (): boolean =>\n      AdvanceType === null ||\n      !playerResearchRegistry.some((playerResearch) =>\n        playerResearch.completed(AdvanceType)\n      )\n  );\n\nexport const notDiscoveredByPlayer = (\n  AdvanceType: typeof Advance | null,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n) =>\n  new Criterion(\n    (item: City | Unit): boolean =>\n      AdvanceType === null ||\n      !playerResearchRegistry.getByPlayer(item.player()).completed(AdvanceType)\n  );\n", "import {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport City from '@civ-clone/core-city/City';\n\nexport const hasCityImprovement = (\n  CityImprovementType: typeof CityImprovement,\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance\n) =>\n  new Criterion((city: City) =>\n    cityImprovementRegistry\n      .getByCity(city)\n      .some((cityImprovement) => cityImprovement instanceof CityImprovementType)\n  );\n", "import {\n  Cathedral,\n  Temple,\n} from '@civ-clone/civ1-city-improvement/CityImprovements';\nimport {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '@civ-clone/core-city-improvement/CityImprovementRegistry';\nimport {\n  Communism,\n  Electronics,\n  Mysticism,\n  Religion,\n} from '@civ-clone/civ1-science/Advances';\nimport {\n  JsBachsCathedral,\n  MichelangelosChapel,\n  Oracle,\n  ShakespearesTheatre,\n  WomensSuffrage,\n} from '../../Wonders';\nimport {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '@civ-clone/core-government/PlayerGovernmentRegistry';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport { cityHasWonder, playerHasWonder } from '../lib/hasWonder';\nimport {\n  discoveredByPlayer,\n  notDiscoveredByAnyPlayer,\n  notDiscoveredByPlayer,\n} from '../lib/hasDiscovered';\nimport City from '@civ-clone/core-city/City';\nimport Cost from '@civ-clone/core-city/Rules/Cost';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Low } from '@civ-clone/core-rule/Priorities';\nimport { MilitaryUnhappiness } from '@civ-clone/civ1-city-happiness/Yields';\nimport Priority from '@civ-clone/core-rule/Priority';\nimport { Unhappiness } from '@civ-clone/civ1-city/Yields';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { hasCityImprovement } from '../lib/hasCityImprovement';\nimport { reduceYield } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules: (\n  cityImprovementRegistry?: CityImprovementRegistry,\n  playerGovernmentRegistry?: PlayerGovernmentRegistry,\n  playerResearchRegistry?: PlayerResearchRegistry,\n  unitRegistry?: UnitRegistry,\n  wonderRegistry?: WonderRegistry\n) => Cost[] = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance,\n  playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  wonderRegistry: WonderRegistry = wonderRegistryInstance\n): Cost[] => [\n  new Cost(\n    new Low(),\n    playerHasWonder(Oracle, wonderRegistry),\n    hasCityImprovement(Temple, cityImprovementRegistry),\n    notDiscoveredByPlayer(Mysticism, playerResearchRegistry),\n    notDiscoveredByAnyPlayer(Religion, playerResearchRegistry),\n    new Effect(\n      (city: City, yields: Yield[]): Yield =>\n        new Unhappiness(\n          -Math.min(1, reduceYield(yields, Unhappiness)),\n          Oracle.name\n        )\n    )\n  ),\n\n  new Cost(\n    new Low(),\n    playerHasWonder(Oracle, wonderRegistry),\n    hasCityImprovement(Temple, cityImprovementRegistry),\n    discoveredByPlayer(Mysticism, playerResearchRegistry),\n    notDiscoveredByAnyPlayer(Religion, playerResearchRegistry),\n    new Effect(\n      (city: City, yields: Yield[]): Yield =>\n        new Unhappiness(\n          -Math.min(2, reduceYield(yields, Unhappiness)),\n          Oracle.name\n        )\n    )\n  ),\n\n  new Cost(\n    new Priority(4000), // X Low\n    cityHasWonder(ShakespearesTheatre, wonderRegistry),\n    notDiscoveredByAnyPlayer(Electronics, playerResearchRegistry),\n    new Effect(\n      (city: City, yields: Yield[]): Yield =>\n        new Unhappiness(\n          -reduceYield(yields, Unhappiness),\n          ShakespearesTheatre.name\n        )\n    )\n  ),\n\n  new Cost(\n    new Low(),\n    // TODO: path check to city that has it to check it's on the same continent...\n    playerHasWonder(JsBachsCathedral, wonderRegistry),\n    new Effect(\n      (city: City, yields: Yield[]): Yield =>\n        new Unhappiness(\n          -Math.min(2, reduceYield(yields, Unhappiness)),\n          JsBachsCathedral.name\n        )\n    )\n  ),\n\n  new Cost(\n    new Low(),\n    playerHasWonder(MichelangelosChapel, wonderRegistry),\n    hasCityImprovement(Cathedral, cityImprovementRegistry),\n    notDiscoveredByAnyPlayer(Communism, playerResearchRegistry),\n    new Effect(\n      (city: City, yields: Yield[]): Yield =>\n        new Unhappiness(\n          -Math.min(4, reduceYield(yields, Unhappiness)),\n          MichelangelosChapel.name\n        )\n    )\n  ),\n\n  new Cost(\n    new Low(),\n    playerHasWonder(WomensSuffrage, wonderRegistry),\n    new Criterion((city: City, cityYields: Yield[]): boolean =>\n      cityYields.some((cityYield) => cityYield instanceof MilitaryUnhappiness)\n    ),\n    new Effect((city: City, cityYields: Yield[]): Yield[] =>\n      cityYields.flatMap((cityYield) => {\n        if (!(cityYield instanceof MilitaryUnhappiness)) {\n          return [];\n        }\n\n        // TODO: custom `Yield` for this?\n        return new Unhappiness(-1, WomensSuffrage.name);\n      })\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport Destroyed from '@civ-clone/core-city/Rules/Destroyed';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport const getRules: (wonderRegistry?: WonderRegistry) => Destroyed[] = (\n  wonderRegistry: WonderRegistry = wonderRegistryInstance\n): Destroyed[] => [\n  new Destroyed(\n    new Criterion((city: City) => wonderRegistry.getByCity(city).length > 0),\n    new Effect((city: City) =>\n      wonderRegistry\n        .getByCity(city)\n        .forEach((wonder: Wonder) => wonderRegistry.unregister(wonder))\n    )\n  ),\n];\n\nexport default getRules;\n", "import { Colossus, CureForCancer, HangingGardens } from '../../Wonders';\nimport { Electricity, Invention } from '@civ-clone/civ1-science/Advances';\nimport { Happiness, Trade } from '@civ-clone/civ1-city/Yields';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport { cityHasWonder, playerHasWonder } from '../lib/hasWonder';\nimport Advance from '@civ-clone/core-science/Advance';\nimport City from '@civ-clone/core-city/City';\nimport CityYield from '@civ-clone/core-city/Rules/Yield';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Priority from '@civ-clone/core-rule/Priority';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { notDiscoveredByAnyPlayer } from '../lib/hasDiscovered';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry,\n  wonderRegistry?: WonderRegistry\n) => CityYield[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  wonderRegistry: WonderRegistry = wonderRegistryInstance\n): CityYield[] => [\n  new CityYield(\n    new Priority(500),\n    cityHasWonder(Colossus, wonderRegistry),\n    notDiscoveredByAnyPlayer(Electricity, playerResearchRegistry),\n    new Effect((city: City): Yield => {\n      return new Trade(\n        city\n          .tilesWorked()\n          .filter((tile) =>\n            tile.yields().some((tileYield: Yield) => tileYield instanceof Trade)\n          ).length,\n        Colossus.name\n      );\n    })\n  ),\n\n  ...(\n    [\n      [HangingGardens, 1, Invention],\n      [CureForCancer, 1, null],\n    ] as [typeof Wonder, number, typeof Advance | null][]\n  ).map(\n    ([WonderType, happiness, ObsoletingAdvance]) =>\n      new CityYield(\n        playerHasWonder(WonderType, wonderRegistry),\n        notDiscoveredByAnyPlayer(ObsoletingAdvance, playerResearchRegistry),\n        new Effect((): Yield => new Happiness(happiness, WonderType.name))\n      )\n  ),\n];\n\nexport default getRules;\n", "import { CopernicusObservatory, SetiProgram } from '../../Wonders';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport { cityHasWonder, playerHasWonder } from '../lib/hasWonder';\nimport Advance from '@civ-clone/core-science/Advance';\nimport { Automobile } from '@civ-clone/civ1-science/Advances';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Low } from '@civ-clone/core-rule/Priorities';\nimport { Research } from '@civ-clone/civ1-city/Yields';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport YieldModifier from '@civ-clone/core-city/Rules/YieldModifier';\nimport { notDiscoveredByAnyPlayer } from '../lib/hasDiscovered';\nimport { reduceYield } from '@civ-clone/core-yield/lib/reduceYields';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry,\n  wonderRegistry?: WonderRegistry\n) => YieldModifier[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  wonderRegistry: WonderRegistry = wonderRegistryInstance\n) => [\n  ...(\n    [[CopernicusObservatory, Research, 1, Automobile]] as [\n      typeof Wonder,\n      typeof Yield,\n      number,\n      typeof Advance | null\n    ][]\n  ).map(\n    ([WonderType, YieldType, multiplier, ObsoletingAdvance]): YieldModifier =>\n      new YieldModifier(\n        new Low(),\n        cityHasWonder(WonderType, wonderRegistry),\n        notDiscoveredByAnyPlayer(ObsoletingAdvance, playerResearchRegistry),\n        new Effect(\n          (city: City, yields: Yield[]): Yield =>\n            new YieldType(\n              reduceYield(yields, YieldType) * multiplier,\n              WonderType.name\n            )\n        )\n      )\n  ),\n\n  ...(\n    [[SetiProgram, Research, 0.5, null]] as [\n      typeof Wonder,\n      typeof Yield,\n      number,\n      typeof Advance | null\n    ][]\n  ).map(\n    ([WonderType, YieldType, multiplier, ObsoletingAdvance]): YieldModifier =>\n      new YieldModifier(\n        new Low(),\n        playerHasWonder(WonderType, wonderRegistry),\n        notDiscoveredByAnyPlayer(ObsoletingAdvance, playerResearchRegistry),\n        new Effect(\n          (city: City, yields: Yield[]): Yield =>\n            new YieldType(\n              reduceYield(yields, YieldType) * multiplier,\n              WonderType.name\n            )\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import City from '@civ-clone/core-city/City';\nimport Rule from '@civ-clone/core-rule/Rule';\nimport Wonder from '../Wonder';\n\nexport class Obsolete extends Rule<[Wonder, City], void> {}\n\nexport default Obsolete;\n", "import {\n  Automobile,\n  Communism,\n  Electricity,\n  Electronics,\n  Gunpowder,\n  Invention,\n  Magnetism,\n  NuclearFission,\n  Religion,\n  University,\n} from '@civ-clone/civ1-science/Advances';\nimport {\n  Colossus,\n  CopernicusObservatory,\n  GreatLibrary,\n  GreatWall,\n  HangingGardens,\n  IsaacNewtonsCollege,\n  Lighthouse,\n  MichelangelosChapel,\n  Oracle,\n  Pyramids,\n  ShakespearesTheatre,\n} from '../../Wonders';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport Advance from '@civ-clone/core-science/Advance';\nimport Complete from '@civ-clone/core-science/Rules/Complete';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Obsolete from '@civ-clone/core-wonder/Rules/Obsolete';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerResearch from '@civ-clone/core-science/PlayerResearch';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry,\n  ruleRegistry?: RuleRegistry,\n  wonderRegistry?: WonderRegistry\n) => Complete[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  wonderRegistry: WonderRegistry = wonderRegistryInstance\n): Complete[] => [\n  new Complete(\n    new Criterion((): boolean =>\n      wonderRegistry.some(\n        (wonder: Wonder): boolean => wonder instanceof GreatLibrary\n      )\n    ),\n    new Criterion(\n      (playerResearch: PlayerResearch, completedResearch: Advance): boolean => {\n        const [owningPlayer] = wonderRegistry\n            .filter((wonder: Wonder): boolean => wonder instanceof GreatLibrary)\n            .map(\n              (greatLibrary: GreatLibrary): Player =>\n                greatLibrary.city().player()\n            ),\n          owningPlayerResearch =\n            playerResearchRegistry.getByPlayer(owningPlayer);\n\n        return !owningPlayerResearch.completed(completedResearch.sourceClass());\n      }\n    ),\n    new Criterion(\n      (playerResearch: PlayerResearch, completedResearch: Advance): boolean =>\n        playerResearchRegistry.filter(\n          (playerResearch: PlayerResearch): boolean =>\n            playerResearch.completed(completedResearch.sourceClass())\n        ).length >= 3\n    ),\n    new Effect(\n      (playerResearch: PlayerResearch, completedResearch: Advance): void => {\n        const [owningPlayer] = wonderRegistry\n            .filter((wonder: Wonder): boolean => wonder instanceof GreatLibrary)\n            .map(\n              (greatLibrary: GreatLibrary): Player =>\n                greatLibrary.city().player()\n            ),\n          owningPlayerResearch =\n            playerResearchRegistry.getByPlayer(owningPlayer);\n\n        return owningPlayerResearch.addAdvance(completedResearch.sourceClass());\n      }\n    )\n  ),\n\n  ...(\n    [\n      [Colossus, Electricity],\n      [CopernicusObservatory, Automobile],\n      [GreatLibrary, University],\n      [GreatWall, Gunpowder],\n      [HangingGardens, Invention],\n      [IsaacNewtonsCollege, NuclearFission],\n      [Lighthouse, Magnetism],\n      [MichelangelosChapel, Communism],\n      [Oracle, Religion],\n      [Pyramids, Communism],\n      [ShakespearesTheatre, Electronics],\n    ] as [typeof Wonder, typeof Advance][]\n  ).map(\n    ([WonderType, ObsoletingAdvance]: [\n      typeof Wonder,\n      typeof Advance\n    ]): Complete =>\n      new Complete(\n        new Criterion(() =>\n          wonderRegistry\n            .entries()\n            .some((wonder: Wonder) => wonder instanceof WonderType)\n        ),\n        new Criterion(\n          (playerResearch: PlayerResearch, advance: Advance) =>\n            advance instanceof ObsoletingAdvance\n        ),\n        new Effect(() => {\n          const [wonder] = wonderRegistry.filter(\n            (wonder: Wonder) => wonder instanceof WonderType\n          );\n\n          ruleRegistry.process(Obsolete, wonder, wonder.city());\n        })\n      )\n  ),\n];\n\nexport default getRules;\n", "import { Lighthouse, MagellansExpedition } from '../../Wonders';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  WonderRegistry,\n  instance as wonderRegistryInstance,\n} from '@civ-clone/core-wonder/WonderRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { Low } from '@civ-clone/core-rule/Priorities';\nimport { Magnetism } from '@civ-clone/civ1-science/Advances';\nimport { Movement } from '@civ-clone/core-unit/Yields';\nimport { Naval } from '@civ-clone/civ1-unit/Types';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitYield from '@civ-clone/core-unit/Rules/Yield';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport { notDiscoveredByPlayer } from '../lib/hasDiscovered';\nimport { playerHasWonder } from '../lib/hasWonder';\n\nexport const getRules: (\n  wonderRegistry?: WonderRegistry,\n  playerResearchRegistry?: PlayerResearchRegistry\n) => UnitYield[] = (\n  wonderRegistry: WonderRegistry = wonderRegistryInstance,\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n): UnitYield[] => [\n  new UnitYield(\n    new Low(),\n    new Criterion(\n      (unit: Unit, unitYield: Yield): boolean => unitYield instanceof Movement\n    ),\n    new Criterion((unit: Unit): boolean => unit instanceof Naval),\n    playerHasWonder(Lighthouse, wonderRegistry),\n    notDiscoveredByPlayer(Magnetism, playerResearchRegistry),\n    new Effect((unit: Unit, unitYield: Yield): void => unitYield.add(1))\n  ),\n  new UnitYield(\n    new Low(),\n    new Criterion(\n      (unit: Unit, unitYield: Yield): boolean => unitYield instanceof Movement\n    ),\n    new Criterion((unit: Unit): boolean => unit instanceof Naval),\n    playerHasWonder(MagellansExpedition, wonderRegistry),\n    new Effect((unit: Unit, unitYield: Yield): void => unitYield.add(1))\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport City from '@civ-clone/core-city/City';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Obsolete from '@civ-clone/core-wonder/Rules/Obsolete';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\n\nexport const getRules: (engine?: Engine) => Obsolete[] = (\n  engine: Engine = engineInstance\n): Obsolete[] => [\n  new Obsolete(\n    new Effect((wonder: Wonder, city: City) => {\n      engine.emit('wonder:obsolete', wonder, city);\n    })\n  ),\n];\n\nexport default getRules;\n", "import cityBuild from './Rules/City/build';\nimport cityBuildCost from './Rules/City/build-cost';\nimport cityBuildingComplete from './Rules/City/building-complete';\nimport cityCost from './Rules/City/cost';\nimport cityDestroyed from './Rules/City/destroyed';\nimport cityYield from './Rules/City/yield';\nimport cityYieldModifier from './Rules/City/yield-modifier';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport playerResearchComplete from './Rules/Player/research-complete';\nimport unitYield from './Rules/Unit/yield';\nimport wonderObsolete from './Rules/Wonder/obsolete';\n\nruleRegistryInstance.register(\n  ...cityBuild(),\n  ...cityBuildCost(),\n  ...cityBuildingComplete(),\n  ...cityCost(),\n  ...cityDestroyed(),\n  ...cityYield(),\n  ...cityYieldModifier(),\n  ...playerResearchComplete(),\n  ...unitYield(),\n  ...wonderObsolete()\n);\n", null, "import {\n  Arctic,\n  Desert,\n  Forest,\n  Grassland,\n  Hills,\n  Jungle,\n  Mountains,\n  Plains,\n  River,\n  Swamp,\n  Tundra,\n} from '../../Terrains';\nimport { Irrigation, Mine, Railroad, Road } from '../../TileImprovements';\nimport {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '@civ-clone/core-science/PlayerResearchRegistry';\nimport {\n  BridgeBuilding,\n  Railroad as RailroadAdvance,\n} from '@civ-clone/civ1-science/Advances';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport Advance from '@civ-clone/core-science/Advance';\nimport Available from '@civ-clone/core-tile-improvement/Rules/Available';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Player from '@civ-clone/core-player/Player';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\n\nexport const getRules: (\n  playerResearchRegistry?: PlayerResearchRegistry,\n  tileImprovementRegistry?: TileImprovementRegistry\n) => Available[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance,\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance\n): Available[] => [\n  // Improvement requires a specific terrain type\n  ...(\n    [\n      [Irrigation, Desert, Grassland, Hills, Plains, River],\n      [Mine, Desert, Hills, Mountains],\n      [\n        Road,\n        Arctic,\n        Desert,\n        Forest,\n        Grassland,\n        Hills,\n        Jungle,\n        Mountains,\n        Plains,\n        Swamp,\n        Tundra,\n      ],\n    ] as [typeof TileImprovement, ...typeof Terrain[]][]\n  ).map(\n    ([Improvement, ...AvailableTerrains]: [\n      typeof TileImprovement,\n      ...typeof Terrain[]\n    ]): Available =>\n      new Available(\n        new Criterion(\n          (\n            tile: Tile,\n            AvailableTileImprovement: typeof TileImprovement\n          ): boolean => AvailableTileImprovement === Improvement\n        ),\n        new Criterion((tile: Tile): boolean =>\n          AvailableTerrains.some((Terrain) => tile.terrain() instanceof Terrain)\n        ),\n        new Criterion(\n          (\n            tile: Tile,\n            AvailableTileImprovement: typeof TileImprovement\n          ): boolean =>\n            !tileImprovementRegistry\n              .getByTile(tile)\n              .some(\n                (improvement: TileImprovement): boolean =>\n                  improvement instanceof AvailableTileImprovement\n              )\n        )\n      )\n  ),\n\n  // Improvement requires a specific terrain type and an advance\n  ...(\n    [[Road, BridgeBuilding, River]] as [\n      typeof TileImprovement,\n      typeof Advance,\n      ...typeof Terrain[]\n    ][]\n  ).map(\n    ([Improvement, RequiredAdvance, ...AvailableTerrains]: [\n      typeof TileImprovement,\n      typeof Advance,\n      ...typeof Terrain[]\n    ]): Available =>\n      new Available(\n        new Criterion(\n          (\n            tile: Tile,\n            AvailableTileImprovement: typeof TileImprovement\n          ): boolean => AvailableTileImprovement === Improvement\n        ),\n        new Criterion((tile: Tile): boolean =>\n          AvailableTerrains.some(\n            (TerrainType) => tile.terrain() instanceof TerrainType\n          )\n        ),\n        new Criterion(\n          (\n            tile: Tile,\n            AvailableTileImprovement: typeof TileImprovement\n          ): boolean =>\n            !tileImprovementRegistry\n              .getByTile(tile)\n              .some(\n                (improvement: TileImprovement): boolean =>\n                  improvement instanceof AvailableTileImprovement\n              )\n        ),\n        new Criterion(\n          (\n            tile: Tile,\n            AvailableTileImprovement: typeof TileImprovement,\n            player: Player\n          ): boolean =>\n            playerResearchRegistry\n              .getByPlayer(player)\n              .completed(RequiredAdvance)\n        )\n      )\n  ),\n\n  // Improvement requires a specific terrain type, an existing improvement and an advance\n  ...(\n    [\n      [\n        Railroad,\n        RailroadAdvance,\n        Road,\n        Arctic,\n        Desert,\n        Forest,\n        Grassland,\n        Hills,\n        Jungle,\n        Mountains,\n        Plains,\n        River,\n        Swamp,\n        Tundra,\n      ],\n    ] as [\n      typeof TileImprovement,\n      typeof Advance,\n      typeof TileImprovement,\n      ...typeof Terrain[]\n    ][]\n  ).map(\n    ([\n      Improvement,\n      RequiredAdvance,\n      RequiredImprovement,\n      ...AvailableTerrains\n    ]: [\n      typeof TileImprovement,\n      typeof Advance,\n      typeof TileImprovement,\n      ...typeof Terrain[]\n    ]): Available =>\n      new Available(\n        new Criterion(\n          (\n            tile: Tile,\n            AvailableTileImprovement: typeof TileImprovement\n          ): boolean => AvailableTileImprovement === Improvement\n        ),\n        new Criterion((tile: Tile): boolean =>\n          AvailableTerrains.some(\n            (TerrainType) => tile.terrain() instanceof TerrainType\n          )\n        ),\n        new Criterion(\n          (\n            tile: Tile,\n            AvailableTileImprovement: typeof TileImprovement\n          ): boolean =>\n            !tileImprovementRegistry\n              .getByTile(tile)\n              .some(\n                (improvement: TileImprovement): boolean =>\n                  improvement instanceof AvailableTileImprovement\n              )\n        ),\n        new Criterion((tile: Tile): boolean =>\n          tileImprovementRegistry\n            .getByTile(tile)\n            .some(\n              (tileImprovement) =>\n                tileImprovement instanceof RequiredImprovement\n            )\n        ),\n        new Criterion(\n          (\n            tile: Tile,\n            AvailableTileImprovement: typeof TileImprovement,\n            player: Player\n          ): boolean =>\n            playerResearchRegistry\n              .getByPlayer(player)\n              .completed(RequiredAdvance)\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport { Irrigation, Mine } from '../../TileImprovements';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport Built from '@civ-clone/core-tile-improvement/Rules/Built';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\n\nexport const getRules: (\n  tileImprovementRegistry?: TileImprovementRegistry,\n  engine?: Engine\n) => Built[] = (\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n  engine: Engine = engineInstance\n): Built[] => [\n  new Built(\n    new Criterion((tile: Tile, tileImprovement: TileImprovement): boolean =>\n      tileImprovementRegistry\n        .getByTile(tile)\n        .every(\n          (existingTileImprovement: TileImprovement) =>\n            tileImprovement.constructor !== existingTileImprovement.constructor\n        )\n    ),\n    new Effect((tile: Tile, tileImprovement: TileImprovement): void =>\n      tileImprovementRegistry.register(tileImprovement)\n    )\n  ),\n  new Built(new Effect((tile: Tile): void => tile.clearYieldCache(null))),\n  new Built(\n    new Effect((tile: Tile, tileImprovement: TileImprovement): void => {\n      engine.emit('tile-improvement:built', tile, tileImprovement);\n    })\n  ),\n  ...(\n    [\n      [Mine, Irrigation],\n      [Irrigation, Mine],\n    ] as [typeof TileImprovement, typeof TileImprovement][]\n  ).map(\n    ([Improvement, ToRemove]) =>\n      new Built(\n        new Criterion(\n          (tile: Tile, tileImprovement: TileImprovement) =>\n            tileImprovement instanceof Improvement\n        ),\n        new Criterion((tile: Tile) =>\n          tileImprovementRegistry\n            .getByTile(tile)\n            .some(\n              (tileImprovement: TileImprovement) =>\n                tileImprovement instanceof ToRemove\n            )\n        ),\n        new Effect((tile: Tile) =>\n          tileImprovementRegistry.unregister(\n            ...tileImprovementRegistry\n              .getByTile(tile)\n              .filter(\n                (tileImprovement: TileImprovement) =>\n                  tileImprovement instanceof ToRemove\n              )\n          )\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\nimport TerrainFeature from './TerrainFeature';\n\nexport interface IAvailableTerrainFeatureRegistry\n  extends IConstructorRegistry<TerrainFeature> {}\n\nexport class AvailableTerrainFeatureRegistry\n  extends ConstructorRegistry<TerrainFeature>\n  implements IAvailableTerrainFeatureRegistry\n{\n  constructor() {\n    super(TerrainFeature);\n  }\n}\n\nexport const instance: AvailableTerrainFeatureRegistry =\n  new AvailableTerrainFeatureRegistry();\n\nexport default AvailableTerrainFeatureRegistry;\n", "import {\n  AvailableTerrainFeatureRegistry,\n  instance as availableTerrainFeatureRegistryInstance,\n} from '@civ-clone/core-terrain-feature/AvailableTerrainFeatureRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Created from '@civ-clone/core-terrain/Rules/Created';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Feature from '@civ-clone/core-terrain-feature/Rules/Feature';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport const getRules = (\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  availableTerrainFeatureRegistry: AvailableTerrainFeatureRegistry = availableTerrainFeatureRegistryInstance\n) => [\n  new Created(\n    new Effect((terrain: Terrain): void => {\n      const rules = ruleRegistry.get(Feature);\n\n      availableTerrainFeatureRegistry\n        .entries()\n        .forEach((TerrainFeatureType: typeof TerrainFeature): void =>\n          rules\n            .filter((rule: Feature): boolean =>\n              rule.validate(TerrainFeatureType, terrain)\n            )\n            .forEach((rule: Feature): void =>\n              rule.process(TerrainFeatureType, terrain)\n            )\n        );\n    })\n  ),\n];\n\nexport default getRules;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\n\nexport type IDistribution = {\n  cluster?: boolean;\n  clusterChance?: number;\n  coverage?: number;\n  fill?: boolean;\n  from?: number;\n  path?: boolean;\n  pathChance?: number;\n  to?: number;\n};\n\nexport class Distribution extends Rule<\n  [typeof Terrain, Terrain[]],\n  IDistribution[]\n> {}\n\nexport default Distribution;\n", "import {\n  Arctic,\n  Desert,\n  Forest,\n  Grassland,\n  Hills,\n  Jungle,\n  Mountains,\n  Ocean,\n  Plains,\n  River,\n  Swamp,\n  Tundra,\n} from '../../Terrains';\nimport {\n  Distribution,\n  IDistribution,\n} from '@civ-clone/core-world-generator/Rules/Distribution';\nimport { Land, Water } from '@civ-clone/core-terrain/Types';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\n\nexport const getRules: () => Distribution[] = (): Distribution[] => [\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Arctic\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0,\n        to: 0.01,\n        fill: true,\n      },\n      {\n        from: 0.01,\n        to: 0.02,\n      },\n      {\n        from: 0.98,\n        to: 0.99,\n      },\n      {\n        from: 0.99,\n        to: 1,\n        fill: true,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Desert\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0.4,\n        to: 0.45,\n      },\n      {\n        from: 0.45,\n        to: 0.55,\n        coverage: 0.025,\n        cluster: true,\n        clusterChance: 0.1,\n      },\n      {\n        from: 0.55,\n        to: 0.6,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Forest\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0.05,\n        to: 0.2,\n      },\n      {\n        from: 0.2,\n        to: 0.4,\n        cluster: true,\n        clusterChance: 0.1,\n        coverage: 0.1,\n      },\n      {\n        from: 0.4,\n        to: 0.6,\n      },\n      {\n        from: 0.6,\n        to: 0.8,\n        cluster: true,\n        clusterChance: 0.1,\n        coverage: 0.1,\n      },\n      {\n        from: 0.8,\n        to: 0.95,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Grassland\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        fill: true,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Hills\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0.1,\n        to: 0.9,\n        path: true,\n        pathChance: 0.1,\n        coverage: 0.06,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Jungle\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData) =>\n      mapData.some((terrain) => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0.3,\n        to: 0.45,\n        cluster: true,\n        clusterChance: 0.2,\n        coverage: 0.08,\n      },\n      {\n        from: 0.55,\n        to: 0.7,\n        cluster: true,\n        clusterChance: 0.2,\n        coverage: 0.08,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Mountains\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0.01,\n        to: 0.1,\n        coverage: 0.3,\n        path: true,\n      },\n      {\n        from: 0.1,\n        to: 0.9,\n        path: true,\n      },\n      {\n        from: 0.9,\n        to: 0.99,\n        coverage: 0.3,\n        path: true,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Ocean\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain.constructor === Water)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        fill: true,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Plains\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0.01,\n        to: 0.2,\n        coverage: 0.3,\n      },\n      {\n        from: 0.2,\n        to: 0.4,\n      },\n      {\n        from: 0.1,\n        to: 0.4,\n        cluster: true,\n      },\n      {\n        from: 0.4,\n        to: 0.6,\n      },\n      {\n        from: 0.6,\n        to: 0.8,\n      },\n      {\n        from: 0.6,\n        to: 0.9,\n        cluster: true,\n      },\n      {\n        from: 0.8,\n        to: 0.99,\n        coverage: 0.3,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === River\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0.1,\n        to: 0.9,\n        coverage: 0.1,\n        path: true,\n        pathChance: 0.5,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion(\n      (TerrainType: typeof Terrain): boolean => TerrainType === Swamp\n    ),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0.2,\n        to: 0.4,\n        cluster: true,\n      },\n      {\n        from: 0.6,\n        to: 0.8,\n        cluster: true,\n      },\n    ])\n  ),\n\n  new Distribution(\n    new Criterion((TerrainType: typeof Terrain) => TerrainType === Tundra),\n    new Criterion((TerrainType: typeof Terrain, mapData: Terrain[]): boolean =>\n      mapData.some((terrain: Terrain): boolean => terrain instanceof Land)\n    ),\n    new Effect((): IDistribution[] => [\n      {\n        from: 0.01,\n        to: 0.15,\n        cluster: true,\n        coverage: 0.15,\n      },\n      {\n        from: 0.85,\n        to: 0.99,\n        cluster: true,\n        coverage: 0.15,\n      },\n    ])\n  ),\n];\n\nexport default getRules;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\n\nexport class DistributionGroups extends Rule<[], typeof Terrain[]> {}\n\nexport default DistributionGroups;\n", "import {\n  Arctic,\n  Desert,\n  Forest,\n  Grassland,\n  Hills,\n  Jungle,\n  Mountains,\n  Ocean,\n  Plains,\n  River,\n  Swamp,\n  Tundra,\n} from '../../Terrains';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport DistributionGroups from '@civ-clone/core-world-generator/Rules/DistributionGroups';\n\nexport const getRules: () => DistributionGroups[] =\n  (): DistributionGroups[] => [\n    new DistributionGroups(\n      // first pass (root terrain types)\n      new Effect(() => [\n        Ocean,\n        Grassland,\n        Swamp,\n        Mountains,\n        Jungle,\n        Hills,\n        Forest,\n        Desert,\n        Plains,\n        Tundra,\n        Arctic,\n        River,\n      ])\n    ),\n  ];\n\nexport default getRules;\n", "import {\n  Arctic,\n  Desert,\n  Forest,\n  Grassland,\n  Hills,\n  Jungle,\n  Mountains,\n  Ocean,\n  Plains,\n  River,\n  Swamp,\n  Tundra,\n} from '../../Terrains';\nimport {\n  Coal,\n  Fish,\n  Game,\n  Gems,\n  Gold,\n  Horse,\n  Oasis,\n  Oil,\n  Seal,\n  Shield,\n} from '../../TerrainFeatures';\nimport {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '@civ-clone/core-terrain-feature/TerrainFeatureRegistry';\nimport {\n  Feature,\n  feature,\n} from '@civ-clone/core-terrain-feature/Rules/Feature';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\n\nexport const getRules: (\n  terrainFeatureRegistry?: TerrainFeatureRegistry\n) => Feature[] = (\n  terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance\n): Feature[] => {\n  const baseChance = 0.2;\n\n  return [\n    ...(\n      [\n        [Coal, baseChance, Hills],\n        [Fish, baseChance, Ocean],\n        [Game, baseChance, Forest, Tundra],\n        [Gems, baseChance, Jungle],\n        [Gold, baseChance, Mountains],\n        [Horse, baseChance, Plains],\n        [Oasis, baseChance, Desert],\n        [Oil, baseChance, Swamp],\n        [Seal, baseChance, Arctic],\n        [Shield, 0.5, Grassland, River],\n      ] as [typeof TerrainFeature, number, ...typeof Terrain[]][]\n    ).flatMap(\n      ([FeatureType, chance, ...terrains]: [\n        typeof TerrainFeature,\n        number,\n        ...typeof Terrain[]\n      ]): Feature[] =>\n        terrains.flatMap((TerrainType: typeof Terrain) =>\n          feature(TerrainType, FeatureType, chance, terrainFeatureRegistry)\n        )\n    ),\n  ];\n};\n\nexport default getRules;\n", "import Rule from '@civ-clone/core-rule/Rule';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '../TileImprovement';\n\nexport class Pillaged extends Rule<[Tile, TileImprovement], void> {}\n\nexport default Pillaged;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport Pillaged from '@civ-clone/core-tile-improvement/Rules/Pillaged';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\n\nexport const getRules: (\n  tileImprovementRegistry?: TileImprovementRegistry,\n  engine?: Engine\n) => Pillaged[] = (\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n  engine: Engine = engineInstance\n): Pillaged[] => [\n  new Pillaged(\n    new Criterion((tile: Tile, tileImprovement: TileImprovement): boolean =>\n      tileImprovementRegistry.getByTile(tile).includes(tileImprovement)\n    ),\n    new Effect((tile: Tile, tileImprovement: TileImprovement): void =>\n      tileImprovementRegistry.unregister(tileImprovement)\n    )\n  ),\n  new Pillaged(new Effect((tile: Tile): void => tile.clearYieldCache(null))),\n  new Pillaged(\n    new Effect((tile: Tile, tileImprovement: TileImprovement): void => {\n      engine.emit('tile-improvement:pillaged', tile, tileImprovement);\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  EarthStartTileRegistry,\n  instance as earthStartTileRegistryInstance,\n} from '@civ-clone/civ1-earth-generator/EarthStartTileRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport { Food, Trade, Production } from '../../Yields';\nimport { Grassland, Plains, River } from '../../Terrains';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport PickStartTile from '@civ-clone/core-world-generator/Rules/PickStartTile';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\nimport World from '@civ-clone/core-world/World';\n\nconst startTileCache = new Map<World, Tile[]>(),\n  tileScoreCache: Map<Tile, number> = new Map(),\n  areaScoreCache: Map<Tile, number> = new Map(),\n  tileScore = (tile: Tile, player: Player | null = null): number => {\n    if (!tileScoreCache.has(tile)) {\n      tileScoreCache.set(\n        tile,\n        tile.score(player, [\n          [Food, 8],\n          [Production, 3],\n          [Trade, 1],\n        ])\n      );\n    }\n\n    return tileScoreCache.get(tile)!;\n  },\n  areaScore = (tile: Tile, player: Player | null = null): number => {\n    if (!areaScoreCache.has(tile)) {\n      areaScoreCache.set(\n        tile,\n        tile\n          .getSurroundingArea()\n          .entries()\n          .reduce(\n            (total: number, tile: Tile): number =>\n              total + tileScore(tile, player),\n            0\n          )\n      );\n    }\n\n    return areaScoreCache.get(tile)!;\n  },\n  pickStartTiles = (world: World, engine: Engine = engineInstance) => {\n    if (!startTileCache.has(world)) {\n      engine.emit('world:generate-start-tiles');\n\n      const startingSquares = world\n        .entries()\n        .filter((tile: Tile) =>\n          [Grassland, Plains, River].some(\n            (TerrainType) => tile.terrain() instanceof TerrainType\n          )\n        )\n        .map((tile: Tile) => ({\n          tile,\n          score: areaScore(tile),\n        }))\n        .sort(({ score: scoreA }, { score: scoreB }) => scoreB - scoreA)\n        .map(({ tile }) => tile);\n\n      startTileCache.set(world, startingSquares);\n\n      engine.emit('world:start-tiles', startingSquares);\n    }\n\n    return startTileCache.get(world)!;\n  };\n\nexport const getRules = (\n  earthStartTileRegistry: EarthStartTileRegistry = earthStartTileRegistryInstance,\n  engine: Engine = engineInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): PickStartTile[] => [\n  new PickStartTile(\n    new Effect((world: World, player: Player, usedStartSquares: Tile[]) => {\n      if (engine.option('earth', false)) {\n        try {\n          return earthStartTileRegistry.getStartTileByCivilizationAndWorld(\n            player.civilization().sourceClass(),\n            world\n          );\n        } catch (e) {\n          // TODO: The Civilization isn't registered, this might pose problems if the random selection are fixed start\n          //  tiles, ideally we'd defer this selection until other `Player`s have picked.\n          usedStartSquares.push(\n            ...earthStartTileRegistry\n              .entries()\n              .map((startTile) => startTile.startTileForMap(world))\n          );\n        }\n      }\n\n      const startingSquares = pickStartTiles(world, engine);\n\n      startingSquares.forEach((tile: Tile) => {\n        if (\n          usedStartSquares.some(\n            (startSquare: Tile): boolean => startSquare.distanceFrom(tile) <= 4\n          )\n        ) {\n          startingSquares.splice(startingSquares.indexOf(tile), 1);\n        }\n      });\n\n      return startingSquares[\n        Math.floor(startingSquares.length * randomNumberGenerator())\n      ];\n    })\n  ),\n];\n\nexport default getRules;\n", "import Generator from './Generator';\nimport {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\n\nexport interface IGeneratorRegistry extends IConstructorRegistry<Generator> {}\n\nexport class GeneratorRegistry\n  extends ConstructorRegistry<Generator>\n  implements IGeneratorRegistry\n{\n  constructor() {\n    super(Generator);\n  }\n}\n\nexport const instance: GeneratorRegistry = new GeneratorRegistry();\n\nexport default GeneratorRegistry;\n", "import Generator from '../Generator';\nimport Rule from '@civ-clone/core-rule/Rule';\n\nexport class PickGenerator extends Rule<[], typeof Generator> {}\n\nexport default PickGenerator;\n", "import Rule from '@civ-clone/core-rule/Rule';\n\nexport class Start extends Rule<[], void> {}\n\nexport default Start;\n", "import {\n  DataObject,\n  IDataObject,\n} from '@civ-clone/core-data-object/DataObject';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport Built from './Rules/Built';\nimport EntityRegistry from '@civ-clone/core-registry/EntityRegistry';\nimport Generator from '@civ-clone/core-world-generator/Generator';\nimport { IRegistryIterator } from '@civ-clone/core-registry/Registry';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport Tile from './Tile';\n\nexport interface IWorld extends IDataObject {\n  build(): Promise<World>;\n  get(x: number, y: number): Tile;\n  height(): number;\n  width(): number;\n}\n\nexport class World extends DataObject implements IWorld {\n  #generator: Generator;\n  #height: number;\n  #ruleRegistry: RuleRegistry;\n  #tiles: EntityRegistry<Tile> = new EntityRegistry(Tile);\n  #width: number;\n\n  constructor(\n    generator: Generator,\n    ruleRegistry: RuleRegistry = ruleRegistryInstance\n  ) {\n    super();\n\n    this.#generator = generator;\n    this.#height = generator.height();\n    this.#width = generator.width();\n    this.#ruleRegistry = ruleRegistry;\n\n    this.addKey('height', 'tiles', 'width');\n  }\n\n  build(): Promise<World> {\n    return new Promise<World>((resolve) => {\n      this.#generator.generate().then((tiles: Terrain[]) => {\n        tiles.forEach((terrain: Terrain, i: number): void => {\n          const tile = new Tile(\n            i % this.#width,\n            Math.floor(i / this.#width),\n            terrain,\n            this,\n            this.#ruleRegistry\n          );\n\n          this.#tiles.register(tile);\n        });\n\n        this.#ruleRegistry.process(Built, this);\n\n        resolve(this);\n      });\n    });\n  }\n\n  entries(): Tile[] {\n    return this.#tiles.entries();\n  }\n\n  filter(iterator: IRegistryIterator<Tile>): Tile[] {\n    return this.entries().filter(iterator);\n  }\n\n  forEach(iterator: (item: Tile, i: number) => void): void {\n    return this.#tiles.forEach(iterator);\n  }\n\n  get(x: number, y: number): Tile {\n    return this.entries()[this.#generator.coordsToIndex(x, y)];\n  }\n\n  height(): number {\n    return this.#height;\n  }\n\n  includes(tile: Tile): boolean {\n    return this.#tiles.includes(tile);\n  }\n\n  map(iterator: (item: Tile, i: number) => any): any[] {\n    return this.#tiles.map(iterator);\n  }\n\n  register(...tiles: Tile[]): void {\n    this.#tiles.register(...tiles);\n  }\n\n  tiles(): Tile[] {\n    return this.entries();\n  }\n\n  width(): number {\n    return this.#width;\n  }\n}\n\nexport default World;\n", "import {\n  GeneratorRegistry,\n  instance as generatorRegistryInstance,\n} from '@civ-clone/core-world-generator/GeneratorRegistry';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstances,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport PickGenerator from '@civ-clone/core-world-generator/Rules/PickGenerator';\nimport Start from '@civ-clone/core-engine/Rules/Start';\nimport World from '@civ-clone/core-world/World';\n\nexport const getRules = (\n  ruleRegistry: RuleRegistry = ruleRegistryInstances,\n  generatorRegistry: GeneratorRegistry = generatorRegistryInstance,\n  engine: Engine = engineInstance\n): Start[] => [\n  new Start(\n    new Effect((): void => {\n      const [Generator] = ruleRegistry.process(PickGenerator),\n        generator = new Generator(\n          parseInt(engine.option('height', 100), 10),\n          parseInt(engine.option('width', 160), 10),\n          {\n            landCoverage: parseFloat(engine.option('landCoverage', 0.4)),\n            landSize: parseFloat(engine.option('landSize', 0.2)),\n            maxIterations: parseInt(engine.option('maxIterations', 20), 10),\n          }\n        ),\n        world: World = new World(generator, ruleRegistry);\n\n      world.build();\n    })\n  ),\n];\n\nexport default getRules;\n", "import {\n  Coal,\n  Fish,\n  Game,\n  Gems,\n  Gold,\n  Horse,\n  Oasis,\n  Oil,\n  Seal,\n  Shield,\n} from '../../TerrainFeatures';\nimport {\n  Desert,\n  Forest,\n  Grassland,\n  Hills,\n  Jungle,\n  Mountains,\n  Ocean,\n  Plains,\n  River,\n  Swamp,\n  Tundra,\n} from '../../Terrains';\nimport { Food, Production, Trade } from '../../Yields';\nimport { Irrigation, Mine, Road } from '../../TileImprovements';\nimport {\n  Communism,\n  Democracy,\n  Monarchy,\n  Republic,\n} from '@civ-clone/civ1-government/Governments';\nimport {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '@civ-clone/core-government/PlayerGovernmentRegistry';\nimport {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '@civ-clone/core-terrain-feature/TerrainFeatureRegistry';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport TerrainFeature from '@civ-clone/core-terrain-feature/TerrainFeature';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\nimport TileYield from '@civ-clone/core-world/Rules/Yield';\nimport Yield from '@civ-clone/core-yield/Yield';\n\nexport const getRules: (\n  tileImprovementRegistry?: TileImprovementRegistry,\n  terrainFeatureRegistry?: TerrainFeatureRegistry,\n  playerGovernmentRegistry?: PlayerGovernmentRegistry\n) => TileYield[] = (\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance,\n  terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance,\n  playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance\n) => [\n  ...(\n    [\n      [Food, Forest, 1],\n      [Food, Grassland, 2],\n      [Food, Hills, 1],\n      [Food, Jungle, 1],\n      [Food, Ocean, 1],\n      [Food, Plains, 1],\n      [Food, River, 2],\n      [Food, Swamp, 1],\n      [Food, Tundra, 1],\n      [Production, Desert, 1],\n      [Production, Forest, 2],\n      [Production, Mountains, 1],\n      [Production, Plains, 1],\n    ] as [typeof Yield, typeof Terrain, number][]\n  ).map(\n    ([YieldType, TerrainType, value]: [typeof Yield, typeof Terrain, number]) =>\n      new TileYield(\n        new Criterion(\n          (tile: Tile): boolean => tile.terrain() instanceof TerrainType\n        ),\n        new Effect((): Yield => new YieldType(value, TerrainType.name))\n      )\n  ),\n\n  ...(\n    [\n      [Production, Coal, 2],\n      [Food, Fish, 1],\n      [Food, Game, 1],\n      [Trade, Gems, 2],\n      [Trade, Gold, 3],\n      [Production, Horse, 1],\n      [Food, Oasis, 2],\n      [Production, Oil, 3],\n      [Food, Seal, 2],\n      [Production, Shield, 1],\n    ] as [typeof Yield, typeof TerrainFeature, number][]\n  ).map(\n    ([YieldType, Feature, value]: [\n      typeof Yield,\n      typeof TerrainFeature,\n      number\n    ]): TileYield =>\n      new TileYield(\n        new Criterion((tile: Tile): boolean =>\n          terrainFeatureRegistry\n            .getByTerrain(tile.terrain())\n            .some(\n              (feature: TerrainFeature): boolean => feature instanceof Feature\n            )\n        ),\n        new Effect((): Yield => new YieldType(value, Feature.name))\n      )\n  ),\n\n  ...(\n    [\n      [Production, Coal, 1],\n      [Food, Fish, 1],\n      [Food, Game, 1],\n      [Trade, Gems, 2],\n      [Trade, Gold, 2],\n      [Production, Horse, 1],\n      [Food, Oasis, 1],\n      [Production, Oil, 1],\n      [Food, Seal, 1],\n    ] as [typeof Yield, typeof TerrainFeature, number][]\n  ).map(\n    ([YieldType, Feature, value]: [\n      typeof Yield,\n      typeof TerrainFeature,\n      number\n    ]): TileYield =>\n      new TileYield(\n        new Criterion((tile: Tile, player: Player | null): boolean => {\n          if (!player) {\n            return false;\n          }\n\n          try {\n            return playerGovernmentRegistry\n              .getByPlayer(player)\n              .is(Communism, Democracy, Monarchy, Republic);\n          } catch (e) {\n            return false;\n          }\n        }),\n        new Criterion((tile: Tile): boolean =>\n          terrainFeatureRegistry\n            .getByTerrain(tile.terrain())\n            .some(\n              (feature: TerrainFeature): boolean => feature instanceof Feature\n            )\n        ),\n        new Effect((): Yield => new YieldType(value, Feature.name))\n      )\n  ),\n\n  new TileYield(\n    new Criterion((tile: Tile): boolean => tile.terrain() instanceof Ocean),\n    new Effect((): Yield => new Trade(2, Ocean.name))\n  ),\n\n  new TileYield(\n    new Criterion((tile: Tile): boolean => tile.terrain() instanceof River),\n    new Effect((): Yield => new Trade(1))\n  ),\n\n  new TileYield(\n    new Criterion((tile: Tile, player: Player | null): boolean => {\n      if (!player) {\n        return false;\n      }\n\n      try {\n        return playerGovernmentRegistry\n          .getByPlayer(player)\n          .is(Democracy, Republic);\n      } catch (e) {\n        return false;\n      }\n    }),\n    new Criterion(\n      (tile: Tile): boolean =>\n        tile.terrain() instanceof River || tile.terrain() instanceof Ocean\n    ),\n    new Effect((): Yield => new Trade(1, Ocean.name))\n  ),\n\n  ...(\n    [\n      [Desert, Food, Irrigation, 1],\n      [Desert, Production, Mine, 1],\n      [Hills, Food, Irrigation, 1],\n      [Hills, Production, Mine, 2],\n      [Mountains, Production, Mine, 1],\n      [Plains, Food, Irrigation, 1],\n    ] as [typeof Terrain, typeof Yield, typeof TileImprovement, number][]\n  ).map(\n    ([ImprovedTerrain, YieldType, Improvement, value]: [\n      typeof Terrain,\n      typeof Yield,\n      typeof TileImprovement,\n      number\n    ]): TileYield =>\n      new TileYield(\n        new Criterion(\n          (tile: Tile): boolean => tile.terrain() instanceof ImprovedTerrain\n        ),\n        new Criterion((tile: Tile): boolean =>\n          tileImprovementRegistry\n            .getByTile(tile)\n            .some(\n              (improvement: TileImprovement): boolean =>\n                improvement instanceof Improvement\n            )\n        ),\n        new Effect((): Yield => new YieldType(value, Improvement.name))\n      )\n  ),\n\n  ...(\n    [\n      [Desert, Production, Mine, 1],\n      [Grassland, Food, Irrigation, 1],\n      [Hills, Production, Mine, 1],\n      [Mountains, Production, Mine, 1],\n      [River, Food, Irrigation, 1],\n    ] as [typeof Terrain, typeof Yield, typeof TileImprovement, number][]\n  ).map(\n    ([ImprovedTerrain, YieldType, Improvement, value]: [\n      typeof Terrain,\n      typeof Yield,\n      typeof TileImprovement,\n      number\n    ]): TileYield =>\n      new TileYield(\n        new Criterion((tile: Tile, player: Player | null): boolean => {\n          if (!player) {\n            return false;\n          }\n\n          try {\n            return playerGovernmentRegistry\n              .getByPlayer(player)\n              .is(Communism, Democracy, Monarchy, Republic);\n          } catch (e) {\n            return false;\n          }\n        }),\n        new Criterion(\n          (tile: Tile): boolean => tile.terrain() instanceof ImprovedTerrain\n        ),\n        new Criterion((tile: Tile): boolean =>\n          tileImprovementRegistry\n            .getByTile(tile)\n            .some(\n              (improvement: TileImprovement): boolean =>\n                improvement instanceof Improvement\n            )\n        ),\n        new Effect((): Yield => new YieldType(value, Improvement.name))\n      )\n  ),\n\n  ...[Desert, Grassland, Plains].map(\n    (TerrainType: typeof Terrain): TileYield =>\n      new TileYield(\n        new Criterion(\n          (tile: Tile): boolean => tile.terrain() instanceof TerrainType\n        ),\n        new Criterion((tile: Tile): boolean =>\n          tileImprovementRegistry\n            .getByTile(tile)\n            .some(\n              (improvement: TileImprovement): boolean =>\n                improvement instanceof Road\n            )\n        ),\n        new Effect((): Yield => new Trade(1, Road.name))\n      )\n  ),\n\n  ...[Desert, Grassland, Plains].map(\n    (TerrainType: typeof Terrain): TileYield =>\n      new TileYield(\n        new Criterion((tile: Tile, player: Player | null): boolean => {\n          if (!player) {\n            return false;\n          }\n\n          try {\n            return playerGovernmentRegistry\n              .getByPlayer(player)\n              .is(Democracy, Republic);\n          } catch (e) {\n            return false;\n          }\n        }),\n        new Criterion(\n          (tile: Tile): boolean => tile.terrain() instanceof TerrainType\n        ),\n        new Criterion((tile: Tile): boolean =>\n          tileImprovementRegistry\n            .getByTile(tile)\n            .some(\n              (improvement: TileImprovement): boolean =>\n                improvement instanceof Road\n            )\n        ),\n        new Effect((): Yield => new Trade(1, Road.name))\n      )\n  ),\n];\n\nexport default getRules;\n", "import { Food, Production, Trade } from '../../Yields';\nimport {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '@civ-clone/core-tile-improvement/TileImprovementRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport { High } from '@civ-clone/core-rule/Priorities';\nimport Player from '@civ-clone/core-player/Player';\nimport { Railroad } from '../../TileImprovements';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TileImprovement from '@civ-clone/core-tile-improvement/TileImprovement';\nimport Yield from '@civ-clone/core-yield/Yield';\nimport YieldModifier from '@civ-clone/core-world/Rules/YieldModifier';\n\nexport const getRules: (\n  tileImprovementRegistry?: TileImprovementRegistry\n) => YieldModifier[] = (\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance\n) => [\n  ...(\n    [\n      [Food, 0.5],\n      [Production, 0.5],\n      [Trade, 0.5],\n    ] as [typeof Yield, number][]\n  ).map(\n    ([YieldType, multiplier]): YieldModifier =>\n      new YieldModifier(\n        new High(),\n        new Criterion((tile: Tile, player: Player | null, yields: Yield[]) =>\n          yields.some((tileYield) => tileYield instanceof YieldType)\n        ),\n        new Criterion((tile: Tile): boolean =>\n          tileImprovementRegistry\n            .getByTile(tile)\n            .some(\n              (improvement: TileImprovement): boolean =>\n                improvement instanceof Railroad\n            )\n        ),\n        new Effect(\n          (tile: Tile, player: Player | null, yields: Yield[]): void => {\n            const currentTotal = yields\n              .filter((tileYield) => tileYield instanceof YieldType)\n              .reduce((total, tileYield) => total + tileYield.value(), 0);\n\n            yields.push(\n              new YieldType(\n                Math.floor(currentTotal * multiplier),\n                Railroad.name\n              )\n            );\n          }\n        )\n      )\n  ),\n];\n\nexport default getRules;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  GeneratorRegistry,\n  instance as generatorRegistryInstance,\n} from '@civ-clone/core-world-generator/GeneratorRegistry';\nimport Earth from '@civ-clone/civ1-earth-generator/Earth';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport PickGenerator from '@civ-clone/core-world-generator/Rules/PickGenerator';\n\nexport const getRules: (\n  generatorRegistry?: GeneratorRegistry,\n  engine?: Engine,\n  randomNumberGenerator?: () => number\n) => PickGenerator[] = (\n  generatorRegistry: GeneratorRegistry = generatorRegistryInstance,\n  engine: Engine = engineInstance,\n  randomNumberGenerator: () => number = () => Math.random()\n): PickGenerator[] => [\n  new PickGenerator(\n    new Effect(() => {\n      if (engine.option('earth', false)) {\n        return Earth;\n      }\n\n      const availableGenerators = generatorRegistry.entries();\n\n      if (availableGenerators.length === 0) {\n        throw new TypeError('No available `World` generators.');\n      }\n\n      return availableGenerators[\n        Math.floor(availableGenerators.length * randomNumberGenerator())\n      ];\n    })\n  ),\n];\n\nexport default getRules;\n", "import available from './Rules/TileImprovement/available';\nimport built from './Rules/TileImprovement/built';\nimport created from './Rules/Terrain/created';\nimport distribution from './Rules/Terrain/distribution';\nimport distributionGroups from './Rules/Terrain/distribution-groups';\nimport feature from './Rules/Terrain/feature';\nimport { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport pillaged from './Rules/TileImprovement/pillaged';\nimport playerPickStartTile from './Rules/Player/pick-start-tile';\nimport start from './Rules/Engine/start';\nimport tileYield from './Rules/Tile/yield';\nimport tileYieldModifier from './Rules/Tile/yield-modifier';\nimport worldGeneratorPickGenerator from './Rules/WorldGenerator/pick-generator';\n\nruleRegistryInstance.register(\n  ...available(),\n  ...built(),\n  ...created(),\n  ...distribution(),\n  ...distributionGroups(),\n  ...feature(),\n  ...pillaged(),\n  ...playerPickStartTile(),\n  ...start(),\n  ...tileYield(),\n  ...tileYieldModifier(),\n  ...worldGeneratorPickGenerator()\n);\n", "import {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\nimport Terrain from './Terrain';\n\nexport interface ITerrainRegistry extends IConstructorRegistry<Terrain> {}\n\nexport class TerrainRegistry\n  extends ConstructorRegistry<Terrain>\n  implements ITerrainRegistry\n{\n  constructor() {\n    super(Terrain);\n  }\n}\n\nexport const instance: TerrainRegistry = new TerrainRegistry();\n\nexport default TerrainRegistry;\n", "import {\n  Arctic,\n  Desert,\n  Forest,\n  Grassland,\n  Hills,\n  Jungle,\n  Mountains,\n  Ocean,\n  Plains,\n  River,\n  Swamp,\n  Tundra,\n} from './Terrains';\nimport { instance as terrainRegistryInstance } from '@civ-clone/core-terrain/TerrainRegistry';\n\nterrainRegistryInstance.register(\n  Arctic,\n  Desert,\n  Forest,\n  Grassland,\n  Hills,\n  Jungle,\n  Mountains,\n  Ocean,\n  Plains,\n  River,\n  Swamp,\n  Tundra\n);\n", "import {\n  Coal,\n  Fish,\n  Game,\n  Gems,\n  Gold,\n  Horse,\n  Oasis,\n  Oil,\n  Seal,\n  Shield,\n} from './TerrainFeatures';\nimport { instance as availableTerrainFeatureRegistryInstance } from '@civ-clone/core-terrain-feature/AvailableTerrainFeatureRegistry';\n\navailableTerrainFeatureRegistryInstance.register(\n  Coal,\n  Fish,\n  Game,\n  Gems,\n  Gold,\n  Horse,\n  Oasis,\n  Oil,\n  Seal,\n  Shield\n);\n", null, "import {\n  CityRegistry,\n  instance as cityRegistryInstance,\n} from '../CityRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport const getAdditionalData = (\n  cityRegistry: CityRegistry = cityRegistryInstance\n) => [\n  new AdditionalData(Player, 'cities', (player: Player) =>\n    cityRegistry.getByPlayer(player)\n  ),\n  new AdditionalData(Tile, 'city', (tile: Tile) =>\n    cityRegistry.getByTile(tile)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport cities from './AdditionalData/cities';\n\nadditionalDataRegistryInstance.register(...cities());\n", null, "import {\n  CityBuildRegistry,\n  instance as cityBuildRegistryInstance,\n} from '../CityBuildRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport City from '@civ-clone/core-city/City';\n\nexport const getAdditionalData = (\n  cityBuildRegistry: CityBuildRegistry = cityBuildRegistryInstance\n) => [\n  new AdditionalData(City, 'build', (city: City) =>\n    cityBuildRegistry.getByCity(city)\n  ),\n];\n\nexport default getAdditionalData;\n", "import build from './AdditionalData/build';\nimport { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\n\nadditionalDataRegistryInstance.register(...build());\n", null, "import {\n  CityGrowthRegistry,\n  instance as cityGrowthRegistryInstance,\n} from '../CityGrowthRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport City from '@civ-clone/core-city/City';\nimport CityGrowth from '../CityGrowth';\n\nexport const getAdditionalData: (\n  cityGrowthRegistry?: CityGrowthRegistry\n) => AdditionalData[] = (\n  cityGrowthRegistry: CityGrowthRegistry = cityGrowthRegistryInstance\n): AdditionalData[] => [\n  new AdditionalData(\n    City,\n    'growth',\n    (city: City): CityGrowth => cityGrowthRegistry.getByCity(city)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport growth from './AdditionalData/growth';\n\nadditionalDataRegistryInstance.register(...growth());\n", null, "import {\n  CityImprovementRegistry,\n  instance as cityImprovementRegistryInstance,\n} from '../CityImprovementRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport City from '@civ-clone/core-city/City';\n\nexport const getAdditionalData = (\n  cityImprovementRegistry: CityImprovementRegistry = cityImprovementRegistryInstance\n) => [\n  new AdditionalData(City, 'improvements', (city: City) =>\n    cityImprovementRegistry.getByCity(city)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport improvements from './AdditionalData/improvements';\n\nadditionalDataRegistryInstance.register(...improvements());\n", null, "import {\n  GoodyHutRegistry,\n  instance as goodyHutRegistryInstance,\n} from '../GoodyHutRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport GoodyHut from '../GoodyHut';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport const getAdditionalData = (\n  goodyHutRegistry: GoodyHutRegistry = goodyHutRegistryInstance\n) => [\n  new AdditionalData(Tile, 'goodyHut', (tile: Tile): GoodyHut | null =>\n    goodyHutRegistry.getByTile(tile)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport goodyHut from './AdditionalData/goodyHut';\n\nadditionalDataRegistryInstance.register(...goodyHut());\n", null, "import {\n  PlayerGovernmentRegistry,\n  instance as playerGovernmentRegistryInstance,\n} from '../PlayerGovernmentRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getAdditionalData = (\n  playerGovernmentRegistry: PlayerGovernmentRegistry = playerGovernmentRegistryInstance\n) => [\n  new AdditionalData(Player, 'government', (player: Player) =>\n    playerGovernmentRegistry.getByPlayer(player)\n  ),\n];\n\nexport default getAdditionalData;\n", "import government from './AdditionalData/government';\nimport { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\n\nadditionalDataRegistryInstance.register(...government());\n", null, "import {\n  PlayerWorldRegistry,\n  instance as playerWorldRegistryInstance,\n} from '../PlayerWorldRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getAdditionalData = (\n  playerWorldRegistry: PlayerWorldRegistry = playerWorldRegistryInstance\n) => [\n  new AdditionalData(Player, 'world', (player: Player) =>\n    playerWorldRegistry.getByPlayer(player)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport world from './AdditionalData/world';\n\nadditionalDataRegistryInstance.register(...world());\n", null, "import {\n  PlayerResearchRegistry,\n  instance as playerResearchRegistryInstance,\n} from '../PlayerResearchRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerResearch from '../PlayerResearch';\n\nexport const getAdditionalData: (\n  playerResearchRegistry?: PlayerResearchRegistry\n) => AdditionalData[] = (\n  playerResearchRegistry: PlayerResearchRegistry = playerResearchRegistryInstance\n): AdditionalData[] => [\n  new AdditionalData(\n    Player,\n    'research',\n    (player: Player): PlayerResearch =>\n      playerResearchRegistry.getByPlayer(player)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport research from './AdditionalData/research';\n\nadditionalDataRegistryInstance.register(...research());\n", null, "import {\n  SpaceshipRegistry,\n  instance as spaceshipRegistryInstance,\n} from '../SpaceshipRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getAdditionalData = (\n  spaceshipRegistry: SpaceshipRegistry = spaceshipRegistryInstance\n) => [\n  new AdditionalData(Player, 'spaceship', (player: Player) =>\n    spaceshipRegistry.getActiveByPlayer(player)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport spaceship from './AdditionalData/spaceship';\n\nadditionalDataRegistryInstance.register(...spaceship());\n", null, "import {\n  TerrainFeatureRegistry,\n  instance as terrainFeatureRegistryInstance,\n} from '../TerrainFeatureRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\n\nexport const getAdditionalData = (\n  terrainFeatureRegistry: TerrainFeatureRegistry = terrainFeatureRegistryInstance\n) => [\n  new AdditionalData(Terrain, 'features', (terrain: Terrain) =>\n    terrainFeatureRegistry.getByTerrain(terrain)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport features from './AdditionalData/features';\n\nadditionalDataRegistryInstance.register(...features());\n", null, "import {\n  TileImprovementRegistry,\n  instance as tileImprovementRegistryInstance,\n} from '../TileImprovementRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport const getAdditionalData = (\n  tileImprovementRegistry: TileImprovementRegistry = tileImprovementRegistryInstance\n) => [\n  new AdditionalData(Tile, 'improvements', (tile: Tile) =>\n    tileImprovementRegistry.getByTile(tile)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport improvements from './AdditionalData/improvements';\n\nadditionalDataRegistryInstance.register(...improvements());\n", null, "import {\n  PlayerTradeRatesRegistry,\n  instance as playerTradeRatesRegistryInstance,\n} from '../PlayerTradeRatesRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerTradeRates from '../PlayerTradeRates';\n\nexport const getAdditionalData: (\n  playerTradeRatesRegistry?: PlayerTradeRatesRegistry\n) => AdditionalData[] = (\n  playerTradeRatesRegistry: PlayerTradeRatesRegistry = playerTradeRatesRegistryInstance\n): AdditionalData[] => [\n  new AdditionalData(\n    Player,\n    'rates',\n    (player: Player): PlayerTradeRates =>\n      playerTradeRatesRegistry.getByPlayer(player)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport rates from './AdditionalData/rates';\n\nadditionalDataRegistryInstance.register(...rates());\n", null, "import {\n  PlayerTreasuryRegistry,\n  instance as playerTreasuryRegistryInstance,\n} from '../PlayerTreasuryRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Player from '@civ-clone/core-player/Player';\n\nexport const getAdditionalData = (\n  playerTreasuryRegistry: PlayerTreasuryRegistry = playerTreasuryRegistryInstance\n) => [\n  new AdditionalData(Player, 'treasury', (player: Player) =>\n    playerTreasuryRegistry.getByPlayer(player)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport treasury from './AdditionalData/treasury';\n\nadditionalDataRegistryInstance.register(...treasury());\n", null, "import Rule from '@civ-clone/core-rule/Rule';\nimport Turn from '../Turn';\n\nexport class End extends Rule<[Turn], void> {}\n\nexport default End;\n", "import {\n  Engine,\n  instance as engineInstance,\n} from '@civ-clone/core-engine/Engine';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport { Turn, instance as turnInstance } from '../../Turn';\nimport End from '../../Rules/End';\nimport EngineStart from '@civ-clone/core-engine/Rules/Start';\nimport Start from '../../Rules/Start';\n\nexport const getEvents = (\n  ruleRegistry: RuleRegistry = ruleRegistryInstance,\n  engine: Engine = engineInstance,\n  turn: Turn = turnInstance\n): [string, () => any][] => [\n  [\n    'engine:start',\n    (): void => {\n      ruleRegistry.process(EngineStart);\n    },\n  ],\n  ...['game:start', 'turn:end'].map((event: string): [string, () => any] => [\n    event,\n    (): void => {\n      engine.emit('turn:start', turn.increment());\n    },\n  ]),\n  [\n    'turn:end',\n    (): void => {\n      ruleRegistry.process(End, turn);\n    },\n  ],\n  [\n    'turn:start',\n    (): void => {\n      ruleRegistry.process(Start, turn);\n    },\n  ],\n];\n\nexport default getEvents;\n", "import { instance as engine } from '@civ-clone/core-engine/Engine';\nimport engineStart from './Events/Engine/start';\n\n[...engineStart()].forEach(([event, handler]: [string, () => any]): void => {\n  engine.on(event, handler);\n});\n", null, "import {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '../UnitRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport City from '@civ-clone/core-city/City';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport const getAdditionalData = (\n  unitRegistry: UnitRegistry = unitRegistryInstance\n) => [\n  new AdditionalData(City, 'units', (city: City) =>\n    unitRegistry.getByCity(city)\n  ),\n  new AdditionalData(Player, 'units', (player: Player) =>\n    unitRegistry.getByPlayer(player, true)\n  ),\n  new AdditionalData(Tile, 'units', (tile: Tile) =>\n    unitRegistry.getByTile(tile)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport units from './AdditionalData/units';\n\nadditionalDataRegistryInstance.register(...units());\n", null, "import {\n  UnitImprovementRegistry,\n  instance as unitImprovementRegistryInstance,\n} from '../UnitImprovementRegistry';\nimport AdditionalData from '@civ-clone/core-data-object/AdditionalData';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitImprovement from '../UnitImprovement';\n\nexport const getAdditionalData: (\n  unitImprovementRegistry?: UnitImprovementRegistry\n) => AdditionalData[] = (\n  unitImprovementRegistry: UnitImprovementRegistry = unitImprovementRegistryInstance\n): AdditionalData[] => [\n  new AdditionalData(Unit, 'improvements', (unit: Unit): UnitImprovement[] =>\n    unitImprovementRegistry.getByUnit(unit)\n  ),\n];\n\nexport default getAdditionalData;\n", "import { instance as additionalDataRegistryInstance } from '@civ-clone/core-data-object/AdditionalDataRegistry';\nimport improvements from './AdditionalData/improvements';\n\nadditionalDataRegistryInstance.register(...improvements());\n", null, "import {\n  ConstructorRegistry,\n  IConstructorRegistry,\n} from '@civ-clone/core-registry/ConstructorRegistry';\nimport AIClient from './AIClient';\n\nexport class AIClientRegistry\n  extends ConstructorRegistry<AIClient>\n  implements IConstructorRegistry<AIClient>\n{\n  constructor() {\n    super(AIClient);\n  }\n}\n\nexport const instance: AIClientRegistry = new AIClientRegistry();\n\nexport default AIClientRegistry;\n", "import { instance as aiClientRegistryInstance } from '@civ-clone/core-ai-client/AIClientRegistry';\nimport SimpleAIClient from './SimpleAIClient';\n\naiClientRegistryInstance.register(SimpleAIClient);\n", "import {\n  ClientRegistry,\n  instance as clientRegistryInstance,\n} from '@civ-clone/core-client/ClientRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Captured from '@civ-clone/core-city/Rules/Captured';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport SimpleAIClient from '../../SimpleAIClient';\n\nexport const getRules: (\n  unitRegistry?: UnitRegistry,\n  clientRegistry?: ClientRegistry\n) => Captured[] = (\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  clientRegistry: ClientRegistry = clientRegistryInstance\n): Captured[] => [\n  new Captured(\n    new Criterion(\n      (city: City, player: Player) =>\n        clientRegistry.getByPlayer(player) instanceof SimpleAIClient\n    ),\n    new Effect((city: City, player: Player, capturingPlayer: Player): void =>\n      (clientRegistry.getByPlayer(player) as SimpleAIClient).cityLost(\n        city,\n        capturingPlayer,\n        false\n      )\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  ClientRegistry,\n  instance as clientRegistryInstance,\n} from '@civ-clone/core-client/ClientRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport City from '@civ-clone/core-city/City';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Destroyed from '@civ-clone/core-city/Rules/Destroyed';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport Player from '@civ-clone/core-player/Player';\nimport SimpleAIClient from '../../SimpleAIClient';\n\nexport const getRules: (\n  unitRegistry?: UnitRegistry,\n  clientRegistry?: ClientRegistry\n) => Destroyed[] = (\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  clientRegistry: ClientRegistry = clientRegistryInstance\n): Destroyed[] => [\n  new Destroyed(\n    new Criterion(\n      (city: City) =>\n        clientRegistry.getByPlayer(city.player()) instanceof SimpleAIClient\n    ),\n    new Effect((city: City, player: Player | null): void =>\n      (clientRegistry.getByPlayer(city.player()) as SimpleAIClient).cityLost(\n        city,\n        player,\n        true\n      )\n    )\n  ),\n];\n\nexport default getRules;\n", "import {\n  ClientRegistry,\n  instance as clientRegistryInstance,\n} from '@civ-clone/core-client/ClientRegistry';\nimport {\n  UnitRegistry,\n  instance as unitRegistryInstance,\n} from '@civ-clone/core-unit/UnitRegistry';\nimport Criterion from '@civ-clone/core-rule/Criterion';\nimport Defeated from '@civ-clone/core-unit/Rules/Defeated';\nimport Effect from '@civ-clone/core-rule/Effect';\nimport SimpleAIClient from '../../SimpleAIClient';\nimport Unit from '@civ-clone/core-unit/Unit';\n\nexport const getRules: (\n  unitRegistry?: UnitRegistry,\n  clientRegistry?: ClientRegistry\n) => Defeated[] = (\n  unitRegistry: UnitRegistry = unitRegistryInstance,\n  clientRegistry: ClientRegistry = clientRegistryInstance\n): Defeated[] => [\n  new Defeated(\n    new Criterion(\n      (unit: Unit) =>\n        clientRegistry.getByPlayer(unit.player()) instanceof SimpleAIClient\n    ),\n    new Effect((unit: Unit, by: Unit | null): void =>\n      (\n        clientRegistry.getByPlayer(unit.player()) as SimpleAIClient\n      ).unitDestroyed(unit, by && by.player())\n    )\n  ),\n];\n\nexport default getRules;\n", "import { instance as ruleRegistryInstance } from '@civ-clone/core-rule/RuleRegistry';\nimport captured from './Rules/City/captured';\nimport destroyed from './Rules/City/destroyed';\nimport defeated from './Rules/Unit/defeated';\n\nruleRegistryInstance.register(...captured(), ...defeated(), ...destroyed());\n", null, "import {\n  Distribution,\n  IDistribution,\n} from '@civ-clone/core-world-generator/Rules/Distribution';\nimport {\n  Generator,\n  IGenerator,\n} from '@civ-clone/core-world-generator/Generator';\nimport { Land, Water } from '@civ-clone/core-terrain/Types';\nimport {\n  RuleRegistry,\n  instance as ruleRegistryInstance,\n} from '@civ-clone/core-rule/RuleRegistry';\nimport {\n  TerrainRegistry,\n  instance as terrainRegistryInstance,\n} from '@civ-clone/core-terrain/TerrainRegistry';\nimport DistributionGroups from '@civ-clone/core-world-generator/Rules/DistributionGroups';\nimport Terrain from '@civ-clone/core-terrain/Terrain';\nimport getNeighbours from '@civ-clone/core-world-generator/lib/getNeighbours';\n\nexport type IOptions = {\n  landCoverage?: number; // % of surface covered with land\n  landSize?: number; // average \"size\" of landmass\n  maxIterations?: number; // number of times a tile can be tested to change to land\n  clusterChance?: number; // chance for adjacent tiles to cluster\n  coverage?: number; // default total coverage of terrain type\n  pathChance?: number; // default chance for directly adjacent tiles to be part of the path\n};\n\nexport class BaseGenerator extends Generator implements IGenerator {\n  #landCoverage: number; // % of surface covered with land\n  #landSize: number; // average \"size\" of landmass\n  #maxIterations: number; // number of times a tile can be tested to change to land\n  #clusterChance: number; // chance for adjacent tiles to cluster\n  #coverage: number; // default total coverage of terrain type\n  #pathChance: number; // default chance for directly adjacent tiles to be part of the path\n  #map: Terrain[];\n  #randomNumberGenerator: () => number;\n  #ruleRegistry: RuleRegistry;\n  #terrainRegistry: TerrainRegistry;\n\n  constructor(\n    height: number = 100,\n    width: number = 160,\n    options: IOptions = {},\n    ruleRegistry: RuleRegistry = ruleRegistryInstance,\n    terrainRegistry: TerrainRegistry = terrainRegistryInstance,\n    randomNumberGenerator: () => number = () => Math.random()\n  ) {\n    super(height, width);\n\n    const {\n      landCoverage = 0.4, // % of surface covered with land\n      landSize = 0.2, // average \"size\" of landmass\n      maxIterations = 10, // number of times a tile can be tested to change to land\n      clusterChance = 0.05, // chance for adjacent tiles to cluster\n      coverage = 0.25, // default total coverage of terrain type\n      pathChance = 0.05, // default chance for directly adjacent tiles to be part of the path\n    } = options;\n\n    this.#landCoverage = landCoverage; // % of surface covered with land\n    this.#landSize = landSize; // average \"size\" of landmass\n    this.#maxIterations = maxIterations; // number of times a tile can be tested to change to land\n    this.#clusterChance = clusterChance; // chance for adjacent tiles to cluster\n    this.#coverage = coverage; // default total coverage of terrain type\n    this.#pathChance = pathChance; // default chance for directly adjacent tiles to be part of the path\n    this.#ruleRegistry = ruleRegistry;\n    this.#terrainRegistry = terrainRegistry;\n    this.#randomNumberGenerator = randomNumberGenerator;\n\n    this.#map = new Array(this.height() * this.width())\n      .fill(0)\n      .map(() => new Water());\n  }\n\n  async generateIslands(): Promise<void> {\n    const height = this.height(),\n      width = this.width(),\n      maxIslandPercentage =\n        this.#landSize + this.#randomNumberGenerator() * 0.2,\n      landCoverage = this.#landCoverage,\n      maxIterations = this.#maxIterations,\n      maxIslandSize = Math.ceil(((height * width) / 100) * maxIslandPercentage),\n      map: number[] = new Array(height * width).fill(0);\n\n    while (\n      map.length === 0 ||\n      map.filter((value: number): boolean => value === 1).length / map.length <\n        landCoverage\n    ) {\n      const seen: { [key: number]: number } = {},\n        currentIsland: number[] = [],\n        toProcess: number[] = [],\n        seedTile: number = Math.floor(height * width * Math.random()),\n        flagAsSeen: (id: number) => void = (id: number): void => {\n          if (!(id in seen)) {\n            seen[id] = 0;\n          }\n\n          seen[id]++;\n        };\n\n      map[seedTile] = 1;\n      currentIsland.push(seedTile);\n\n      flagAsSeen(seedTile);\n\n      toProcess.push(...getNeighbours(height, width, seedTile));\n\n      while (toProcess.length) {\n        const currentTile = toProcess.shift() as number;\n        // ,\n        //   distance = distanceFrom(height, width, seedTile, currentTile),\n        //   surroundingLand = getNeighbours(height, width, currentTile, false).filter(\n        //     (n: number): boolean => map[n] === 1\n        //   );\n\n        if ((seen[currentTile] || 0) <= maxIterations) {\n          if (\n            Math.random() > 0.3\n            // maxIslandPercentage >= Math.sqrt(distance) * Math.random() ||\n            // surroundingLand.length * Math.random() > 3\n          ) {\n            map[currentTile] = 1;\n            currentIsland.push(currentTile);\n\n            getNeighbours(height, width, currentTile)\n              .filter((tile) => toProcess.indexOf(tile) === -1)\n              .forEach((tile) => toProcess.push(tile));\n          } else {\n            getNeighbours(height, width, currentTile).forEach((tile) => {\n              const index = toProcess.indexOf(tile);\n\n              if (index > -1) {\n                toProcess.splice(index, 1);\n              }\n            });\n          }\n\n          flagAsSeen(currentTile);\n        }\n\n        if (\n          currentIsland.length > maxIslandSize ||\n          map.filter((value: number): boolean => value === 1).length /\n            map.length >=\n            landCoverage\n        ) {\n          break;\n        }\n      }\n\n      if (\n        map.filter((value: number): boolean => value === 1).length /\n          map.length >=\n        landCoverage\n      ) {\n        break;\n      }\n    }\n\n    this.#map = map.map((value) => {\n      if (value === 1) {\n        return new Land();\n      }\n\n      return new Water();\n    });\n  }\n\n  generate(): Promise<Terrain[]> {\n    return this.generateIslands().then(\n      (): Promise<Terrain[]> =>\n        this.populateTerrain().then((): Terrain[] => this.#map)\n    );\n  }\n\n  getNeighbours(index: number, directNeighbours: boolean = true): number[] {\n    return getNeighbours(this.height(), this.width(), index, directNeighbours);\n  }\n\n  populateTerrain(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      const rules = this.#ruleRegistry.get(Distribution);\n\n      this.#ruleRegistry\n        .get(DistributionGroups)\n        .filter((rule: DistributionGroups): boolean => rule.validate())\n        .map((rule: DistributionGroups): typeof Terrain[] => {\n          const result = rule.process();\n\n          if (!result) {\n            throw new TypeError('Unexpected data from DistributionGroups.');\n          }\n\n          return result;\n        })\n        .forEach((group: typeof Terrain[]): void =>\n          group.forEach((TerrainType: typeof Terrain): void =>\n            rules\n              .filter((rule: Distribution): boolean =>\n                rule.validate(TerrainType, this.#map)\n              )\n              .map((rule: Distribution): IDistribution[] => {\n                const result = rule.process(TerrainType, this.#map);\n\n                if (!result) {\n                  throw new TypeError('Unexpected data from Distribution.');\n                }\n\n                return result;\n              })\n              .forEach((distribution: IDistribution[]): void =>\n                distribution.forEach(\n                  ({\n                    cluster = false,\n                    clusterChance = this.#clusterChance,\n                    coverage = this.#coverage,\n                    fill = false,\n                    from = 0,\n                    path = false,\n                    pathChance = this.#pathChance,\n                    to = 1,\n                  }) => {\n                    const validIndices = Object.keys(this.#map)\n                      .map((index: string): number => parseInt(index, 10))\n                      .filter(\n                        (index: number): boolean =>\n                          // @ts-ignore\n                          this.#map[index] instanceof TerrainType.__proto__\n                      )\n                      .filter(\n                        (index: number): boolean =>\n                          index >= from * this.height() * this.width() &&\n                          index <= to * this.height() * this.width()\n                      );\n\n                    if (fill) {\n                      validIndices.forEach((index: number): void => {\n                        this.#map[index] = new TerrainType();\n                      });\n\n                      return;\n                    }\n\n                    let max: number = validIndices.length * coverage;\n\n                    while (max > 0) {\n                      const currentIndex: number =\n                        validIndices[\n                          Math.floor(\n                            this.#randomNumberGenerator() * validIndices.length\n                          )\n                        ];\n\n                      this.#map[currentIndex] = new TerrainType();\n                      max--;\n\n                      if (cluster) {\n                        const clusteredNeighbours: number[] =\n                          this.getNeighbours(currentIndex).filter(\n                            (index: number): boolean =>\n                              !(this.#map[index] instanceof TerrainType)\n                          );\n                        while (clusteredNeighbours.length && max > 0) {\n                          const index = clusteredNeighbours.shift() as number;\n\n                          if (\n                            clusterChance >=\n                            this.#randomNumberGenerator() /\n                              this.distanceFrom(currentIndex, index)\n                          ) {\n                            this.#map[index] = new TerrainType();\n                            max--;\n\n                            clusteredNeighbours.push(\n                              ...this.getNeighbours(index)\n                                .filter(\n                                  (index: number): boolean =>\n                                    !(this.#map[index] instanceof TerrainType)\n                                )\n                                .filter(\n                                  (index: number): boolean =>\n                                    this.#map[index] instanceof\n                                    // @ts-ignore\n                                    TerrainType.__proto__\n                                )\n                                .filter(\n                                  (index: number): boolean =>\n                                    !clusteredNeighbours.includes(index)\n                                )\n                            );\n                          }\n                        }\n                      }\n\n                      if (path) {\n                        let index = currentIndex;\n\n                        while (pathChance >= this.#randomNumberGenerator()) {\n                          const candidates: number[] = this.getNeighbours(\n                            index\n                          ).filter(\n                            (index: number): boolean =>\n                              this.#map[index] instanceof\n                                // @ts-ignore\n                                TerrainType.__proto__ &&\n                              !(this.#map[index] instanceof TerrainType)\n                          );\n                          index =\n                            candidates[\n                              Math.floor(\n                                this.#randomNumberGenerator() *\n                                  candidates.length\n                              )\n                            ];\n\n                          this.#map[index] = new TerrainType();\n                          max--;\n                        }\n                      }\n                    }\n                  }\n                )\n              )\n          )\n        );\n\n      resolve();\n    });\n  }\n}\n\nexport default BaseGenerator;\n", "import BaseGenerator from './BaseGenerator';\nimport { instance as generatorRegistryInstance } from '@civ-clone/core-world-generator/GeneratorRegistry';\n\ngeneratorRegistryInstance.register(BaseGenerator);\n", null, "import '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-american/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-aztec/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-babylonian/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-chinese/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-egyptian/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-english/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-french/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-german/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-greek/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-indian/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-mongol/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-roman/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-russian/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-civilization-zulu/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-advancedflight/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-alphabet/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-astronomy/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-atomictheory/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-automobile/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-banking/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-bridgebuilding/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-bronzeworking/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-ceremonialburial/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-chemistry/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-chivalry/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-codeoflaws/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-combustion/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-communism/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-computers/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-conscription/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-construction/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-corporation/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-currency/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-democracy/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-electricity/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-electronics/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-engineering/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-explosives/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-feudalism/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-flight/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-fusionpower/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-geneticengineering/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-gunpowder/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-horsebackriding/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-industrialization/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-invention/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-ironworking/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-laborunion/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-literacy/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-magnetism/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-mapmaking/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-masonry/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-massproduction/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-mathematics/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-medicine/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-metallurgy/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-monarchy/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-mysticism/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-navigation/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-nuclearfission/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-nuclearpower/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-philosophy/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-physics/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-plastics/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-pottery/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-railroad/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-recycling/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-refining/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-religion/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-robotics/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-rocketry/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-spaceflight/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-steamengine/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-steel/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-superconductor/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-theoryofgravity/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-therepublic/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-thewheel/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-trade/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-university/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/base-science-advance-writing/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-city/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-city-happiness/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-city-improvement/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-civilization/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-default-spaceship-layout/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-diplomacy/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-earth-generator/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-game-year/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-goody-hut/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-government/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-player/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-science/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-spaceship/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-trade-rate/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-treasury/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-unit/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-wonder/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/civ1-world/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-city/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-city-build/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-city-growth/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-city-improvement/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-goody-hut/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-government/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-player-world/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-science/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-spaceship/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-terrain-feature/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-tile-improvement/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-trade-rate/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-treasury/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-turn-based-game/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-unit/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/core-unit-improvement/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/simple-ai-client/index.js';\nimport '/Users/dominik.hastings/Code/civ-clone/web-renderer/node_modules/@civ-clone/simple-world-generator/index.js';\n", "import { ActiveUnit, InactiveUnit } from '@civ-clone/civ1-unit/PlayerActions';\nimport {\n  Advance as FreeAdvance,\n  City as FreeCity,\n  Gold as FreeGold,\n  Unit as FreeUnit,\n} from '@civ-clone/civ1-goody-hut/GoodyHuts';\nimport {\n  ChangeProduction,\n  CityBuild,\n} from '@civ-clone/core-city-build/PlayerActions';\nimport { Client, IClient } from '@civ-clone/core-civ-client/Client';\nimport { AdjustTradeRates } from '@civ-clone/civ1-trade-rate/PlayerActions';\nimport Advance from '@civ-clone/core-science/Advance';\nimport BuildItem from '@civ-clone/core-city-build/BuildItem';\nimport Busy from '@civ-clone/core-unit/Rules/Busy';\nimport ChooseResearch from '@civ-clone/civ1-science/PlayerActions/ChooseResearch';\nimport City from '@civ-clone/core-city/City';\nimport CityGrowth from '@civ-clone/core-city-growth/CityGrowth';\nimport CityBuildItem from '@civ-clone/core-city-build/CityBuild';\nimport CityImprovement from '@civ-clone/core-city-improvement/CityImprovement';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport { CompleteProduction } from '@civ-clone/civ1-treasury/PlayerActions';\nimport DataObject from '@civ-clone/core-data-object/DataObject';\nimport DataQueue from './DataQueue';\nimport { EndTurn } from '@civ-clone/civ1-player/PlayerActions';\nimport EventEmitter from '@dom111/typed-event-emitter/EventEmitter';\nimport GoodyHut from '@civ-clone/core-goody-hut/GoodyHut';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport { LaunchSpaceship } from '@civ-clone/civ1-spaceship/PlayerActions';\nimport MandatoryPlayerAction from '@civ-clone/core-player/MandatoryPlayerAction';\nimport Player from '@civ-clone/core-player/Player';\nimport PlayerAction from '@civ-clone/core-player/PlayerAction';\nimport PlayerGovernment from '@civ-clone/core-government/PlayerGovernment';\nimport PlayerResearch from '@civ-clone/core-science/PlayerResearch';\nimport PlayerTile from '@civ-clone/core-player-world/PlayerTile';\nimport PlayerTradeRates from '@civ-clone/core-trade-rate/PlayerTradeRates';\nimport PlayerWorld from '@civ-clone/core-player-world/PlayerWorld';\nimport Retryable from './Retryable';\nimport { Revolution } from '@civ-clone/civ1-government/PlayerActions';\nimport TransferObject from './TransferObject';\nimport Tile from '@civ-clone/core-world/Tile';\nimport TradeRate from '@civ-clone/core-trade-rate/TradeRate';\nimport Turn from '@civ-clone/core-turn-based-game/Turn';\nimport Unit from '@civ-clone/core-unit/Unit';\nimport UnitAction from '@civ-clone/core-unit/Action';\nimport UnknownCity from './UnknownObjects/City';\nimport UnknownPlayer from './UnknownObjects/Player';\nimport UnknownUnit from './UnknownObjects/Unit';\nimport Wonder from '@civ-clone/core-wonder/Wonder';\nimport Year from '@civ-clone/core-game-year/Year';\nimport { instance as advanceRegistryInstance } from '@civ-clone/core-science/AdvanceRegistry';\nimport { instance as cityRegistryInstance } from '@civ-clone/core-city/CityRegistry';\nimport { instance as currentPlayerRegistryInstance } from '@civ-clone/core-player/CurrentPlayerRegistry';\nimport { instance as engineInstance } from '@civ-clone/core-engine/Engine';\nimport { instance as leaderRegistryInstance } from '@civ-clone/core-civilization/LeaderRegistry';\nimport { instance as playerRegistryInstance } from '@civ-clone/core-player/PlayerRegistry';\nimport { instance as playerResearchRegistryInstance } from '@civ-clone/core-science/PlayerResearchRegistry';\nimport { instance as playerTreasuryRegistryInstance } from '@civ-clone/core-treasury/PlayerTreasuryRegistry';\nimport { instance as playerWorldRegistryInstance } from '@civ-clone/core-player-world/PlayerWorldRegistry';\nimport { instance as turnInstance } from '@civ-clone/core-turn-based-game/Turn';\nimport { instance as unitRegistryInstance } from '@civ-clone/core-unit/UnitRegistry';\nimport { instance as yearInstance } from '@civ-clone/core-game-year/Year';\nimport { reassignWorkers } from '@civ-clone/civ1-city/lib/assignWorkers';\n\nconst referenceObject = (object: any) =>\n    object instanceof DataObject\n      ? {\n          '#ref': object.id(),\n        }\n      : object,\n  filterToReference =\n    (...types: (new (...args: any[]) => any)[]) =>\n    (object: any) =>\n      types.some((Type) => object instanceof Type)\n        ? referenceObject(object)\n        : object,\n  filterToReferenceAllExcept =\n    (...types: (new (...args: any[]) => any)[]) =>\n    (object: any) =>\n      types.some((Type) => object instanceof Type)\n        ? object\n        : referenceObject(object);\n\nconst unknownPlayers: Map<Player, UnknownPlayer> = new Map(),\n  unknownUnits: Map<Unit, UnknownUnit> = new Map(),\n  unknownCities: Map<City, UnknownCity> = new Map();\n\nexport class DataTransferClient extends Client implements IClient {\n  #dataFilter =\n    (localFilter = (object: any) => object) =>\n    (object: DataObject) => {\n      if (object instanceof Player && object !== this.player()) {\n        if (!unknownPlayers.has(object)) {\n          unknownPlayers.set(object, UnknownPlayer.fromPlayer(object));\n        }\n\n        return unknownPlayers.get(object);\n      }\n\n      if (object instanceof Unit && object.player() !== this.player()) {\n        if (!unknownUnits.has(object)) {\n          unknownUnits.set(object, UnknownUnit.fromUnit(object));\n        }\n\n        return unknownUnits.get(object);\n      }\n\n      if (object instanceof City && object.player() !== this.player()) {\n        if (!unknownCities.has(object)) {\n          unknownCities.set(object, UnknownCity.fromCity(object));\n        }\n\n        return unknownCities.get(object);\n      }\n\n      if (object instanceof Tile) {\n        const playerWorld = playerWorldRegistryInstance.getByPlayer(\n          this.player()\n        );\n\n        return playerWorld.get(object.x(), object.y());\n      }\n\n      if (object instanceof Busy) {\n        return {\n          _: object.constructor.name,\n        };\n      }\n\n      return localFilter(object);\n    };\n  #dataQueue: DataQueue = new DataQueue();\n  #eventEmitter: EventEmitter;\n  #receiver: (channel: string, handler: (...args: any[]) => void) => void;\n  #sender: (channel: string, payload: any) => void;\n  #sentInitialData: boolean = false;\n\n  constructor(\n    player: Player,\n    sender: (channel: string, payload: any) => void,\n    receiver: (channel: string, handler: (...args: any[]) => void) => void\n  ) {\n    super(player);\n\n    this.#eventEmitter = new EventEmitter();\n    this.#sender = sender;\n    this.#receiver = receiver;\n\n    this.#receiver('action', (...args): void => {\n      this.#eventEmitter.emit('action', ...args);\n    });\n\n    // TODO: These could be `HiddenAction`s. Need to add a `perform` method to actions too...\n    this.#receiver(\n      'cheat',\n      ({ name, value }: { name: string; value: any }): void => {\n        if (name === 'RevealMap') {\n          const playerWorld = playerWorldRegistryInstance.getByPlayer(\n            this.player()\n          );\n\n          // A bit nasty... I wonder how slow this data transfer will be...\n          const [tile] = playerWorld.entries();\n\n          tile\n            .tile()\n            .map()\n            .entries()\n            .forEach((tile) => {\n              if (playerWorld.includes(tile)) {\n                return;\n              }\n\n              playerWorld.register(tile);\n\n              const playerTile = playerWorld.getByTile(tile)!;\n\n              this.#dataQueue.add(\n                playerWorld.id(),\n                () => tile.toPlainObject(this.#dataFilter()),\n                `entries[${playerWorld.entries().indexOf(playerTile)}]`\n              );\n            });\n        }\n\n        if (name === 'GrantAdvance') {\n          const [Advance] = advanceRegistryInstance.filter(\n              (Advance) => Advance.name === value\n            ),\n            playerResearch = playerResearchRegistryInstance.getByPlayer(\n              this.player()\n            );\n\n          if (!Advance) {\n            return;\n          }\n\n          if (playerResearch.completed(Advance)) {\n            return;\n          }\n\n          playerResearch.addAdvance(Advance);\n\n          this.#dataQueue.add(\n            playerResearch.id(),\n            playerResearch.toPlainObject(\n              this.#dataFilter(filterToReference(Player))\n            )\n          );\n        }\n\n        if (name === 'GrantGold') {\n          const playerTreasury = playerTreasuryRegistryInstance.getByPlayer(\n            this.player()\n          );\n\n          playerTreasury.add(value);\n\n          this.#dataQueue.add(\n            playerTreasury.id(),\n            playerTreasury.toPlainObject(\n              this.#dataFilter(filterToReference(Player))\n            )\n          );\n        }\n\n        if (name === 'ModifyUnit') {\n          const { unitId, properties } = value;\n\n          const [unit] = unitRegistryInstance.getBy('id', unitId);\n\n          if (!unit) {\n            return;\n          }\n\n          (\n            ['attack', 'defence', 'moves', 'movement', 'visibility'] as (\n              | 'attack'\n              | 'defence'\n              | 'moves'\n              | 'movement'\n              | 'visibility'\n            )[]\n          ).forEach((property) => {\n            if (property in properties) {\n              unit[property]().set(properties[property]);\n            }\n          });\n\n          this.#dataQueue.add(\n            unit.id(),\n            unit.toPlainObject(this.#dataFilter(filterToReference(Player)))\n          );\n        }\n\n        this.sendPatchData();\n      }\n    );\n\n    engineInstance.on('engine:plugins:load:failed', (packagePath, error) => {\n      console.log(packagePath + ' failed to load');\n      console.error(error);\n    });\n\n    engineInstance.on('player:visibility-changed', (tile, player) => {\n      if (player !== this.player()) {\n        return;\n      }\n\n      const playerWorld = playerWorldRegistryInstance.getByPlayer(\n          this.player()\n        ),\n        playerTile = playerWorld.getByTile(tile);\n\n      if (playerTile === null) {\n        new Retryable(\n          () => {\n            const playerTile = playerWorld.getByTile(tile);\n\n            if (playerTile === null) {\n              return false;\n            }\n\n            this.#dataQueue.add(\n              playerWorld.id(),\n              () =>\n                tile.toPlainObject(this.#dataFilter(filterToReference(Player))),\n              `tiles[${playerWorld.entries().indexOf(playerTile)}]`\n            );\n\n            return true;\n          },\n          2,\n          20\n        );\n\n        return;\n      }\n\n      this.#dataQueue.add(\n        playerWorld.id(),\n        () =>\n          playerTile.toPlainObject(this.#dataFilter(filterToReference(Player))),\n        `tiles[${playerWorld.entries().indexOf(playerTile)}]`\n      );\n    });\n\n    ['unit:created', 'unit:defeated'].forEach((event) => {\n      engineInstance.on(event, (unit) => {\n        const playerWorld = playerWorldRegistryInstance.getByPlayer(\n            this.player()\n          ),\n          playerTile = playerWorld.getByTile(unit.tile());\n\n        if (!playerTile) {\n          return;\n        }\n\n        // TODO: check if this is another player first and if there's already another unit there, use an unknown unit\n        //  Need to update Units renderer if this happens\n        this.#dataQueue.update(playerTile.id(), () =>\n          playerTile.toPlainObject(\n            this.#dataFilter(\n              // filterToReferenceAllExcept(Tile, Unit, UnknownPlayer, Yield)\n              filterToReference(Player)\n            )\n          )\n        );\n\n        if (unit.player() !== this.player()) {\n          return;\n        }\n\n        if (event === 'unit:created') {\n          const playerUnits = unitRegistryInstance.getByPlayer(this.player()),\n            playerIndex = playerUnits.indexOf(unit),\n            cityUnits = unitRegistryInstance.getByCity(unit.city()),\n            cityIndex = cityUnits.indexOf(unit),\n            tileUnits = unitRegistryInstance.getByTile(unit.tile()),\n            tileIndex = tileUnits.indexOf(unit);\n\n          this.#dataQueue.add(\n            player.id(),\n            () =>\n              unit.toPlainObject(\n                this.#dataFilter(\n                  filterToReference(Tile, Player, PlayerTile, City)\n                )\n              ),\n            `units[${playerIndex}]`\n          );\n          this.#dataQueue.add(\n            playerTile.id(),\n            () => unit.toPlainObject(this.#dataFilter(filterToReference(Unit))),\n            `units[${tileIndex}]`\n          );\n\n          if (unit.city() !== null) {\n            this.#dataQueue.add(\n              unit.city().id(),\n              () =>\n                unit.toPlainObject(this.#dataFilter(filterToReference(Unit))),\n              `units[${cityIndex}]`\n            );\n          }\n\n          return;\n        }\n\n        this.#dataQueue.update(this.player().id(), () =>\n          this.player().toPlainObject(\n            this.#dataFilter(filterToReferenceAllExcept(Player, Unit))\n          )\n        );\n      });\n    });\n\n    ['unit:destroyed'].forEach((event) => {\n      engineInstance.on(event, (unit: Unit, action: UnitAction) => {\n        if (unit.player() === this.player() && unit.city() !== null) {\n          this.#dataQueue.update(unit.city()!.id(), () =>\n            unit\n              .city()!\n              .toPlainObject(\n                this.#dataFilter(\n                  filterToReference(\n                    CityBuild,\n                    CityGrowth,\n                    CityImprovement,\n                    Player,\n                    PlayerTile,\n                    Tile,\n                    Unit\n                  )\n                )\n              )\n          );\n        }\n      });\n    });\n\n    ['unit:moved'].forEach((event) => {\n      engineInstance.on(event, (unit: Unit, action: UnitAction) => {\n        const playerWorld = playerWorldRegistryInstance.getByPlayer(\n            this.player()\n          ),\n          fromTile = playerWorld.getByTile(action.from()),\n          toTile = playerWorld.getByTile(action.to());\n\n        if (!fromTile && !toTile) {\n          return;\n        }\n\n        if (fromTile) {\n          this.#dataQueue.update(fromTile.id(), () =>\n            fromTile.toPlainObject(\n              this.#dataFilter(filterToReference(Player, City))\n            )\n          );\n        }\n\n        if (toTile) {\n          this.#dataQueue.update(toTile.id(), () =>\n            toTile.toPlainObject(\n              this.#dataFilter(filterToReference(Player, City))\n            )\n          );\n        }\n\n        if (unit.player() === this.player() && unit.city() !== null) {\n          this.#dataQueue.update(unit.city()!.id(), () =>\n            unit\n              .city()!\n              .toPlainObject(\n                this.#dataFilter(\n                  filterToReference(\n                    CityBuild,\n                    CityGrowth,\n                    CityImprovement,\n                    Player,\n                    PlayerTile,\n                    Tile,\n                    Unit\n                  )\n                )\n              )\n          );\n        }\n      });\n    });\n\n    ['tile-improvement:built', 'tile-improvement:pillaged'].forEach((event) => {\n      engineInstance.on(event, (tile) => {\n        const playerWorld = playerWorldRegistryInstance.getByPlayer(\n            this.player()\n          ),\n          playerTile = playerWorld.getByTile(tile);\n\n        if (playerTile) {\n          this.#dataQueue.update(playerTile.id(), () =>\n            playerTile.toPlainObject(\n              this.#dataFilter(filterToReference(Player, City))\n            )\n          );\n        }\n      });\n    });\n\n    engineInstance.on(\n      'city:captured',\n      (city: City, capturingPlayer: Player, originalPlayer: Player) => {\n        if (originalPlayer === this.player()) {\n          const playerCities = cityRegistryInstance.getByPlayer(this.player()),\n            cityIndex = playerCities.indexOf(city);\n\n          if (cityIndex !== -1) {\n            this.#dataQueue.update(this.player().id(), () =>\n              this.player().toPlainObject(\n                this.#dataFilter(filterToReferenceAllExcept(Player))\n              )\n            );\n            // this.#dataQueue.remove(this.player().id(), `cities[${cityIndex}]`);\n          }\n\n          this.sendNotification(\n            `${capturingPlayer\n              .civilization()\n              .name()} have captured our city ${city.name()}!`\n          );\n\n          return;\n        }\n\n        if (capturingPlayer === this.player()) {\n          this.sendNotification(\n            `We have captured ${city.name()} from ${originalPlayer\n              .civilization()\n              .name()}!`\n          );\n\n          return;\n        }\n      }\n    );\n\n    [\n      'city:created',\n      'city:captured',\n      'city:destroyed',\n      'city:grow',\n      'city:shrink',\n    ].forEach((event) => {\n      engineInstance.on(event, (city) => {\n        const playerWorld = playerWorldRegistryInstance.getByPlayer(\n            this.player()\n          ),\n          playerTile = playerWorld.getByTile(city.tile());\n\n        if (!playerTile) {\n          return;\n        }\n\n        this.#dataQueue.update(playerTile.id(), () =>\n          playerTile.toPlainObject(this.#dataFilter(filterToReference(Player)))\n        );\n      });\n    });\n\n    engineInstance.on('city:shrink', (city) => {\n      if (city.player() !== this.player()) {\n        return;\n      }\n\n      this.sendNotification(`Population decrease in ${city.name()}.`);\n    });\n\n    engineInstance.on('city:unit-unsupported', (city: City, unit: Unit) => {\n      if (city.player() !== this.player()) {\n        return;\n      }\n\n      this.sendNotification(\n        `${city.name()} cannot support ${unit.constructor.name}.`\n      );\n    });\n\n    engineInstance.on(\n      'city:unsupported-improvement',\n      (city: City, cityImprovement: CityImprovement) => {\n        if (city.player() !== this.player()) {\n          return;\n        }\n\n        this.sendNotification(\n          `${city.name()} cannot support ${cityImprovement.constructor.name}.`\n        );\n      }\n    );\n\n    engineInstance.on('city:food-storage-exhausted', (city: City) => {\n      if (city.player() !== this.player()) {\n        return;\n      }\n\n      this.sendNotification(`Food storage exhausted in ${city.name()}!`);\n    });\n\n    engineInstance.on('city:building-complete', (cityBuild, build) => {\n      const playerWorld = playerWorldRegistryInstance.getByPlayer(\n        this.player()\n      );\n\n      if (\n        cityBuild.city().player() !== this.player() &&\n        build instanceof Wonder\n      ) {\n        this.sendNotification(\n          `${\n            playerWorld.getByTile(cityBuild.city().tile())\n              ? cityBuild.city().name()\n              : 'A faraway city'\n          } has completed work on ${build.constructor.name}!`\n        );\n\n        return;\n      }\n\n      if (\n        cityBuild.city().player() !== this.player() &&\n        !(build instanceof Wonder)\n      ) {\n        return;\n      }\n\n      this.#dataQueue.update(cityBuild.id(), () =>\n        cityBuild.toPlainObject(\n          this.#dataFilter(filterToReference(Tile, Unit, Player))\n        )\n      );\n\n      this.sendNotification(\n        `${cityBuild.city().name()} has completed work on ${\n          build.constructor.name\n        }!`\n      );\n    });\n\n    engineInstance.on('player:research-complete', (playerResearch, advance) => {\n      if (playerResearch.player() !== this.player()) {\n        return;\n      }\n\n      this.#dataQueue.update(playerResearch.id(), () =>\n        playerResearch.toPlainObject(\n          this.#dataFilter(filterToReference(Player))\n        )\n      );\n\n      this.sendNotification(\n        `You have discovered the secrets of ${advance.constructor.name}!`\n      );\n    });\n\n    engineInstance.on(\n      'goody-hut:action-performed',\n      (goodyHut: GoodyHut, action) => {\n        const tile = goodyHut.tile(),\n          units = unitRegistryInstance.getByTile(tile);\n\n        if (!units.some((unit: Unit) => unit.player() === this.player())) {\n          return;\n        }\n\n        if (action instanceof FreeAdvance) {\n          this.sendNotification(\n            'You have discovered scrolls of ancient wisdom...'\n          );\n\n          return;\n        }\n\n        if (action instanceof FreeCity) {\n          this.sendNotification('You have discovered an advanced tribe...');\n\n          return;\n        }\n\n        if (action instanceof FreeGold) {\n          this.sendNotification('You have discovered valuable treasure...');\n\n          return;\n        }\n\n        if (action instanceof FreeUnit) {\n          this.sendNotification(\n            'You have discovered a friendly tribe of skilled mercenaries...'\n          );\n\n          return;\n        }\n      }\n    );\n\n    engineInstance.on(\n      'player:defeated',\n      (defeatedPlayer: Player, player: Player | null) => {\n        if (defeatedPlayer === this.player()) {\n          this.sendNotification(`You have been defeated!`);\n\n          playerRegistryInstance.unregister(\n            ...playerRegistryInstance.entries()\n          );\n          currentPlayerRegistryInstance.unregister(\n            ...currentPlayerRegistryInstance.entries()\n          );\n\n          // TODO: summary and quit\n\n          this.#sender('restart', null);\n        }\n\n        this.sendNotification(\n          `${defeatedPlayer.civilization().name()} defeated${\n            player ? ` by ${player.civilization().name()}` : ''\n          }.`\n        );\n      }\n    );\n\n    engineInstance.on('city:civil-disorder', (city: City) => {\n      if (city.player() === this.player()) {\n        // TODO: make this an optional action\n        this.sendNotification(`Civil disorder in ${city.name()}!`);\n      }\n    });\n\n    engineInstance.on('player:spaceship:part-built', (player: Player) => {\n      if (this.player() === player) {\n        return;\n      }\n\n      this.sendNotification(\n        `Component added to ${player.civilization().name()} spaceship.`\n      );\n    });\n\n    engineInstance.on('player:spaceship:lost', (player: Player) => {\n      if (this.player() !== player) {\n        return;\n      }\n\n      this.sendNotification(`Our spaceship was lost in space.`);\n    });\n\n    engineInstance.on('player:spaceship:landed', (player: Player) => {\n      if (this.player() !== player) {\n        return;\n      }\n\n      this.sendNotification(`Our spaceship has landed on Alpha Centauri!`);\n    });\n  }\n\n  chooseCivilization(Civilizations: (typeof Civilization)[]): Promise<void> {\n    const makeChoice = (ChosenCivilization: typeof Civilization) => {\n      this.player().setCivilization(new ChosenCivilization());\n\n      return this.chooseLeader(this.player().civilization());\n    };\n\n    return new Promise((resolve, reject) => {\n      if (Civilizations.length === 1) {\n        const [Civilization] = Civilizations;\n\n        makeChoice(Civilization).then(() => resolve());\n\n        return;\n      }\n\n      this.#sender(\n        'chooseCivilization',\n        new TransferObject({ choices: Civilizations }).toPlainObject()\n      );\n\n      this.#receiver('chooseCivilization', (choice) => {\n        const [Civilization] = Civilizations.filter(\n          (Civilization) => Civilization.name === choice\n        );\n\n        if (!Civilization) {\n          reject(\n            `Invalid civilization ${choice} (options: ${Civilizations.map(\n              (Civilization) => Civilization.name\n            ).join(', ')})`\n          );\n\n          return;\n        }\n\n        makeChoice(Civilization).then(() => resolve());\n      });\n    });\n  }\n\n  chooseLeader(civilization: Civilization): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const Leaders = leaderRegistryInstance.getByCivilization(\n        civilization.constructor as IConstructor<Civilization>\n      );\n\n      if (Leaders.length === 1) {\n        const [Leader] = Leaders;\n\n        civilization.setLeader(new Leader());\n\n        resolve();\n\n        return;\n      }\n\n      this.#sender(\n        'chooseLeader',\n        new TransferObject({ choices: Leaders }).toPlainObject()\n      );\n\n      this.#receiver('chooseLeader', (choice) => {\n        const [Leader] = Leaders.filter((Leader) => Leader.name === choice);\n\n        if (!Leader) {\n          reject(\n            `Invalid civilization ${choice} (options: ${Leaders.map(\n              (Leader) => Leader.name\n            ).join(', ')})`\n          );\n\n          return;\n        }\n\n        civilization.setLeader(new Leader());\n\n        resolve();\n      });\n    });\n  }\n\n  handleAction(...args: any[]): boolean {\n    const [action] = args,\n      player = this.player(),\n      actions = player.actions(),\n      mandatoryActions = actions.filter(\n        (action: PlayerAction): boolean =>\n          action instanceof MandatoryPlayerAction\n      );\n\n    const { name, id } = action;\n\n    // TODO: a proper action for this probably...\n    if (name === 'ReassignWorkers') {\n      const [city] = cityRegistryInstance.getBy('id', action.city);\n\n      if (!city) {\n        return false;\n      }\n\n      reassignWorkers(city);\n\n      this.#dataQueue.update(\n        city.id(),\n        city.toPlainObject(this.#dataFilter(filterToReference(Player, Tile)))\n      );\n\n      return false;\n    }\n\n    if (name === 'EndTurn') {\n      return (\n        mandatoryActions.length === 1 &&\n        mandatoryActions.every((action) => action instanceof EndTurn)\n      );\n    }\n\n    if (!name) {\n      console.log('action not specified');\n\n      return false;\n    }\n\n    const [playerAction] = actions.filter(\n      (action: PlayerAction): boolean =>\n        action.constructor.name === name &&\n        id === (action.value() ? action.value().id() : undefined)\n    );\n\n    if (!playerAction) {\n      console.log('action not specified');\n\n      return false;\n    }\n\n    // TODO: other actions\n    // TODO: make this better...\n    if (playerAction instanceof ActiveUnit) {\n      const { unitAction, target } = action,\n        unit: Unit = playerAction.value(),\n        allActions = [\n          ...unit.actions(),\n          ...Object.values(unit.actionsForNeighbours()),\n        ].flat();\n\n      let actions = allActions.filter(\n        (action: UnitAction): boolean => action.constructor.name === unitAction\n      );\n\n      while (actions.length !== 1) {\n        if (actions.length === 0) {\n          console.log(`action not found: ${unitAction}`);\n\n          return false;\n        }\n\n        const [playerTile] = playerWorldRegistryInstance\n          .getByPlayer(this.player())\n          .filter((tile) => tile.id() === target);\n\n        if (!playerTile) {\n          console.log(`tile not found: ${target}`);\n\n          return false;\n        }\n\n        actions = actions.filter(\n          (action: UnitAction): boolean => action.to() === playerTile.tile()\n        );\n\n        if (actions.length > 1) {\n          if (!target) {\n            console.log(\n              `too many actions found: ${unitAction} (${actions.length})`\n            );\n\n            return false;\n          }\n        }\n      }\n\n      const [actionToPerform] = actions;\n\n      actionToPerform.perform();\n\n      return false;\n    }\n\n    if (playerAction instanceof InactiveUnit) {\n      const unit: Unit = playerAction.value();\n\n      if (unit.moves().value() > 0) {\n        this.#dataQueue.update(\n          unit.id(),\n          unit.toPlainObject(this.#dataFilter(filterToReference(Player, Tile)))\n        );\n      }\n\n      unit.activate();\n\n      return false;\n    }\n\n    if (\n      playerAction instanceof CityBuild ||\n      playerAction instanceof ChangeProduction\n    ) {\n      const cityBuild = playerAction.value() as CityBuildItem,\n        { chosen } = action;\n\n      if (!chosen) {\n        console.log(`no build item specified`);\n\n        return false;\n      }\n\n      const [buildItem] = cityBuild\n        .available()\n        .filter((buildItem: BuildItem) => buildItem.item().name === chosen);\n\n      if (!buildItem) {\n        console.log(`build item not available: ${chosen}`);\n\n        return false;\n      }\n\n      cityBuild.build(buildItem.item());\n\n      return false;\n    }\n\n    if (playerAction instanceof ChooseResearch) {\n      const playerResearch = playerAction.value() as PlayerResearch,\n        { chosen } = action;\n\n      if (!chosen) {\n        this.sendNotification(`no build item specified`);\n\n        return false;\n      }\n\n      const [ChosenAdvance] = playerResearch\n        .available()\n        .filter((AdvanceType: typeof Advance) => AdvanceType.name === chosen);\n\n      if (!ChosenAdvance) {\n        console.log(`build item not available: ${chosen}`);\n\n        return false;\n      }\n\n      playerResearch.research(ChosenAdvance);\n\n      return false;\n    }\n\n    if (playerAction instanceof CompleteProduction) {\n      const city = playerAction.value(),\n        playerTreasury = playerTreasuryRegistryInstance.getByPlayer(\n          this.player()\n        );\n\n      playerTreasury.buy(city);\n\n      this.#dataQueue.update(\n        playerTreasury.id(),\n        playerTreasury.toPlainObject(\n          this.#dataFilter(filterToReference(Player))\n        )\n      );\n\n      return false;\n    }\n\n    // TODO: DelayedPlayerAction -> Revolution --> SelectGovernment\n    if (playerAction instanceof Revolution) {\n      const playerGovernment = playerAction.value() as PlayerGovernment,\n        { chosen } = action,\n        [GovernmentType] = playerGovernment\n          .available()\n          .filter((GovernmentType) => GovernmentType.name === chosen);\n\n      if (!GovernmentType) {\n        console.error(`Government type: '${chosen}' not found.`);\n\n        return false;\n      }\n\n      playerGovernment.set(new GovernmentType());\n\n      const playerWorld = playerWorldRegistryInstance.getByPlayer(\n        this.player()\n      );\n\n      this.#dataQueue.update(\n        playerWorld.id(),\n        playerWorld.toPlainObject(this.#dataFilter(filterToReference(Player)))\n      );\n\n      cityRegistryInstance\n        .getByPlayer(this.player())\n        .forEach((city) =>\n          this.#dataQueue.update(\n            city.id(),\n            city.toPlainObject(\n              this.#dataFilter(filterToReference(Player, Tile, Unit))\n            )\n          )\n        );\n\n      return false;\n    }\n\n    if (playerAction instanceof AdjustTradeRates) {\n      const playerTradeRates = playerAction.value() as PlayerTradeRates,\n        { value } = action;\n\n      playerTradeRates.setAll(\n        value.map(([name, value]: [string, string]) => {\n          const [rate] = playerTradeRates\n            .all()\n            .filter((rate) => rate.constructor.name === name);\n\n          return [rate.constructor as typeof TradeRate, value];\n        })\n      );\n\n      cityRegistryInstance\n        .getByPlayer(this.player())\n        .forEach((city) =>\n          this.#dataQueue.update(\n            city.id(),\n            city.toPlainObject(\n              this.#dataFilter(filterToReference(Player, Tile, Unit))\n            )\n          )\n        );\n\n      return false;\n    }\n\n    if (playerAction instanceof LaunchSpaceship) {\n      playerAction.value().launch();\n\n      return false;\n    }\n\n    console.log(`unhandled action: ${JSON.stringify(action)}`);\n    return false;\n  }\n\n  private sendInitialData(): void {\n    const rawData: {\n      player: Player;\n      turn: Turn;\n      year: Year;\n    } = {\n      player: this.player(),\n      turn: turnInstance,\n      year: yearInstance,\n    };\n\n    const dataObject = new TransferObject(rawData);\n\n    this.#sender('gameData', dataObject.toPlainObject(this.#dataFilter()));\n\n    this.#sentInitialData = true;\n  }\n\n  private sendPatchData(): void {\n    this.#sender('gameDataPatch', this.#dataQueue.transferData());\n\n    this.#dataQueue.clear();\n  }\n\n  private sendNotification(message: string): void {\n    this.#sender('gameNotification', {\n      message: message,\n    });\n  }\n\n  takeTurn(): Promise<void> {\n    return new Promise<void>((resolve, reject): void => {\n      if (!this.#sentInitialData) {\n        this.sendInitialData();\n      }\n\n      setTimeout(() => {\n        this.#dataQueue.update(turnInstance.id(), () =>\n          turnInstance.toPlainObject()\n        );\n        this.#dataQueue.update(yearInstance.id(), () =>\n          yearInstance.toPlainObject()\n        );\n        this.#dataQueue.add(this.player().id(), () =>\n          this.player().toPlainObject(\n            this.#dataFilter(filterToReference(Tile, Civilization))\n          )\n        );\n\n        this.sendPatchData();\n      }, 1);\n\n      const listener = (...args: any[]): void => {\n        try {\n          if (this.handleAction(...args)) {\n            this.#eventEmitter.off('action', listener);\n\n            this.sendPatchData();\n\n            setTimeout(() => resolve(), 100);\n\n            return;\n          }\n\n          this.#dataQueue.update(this.player().id(), () =>\n            this.player().toPlainObject(\n              this.#dataFilter(filterToReference(PlayerWorld, Tile, City))\n            )\n          );\n\n          this.sendPatchData();\n        } catch (e) {\n          reject(e);\n        }\n      };\n\n      this.#eventEmitter.on('action', listener);\n    });\n  }\n}\n\nexport default DataTransferClient;\n", "import {\n  Client as BaseClient,\n  IClient as IBaseClient,\n} from '@civ-clone/core-client/Client';\nimport {\n  LeaderRegistry,\n  instance as leaderRegistryInstance,\n} from '@civ-clone/core-civilization/LeaderRegistry';\nimport Civilization from '@civ-clone/core-civilization/Civilization';\nimport { IConstructor } from '@civ-clone/core-registry/Registry';\nimport Player from '@civ-clone/core-player/Player';\n\nexport interface IClient extends IBaseClient {\n  chooseCivilization(choices: typeof Civilization[]): void;\n  chooseLeader(civilization: Civilization): void;\n}\n\nexport class Client extends BaseClient implements IClient {\n  #leaderRegistry: LeaderRegistry;\n  #randomNumberGenerator: () => number;\n\n  constructor(\n    player: Player,\n    leaderRegistry: LeaderRegistry = leaderRegistryInstance,\n    randomNumberGenerator: () => number = () => Math.random()\n  ) {\n    super(player);\n\n    this.#leaderRegistry = leaderRegistry;\n    this.#randomNumberGenerator = randomNumberGenerator;\n  }\n\n  chooseCivilization(choices: typeof Civilization[]): void {\n    const Random =\n        choices[Math.floor(choices.length * this.#randomNumberGenerator())],\n      player = this.player(),\n      civilization = new Random();\n\n    player.setCivilization(civilization);\n\n    this.chooseLeader(civilization);\n  }\n\n  chooseLeader(civilization: Civilization): void {\n    const leaders = this.#leaderRegistry.getByCivilization(\n      civilization.constructor as IConstructor<Civilization>\n    );\n\n    const RandomLeader =\n      leaders[Math.floor(leaders.length * this.#randomNumberGenerator())];\n\n    civilization.setLeader(new RandomLeader());\n  }\n}\n\nexport default Client;\n", "import { ObjectMap } from '@civ-clone/core-data-object/DataObject';\n\ntype DataPatchType = 'add' | 'remove' | 'update';\n\ntype DataPatchContents = {\n  type: DataPatchType;\n  index?: string | null;\n  value?: (() => ObjectMap) | ObjectMap;\n};\n\nexport type DataPatch = {\n  [id: string]: DataPatchContents;\n};\n\nexport class DataQueue {\n  #queue: DataPatch[] = [];\n\n  add(\n    targetId: string,\n    value: DataPatchContents['value'],\n    index: DataPatchContents['index'] = null\n  ): void {\n    this.#queue.push({\n      [targetId]: {\n        type: 'add',\n        index,\n        value,\n      },\n    });\n  }\n\n  clear(): void {\n    this.#queue.splice(0);\n  }\n\n  remove(targetId: string, index: DataPatchContents['index'] = null): void {\n    this.#queue.push({\n      [targetId]: {\n        type: 'remove',\n        index,\n      },\n    });\n  }\n\n  // TODO: look at chunking the data transfer\n  transferData(): DataPatch[] {\n    return this.#queue.slice(0).map((patch) => {\n      const patchData: DataPatch = {};\n\n      Object.entries(patch).forEach(([key, { type, index, value }]) => {\n        patchData[key] = {\n          type,\n          index,\n          value: typeof value === 'function' ? value() : value,\n        } as DataPatchContents;\n      });\n\n      return patchData;\n    });\n  }\n\n  update(\n    targetId: string,\n    value: DataPatchContents['value'],\n    index: DataPatchContents['index'] = null\n  ): void {\n    this.#queue.push({\n      [targetId]: {\n        type: 'update',\n        index,\n        value,\n      },\n    });\n  }\n}\n\nexport default DataQueue;\n", "export { EndTurn } from '@civ-clone/base-player-action-end-turn/EndTurn';\n", "export { LaunchSpaceship } from '@civ-clone/base-player-action-launch-spaceship/LaunchSpaceship';\n", "export class RetryFailed extends Error {\n  constructor(\n    message: string,\n    handler: (...args: any[]) => void,\n    attempts: number\n  ) {\n    super(message);\n  }\n}\n\nexport default RetryFailed;\n", "import RetryFailed from './Error/RetryFailed';\n\nexport class Retryable {\n  #attempt = 0;\n  #done: Promise<void>;\n  #handler: () => boolean;\n  #maxTries: number;\n  #reference: NodeJS.Timeout;\n  #reject?: (reason?: any) => void;\n  #resolve?: (value: void | PromiseLike<void>) => void;\n\n  constructor(handler: () => boolean, maxTries = 5, interval = 100) {\n    this.#handler = handler;\n    this.#maxTries = maxTries;\n\n    this.#reference = setInterval(() => this.run(), interval);\n    this.#done = new Promise((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n    });\n  }\n\n  run(): void {\n    if (++this.#attempt > this.#maxTries) {\n      clearInterval(this.#reference);\n\n      this.#reject!(\n        new RetryFailed('Retry failed.', this.#handler, this.#attempt)\n      );\n\n      return;\n    }\n\n    if (this.#handler()) {\n      clearInterval(this.#reference);\n\n      this.#resolve!();\n    }\n  }\n\n  then(): Promise<void> {\n    return this.#done;\n  }\n}\n\nexport default Retryable;\n", "import DataObject from '@civ-clone/core-data-object/DataObject';\nimport Player from '@civ-clone/core-player/Player';\n\nexport class TransferObject extends DataObject {\n  // #player: Player;\n  //\n  // constructor(player: Player) {\n  //   super();\n  //\n  //   this.#player = player;\n  //\n  //   this.addKey('player');\n  // }\n  //\n  // player() {\n  //   return this.#player;\n  // }\n\n  constructor(data: Object) {\n    super();\n\n    Object.assign(this, data);\n\n    // @ts-ignore\n    this.addKey(...Object.keys(data));\n  }\n}\n\nexport default TransferObject;\n", "import CoreCity from '@civ-clone/core-city/City';\nimport DataObject from '@civ-clone/core-data-object/DataObject';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\nimport { instance as cityGrowthRegistryInstance } from '@civ-clone/core-city-growth/CityGrowthRegistry';\n\nexport class City extends DataObject {\n  #name: string;\n  #player: Player;\n  #growth: {\n    size: number;\n  } = {\n    size: 0,\n  };\n  #tile: Tile;\n\n  constructor(name: string, tile: Tile, player: Player, size: number) {\n    super();\n\n    this.#name = name;\n    this.#player = player;\n    this.#growth.size = size;\n    this.#tile = tile;\n\n    this.addKey('_', 'growth', 'name', 'player', 'tile');\n  }\n\n  static fromCity(city: CoreCity): City {\n    const cityGrowth = cityGrowthRegistryInstance.getByCity(city);\n\n    return new City(city.name(), city.tile(), city.player(), cityGrowth.size());\n  }\n\n  _(): string {\n    return 'City';\n  }\n\n  name(): string {\n    return this.#name;\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  growth(): {\n    size: number;\n  } {\n    return this.#growth;\n  }\n\n  tile(): Tile {\n    return this.#tile;\n  }\n}\n\nexport default City;\n", "import Civilization from '@civ-clone/core-civilization/Civilization';\nimport CorePlayer from '@civ-clone/core-player/Player';\nimport DataObject from '@civ-clone/core-data-object/DataObject';\n\nexport class Player extends DataObject {\n  #civilization: Civilization;\n\n  constructor(civilization: Civilization) {\n    super();\n\n    this.#civilization = civilization;\n\n    this.addKey('_', 'civilization');\n  }\n\n  static fromPlayer(player: CorePlayer): Player {\n    return new Player(player.civilization());\n  }\n\n  _(): string {\n    return 'Player';\n  }\n\n  civilization(): Civilization {\n    return this.#civilization;\n  }\n}\n\nexport default Player;\n", "import CoreUnit from '@civ-clone/core-unit/Unit';\nimport DataObject from '@civ-clone/core-data-object/DataObject';\nimport Player from '@civ-clone/core-player/Player';\nimport Tile from '@civ-clone/core-world/Tile';\n\nexport class Unit extends DataObject {\n  #_: string;\n  #tile: Tile;\n  #player: Player;\n\n  constructor(name: string, tile: Tile, player: Player) {\n    super();\n\n    this.#_ = name;\n    this.#tile = tile;\n    this.#player = player;\n\n    this.addKey('_', 'tile', 'player');\n  }\n\n  static fromUnit(unit: CoreUnit): Unit {\n    return new Unit(unit.constructor.name, unit.tile(), unit.player());\n  }\n\n  _(): string {\n    return this.#_;\n  }\n\n  player(): Player {\n    return this.#player;\n  }\n\n  tile(): Tile {\n    return this.#tile;\n  }\n}\n\nexport default Unit;\n", "import DataTransferClient from './DataTransferClient';\nimport Player from '@civ-clone/core-player/Player';\nimport SimpleAIClient from '@civ-clone/simple-ai-client/SimpleAIClient';\nimport TransferObject from './TransferObject';\nimport Transport from './Transport';\nimport { instance as clientRegistryInstance } from '@civ-clone/core-client/ClientRegistry';\nimport { instance as engine } from '@civ-clone/core-engine/Engine';\nimport { instance as playerRegistryInstance } from '@civ-clone/core-player/PlayerRegistry';\n\nexport interface IGame {\n  start(): void;\n}\n\nexport class Game implements IGame {\n  #transport: Transport;\n\n  constructor(transport: Transport) {\n    this.#transport = transport;\n\n    transport.receive('start', () => {\n      this.bindEvents();\n      this.start();\n    });\n\n    transport.receive('setOption', ({ name, value }) => {\n      this.#transport.send('notification', `setting ${name} to ${value}`);\n      engine.setOption(name, value);\n    });\n\n    transport.receive('getOptions', (values: string[]) =>\n      transport.send(\n        'getOptions',\n        values.reduce((options, optionName) => {\n          options[optionName] = engine.option(optionName);\n\n          return options;\n        }, {} as { [key: string]: any })\n      )\n    );\n\n    transport.receive('setOptions', (values: { [key: string]: any }) => {\n      Object.entries(values).forEach(([option, value]) =>\n        engine.setOption(option, value)\n      );\n\n      transport.send('setOptions');\n    });\n  }\n\n  private bindEvents(): void {\n    this.#transport.send('notification', `binding events`);\n\n    engine.on('engine:initialise', (): void =>\n      this.#transport.send('notification', `initialising...`)\n    );\n\n    engine.on('engine:plugins:load:success', (packageName: string): void =>\n      this.#transport.send('notification', `loaded plugin: ${packageName}`)\n    );\n\n    engine.on('engine:plugins-loaded', (): void =>\n      this.#transport.send('notification', `plugins loaded`)\n    );\n\n    engine.on('engine:start', (): void =>\n      this.#transport.send('notification', `starting...`)\n    );\n\n    engine.on('world:generate-start-tiles', (): void =>\n      this.#transport.send('notification', `generating start tiles...`)\n    );\n\n    engine.on('world:built', (): void =>\n      this.#transport.send('notification', `world built`)\n    );\n\n    engine.on('game:start', (): void =>\n      this.#transport.send('notification', `game start`)\n    );\n\n    engine.on('turn:start', (turn): void =>\n      this.#transport.send('notification', `turn start ${turn}`)\n    );\n\n    engine.on('player:turn-start', (player): void =>\n      this.#transport.send(\n        'notification',\n        `player turn-start: ${player.civilization().constructor.name}`\n      )\n    );\n  }\n\n  start(): void {\n    engine.on('engine:start', (): void => {\n      new Array(parseInt(engine.option('players'), 10))\n        .fill(0)\n        .forEach((value: 0, i: number) => {\n          const player = new Player(),\n            // TODO: This is pretty basic.\n            client =\n              i === 0\n                ? new DataTransferClient(\n                    player,\n                    (channel: string, payload: TransferObject) =>\n                      this.#transport.send(channel, payload),\n                    (\n                      channel: string,\n                      handler: (...args: any[]) => void\n                    ): void => this.#transport.receive(channel, handler)\n                  )\n                : new SimpleAIClient(player);\n\n          playerRegistryInstance.register(player);\n          clientRegistryInstance.register(client);\n\n          this.#transport.send('notification', `generating world...`);\n        });\n    });\n\n    // we don't want to try and use FS objects so replace this call with the direct events instead.\n    engine.start();\n\n    import('../plugins').then(() => engine.emit('plugins:load:end'));\n  }\n}\n\nexport default Game;\n", "import { Request, RequestArgs, RequestReturn } from './Request';\nimport Transport from './Transport';\n\nexport abstract class AbstractTransport implements Transport {\n  abstract receive(channel: string, handler: (...args: any[]) => void): void;\n  abstract receiveOnce(\n    channel: string,\n    handler: (...args: any[]) => void\n  ): void;\n\n  async request<\n    RequestType extends Request,\n    Args extends any[] = RequestArgs<RequestType>,\n    Return extends any = RequestReturn<RequestType>\n  >(request: Request): Promise<Return> {\n    return new Promise<Return>((resolve) => {\n      this.send(request.channel(), ...request.args());\n\n      this.receiveOnce(request.channel(), (value: Return) => resolve(value));\n    });\n  }\n\n  abstract send(channel: string, data?: any): void;\n}\n\nexport default AbstractTransport;\n", "import AbstractTransport from './AbstractTransport';\n\nexport class ParentTransport extends AbstractTransport {\n  receive(receivingChannel: string, handler: (...args: any[]) => void): void {\n    addEventListener('message', ({ data: { channel, data } }) => {\n      if (channel === receivingChannel) {\n        handler(data);\n      }\n    });\n  }\n\n  receiveOnce(\n    receivingChannel: string,\n    handler: (...args: any[]) => void\n  ): void {\n    addEventListener(\n      'message',\n      ({ data: { channel, data } }) => {\n        if (channel === receivingChannel) {\n          handler(data);\n        }\n      },\n      {\n        once: true,\n      }\n    );\n  }\n\n  send(channel: string, data: any): void {\n    postMessage({\n      channel,\n      data,\n    });\n  }\n}\n\nexport default ParentTransport;\n", "import Game from './Engine/Game';\nimport ParentTransport from './Engine/ParentTransport';\n\nconst game = new Game(new ParentTransport());\n"],
  "mappings": "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IAAI,UAAU,qCAAqC,EAG3D,OAAOA,EAAQ,EACjB,CACF,EAhBaC,EAAAV,GAAA,kBAkBAC,GAA2B,IAAID,KC7B5C,IAEaW,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAuBK,EAAa,CAAC,EAA/BC,EAAAN,GAAA,YAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,WACR,OAAQ,UACR,OAAQ,CAAC,UAAW,MAAM,CAC5B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAUJ,EAAMC,CAAK,CAAC,CACzE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,aACA,WACA,cACA,UACA,UACA,UACA,eACA,cACA,YACA,SACA,WACA,SACA,eACA,aACA,WACA,gBACA,YACA,eACA,UACA,SACA,SACA,UACA,UACA,YACA,WACA,UACA,gBACA,YACA,aACA,YACA,YACA,cACA,SACA,SACA,OACA,aACA,UACA,cACA,mBACA,QACA,UACA,QACA,aACA,iBACA,UACA,cACA,QACA,YACA,QACA,cACA,UACA,YACA,cACA,SACA,UACA,WACA,YACA,YACA,iBACA,YACA,WACA,YACA,aACA,YACA,aACA,aACA,aACA,YACA,QACA,UACA,UACA,SACA,SACA,SACA,SACA,cACA,aACA,cACA,iBACA,SACA,UACA,WACA,UACA,UACA,aACA,OACA,WACA,UACA,qBACA,kBACA,UACA,aACA,UACA,SACA,UACA,UACA,QACA,WACA,cACA,UACA,aACA,SACA,iBACA,UACA,UACA,gBACA,aACA,SACA,eACA,gBACA,YACA,WACA,mBACA,iBACA,eACA,WACA,UACA,SACA,aACA,QACA,cACA,aACA,UACA,iBACA,gBACA,WACA,cACA,gBACA,QACA,WACA,SACA,aACA,aACA,SACA,YACA,YACA,cACA,YACA,kBACA,cACA,UACA,cACA,aACA,eACA,mBACA,aACA,YACA,QACA,YACA,eACA,iBACA,SACA,SACA,SACA,OACA,cACA,eACA,UACA,aACA,UACA,YACA,WACA,cACA,WACA,UACA,cACA,YACA,WACA,YACA,QACA,cACA,SACA,YACA,UACA,aACA,SACA,WACA,WACA,WACA,WACA,WACA,aACA,UACA,WACA,WACA,UACA,WACA,eACA,UACA,SACA,YACA,SACA,SACA,WACA,YACA,SACA,OACA,WACA,aACA,mBACA,aACA,SACA,UACA,cACA,UACA,gBACA,WACA,eACA,mBACA,YACA,WACA,UACA,OACA,cACA,YACA,aACA,gBACA,YACA,SACA,SACA,cACA,QACA,SACA,WACA,UACA,aACA,WACA,cACA,WACA,UACA,YACA,WACA,YACA,aACA,SACA,SACA,YACA,aACA,WACA,UACA,aACA,YACA,eACA,YACA,QACA,aACA,kBACA,cACA,WACA,WACA,WACA,WACA,cACA,WACA,aACA,cACA,mBACA,gBACA,aACA,aACA,SACA,SACA,gBACA,SACA,QACA,SACA,UACA,kBACA,SACA,UACA,UACA,aACA,WACA,UACA,WACA,WACA,YACA,eACA,gBACA,gBACA,YACA,YACA,cACA,UACA,UACA,YACA,WACA,aACA,QACA,cACA,cACA,QACA,UACA,YACA,YACA,gBACA,SACA,WACA,UACA,SACA,QACA,WACA,aACA,SACA,YACA,aACA,QACA,aACA,UACA,SACA,aACA,aACA,UACA,WACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAUH,IAAM,CAAC,CAAC,CACzE,iFCjUA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAoBK,EAAa,CAAC,EAA5BC,EAAAN,GAAA,SAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,QACR,OAAQ,QACR,OAAQ,CAAC,UAAW,SAAS,CAC/B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAOJ,EAAMC,CAAK,CAAC,CACtE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,eACA,cACA,aACA,UACA,WACA,gBACA,aACA,WACA,gBACA,eACA,YACA,OACA,SACA,QACA,WACA,SACA,cACA,aACA,WACA,WACA,eACA,cACA,cACA,YACA,cACA,aACA,cACA,WACA,WACA,WACA,eACA,YACA,cACA,aACA,YACA,SACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAOH,IAAM,CAAC,CAAC,CACtE,iFC3CA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAyBK,EAAa,CAAC,EAAjCC,EAAAN,GAAA,cAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,aACR,OAAQ,UACR,OAAQ,CAAC,UAAW,SAAS,CAC/B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAYJ,EAAMC,CAAK,CAAC,CAC3E,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,UACA,WACA,WACA,QACA,MACA,SACA,QACA,cACA,OACA,WACA,iBACA,SACA,SACA,QACA,OACA,OACA,UACA,YACA,aACA,UACA,OACA,QACA,SACA,OACA,OACA,QACA,KACA,QACA,QACA,SACA,OACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAYH,IAAM,CAAC,CAAC,CAC3E,iFCtCA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAsBK,EAAa,CAAC,EAA9BC,EAAAN,GAAA,WAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,UACR,OAAQ,QACR,OAAQ,CAAC,UAAW,MAAM,CAC5B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAASJ,EAAMC,CAAK,CAAC,CACxE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,UACA,WACA,YACA,UACA,YACA,iBACA,UACA,UACA,QACA,QACA,WACA,WACA,SACA,WACA,SACA,UACA,SACA,QACA,YACA,WACA,UACA,YACA,eACA,UACA,QACA,eACA,SACA,UACA,UACA,eACA,SACA,YACA,UACA,WACA,WACA,UACA,OACA,UACA,YACA,SACA,UACA,UACA,OACA,WACA,SACA,UACA,UACA,UACA,SACA,SACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAASH,IAAM,CAAC,CAAC,CACxE,iFCzDA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAuBK,EAAa,CAAC,EAA/BC,EAAAN,GAAA,YAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,WACR,OAAQ,QACR,OAAQ,CAAC,UAAW,MAAM,CAC5B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAUJ,EAAMC,CAAK,CAAC,CACzE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,QACA,aACA,QACA,mBACA,YACA,OACA,QACA,aACA,sBACA,QACA,QACA,WACA,SACA,UACA,QACA,WACA,WACA,WACA,YACA,OACA,QACA,WACA,sBACA,gBACA,QACA,iBACA,QACA,UACA,uBACA,UACA,eACA,OACA,YACA,eACA,SACA,SACA,YACA,iBACA,QACA,SACA,SACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAUH,IAAM,CAAC,CAAC,CACzE,iFChDA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAsBK,EAAa,CAAC,EAA9BC,EAAAN,GAAA,WAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,UACR,OAAQ,UACR,OAAQ,CAAC,OAAQ,SAAS,CAC5B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAASJ,EAAMC,CAAK,CAAC,CACxE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,SACA,aACA,YACA,QACA,YACA,UACA,aACA,YACA,WACA,qBACA,iBACA,gBACA,aACA,WACA,cACA,UACA,QACA,SACA,sBACA,cACA,aACA,QACA,UACA,aACA,UACA,UACA,cACA,kBACA,UACA,eACA,QACA,SACA,gBACA,YACA,UACA,SACA,UACA,OACA,gBACA,eACA,YACA,WACA,SACA,aACA,YACA,YACA,SACA,aACA,mBACA,YACA,aACA,SACA,YACA,SACA,eACA,SACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAASH,IAAM,CAAC,CAAC,CACxE,iFC/DA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAqBK,EAAa,CAAC,EAA7BC,EAAAN,GAAA,UAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,SACR,OAAQ,SACR,OAAQ,CAAC,OAAQ,SAAS,CAC5B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAQJ,EAAMC,CAAK,CAAC,CACvE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,QACA,YACA,OACA,WACA,OACA,SACA,aACA,cACA,WACA,QACA,SACA,QACA,WACA,mBACA,SACA,WACA,QACA,WACA,SACA,eACA,UACA,cACA,kBACA,mBACA,QACA,UACA,QACA,SACA,YACA,OACA,cACA,uBACA,aACA,WACA,QACA,cACA,OACA,aACA,aACA,YACA,QACA,UACA,YACA,WACA,UACA,kBACA,aACA,UACA,WACA,wBACA,aACA,aACA,WACA,iBACA,mBACA,eACA,kBACA,MACA,gBACA,YACA,sBACA,UACA,aACA,cACA,2BACA,SACA,SACA,gBACA,cACA,SACA,SACA,UACA,UACA,sBACA,mBACA,mBACA,UACA,iBACA,oBACA,oBACA,UACA,SACA,QACA,gBACA,SACA,SACA,SACA,iBACA,cACA,UACA,aACA,YACA,YACA,QACA,YACA,iBACA,YACA,gBACA,WACA,sBACA,UACA,iBACA,SACA,QACA,UACA,SACA,UACA,qBACA,YACA,SACA,QACA,kBACA,mBACA,cACA,QACA,UACA,WACA,SACA,eACA,SACA,QACA,UACA,UACA,YACA,YACA,YACA,SACA,OACA,6BACA,WACA,YACA,mBACA,aACA,UACA,iBACA,qBACA,cACA,QACA,QACA,UACA,eACA,iBACA,sBACA,kBACA,SACA,aACA,0BACA,cACA,UACA,oBACA,iBACA,UACA,kBACA,iBACA,gBACA,YACA,eACA,eACA,SACA,eACA,gBACA,mBACA,mBACA,SACA,eACA,wBACA,UACA,aACA,YACA,UACA,0BACA,QACA,eACA,SACA,QACA,UACA,eACA,kBACA,eACA,MACA,QACA,cACA,UACA,wBACA,uBACA,QACA,SACA,aACA,WACA,OACA,UACA,YACA,0BACA,oBACA,eACA,uBACA,eACA,SACA,mBACA,sBACA,gBACA,4BACA,SACA,kBACA,WACA,eACA,UACA,+BACA,gBACA,SACA,aACA,gBACA,2BACA,UACA,SACA,oBACA,YACA,qBACA,mBACA,YACA,WACA,uBACA,OACA,QACA,YACA,mBACA,YACA,sBACA,yBACA,uBACA,eACA,WACA,YACA,UACA,sBACA,eACA,2BACA,WACA,YACA,OACA,YACA,cACA,eACA,gBACA,UACA,QACA,mBACA,UACA,iBACA,YACA,mBACA,gBACA,qBACA,oBACA,oBACA,SACA,UACA,mBACA,mBACA,mBACA,WACA,oBACA,WACA,UACA,SACA,aACA,oBACA,eACA,eACA,0BACA,WACA,gBACA,SACA,SACA,SACA,SACA,4BACA,cACA,cACA,uBACA,SACA,8BACA,0BACA,UACA,aACA,gBACA,sBACA,sBACA,aACA,WACA,wBACA,aACA,qBACA,SACA,SACA,WACA,SACA,SACA,SACA,aACA,SACA,UACA,cACA,kBACA,mBACA,UACA,YACA,sBACA,oBACA,UACA,WACA,UACA,YACA,yBACA,aACA,eACA,gBACA,YACA,UACA,UACA,SACA,UACA,iBACA,cACA,cACA,eACA,wBACA,eACA,SACA,iBACA,cACA,YACA,eACA,uBACA,+BACA,UACA,mBACA,wBACA,aACA,sBACA,QACA,WACA,OACA,OACA,OACA,QACA,UACA,WACA,oBACA,UACA,WACA,mBACA,YACA,QACA,cACA,WACA,aACA,YACA,SACA,cACA,WACA,YACA,QACA,yBACA,QACA,mBACA,YACA,qBACA,wBACA,aACA,YACA,OACA,YACA,aACA,UACA,aACA,QACA,uBACA,SACA,YACA,wBACA,0BACA,WACA,iBACA,WACA,oBACA,WACA,iBACA,qBACA,OACA,aACA,UACA,eACA,iBACA,SACA,iBACA,WACA,iBACA,sBACA,OACA,WACA,SACA,uBACA,aACA,aACA,yBACA,UACA,gBACA,sBACA,oBACA,4BACA,mBACA,gBACA,uBACA,UACA,QACA,mBACA,yBACA,YACA,gBACA,UACA,oBACA,cACA,MACA,kBACA,sBACA,oBACA,qBACA,OACA,iBACA,SACA,0BACA,cACA,uBACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAQH,IAAM,CAAC,CAAC,CACvE,iFCzbA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAqBK,EAAa,CAAC,EAA7BC,EAAAN,GAAA,UAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,SACR,OAAQ,UACR,OAAQ,CAAC,OAAQ,MAAM,CACzB,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAQJ,EAAMC,CAAK,CAAC,CACvE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,SACA,UACA,SACA,UACA,YACA,YACA,gBACA,WACA,QACA,UACA,SACA,UACA,UACA,YACA,WACA,SACA,YACA,YACA,OACA,aACA,YACA,WACA,WACA,YACA,gBACA,qBACA,eACA,WACA,OACA,SACA,QACA,YACA,WACA,UACA,YACA,aACA,SACA,QACA,UACA,SACA,QACA,OACA,iBACA,yBACA,UACA,wBACA,YACA,aACA,eACA,UACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAQH,IAAM,CAAC,CAAC,CACvE,iFCzDA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAoBK,EAAa,CAAC,EAA5BC,EAAAN,GAAA,SAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,QACR,OAAQ,SACR,OAAQ,CAAC,UAAW,MAAM,CAC5B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAOJ,EAAMC,CAAK,CAAC,CACtE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,SACA,eACA,SACA,UACA,UACA,YACA,YACA,YACA,WACA,YACA,SACA,UACA,QACA,OACA,YACA,YACA,UACA,YACA,aACA,UACA,kBACA,WACA,SACA,YACA,WACA,gBACA,aACA,UACA,UACA,iBACA,UACA,UACA,UACA,aACA,SACA,iBACA,SACA,WACA,WACA,SACA,SACA,QACA,WACA,WACA,SACA,WACA,cACA,WACA,QACA,QACA,SACA,SACA,WACA,WACA,SACA,cACA,SACA,kBACA,cACA,aACA,YACA,WACA,aACA,UACA,YACA,YACA,cACA,UACA,UACA,cACA,YACA,QACA,WACA,WACA,UACA,sBACA,QACA,eACA,aACA,kBACA,WACA,SACA,WACA,UACA,QACA,SACA,SACA,SACA,QACA,SACA,WACA,QACA,OACA,WACA,WACA,QACA,cACA,QACA,MACA,SACA,UACA,SACA,YACA,SACA,SACA,UACA,WACA,iBACA,YACA,WACA,UACA,SACA,uBACA,SACA,OACA,YACA,SACA,cACA,WACA,UACA,mBACA,UACA,aACA,WACA,UACA,YACA,WACA,UACA,QACA,mBACA,cACA,OACA,YACA,WACA,SACA,WACA,iBACA,YACA,UACA,SACA,WACA,aACA,UACA,cACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAOH,IAAM,CAAC,CAAC,CACtE,iFCvJA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAqBK,EAAa,CAAC,EAA7BC,EAAAN,GAAA,UAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,SACR,OAAQ,QACR,OAAQ,CAAC,UAAW,SAAS,CAC/B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAQJ,EAAMC,CAAK,CAAC,CACvE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,QACA,SACA,YACA,YACA,YACA,UACA,UACA,QACA,OACA,SACA,UACA,SACA,SACA,SACA,QACA,SACA,gBACA,mBACA,QACA,WACA,YACA,WACA,OACA,SACA,YACA,SACA,SACA,kBACA,cACA,WACA,WACA,aACA,UACA,WACA,cACA,YACA,SACA,SACA,UACA,WACA,aACA,aACA,UACA,UACA,SACA,OACA,aACA,WACA,UACA,qBACA,kBACA,WACA,YACA,SACA,WACA,UACA,UACA,YACA,cACA,QACA,iBACA,WACA,UACA,SACA,WACA,aACA,YACA,UACA,WACA,QACA,aACA,SACA,UACA,YACA,QACA,UACA,YACA,WACA,WACA,UACA,WACA,SACA,WACA,QACA,QACA,WACA,WACA,SACA,OACA,WACA,SACA,aACA,QACA,wBACA,YACA,QACA,UACA,WACA,cACA,WACA,OACA,qBACA,UACA,aACA,aACA,YACA,UACA,kBACA,cACA,SACA,eACA,UACA,UACA,WACA,WACA,YACA,gBACA,WACA,WACA,QACA,QACA,WACA,SACA,QACA,WACA,YACA,cACA,aACA,UACA,SACA,QACA,SACA,YACA,YACA,WACA,eACA,SACA,UACA,WACA,SACA,UACA,aACA,WACA,WACA,QACA,YACA,QACA,YACA,WACA,SACA,UACA,YACA,eACA,UACA,YACA,QACA,SACA,QACA,eACA,SACA,WACA,QACA,QACA,UACA,uBACA,SACA,QACA,MACA,UACA,cACA,QACA,OACA,SACA,SACA,QACA,QACA,YACA,aACA,SACA,YACA,eACA,YACA,YACA,YACA,aACA,YACA,eACA,cACA,QACA,cACA,OACA,WACA,UACA,OACA,aACA,WACA,gBACA,UACA,YACA,iBACA,gBACA,QACA,YACA,cACA,WACA,QACA,UACA,YACA,SACA,eACA,UACA,cACA,cACA,aACA,QACA,SACA,YACA,YACA,+BACA,YACA,WACA,cACA,SACA,cACA,QACA,SACA,UACA,SACA,SACA,UACA,UACA,SACA,SACA,QACA,QACA,uBACA,cACA,UACA,aACA,SACA,QACA,WACA,YACA,gBACA,WACA,WACA,OACA,WACA,UACA,UACA,UACA,QACA,UACA,YACA,mBACA,OACA,UACA,SACA,WACA,wBACA,QACA,YACA,YACA,WACA,gBACA,SACA,QACA,QACA,SACA,YACA,UACA,WACA,UACA,UACA,aACA,aACA,QACA,cACA,QACA,UACA,WACA,aACA,WACA,cACA,WACA,WACA,eACA,WACA,cACA,YACA,YACA,aACA,WACA,SACA,SACA,iBACA,YACA,QACA,YACA,aACA,SACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAQH,IAAM,CAAC,CAAC,CACvE,iFCpTA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAqBK,EAAa,CAAC,EAA7BC,EAAAN,GAAA,UAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,SACR,OAAQ,WACR,OAAQ,CAAC,UAAW,SAAS,CAC/B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAQJ,EAAMC,CAAK,CAAC,CACvE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,cACA,UACA,UACA,aACA,cACA,UACA,eACA,WACA,QACA,aACA,WACA,WACA,YACA,aACA,gBACA,mBACA,cACA,mBACA,WACA,QACA,aACA,aACA,UACA,kBACA,SACA,aACA,QACA,kBACA,UACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAQH,IAAM,CAAC,CAAC,CACvE,iFCpCA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAoBK,EAAa,CAAC,EAA5BC,EAAAN,GAAA,SAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,QACR,OAAQ,OACR,OAAQ,CAAC,UAAW,SAAS,CAC/B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAAOJ,EAAMC,CAAK,CAAC,CACtE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,OACA,WACA,QACA,YACA,UACA,UACA,MACA,WACA,UACA,cACA,gBACA,WACA,YACA,sBACA,WACA,iBACA,QACA,wBACA,QACA,WACA,UACA,UACA,WACA,UACA,aACA,YACA,WACA,qBACA,qBACA,wBACA,kBACA,aACA,WACA,SACA,WACA,qBACA,kBACA,qBACA,+BACA,kBACA,kBACA,gBACA,WACA,kBACA,YACA,gBACA,aACA,UACA,UACA,uBACA,UACA,mBACA,eACA,gBACA,UACA,cACA,cACA,eACA,QACA,aACA,6BACA,YACA,eACA,WACA,2BACA,QACA,WACA,6BACA,YACA,oBACA,QACA,QACA,aACA,YACA,wBACA,qBACA,SACA,YACA,aACA,QACA,yBACA,YACA,WACA,aACA,cACA,YACA,SACA,iBACA,gBACA,iBACA,uBACA,eACA,oBACA,gBACA,aACA,YACA,SACA,QACA,aACA,mBACA,WACA,yBACA,cACA,aACA,WACA,YACA,aACA,iBACA,oBACA,cACA,YACA,UACA,sBACA,WACA,aACA,eACA,eACA,YACA,YACA,YACA,gBACA,eACA,WACA,UACA,UACA,UACA,QACA,WACA,YACA,YACA,oBACA,4BACA,cACA,YACA,sBACA,iBACA,OACA,aACA,SACA,aACA,SACA,eACA,YACA,WACA,qBACA,cACA,iBACA,aACA,SACA,UACA,mBACA,WACA,SACA,cACA,cACA,mBACA,MACA,gBACA,WACA,UACA,YACA,aACA,mBACA,oBACA,WACA,UACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAAOH,IAAM,CAAC,CAAC,CACtE,iFC7KA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAsBK,EAAa,CAAC,EAA9BC,EAAAN,GAAA,WAENC,GAAQD,KCJf,IAAAO,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEA,OAAO,QAAQ,CACb,OAAQ,UACR,OAAQ,SACR,OAAQ,CAAC,UAAW,SAAS,CAC/B,CAAC,EAAE,QAAQ,CAAC,CAACC,EAAMC,CAAK,IACtBC,GAA0B,SAAS,IAAIC,GAAUC,GAASJ,EAAMC,CAAK,CAAC,CACxE,ICVA,IAAAI,GAAA,OAAAC,GAAAC,EAAA,KAAAC,KACAC,KACAC,KAEC,CACC,SACA,mBACA,cACA,gBACA,kBACA,QACA,cACA,OACA,SACA,MACA,gBACA,cACA,WACA,OACA,YACA,YACA,UACA,SACA,cACA,WACA,UACA,YACA,UACA,cACA,UACA,aACA,YACA,QACA,WACA,WACA,eACA,OACA,SACA,QACA,YACA,qBACA,QACA,QACA,UACA,aACA,aACA,cACA,QACA,YACA,WACA,UACA,OACA,eACA,UACA,WACA,SACA,WACA,cACA,eACA,SACA,QACA,UACA,UACA,WACA,UACA,WACA,cACA,UACA,cACA,SACA,QACA,SACA,WACA,SACA,eACA,cACA,WACA,iBACA,eACA,cACA,WACA,qBACA,SACA,YACA,UACA,cACA,UACA,aACA,SACA,OACA,UACA,SACA,kBACA,cACA,kBACA,WACA,QACA,YACA,QACA,YACA,cACA,oBACA,WACA,UACA,UACA,eACA,SACA,2BACA,UACA,SACA,aACA,YACA,kBACA,gBACA,WACA,cACA,aACA,cACA,UACA,QACA,WACA,UACA,aACA,YACA,YACA,UACA,SACA,YACA,aACA,SACA,aACA,aACA,eACA,kBACA,YACA,cACA,eACA,UACA,cACA,aACA,UACA,YACA,kBACA,eACA,eACA,SACA,QACA,aACA,UACA,WACA,eACA,aACA,WACA,QACA,WACF,EAAe,QAAQ,CAACC,EAAMC,IAC5BC,EAAyB,SAAS,IAAIC,GAASH,EAAMI,GAASH,IAAM,CAAC,CAAC,CACxE,iFC7JA,KACA,OCDA,IAEaI,GAENC,GAJPC,GAAAC,EAAA,KAAAC,KAEaJ,GAAN,cAAmBK,EAAa,CAAC,EAA3BC,EAAAN,GAAA,QAENC,GAAQD,KCJf,IAAAO,GAAA,OA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",
  "names": ["EntityRegistry", "EntityRegistry_default", "init_EntityRegistry", "__esmMin", "#acceptedTypes", "#entries", "acceptedTypes", "entity", "acceptedType", "iterator", "key", "value", "check", "item", "entities", "index", "__name", "AdditionalData", "AdditionalData_default", "init_AdditionalData", "__esmMin", "#key", "#provider", "#type", "type", "key", "provider", "args", "__name", "AdditionalDataRegistry", "instance", "init_AdditionalDataRegistry", "__esmMin", "init_EntityRegistry", "init_AdditionalData", "EntityRegistry", "AdditionalData_default", "type", "additionalData", "__name", "idCache", "idProvider", "toPlainObject", "DataObject", "DataObject_default", "init_DataObject", "__esmMin", "init_AdditionalDataRegistry", "init_EntityRegistry", "__name", "object", "className", "current", "value", "objects", "filter", "additionalDataRegistry", "instance", "EntityRegistry_default", "item", "id", "plainObject", "key", "keyValue", "additionalData", "#id", "#keys", "keys", "dataObjectFilter", "PlayerAction", "PlayerAction_default", "init_PlayerAction", "__esmMin", "init_DataObject", "DataObject", "#player", "#value", "player", "value", "__name", "MandatoryPlayerAction", "MandatoryPlayerAction_default", "init_MandatoryPlayerAction", "__esmMin", "init_PlayerAction", "PlayerAction_default", "__name", "ActiveUnit", "init_ActiveUnit", "__esmMin", "init_MandatoryPlayerAction", "MandatoryPlayerAction_default", "__name", "InactiveUnit", "init_InactiveUnit", "__esmMin", "init_PlayerAction", "PlayerAction_default", "__name", "init_PlayerActions", "__esmMin", "init_ActiveUnit", "init_InactiveUnit", "Advance", "Advance_default", "init_Advance", "__esmMin", "init_DataObject", "DataObject_default", "__name", "ConstructorRegistry", "ConstructorRegistry_default", "init_ConstructorRegistry", "__esmMin", "#acceptedTypes", "#entries", "acceptedTypes", "entity", "acceptedType", "iterator", "key", "value", "check", "item", "entities", "index", "__name", "AdvanceRegistry", "instance", "init_AdvanceRegistry", "__esmMin", "init_Advance", "init_ConstructorRegistry", "ConstructorRegistry", "Advance_default", "__name", "Criterion", "Criterion_default", "init_Criterion", "__esmMin", "#criterion", "criterion", "args", "__name", "Criteria", "Criteria_default", "init_Criteria", "__esmMin", "init_Criterion", "Criterion_default", "#criteria", "criteria", "criterion", "args", "__name", "And", "And_default", "init_And", "__esmMin", "init_Criteria", "Criteria_default", "__name", "Effect", "Effect_default", "init_Effect", "__esmMin", "#effect", "effect", "args", "__name", "Priority", "Priority_default", "init_Priority", "__esmMin", "#value", "value", "__name", "High", "High_default", "init_High", "__esmMin", "init_Priority", "Priority_default", "__name", "Low", "Low_default", "init_Low", "__esmMin", "init_Priority", "Priority_default", "__name", "Normal", "init_Normal", "__esmMin", "init_Priority", "Priority_default", "__name", "init_Priorities", "__esmMin", "init_High", "init_Low", "init_Normal", "Rule", "Rule_default", "init_Rule", "__esmMin", "init_And", "init_Criterion", "init_Effect", "init_Priorities", "#criteria", "#enabled", "#effect", "#priority", "Normal", "values", "criteria", "value", "Effect_default", "Criterion_default", "And_default", "args", "__name", "RuleRegistry", "instance", "init_RuleRegistry", "__esmMin", "init_EntityRegistry", "init_Rule", "EntityRegistry", "#cache", "Rule_default", "a", "b", "ruleType", "rule", "args", "rules", "__name", "Complete", "Complete_default", "init_Complete", "__esmMin", "init_Rule", "Rule_default", "__name", "Cost", "Cost_default", "init_Cost", "__esmMin", "init_Rule", "Rule_default", "__name", "Requirements", "Requirements_default", "init_Requirements", "__esmMin", "init_Rule", "Rule_default", "__name", "Yield", "Yield_default", "init_Yield", "__esmMin", "init_DataObject", "DataObject", "#values", "#valueCache", "value", "provider", "total", "yieldValue", "__name", "Research", "init_Research", "__esmMin", "init_Yield", "Yield_default", "__name", "init_Yields", "__esmMin", "init_Research", "Started", "Started_default", "init_Started", "__esmMin", "init_Rule", "Rule_default", "__name", "PlayerResearch", "PlayerResearch_default", "init_PlayerResearch", "__esmMin", "init_AdvanceRegistry", "init_DataObject", "init_RuleRegistry", "init_Complete", "init_Cost", "init_Requirements", "init_Yields", "init_Started", "DataObject", "#advanceRegistry", "#complete", "#researching", "#player", "#cost", "Research", "#progress", "#rulesRegistry", "player", "advanceRegistry", "instance", "rulesRegistry", "researchYield", "CompleteAdvance", "advance", "completedResearch", "Complete_default", "rules", "Requirements_default", "AvailableAdvance", "rule", "AdvanceToResearch", "cost", "Cost_default", "Started_default", "__name", "PlayerResearchRegistry", "instance", "init_PlayerResearchRegistry", "__esmMin", "init_EntityRegistry", "init_PlayerResearch", "EntityRegistry", "PlayerResearch_default", "player", "playerResearch", "__name", "Action", "Action_default", "init_Action", "__esmMin", "#goodyHut", "#unit", "goodyHut", "unit", "__name", "Advance", "init_Advance", "__esmMin", "init_PlayerResearchRegistry", "init_Action", "Action_default", "#playerResearchRegistry", "#randomNumberGenerator", "goodyHut", "unit", "playerResearchRegistry", "instance", "randomNumberGenerator", "playerResearch", "availableResearch", "RandomAdvance", "__name", "Captured", "Captured_default", "init_Captured", "__esmMin", "init_Rule", "Rule_default", "__name", "Cost", "Cost_default", "init_Cost", "__esmMin", "init_Rule", "Rule_default", "__name", "Created", "Created_default", "init_Created", "__esmMin", "init_Rule", "Rule_default", "__name", "Destroyed", "Destroyed_default", "init_Destroyed", "__esmMin", "init_Rule", "Rule_default", "__name", "Created", "Created_default", "init_Created", "__esmMin", "init_Rule", "Rule_default", "__name", "Terrain", "Terrain_default", "init_Terrain", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_Created", "DataObject", "#ruleRegistry", "ruleRegistry", "instance", "Created_default", "__name", "Land", "init_Land", "__esmMin", "init_Terrain", "Terrain_default", "__name", "Water", "init_Water", "__esmMin", "init_Terrain", "Terrain_default", "__name", "init_Types", "__esmMin", "init_Land", "init_Water", "YieldModifier", "YieldModifier_default", "init_YieldModifier", "__esmMin", "init_Rule", "Rule_default", "__name", "Yield", "Yield_default", "init_Yield", "__esmMin", "init_Rule", "Rule_default", "__name", "Tile", "Tile_default", "init_Tile", "__esmMin", "init_DataObject", "init_Types", "init_RuleRegistry", "init_Tileset", "init_Yield", "init_YieldModifier", "DataObject", "#map", "#neighbours", "#ruleRegistry", "#terrain", "#x", "#y", "#yieldCache", "x", "y", "terrain", "map", "ruleRegistry", "instance", "player", "direction", "radius", "Tileset_default", "tile", "shortestDistance", "a", "b", "Land", "otherTile", "Water", "values", "Yield_default", "tileYield", "value", "YieldType", "weight", "total", "tileYields", "YieldModifier_default", "__name", "Tileset", "Tileset_default", "init_Tileset", "__esmMin", "init_EntityRegistry", "init_Tile", "EntityRegistry", "tiles", "tile", "radius", "gen", "__name", "pairs", "x", "y", "Tile", "first", "player", "values", "total", "Yield", "Yield_default", "init_Yield", "__esmMin", "init_Rule", "Rule_default", "__name", "YieldModifier", "YieldModifier_default", "init_YieldModifier", "__esmMin", "init_Rule", "Rule_default", "__name", "City", "City_default", "init_City", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_Captured", "init_Cost", "init_Created", "init_Destroyed", "init_Tileset", "init_Yield", "init_YieldModifier", "DataObject", "#destroyed", "#name", "#originalPlayer", "#player", "#ruleRegistry", "#tile", "#tiles", "#tilesWorked", "Tileset_default", "player", "tile", "name", "ruleRegistry", "instance", "Created_default", "capturingPlayer", "Captured_default", "Destroyed_default", "yields", "Yield_default", "YieldModifier_default", "Cost_default", "rule", "cityYields", "cityYield", "__name", "CityRegistry", "instance", "init_CityRegistry", "__esmMin", "init_EntityRegistry", "init_City", "EntityRegistry", "City_default", "player", "includeDestroyed", "city", "tile", "__name", "City", "init_City", "__esmMin", "init_CityRegistry", "init_RuleRegistry", "init_Action", "Action_default", "#cityRegistry", "goodyHut", "unit", "cityRegistry", "instance", "ruleRegistry", "player", "city", "City_default", "__name", "AvailableCityBuildItemsRegistry", "instance", "init_AvailableCityBuildItemsRegistry", "__esmMin", "init_EntityRegistry", "EntityRegistry", "entity", "__name", "Build", "Build_default", "init_Build", "__esmMin", "init_Criterion", "init_Rule", "Rule_default", "city", "BuildItem", "criterion", "Criterion", "__name", "BuildCost", "BuildCost_default", "init_BuildCost", "__esmMin", "init_DataObject", "DataObject_default", "#value", "value", "__name", "BuildCost", "BuildCost_default", "buildCost", "buildCosts", "init_BuildCost", "__esmMin", "init_Criterion", "init_Effect", "init_Rule", "Rule_default", "__name", "Item", "cost", "itemCosts", "Criterion_default", "buildItem", "Effect_default", "BuildItem", "BuildItem_default", "init_BuildItem", "__esmMin", "init_RuleRegistry", "init_BuildCost", "init_DataObject", "DataObject_default", "#city", "#cost", "BuildCost_default", "#item", "#ruleRegistry", "item", "city", "ruleRegistry", "instance", "cost", "__name", "BuildProgress", "init_BuildProgress", "__esmMin", "init_Yield", "Yield_default", "__name", "init_Yields", "__esmMin", "init_BuildProgress", "BuildingCancelled", "BulidingCancelled_default", "init_BulidingCancelled", "__esmMin", "init_Rule", "Rule_default", "__name", "BuildingComplete", "BulidingComplete_default", "init_BulidingComplete", "__esmMin", "init_Rule", "Rule_default", "__name", "CityBuild", "CityBuild_default", "init_CityBuild", "__esmMin", "init_AvailableCityBuildItemsRegistry", "init_DataObject", "init_RuleRegistry", "init_Build", "init_BuildItem", "init_Yields", "init_BulidingCancelled", "init_BulidingComplete", "DataObject", "#availableCityBuildItemsRegistry", "#building", "#city", "#cost", "BuildProgress", "#progress", "#ruleRegistry", "city", "availableCityBuildItemsRegistry", "instance", "ruleRegistry", "production", "buildRules", "Build_default", "BuildItem", "rule", "available", "BuildItem_default", "ItemToBuild", "buildItem", "built", "BulidingComplete_default", "Item", "BulidingCancelled_default", "__name", "CityBuildRegistry", "instance", "init_CityBuildRegistry", "__esmMin", "init_EntityRegistry", "init_CityBuild", "EntityRegistry", "CityBuild_default", "city", "cityBuilds", "__name", "Spend", "Spend_default", "init_Spend", "__esmMin", "init_Rule", "Rule_default", "__name", "PlayerTreasury", "PlayerTreasury_default", "init_PlayerTreasury", "__esmMin", "init_CityBuildRegistry", "init_RuleRegistry", "init_Spend", "init_Yield", "Yield_default", "#player", "#ruleRegistry", "#cityBuildRegistry", "player", "cityBuildRegistry", "instance", "ruleRegistry", "city", "cityBuild", "cost", "Spend_default", "totalYield", "currentYield", "__name", "PlayerTreasuryRegistry", "instance", "init_PlayerTreasuryRegistry", "__esmMin", "init_EntityRegistry", "init_PlayerTreasury", "EntityRegistry", "PlayerTreasury_default", "player", "playerTreasuries", "__name", "Gold", "Gold_default", "init_Gold", "__esmMin", "init_Yield", "Yield_default", "__name", "Gold", "init_Gold", "__esmMin", "init_PlayerTreasuryRegistry", "init_Action", "Action_default", "#playerTreasuryRegistry", "goodyHut", "unit", "playerTreasuryRegistry", "instance", "__name", "Unit", "Unit_default", "init_Unit", "__esmMin", "init_Rule", "Rule_default", "__name", "Unit", "init_Unit", "__esmMin", "init_Action", "init_RuleRegistry", "Action", "#randomNumberGenerator", "#ruleRegistry", "goodyHut", "unit", "randomNumberGenerator", "rulesRegistry", "instance", "Unit_default", "__name", "init_GoodyHuts", "__esmMin", "init_Advance", "init_City", "init_Gold", "init_Unit", "ChangeProduction", "init_ChangeProduction", "__esmMin", "init_PlayerAction", "PlayerAction_default", "__name", "CityBuild", "init_CityBuild", "__esmMin", "init_MandatoryPlayerAction", "MandatoryPlayerAction_default", "__name", "init_PlayerActions", "__esmMin", "init_ChangeProduction", "init_CityBuild", "Client", "Client_default", "init_Client", "__esmMin", "#player", "player", "resolve", "reject", "__name", "Trait", "Trait_default", "init_Trait", "__esmMin", "init_Yield", "Yield_default", "#leader", "LeaderType", "value", "__name", "TraitRegistry", "instance", "init_TraitRegistry", "__esmMin", "init_EntityRegistry", "init_Trait", "EntityRegistry", "Trait_default", "LeaderType", "TraitType", "trait", "__name", "Leader", "Leader_default", "init_Leader", "__esmMin", "init_TraitRegistry", "init_DataObject", "DataObject", "#traits", "traitRegistry", "instance", "traits", "__name", "LeaderRegistry", "instance", "init_LeaderRegistry", "__esmMin", "init_ConstructorRegistry", "init_Leader", "ConstructorRegistry", "Leader_default", "LeaderCivilization", "__name", "AdjustTradeRates", "init_AdjustTradeRates", "__esmMin", "init_PlayerAction", "PlayerAction_default", "__name", "init_PlayerActions", "__esmMin", "init_AdjustTradeRates", "Busy", "Busy_default", "init_Busy", "__esmMin", "init_Rule", "Rule_default", "__name", "ChooseResearch", "ChooseResearch_default", "init_ChooseResearch", "__esmMin", "init_MandatoryPlayerAction", "MandatoryPlayerAction_default", "__name", "Cost", "Cost_default", "init_Cost", "__esmMin", "init_Rule", "Rule_default", "__name", "FoodStorage", "FoodStorage_default", "init_FoodStorage", "__esmMin", "init_Yield", "Yield_default", "__name", "FoodStorage", "FoodStorage_default", "init_FoodStorage", "__esmMin", "init_Rule", "Rule_default", "__name", "Grow", "Grow_default", "init_Grow", "__esmMin", "init_Rule", "Rule_default", "__name", "Shrink", "Shrink_default", "init_Shrink", "__esmMin", "init_Rule", "Rule_default", "__name", "CityGrowth", "CityGrowth_default", "init_CityGrowth", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_Cost", "init_FoodStorage", "init_Grow", "init_Shrink", "DataObject", "#city", "#cost", "FoodStorage_default", "#progress", "#ruleRegistry", "#size", "city", "ruleRegistry", "instance", "food", "costs", "Cost_default", "Grow_default", "Shrink_default", "__name", "Buildable", "Buildable_default", "init_Buildable", "__esmMin", "init_DataObject", "init_RuleRegistry", "DataObject", "city", "ruleRegistry", "instance", "__name", "Created", "Created_default", "init_Created", "__esmMin", "init_Rule", "Rule_default", "__name", "CityImprovement", "CityImprovement_default", "init_CityImprovement", "__esmMin", "init_Buildable", "init_RuleRegistry", "init_Created", "Buildable", "#city", "#destroyed", "#ruleRegistry", "city", "ruleRegistry", "instance", "Created_default", "__name", "Attribute", "Attribute_default", "init_Attribute", "__esmMin", "init_DataObject", "DataObject", "#civilization", "#name", "#value", "CivilizationType", "name", "value", "__name", "AttributeRegistry", "instance", "init_AttributeRegistry", "__esmMin", "init_EntityRegistry", "init_Attribute", "EntityRegistry", "Attribute_default", "CivilizationType", "name", "__name", "CityName", "CityName_default", "init_CityName", "__esmMin", "#name", "#civilization", "#capital", "name", "CivilizationType", "capital", "__name", "CityNameRegistry", "instance", "init_CityNameRegistry", "__esmMin", "init_EntityRegistry", "init_CityName", "EntityRegistry", "#counter", "#randomNumberGenerator", "randomNumberGenerator", "CityName_default", "CivilizationType", "cityName", "capitalName", "__name", "Civilization", "Civilization_default", "init_Civilization", "__esmMin", "init_AttributeRegistry", "init_CityNameRegistry", "init_DataObject", "DataObject", "#leader", "#cityNamesRegistry", "#attributes", "AttributeRegistry", "attributeRegistry", "instance", "cityNamesRegistry", "leader", "capital", "CivilizationType", "__name", "CompleteProduction", "init_CompleteProduction", "__esmMin", "init_PlayerAction", "PlayerAction_default", "__name", "init_PlayerActions", "__esmMin", "init_CompleteProduction", "EndTurn", "EndTurn_default", "init_EndTurn", "__esmMin", "init_MandatoryPlayerAction", "MandatoryPlayerAction_default", "__name", "EventEmitter", "EventEmitter_default", "init_EventEmitter", "__esmMin", "#handlers", "event", "handler", "onceHandler", "__name", "args", "index", "LaunchSpaceship", "LaunchSpaceship_default", "init_LaunchSpaceship", "__esmMin", "init_PlayerAction", "PlayerAction_default", "__name", "Action", "Action_default", "init_Action", "__esmMin", "init_Rule", "Rule_default", "__name", "Added", "Added_default", "init_Added", "__esmMin", "init_Rule", "Rule_default", "__name", "HiddenPlayerAction", "HiddenPlayerAction_default", "init_HiddenPlayerAction", "__esmMin", "init_PlayerAction", "PlayerAction_default", "__name", "Player", "Player_default", "init_Player", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_Action", "init_Added", "init_HiddenPlayerAction", "init_MandatoryPlayerAction", "DataObject", "#civilization", "#ruleRegistry", "ruleRegistry", "instance", "Added_default", "action", "Action_default", "HiddenPlayerAction_default", "MandatoryPlayerAction_default", "civilization", "__name", "PlayerTile", "PlayerTile_default", "init_PlayerTile", "__esmMin", "init_AdditionalDataRegistry", "init_DataObject", "init_Tile", "DataObject", "#additionalData", "#additionalDataRegistry", "#player", "#tile", "tile", "player", "additionalDataRegistry", "instance", "keys", "Tile_default", "additionalData", "__name", "Unknown", "Unknown_default", "init_Unknown", "__esmMin", "init_Terrain", "Terrain_default", "__name", "UndiscoveredTile", "UndiscoveredTile_default", "init_UndiscoveredTile", "__esmMin", "init_Tile", "init_Unknown", "Tile_default", "x", "y", "map", "Unknown_default", "__name", "VisibilityChanged", "VisibilityChanged_default", "init_VisibilityChanged", "__esmMin", "init_Rule", "Rule_default", "__name", "PlayerWorld", "PlayerWorld_default", "init_PlayerWorld", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_PlayerTile", "init_Tile", "init_UndiscoveredTile", "init_VisibilityChanged", "DataObject", "#player", "#ruleRegistry", "#tiles", "#world", "player", "world", "ruleRegistry", "instance", "iterator", "x", "y", "tile", "UndiscoveredTile_default", "found", "playerTile", "Tile_default", "tiles", "PlayerTile_default", "VisibilityChanged_default", "__name", "Revolution", "init_Revolution", "__esmMin", "init_PlayerAction", "PlayerAction_default", "__name", "init_PlayerActions", "__esmMin", "init_Revolution", "Attack", "init_Attack", "__esmMin", "init_Yield", "Yield_default", "__name", "Defence", "init_Defence", "__esmMin", "init_Yield", "Yield_default", "__name", "Movement", "Movement_default", "init_Movement", "__esmMin", "init_Yield", "Yield_default", "__name", "Moves", "init_Moves", "__esmMin", "init_Movement", "Movement_default", "__name", "Visibility", "init_Visibility", "__esmMin", "init_Yield", "Yield_default", "__name", "init_Yields", "__esmMin", "init_Attack", "init_Defence", "init_Movement", "init_Moves", "init_Visibility", "Action", "Action_default", "hasMovesLeft", "isCurrentTile", "isNeighbouringTile", "init_Action", "__esmMin", "init_Criterion", "init_Effect", "init_Rule", "Rule_default", "__name", "Criterion_default", "unit", "to", "from", "Activate", "Activate_default", "init_Activate", "__esmMin", "init_Rule", "Rule_default", "__name", "Created", "Created_default", "init_Created", "__esmMin", "init_Rule", "Rule_default", "__name", "Destroyed", "Destroyed_default", "init_Destroyed", "__esmMin", "init_Rule", "Rule_default", "__name", "Visibility", "Visibility_default", "init_Visibility", "__esmMin", "init_Rule", "Rule_default", "__name", "BaseYield", "Yield", "Yield_default", "unitYield", "init_Yield", "__esmMin", "init_Yields", "init_Criterion", "init_Effect", "init_Rule", "Rule_default", "__name", "UnitType", "attack", "defence", "movement", "visibility", "Attack", "Defence", "Movement", "Visibility", "YieldType", "value", "Criterion_default", "unit", "Effect_default", "BaseUnitType", "Unit", "Unit_default", "init_Unit", "__esmMin", "init_Yields", "init_Buildable", "init_RuleRegistry", "init_Action", "init_Activate", "init_Created", "init_Destroyed", "init_Visibility", "init_Yield", "Buildable", "#active", "#busy", "#city", "#destroyed", "#moves", "Moves", "#player", "#ruleRegistry", "#status", "#tile", "#waiting", "city", "player", "tile", "ruleRegistry", "instance", "Created_default", "action", "args", "to", "from", "Action_default", "object", "direction", "Activate_default", "active", "Visibility_default", "unitYield", "Attack", "rule", "Defence", "Destroyed_default", "Movement", "status", "Visibility", "waiting", "yields", "rules", "Yield_default", "__name", "CityGrowthRegistry", "instance", "init_CityGrowthRegistry", "__esmMin", "init_EntityRegistry", "init_CityGrowth", "EntityRegistry", "CityGrowth_default", "city", "cityGrowths", "__name", "Wonder", "Wonder_default", "init_Wonder", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "PlayerRegistry", "instance", "init_PlayerRegistry", "__esmMin", "init_EntityRegistry", "init_Player", "EntityRegistry", "Player_default", "__name", "CurrentPlayerRegistry", "instance", "init_CurrentPlayerRegistry", "__esmMin", "init_PlayerRegistry", "PlayerRegistry", "__name", "Engine", "instance", "init_Engine", "__esmMin", "init_EventEmitter", "EventEmitter_default", "#options", "#started", "callback", "event", "args", "resolve", "reject", "key", "defaultValue", "value", "__name", "PlayerWorldRegistry", "instance", "init_PlayerWorldRegistry", "__esmMin", "init_EntityRegistry", "init_PlayerWorld", "EntityRegistry", "PlayerWorld_default", "player", "playerWorlds", "__name", "Turn", "instance", "init_Turn", "__esmMin", "init_DataObject", "DataObject", "#value", "__name", "UnitRegistry", "instance", "init_UnitRegistry", "__esmMin", "init_EntityRegistry", "init_Unit", "EntityRegistry", "Unit_default", "city", "unit", "player", "includeDestroyed", "tile", "__name", "Year", "Year_default", "init_Year", "__esmMin", "init_Rule", "Rule_default", "__name", "Year", "instance", "init_Year", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_Turn", "DataObject", "#cache", "#ruleRegistry", "#turn", "turn", "ruleRegistry", "year", "Year_default", "value", "__name", "Food", "Food_default", "init_Food", "__esmMin", "init_Yield", "Yield_default", "__name", "Production", "Production_default", "init_Production", "__esmMin", "init_Yield", "Yield_default", "__name", "Trade", "Trade_default", "init_Trade", "__esmMin", "init_Yield", "Yield_default", "__name", "init_Yields", "__esmMin", "init_Food", "init_Production", "init_Trade", "reduceYields", "reduceYield", "init_reduceYields", "__esmMin", "__name", "yields", "wantedYields", "totals", "currentYield", "yieldIndex", "YieldType", "getHighestValueCityTiles", "getHighestValueAvailableCityTiles", "reassignWorkers", "assignWorkers", "assignWorkers_default", "init_assignWorkers", "__esmMin", "init_CityGrowthRegistry", "init_Yields", "init_PlayerWorldRegistry", "init_reduceYields", "__name", "city", "weights", "Food", "Production", "reduceYield", "Trade", "a", "b", "playerWorldRegistry", "instance", "tile", "cityGrowthRegistry", "cityGrowth", "Action", "Action_default", "init_Action", "__esmMin", "init_RuleRegistry", "init_DataObject", "DataObject", "#from", "#ruleRegistry", "#to", "#unit", "from", "to", "unit", "ruleRegistry", "instance", "args", "__name", "Defeated", "Defeated_default", "init_Defeated", "__esmMin", "init_Rule", "Rule_default", "__name", "Attack", "init_Attack", "__esmMin", "init_RuleRegistry", "init_UnitRegistry", "init_Action", "init_Defeated", "Action_default", "#randomNumberGenerator", "#unitRegistry", "from", "to", "unit", "ruleRegistry", "instance", "unitRegistry", "randomNumberGenerator", "defender", "a", "b", "power", "Defeated_default", "__name", "BuildingIrrigation", "BuildingIrrigation_default", "init_BuildingIrrigation", "__esmMin", "init_Busy", "Busy_default", "__name", "Moved", "Moved_default", "init_Moved", "__esmMin", "init_Rule", "Rule_default", "__name", "DelayedAction", "DelayedAction_default", "init_DelayedAction", "__esmMin", "init_Action", "init_RuleRegistry", "init_Turn", "init_Busy", "init_Criterion", "init_Effect", "init_Moved", "Action", "#turn", "from", "to", "unit", "ruleRegistry", "instance", "turn", "turns", "action", "BusyRule", "Busy_default", "endTurn", "Criterion_default", "Effect_default", "args", "Moved_default", "__name", "Built", "Built_default", "init_Built", "__esmMin", "init_Rule", "Rule_default", "__name", "TileImprovement", "TileImprovement_default", "init_TileImprovement", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_Built", "DataObject", "#tile", "tile", "ruleRegistry", "instance", "Built_default", "__name", "Irrigation", "Irrigation_default", "init_Irrigation", "__esmMin", "init_TileImprovement", "TileImprovement_default", "__name", "MovementCost", "MovementCost_default", "init_MovementCost", "__esmMin", "init_Rule", "Rule_default", "__name", "BuildIrrigation", "init_BuildIrrigation", "__esmMin", "init_BuildingIrrigation", "init_DelayedAction", "init_Irrigation", "init_Moved", "init_MovementCost", "DelayedAction_default", "moveCost", "MovementCost_default", "a", "b", "Irrigation_default", "BuildingIrrigation_default", "Moved_default", "__name", "BuildingMine", "BuildingMine_default", "init_BuildingMine", "__esmMin", "init_Busy", "Busy_default", "__name", "Mine", "Mine_default", "init_Mine", "__esmMin", "init_TileImprovement", "TileImprovement_default", "__name", "BuildMine", "init_BuildMine", "__esmMin", "init_BuildingMine", "init_DelayedAction", "init_Mine", "init_Moved", "init_MovementCost", "DelayedAction_default", "moveCost", "MovementCost_default", "a", "b", "Mine_default", "BuildingMine_default", "Moved_default", "__name", "BuildingRoad", "BuildingRoad_default", "init_BuildingRoad", "__esmMin", "init_Busy", "Busy_default", "__name", "Road", "Road_default", "init_Road", "__esmMin", "init_TileImprovement", "TileImprovement_default", "__name", "BuildRoad", "init_BuildRoad", "__esmMin", "init_BuildingRoad", "init_DelayedAction", "init_Moved", "init_MovementCost", "init_Road", "DelayedAction_default", "moveCost", "MovementCost_default", "a", "b", "Road_default", "BuildingRoad_default", "Moved_default", "__name", "BuildingRailroad", "BuildingRailroad_default", "init_BuildingRailroad", "__esmMin", "init_Busy", "Busy_default", "__name", "Railroad", "Railroad_default", "init_Railroad", "__esmMin", "init_TileImprovement", "TileImprovement_default", "__name", "BuildRailroad", "init_BuildRailroad", "__esmMin", "init_BuildingRailroad", "init_DelayedAction", "init_Moved", "init_MovementCost", "init_Railroad", "DelayedAction_default", "moveCost", "MovementCost_default", "a", "b", "Railroad_default", "BuildingRailroad_default", "Moved_default", "__name", "ValidateMove", "ValidateMove_default", "init_ValidateMove", "__esmMin", "init_Rule", "Rule_default", "__name", "Move", "Move_default", "init_Move", "__esmMin", "init_Action", "init_Moved", "init_MovementCost", "init_ValidateMove", "Action", "Moved_default", "moveCost", "MovementCost_default", "a", "b", "valid", "ValidateMove_default", "__name", "CaptureCity", "init_CaptureCity", "__esmMin", "init_RuleRegistry", "init_Move", "Move_default", "#city", "from", "to", "unit", "city", "ruleRegistry", "instance", "__name", "TerrainFeature", "TerrainFeature_default", "init_TerrainFeature", "__esmMin", "init_DataObject", "DataObject_default", "#terrain", "terrain", "__name", "featureCache", "TerrainFeatureRegistry", "instance", "init_TerrainFeatureRegistry", "__esmMin", "init_EntityRegistry", "init_TerrainFeature", "EntityRegistry", "TerrainFeature_default", "terrain", "__name", "ClearingForest", "ClearingForest_default", "init_ClearingForest", "__esmMin", "init_Busy", "Busy_default", "__name", "Plains", "Plains_default", "init_Plains", "__esmMin", "init_Types", "Land", "__name", "ClearForest", "init_ClearForest", "__esmMin", "init_RuleRegistry", "init_TerrainFeatureRegistry", "init_Turn", "init_ClearingForest", "init_DelayedAction", "init_Moved", "init_MovementCost", "init_Plains", "DelayedAction_default", "#terrainFeatureRegistry", "from", "to", "unit", "ruleRegistry", "instance", "terrainFeatureRegistry", "turn", "moveCost", "MovementCost_default", "a", "b", "terrain", "Plains_default", "features", "feature", "ClearingForest_default", "Moved_default", "__name", "ClearingJungle", "ClearingJungle_default", "init_ClearingJungle", "__esmMin", "init_Busy", "Busy_default", "__name", "Feature", "Feature_default", "feature", "init_Feature", "__esmMin", "init_TerrainFeatureRegistry", "init_Criterion", "init_Effect", "init_Rule", "Rule_default", "__name", "TerrainType", "FeatureType", "chance", "terrainFeatureRegistry", "instance", "randomNumberGenerator", "Criterion_default", "TerrainFeatureType", "terrain", "Effect_default", "Grassland", "Grassland_default", "init_Grassland", "__esmMin", "init_Types", "Land", "__name", "Shield", "Shield_default", "init_Shield", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "ClearJungle", "init_ClearJungle", "__esmMin", "init_RuleRegistry", "init_TerrainFeatureRegistry", "init_Turn", "init_ClearingJungle", "init_DelayedAction", "init_Feature", "init_Grassland", "init_Moved", "init_MovementCost", "init_Shield", "DelayedAction_default", "#terrainFeatureRegistry", "from", "to", "unit", "ruleRegistry", "instance", "terrainFeatureRegistry", "turn", "moveCost", "MovementCost_default", "a", "b", "terrain", "Grassland_default", "features", "Feature_default", "Shield_default", "ClearingJungle_default", "Moved_default", "__name", "ClearingSwamp", "ClearingSwamp_default", "init_ClearingSwamp", "__esmMin", "init_Busy", "Busy_default", "__name", "ClearSwamp", "init_ClearSwamp", "__esmMin", "init_RuleRegistry", "init_TerrainFeatureRegistry", "init_Turn", "init_ClearingSwamp", "init_DelayedAction", "init_Feature", "init_Grassland", "init_Moved", "init_MovementCost", "init_Shield", "DelayedAction_default", "#terrainFeatureRegistry", "from", "to", "unit", "ruleRegistry", "instance", "terrainFeatureRegistry", "turn", "moveCost", "MovementCost_default", "a", "b", "terrain", "Grassland_default", "features", "Feature_default", "Shield_default", "ClearingSwamp_default", "Moved_default", "__name", "Disband", "init_Disband", "__esmMin", "init_Action", "Action_default", "__name", "Disembark", "init_Disembark", "__esmMin", "init_RuleRegistry", "init_Move", "Move_default", "#transport", "from", "to", "unit", "transport", "ruleRegistry", "instance", "__name", "Embark", "init_Embark", "__esmMin", "init_RuleRegistry", "init_Busy", "init_Criterion", "init_Move", "init_Moved", "Move_default", "#transport", "from", "to", "unit", "transport", "ruleRegistry", "instance", "Busy_default", "Criterion_default", "Moved_default", "__name", "UnitImprovement", "UnitImprovement_default", "init_UnitImprovement", "__esmMin", "init_DataObject", "DataObject_default", "#unit", "unit", "__name", "UnitImprovementRegistry", "instance", "init_UnitImprovementRegistry", "__esmMin", "init_EntityRegistry", "init_UnitImprovement", "EntityRegistry", "UnitImprovement_default", "unit", "__name", "Fortified", "Fortified_default", "init_Fortified", "__esmMin", "init_Busy", "Busy_default", "__name", "Fortified", "Fortified_default", "init_Fortified", "__esmMin", "init_UnitImprovement", "UnitImprovement_default", "__name", "Fortifying", "Fortifying_default", "init_Fortifying", "__esmMin", "init_Busy", "Busy_default", "__name", "Fortify", "init_Fortify", "__esmMin", "init_RuleRegistry", "init_Turn", "init_UnitImprovementRegistry", "init_Fortified", "init_Criterion", "init_DelayedAction", "init_Fortifying", "init_Moved", "init_MovementCost", "DelayedAction_default", "#unitImprovementRegistry", "from", "to", "unit", "ruleRegistry", "instance", "turn", "unitImprovementRegistry", "moveCost", "MovementCost_default", "a", "b", "Fortified_default", "Criterion_default", "Fortifying_default", "Moved_default", "__name", "FoundCity", "init_FoundCity", "__esmMin", "init_CityNameRegistry", "init_RuleRegistry", "init_Action", "init_City", "init_Moved", "Action_default", "#cityNameRegistry", "from", "to", "unit", "cityNameRegistry", "instance", "ruleRegistry", "City_default", "Moved_default", "__name", "NoOrders", "init_NoOrders", "__esmMin", "init_Action", "Action", "__name", "TileImprovementRegistry", "instance", "init_TileImprovementRegistry", "__esmMin", "init_EntityRegistry", "init_TileImprovement", "EntityRegistry", "TileImprovement_default", "tile", "__name", "Pillage", "init_Pillage", "__esmMin", "init_RuleRegistry", "init_TileImprovementRegistry", "init_Turn", "init_DelayedAction", "init_Moved", "init_MovementCost", "DelayedAction_default", "#tileImprovementRegistry", "from", "to", "unit", "ruleRegistry", "instance", "tileImprovementRegistry", "turn", "moveCost", "MovementCost_default", "a", "b", "improvement", "Moved_default", "__name", "Forest", "Forest_default", "init_Forest", "__esmMin", "init_Types", "Land", "__name", "Horse", "Horse_default", "init_Horse", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "PlantingForest", "PlantingForest_default", "init_PlantingForest", "__esmMin", "init_Busy", "Busy_default", "__name", "PlantForest", "init_PlantForest", "__esmMin", "init_RuleRegistry", "init_TerrainFeatureRegistry", "init_Turn", "init_DelayedAction", "init_Feature", "init_Forest", "init_Horse", "init_Moved", "init_MovementCost", "init_PlantingForest", "DelayedAction_default", "#terrainFeatureRegistry", "from", "to", "unit", "ruleRegistry", "instance", "terrainFeatureRegistry", "turn", "moveCost", "MovementCost_default", "a", "b", "terrain", "Forest_default", "features", "Feature_default", "Horse_default", "PlantingForest_default", "Moved_default", "__name", "Sleeping", "Sleeping_default", "init_Sleeping", "__esmMin", "init_Busy", "Busy_default", "__name", "Sleep", "Sleep_default", "init_Sleep", "__esmMin", "init_RuleRegistry", "init_Turn", "init_UnitRegistry", "init_Criterion", "init_DelayedAction", "init_Effect", "init_Sleeping", "DelayedAction_default", "#unitRegistry", "from", "to", "unit", "ruleRegistry", "instance", "turn", "unitRegistry", "Sleeping_default", "Criterion_default", "tile", "Effect_default", "__name", "Unload", "init_Unload", "__esmMin", "init_Action", "Action_default", "unit", "__name", "init_Actions", "__esmMin", "init_Attack", "init_BuildIrrigation", "init_BuildMine", "init_BuildRoad", "init_BuildRailroad", "init_CaptureCity", "init_ClearForest", "init_ClearJungle", "init_ClearSwamp", "init_Disband", "init_Disembark", "init_Embark", "init_Fortify", "init_FoundCity", "init_Move", "init_NoOrders", "init_Pillage", "init_PlantForest", "init_Sleep", "init_Unload", "Arctic", "Arctic_default", "init_Arctic", "__esmMin", "init_Types", "Land", "__name", "Desert", "Desert_default", "init_Desert", "__esmMin", "init_Types", "Land", "__name", "Hills", "Hills_default", "init_Hills", "__esmMin", "init_Types", "Land", "__name", "Jungle", "Jungle_default", "init_Jungle", "__esmMin", "init_Types", "Land", "__name", "Mountains", "Mountains_default", "init_Mountains", "__esmMin", "init_Types", "Land", "__name", "Ocean", "Ocean_default", "init_Ocean", "__esmMin", "init_Water", "Water", "__name", "River", "River_default", "init_River", "__esmMin", "init_Types", "Land", "__name", "Swamp", "Swamp_default", "init_Swamp", "__esmMin", "init_Types", "Land", "__name", "Tundra", "Tundra_default", "init_Tundra", "__esmMin", "init_Types", "Land", "__name", "init_Terrains", "__esmMin", "init_Arctic", "init_Desert", "init_Forest", "init_Grassland", "init_Hills", "init_Jungle", "init_Mountains", "init_Ocean", "init_Plains", "init_River", "init_Swamp", "init_Tundra", "Air", "Air_default", "init_Air", "__esmMin", "init_Unit", "Unit_default", "__name", "Land", "Land_default", "init_Land", "__esmMin", "init_Unit", "Unit_default", "__name", "Fortifiable", "init_Fortifiable", "__esmMin", "init_Land", "Land_default", "__name", "Naval", "Naval_default", "init_Naval", "__esmMin", "init_Unit", "Unit_default", "__name", "TransportManifest", "TransportManifest_default", "init_TransportManifest", "__esmMin", "#transport", "#unit", "transport", "unit", "__name", "TransportRegistry", "instance", "init_TransportRegistry", "__esmMin", "init_EntityRegistry", "init_TransportManifest", "EntityRegistry", "TransportManifest_default", "transport", "unit", "manifests", "__name", "Stowed", "Stowed_default", "init_Stowed", "__esmMin", "init_Rule", "Rule_default", "__name", "Unloaded", "Unloaded_default", "init_Unloaded", "__esmMin", "init_Rule", "Rule_default", "__name", "Transport", "Transport_default", "init_Transport", "__esmMin", "init_RuleRegistry", "init_TransportRegistry", "init_Stowed", "init_TransportManifest", "init_Unloaded", "__name", "Base", "#ruleRegistry", "instance", "#transportRegistry", "unit", "manifest", "ruleRegistry", "transportRegistry", "TransportManifest_default", "Stowed_default", "Unloaded_default", "NavalTransport", "NavalTransport_default", "init_NavalTransport", "__esmMin", "init_RuleRegistry", "init_TransportRegistry", "init_Naval", "init_Transport", "Transport_default", "Naval_default", "city", "player", "tile", "ruleRegistry", "instance", "transportRegistry", "__name", "Worker", "init_Worker", "__esmMin", "init_Land", "Land_default", "__name", "init_Types", "__esmMin", "init_Air", "init_Fortifiable", "init_Land", "init_Naval", "init_NavalTransport", "init_Worker", "Coal", "init_Coal", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "Fish", "init_Fish", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "Game", "init_Game", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "Gems", "init_Gems", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "Gold", "init_Gold", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "Oasis", "init_Oasis", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "Oil", "init_Oil", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "Seal", "init_Seal", "__esmMin", "init_TerrainFeature", "TerrainFeature_default", "__name", "init_TerrainFeatures", "__esmMin", "init_Coal", "init_Fish", "init_Game", "init_Gems", "init_Gold", "init_Horse", "init_Oasis", "init_Oil", "init_Seal", "init_Shield", "Action", "Action_default", "init_Action", "__esmMin", "init_Rule", "Rule_default", "__name", "ActionPerformed", "ActionPerformed_default", "init_ActionPerformed", "__esmMin", "init_Rule", "Rule_default", "__name", "Discovered", "Discovered_default", "init_Discovered", "__esmMin", "init_Rule", "Rule_default", "__name", "GoodyHut", "GoodyHut_default", "init_GoodyHut", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_Action", "init_ActionPerformed", "init_Discovered", "DataObject", "#ruleRegistry", "#tile", "tile", "ruleRegistry", "instance", "action", "ActionPerformed_default", "unit", "Action_default", "Discovered_default", "__name", "GoodyHutRegistry", "instance", "init_GoodyHutRegistry", "__esmMin", "init_GoodyHut", "init_EntityRegistry", "EntityRegistry", "GoodyHut_default", "tile", "goodyHuts", "goodyHut", "__name", "init_Pollution", "__esmMin", "init_TileImprovement", "init_TileImprovements", "__esmMin", "init_Irrigation", "init_Mine", "init_Pollution", "init_Road", "init_Railroad", "PathFinder", "PathFinder_default", "init_PathFinder", "__esmMin", "#end", "#start", "#unit", "unit", "start", "end", "__name", "PathFinderRegistry", "instance", "init_PathFinderRegistry", "__esmMin", "init_ConstructorRegistry", "init_PathFinder", "ConstructorRegistry", "PathFinder_default", "__name", "Government", "Government_default", "init_Government", "__esmMin", "init_DataObject", "DataObject_default", "__name", "AvailableGovernmentRegistry", "instance", "init_AvailableGovernmentRegistry", "__esmMin", "init_ConstructorRegistry", "init_Government", "ConstructorRegistry", "Government_default", "__name", "Availability", "Availability_default", "init_Availability", "__esmMin", "init_Rule", "Rule_default", "__name", "Changed", "Changed_default", "init_Changed", "__esmMin", "init_Rule", "Rule_default", "__name", "PlayerGovernment", "PlayerGovernment_default", "init_PlayerGovernment", "__esmMin", "init_AvailableGovernmentRegistry", "init_DataObject", "init_RuleRegistry", "init_Availability", "init_Changed", "DataObject", "#availableGovernmentRegistry", "#government", "#player", "#rulesRegistry", "player", "availableGovernmentRegistry", "instance", "rulesRegistry", "GovernmentType", "Availability_default", "rule", "governments", "Government", "government", "Changed_default", "__name", "PlayerGovernmentRegistry", "instance", "init_PlayerGovernmentRegistry", "__esmMin", "init_EntityRegistry", "init_PlayerGovernment", "EntityRegistry", "PlayerGovernment_default", "player", "playerGovernments", "__name", "AIClient", "AIClient_default", "init_AIClient", "__esmMin", "init_Client", "init_LeaderRegistry", "Client", "#leaderRegistry", "#randomNumberGenerator", "player", "leaderRegistry", "instance", "randomNumberGenerator", "choices", "Random", "civilization", "leaders", "RandomLeader", "__name", "init_UnitImprovements", "__esmMin", "init_Fortified", "Veteran", "init_Veteran", "__esmMin", "init_UnitImprovement", "UnitImprovement_default", "__name", "init_UnitImprovements", "__esmMin", "init_Veteran", "init_UnitImprovements", "__esmMin", "AdvancedFlight", "AdvancedFlight_default", "init_AdvancedFlight", "__esmMin", "init_Advance", "Advance_default", "__name", "Alphabet", "Alphabet_default", "init_Alphabet", "__esmMin", "init_Advance", "Advance_default", "__name", "Astronomy", "Astronomy_default", "init_Astronomy", "__esmMin", "init_Advance", "Advance_default", "__name", "AtomicTheory", "AtomicTheory_default", "init_AtomicTheory", "__esmMin", "init_Advance", "Advance_default", "__name", "Automobile", "Automobile_default", "init_Automobile", "__esmMin", "init_Advance", "Advance_default", "__name", "Banking", "Banking_default", "init_Banking", "__esmMin", "init_Advance", "Advance_default", "__name", "BridgeBuilding", "BridgeBuilding_default", "init_BridgeBuilding", "__esmMin", "init_Advance", "Advance_default", "__name", "BronzeWorking", "BronzeWorking_default", "init_BronzeWorking", "__esmMin", "init_Advance", "Advance_default", "__name", "CeremonialBurial", "CeremonialBurial_default", "init_CeremonialBurial", "__esmMin", "init_Advance", "Advance_default", "__name", "Chemistry", "Chemistry_default", "init_Chemistry", "__esmMin", "init_Advance", "Advance_default", "__name", "Chivalry", "Chivalry_default", "init_Chivalry", "__esmMin", "init_Advance", "Advance_default", "__name", "CodeOfLaws", "CodeOfLaws_default", "init_CodeOfLaws", "__esmMin", "init_Advance", "Advance_default", "__name", "Combustion", "Combustion_default", "init_Combustion", "__esmMin", "init_Advance", "Advance_default", "__name", "Communism", "Communism_default", "init_Communism", "__esmMin", "init_Advance", "Advance_default", "__name", "Computers", "Computers_default", "init_Computers", "__esmMin", "init_Advance", "Advance_default", "__name", "Conscription", "Conscription_default", "init_Conscription", "__esmMin", "init_Advance", "Advance_default", "__name", "Construction", "Construction_default", "init_Construction", "__esmMin", "init_Advance", "Advance_default", "__name", "Corporation", "Corporation_default", "init_Corporation", "__esmMin", "init_Advance", "Advance_default", "__name", "Currency", "Currency_default", "init_Currency", "__esmMin", "init_Advance", "Advance_default", "__name", "Democracy", "Democracy_default", "init_Democracy", "__esmMin", "init_Advance", "Advance_default", "__name", "Electricity", "Electricity_default", "init_Electricity", "__esmMin", "init_Advance", "Advance_default", "__name", "Electronics", "Electronics_default", "init_Electronics", "__esmMin", "init_Advance", "Advance_default", "__name", "Engineering", "Engineering_default", "init_Engineering", "__esmMin", "init_Advance", "Advance_default", "__name", "Explosives", "Explosives_default", "init_Explosives", "__esmMin", "init_Advance", "Advance_default", "__name", "Feudalism", "Feudalism_default", "init_Feudalism", "__esmMin", "init_Advance", "Advance_default", "__name", "Flight", "Flight_default", "init_Flight", "__esmMin", "init_Advance", "Advance_default", "__name", "FusionPower", "FusionPower_default", "init_FusionPower", "__esmMin", "init_Advance", "Advance_default", "__name", "GeneticEngineering", "GeneticEngineering_default", "init_GeneticEngineering", "__esmMin", "init_Advance", "Advance_default", "__name", "Gunpowder", "Gunpowder_default", "init_Gunpowder", "__esmMin", "init_Advance", "Advance_default", "__name", "HorsebackRiding", "HorsebackRiding_default", "init_HorsebackRiding", "__esmMin", "init_Advance", "Advance_default", "__name", "Industrialization", "Industrialization_default", "init_Industrialization", "__esmMin", "init_Advance", "Advance_default", "__name", "Invention", "Invention_default", "init_Invention", "__esmMin", "init_Advance", "Advance_default", "__name", "IronWorking", "IronWorking_default", "init_IronWorking", "__esmMin", "init_Advance", "Advance_default", "__name", "LaborUnion", "LaborUnion_default", "init_LaborUnion", "__esmMin", "init_Advance", "Advance_default", "__name", "Literacy", "Literacy_default", "init_Literacy", "__esmMin", "init_Advance", "Advance_default", "__name", "Magnetism", "Magnetism_default", "init_Magnetism", "__esmMin", "init_Advance", "Advance_default", "__name", "MapMaking", "MapMaking_default", "init_MapMaking", "__esmMin", "init_Advance", "Advance_default", "__name", "Masonry", "Masonry_default", "init_Masonry", "__esmMin", "init_Advance", "Advance_default", "__name", "MassProduction", "MassProduction_default", "init_MassProduction", "__esmMin", "init_Advance", "Advance_default", "__name", "Mathematics", "Mathematics_default", "init_Mathematics", "__esmMin", "init_Advance", "Advance_default", "__name", "Medicine", "Medicine_default", "init_Medicine", "__esmMin", "init_Advance", "Advance_default", "__name", "Metallurgy", "Metallurgy_default", "init_Metallurgy", "__esmMin", "init_Advance", "Advance_default", "__name", "Monarchy", "Monarchy_default", "init_Monarchy", "__esmMin", "init_Advance", "Advance_default", "__name", "Mysticism", "Mysticism_default", "init_Mysticism", "__esmMin", "init_Advance", "Advance_default", "__name", "Navigation", "Navigation_default", "init_Navigation", "__esmMin", "init_Advance", "Advance_default", "__name", "NuclearFission", "NuclearFission_default", "init_NuclearFission", "__esmMin", "init_Advance", "Advance_default", "__name", "NuclearPower", "NuclearPower_default", "init_NuclearPower", "__esmMin", "init_Advance", "Advance_default", "__name", "Philosophy", "Philosophy_default", "init_Philosophy", "__esmMin", "init_Advance", "Advance_default", "__name", "Physics", "Physics_default", "init_Physics", "__esmMin", "init_Advance", "Advance_default", "__name", "Plastics", "Plastics_default", "init_Plastics", "__esmMin", "init_Advance", "Advance_default", "__name", "Pottery", "Pottery_default", "init_Pottery", "__esmMin", "init_Advance", "Advance_default", "__name", "Railroad", "Railroad_default", "init_Railroad", "__esmMin", "init_Advance", "Advance_default", "__name", "Recycling", "Recycling_default", "init_Recycling", "__esmMin", "init_Advance", "Advance_default", "__name", "Refining", "Refining_default", "init_Refining", "__esmMin", "init_Advance", "Advance_default", "__name", "Religion", "Religion_default", "init_Religion", "__esmMin", "init_Advance", "Advance_default", "__name", "Robotics", "Robotics_default", "init_Robotics", "__esmMin", "init_Advance", "Advance_default", "__name", "Rocketry", "Rocketry_default", "init_Rocketry", "__esmMin", "init_Advance", "Advance_default", "__name", "SpaceFlight", "SpaceFlight_default", "init_SpaceFlight", "__esmMin", "init_Advance", "Advance_default", "__name", "SteamEngine", "SteamEngine_default", "init_SteamEngine", "__esmMin", "init_Advance", "Advance_default", "__name", "Steel", "Steel_default", "init_Steel", "__esmMin", "init_Advance", "Advance_default", "__name", "Superconductor", "Superconductor_default", "init_Superconductor", "__esmMin", "init_Advance", "Advance_default", "__name", "TheRepublic", "TheRepublic_default", "init_TheRepublic", "__esmMin", "init_Advance", "Advance_default", "__name", "TheWheel", "TheWheel_default", "init_TheWheel", "__esmMin", "init_Advance", "Advance_default", "__name", "TheoryOfGravity", "TheoryOfGravity_default", "init_TheoryOfGravity", "__esmMin", "init_Advance", "Advance_default", "__name", "Trade", "Trade_default", "init_Trade", "__esmMin", "init_Advance", "Advance_default", "__name", "University", "University_default", "init_University", "__esmMin", "init_Advance", "Advance_default", "__name", "Writing", "Writing_default", "init_Writing", "__esmMin", "init_Advance", "Advance_default", "__name", "init_Advances", "__esmMin", "init_AdvancedFlight", "init_Alphabet", "init_Astronomy", "init_AtomicTheory", "init_Automobile", "init_Banking", "init_BridgeBuilding", "init_BronzeWorking", "init_CeremonialBurial", "init_Chemistry", "init_Chivalry", "init_CodeOfLaws", "init_Combustion", "init_Communism", "init_Computers", "init_Conscription", "init_Construction", "init_Corporation", "init_Currency", "init_Democracy", "init_Electricity", "init_Electronics", "init_Engineering", "init_Explosives", "init_Feudalism", "init_Flight", "init_FusionPower", "init_GeneticEngineering", "init_Gunpowder", "init_HorsebackRiding", "init_Industrialization", "init_Invention", "init_IronWorking", "init_LaborUnion", "init_Literacy", "init_Magnetism", "init_MapMaking", "init_Masonry", "init_MassProduction", "init_Mathematics", "init_Medicine", "init_Metallurgy", "init_Monarchy", "init_Mysticism", "init_Navigation", "init_NuclearFission", "init_NuclearPower", "init_Philosophy", "init_Physics", "init_Plastics", "init_Pottery", "init_Railroad", "init_Recycling", "init_Refining", "init_Religion", "init_Robotics", "init_Rocketry", "init_SpaceFlight", "init_SteamEngine", "init_Steel", "init_Superconductor", "init_TheRepublic", "init_TheWheel", "init_TheoryOfGravity", "init_Trade", "init_University", "init_Writing", "Anarchy", "init_Anarchy", "__esmMin", "init_Government", "Government_default", "__name", "Communism", "init_Communism", "__esmMin", "init_Government", "Government_default", "__name", "Democracy", "init_Democracy", "__esmMin", "init_Government", "Government_default", "__name", "Despotism", "init_Despotism", "__esmMin", "init_Government", "Government_default", "__name", "Monarchy", "init_Monarchy", "__esmMin", "init_Government", "Government_default", "__name", "Republic", "init_Republic", "__esmMin", "init_Government", "Government_default", "__name", "init_Governments", "__esmMin", "init_Anarchy", "init_Communism", "init_Democracy", "init_Despotism", "init_Monarchy", "init_Republic", "Aqueduct", "init_Aqueduct", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Bank", "init_Bank", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Barracks", "init_Barracks", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Cathedral", "init_Cathedral", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "CityWalls", "init_CityWalls", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Colosseum", "init_Colosseum", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Courthouse", "init_Courthouse", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Factory", "init_Factory", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Granary", "init_Granary", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "HydroPlant", "init_HydroPlant", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Library", "init_Library", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "ManufacturingPlant", "init_ManufacturingPlant", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Marketplace", "init_Marketplace", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "MassTransit", "init_MassTransit", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "NuclearPlant", "init_NuclearPlant", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Palace", "Palace_default", "init_Palace", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "PowerPlant", "init_PowerPlant", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "RecyclingCenter", "init_RecyclingCenter", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "SdiDefence", "init_SdiDefence", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "Temple", "init_Temple", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "University", "init_University", "__esmMin", "init_CityImprovement", "CityImprovement_default", "__name", "init_CityImprovements", "__esmMin", "init_Aqueduct", "init_Bank", "init_Barracks", "init_Cathedral", "init_CityWalls", "init_Colosseum", "init_Courthouse", "init_Factory", "init_Granary", "init_HydroPlant", "init_Library", "init_ManufacturingPlant", "init_Marketplace", "init_MassTransit", "init_NuclearPlant", "init_Palace", "init_PowerPlant", "init_RecyclingCenter", "init_SdiDefence", "init_Temple", "init_University", "Path", "Path_default", "init_Path", "__esmMin", "init_PathFinderRegistry", "init_Tileset", "Tileset", "#movementCost", "unit", "start", "end", "pathFinderRegistry", "instance", "path", "PathFinderImplementation", "pathFinder", "a", "b", "movementCost", "tiles", "tile", "top", "__name", "Artillery", "init_Artillery", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Battleship", "init_Battleship", "__esmMin", "init_Naval", "Naval_default", "__name", "Bomber", "init_Bomber", "__esmMin", "init_Air", "Air_default", "__name", "Cannon", "init_Cannon", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Caravan", "init_Caravan", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Carrier", "init_Carrier", "__esmMin", "init_Air", "init_NavalTransport", "NavalTransport_default", "unit", "Air_default", "__name", "Catapult", "init_Catapult", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Chariot", "init_Chariot", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Cruiser", "init_Cruiser", "__esmMin", "init_Naval", "Naval_default", "__name", "Diplomat", "init_Diplomat", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Fighter", "init_Fighter", "__esmMin", "init_Air", "Air_default", "__name", "Frigate", "init_Frigate", "__esmMin", "init_NavalTransport", "NavalTransport_default", "__name", "Horseman", "init_Horseman", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Ironclad", "init_Ironclad", "__esmMin", "init_Naval", "Naval_default", "__name", "Knight", "init_Knight", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "MechanizedInfantry", "init_MechanizedInfantry", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Musketman", "init_Musketman", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Nuclear", "init_Nuclear", "__esmMin", "init_Air", "Air_default", "__name", "Rifleman", "init_Rifleman", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Sail", "init_Sail", "__esmMin", "init_NavalTransport", "NavalTransport_default", "__name", "Settlers", "Settlers_default", "init_Settlers", "__esmMin", "init_Worker", "Worker", "__name", "Spearman", "init_Spearman", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Submarine", "init_Submarine", "__esmMin", "init_Naval", "Naval_default", "__name", "Swordman", "init_Swordman", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Tank", "init_Tank", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "Transport", "init_Transport", "__esmMin", "init_NavalTransport", "NavalTransport_default", "__name", "Trireme", "init_Trireme", "__esmMin", "init_NavalTransport", "NavalTransport_default", "__name", "Warrior", "init_Warrior", "__esmMin", "init_Fortifiable", "Fortifiable", "__name", "init_Units", "__esmMin", "init_Artillery", "init_Battleship", "init_Bomber", "init_Cannon", "init_Caravan", "init_Carrier", "init_Catapult", "init_Chariot", "init_Cruiser", "init_Diplomat", "init_Fighter", "init_Frigate", "init_Horseman", "init_Ironclad", "init_Knight", "init_MechanizedInfantry", "init_Musketman", "init_Nuclear", "init_Rifleman", "init_Sail", "init_Settlers", "init_Spearman", "init_Submarine", "init_Swordman", "init_Tank", "init_Transport", "init_Trireme", "init_Warrior", "hasPlayerCity", "SimpleAIClient", "SimpleAIClient_default", "init_SimpleAIClient", "__esmMin", "init_Yields", "init_Actions", "init_CityBuildRegistry", "init_CityGrowthRegistry", "init_CityRegistry", "init_Terrains", "init_Engine", "init_Types", "init_TerrainFeatures", "init_GoodyHutRegistry", "init_TileImprovements", "init_LeaderRegistry", "init_PathFinderRegistry", "init_PlayerGovernmentRegistry", "init_PlayerResearchRegistry", "init_PlayerTreasuryRegistry", "init_PlayerWorldRegistry", "init_RuleRegistry", "init_TerrainFeatureRegistry", "init_TileImprovementRegistry", "init_UnitImprovementRegistry", "init_UnitRegistry", "init_AIClient", "init_Yield", "init_CityBuild", "init_EndTurn", "init_UnitImprovements", "init_Advances", "init_Governments", "init_CityImprovements", "init_Path", "init_PlayerResearch", "init_Units", "init_Tile", "init_Unit", "init_Wonder", "init_assignWorkers", "__name", "tile", "player", "cityRegistry", "instance", "city", "AIClient_default", "#shouldBuildCity", "isEarth", "#engine", "hasNoCities", "#cityRegistry", "terrainFeatures", "#terrainFeatureRegistry", "Grassland", "River", "Plains", "feature", "Oasis", "Game", "Food", "Production", "Trade", "#shouldIrrigate", "Desert", "TerrainType", "#tileImprovementRegistry", "improvement", "Irrigation", "#shouldMine", "Hills", "Mountains", "Mine", "#shouldRoad", "Road", "#lastUnitMoves", "#unitPathData", "#unitTargetData", "#citiesToLiberate", "#enemyCitiesToAttack", "#enemyUnitsToAttack", "#goodSitesForCities", "#landTilesToExplore", "#seaTilesToExplore", "#undefendedCities", "#cityBuildRegistry", "#cityGrowthRegistry", "#goodyHutRegistry", "#pathFinderRegistry", "#playerGovernmentRegistry", "#playerResearchRegistry", "#playerTreasuryRegistry", "#playerWorldRegistry", "#ruleRegistry", "#unitImprovementRegistry", "#unitRegistry", "cityBuildRegistry", "cityGrowthRegistry", "goodyHutRegistry", "leaderRegistry", "pathFinderRegistry", "playerGovernmentRegistry", "playerResearchRegistry", "playerTreasuryRegistry", "playerWorldRegistry", "ruleRegistry", "terrainFeatureRegistry", "tileImprovementRegistry", "unitImprovementRegistry", "unitRegistry", "engine", "unit", "actions", "attack", "buildIrrigation", "buildMine", "buildRoad", "captureCity", "disembark", "embark", "fortify", "foundCity", "noOrders", "object", "entity", "char", "Fortifiable", "score", "tileUnits", "a", "b", "defender", "ourUnitsOnTile", "NavalTransport", "playerWorld", "discoverableTiles", "neighbouringTile", "target", "Tile_default", "loopCheck", "NoOrders", "path", "move", "action", "Move", "newPath", "Path_default", "lastMoves", "currentTarget", "playerTile", "tileCity", "existingTarget", "assignWorkers_default", "resolve", "reject", "playerGovernment", "playerResearch", "playerScience", "Monarchy", "item", "Unit_default", "unload", "Worker", "cityUnitWithLowerDefence", "tileUnit", "Fortified", "targetTile", "Land", "Naval", "CityBuild_default", "PlayerResearch_default", "available", "EndTurn_default", "e", "cityBuild", "restrictions", "Palace", "Settlers", "availableFiltered", "buildItem", "Wonder_default", "availableWonders", "availableUnits", "randomSelection", "getUnitByYield", "YieldType", "UnitType", "unitYield", "BaseYield", "unitYieldA", "unitYieldB", "getDefensiveUnit", "Defence", "getOffensiveUnit", "Attack", "cityGrowth", "cityYield", "wonders", "destroyed", "ClientRegistry", "instance", "init_ClientRegistry", "__esmMin", "init_EntityRegistry", "init_Client", "EntityRegistry", "Client_default", "player", "clients", "__name", "American", "American_default", "init_American", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_American", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "American_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_American", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "American_default", "Aztec", "Aztec_default", "init_Aztec", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Aztec", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Aztec_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Aztec", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Aztec_default", "Babylonian", "Babylonian_default", "init_Babylonian", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Babylonian", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Babylonian_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Babylonian", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Babylonian_default", "Chinese", "Chinese_default", "init_Chinese", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Chinese", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Chinese_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Chinese", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Chinese_default", "Egyptian", "Egyptian_default", "init_Egyptian", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Egyptian", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Egyptian_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Egyptian", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Egyptian_default", "English", "English_default", "init_English", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_English", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "English_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_English", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "English_default", "French", "French_default", "init_French", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_French", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "French_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_French", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "French_default", "German", "German_default", "init_German", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_German", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "German_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_German", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "German_default", "Greek", "Greek_default", "init_Greek", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Greek", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Greek_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Greek", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Greek_default", "Indian", "Indian_default", "init_Indian", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Indian", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Indian_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Indian", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Indian_default", "Mongol", "Mongol_default", "init_Mongol", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Mongol", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Mongol_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Mongol", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Mongol_default", "Roman", "Roman_default", "init_Roman", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Roman", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Roman_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Roman", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Roman_default", "Russian", "Russian_default", "init_Russian", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Russian", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Russian_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Russian", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Russian_default", "Zulu", "Zulu_default", "init_Zulu", "__esmMin", "init_Civilization", "Civilization_default", "__name", "registerAttributes_exports", "init_registerAttributes", "__esmMin", "init_Zulu", "init_Attribute", "init_AttributeRegistry", "name", "value", "instance", "Attribute_default", "Zulu_default", "registerCityNames_exports", "init_registerCityNames", "__esmMin", "init_Zulu", "init_CityName", "init_CityNameRegistry", "name", "i", "instance", "CityName_default", "Zulu_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_AdvancedFlight", "instance", "AdvancedFlight_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Alphabet", "instance", "Alphabet_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Astronomy", "instance", "Astronomy_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_AtomicTheory", "instance", "AtomicTheory_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Automobile", "instance", "Automobile_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Banking", "instance", "Banking_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_BridgeBuilding", "instance", "BridgeBuilding_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_BronzeWorking", "instance", "BronzeWorking_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_CeremonialBurial", "instance", "CeremonialBurial_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Chemistry", "instance", "Chemistry_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Chivalry", "instance", "Chivalry_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_CodeOfLaws", "instance", "CodeOfLaws_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Combustion", "instance", "Combustion_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Communism", "instance", "Communism_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Computers", "instance", "Computers_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Conscription", "instance", "Conscription_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Construction", "instance", "Construction_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Corporation", "instance", "Corporation_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Currency", "instance", "Currency_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Democracy", "instance", "Democracy_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Electricity", "instance", "Electricity_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Electronics", "instance", "Electronics_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Engineering", "instance", "Engineering_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Explosives", "instance", "Explosives_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Feudalism", "instance", "Feudalism_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Flight", "instance", "Flight_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_FusionPower", "instance", "FusionPower_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_GeneticEngineering", "instance", "GeneticEngineering_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Gunpowder", "instance", "Gunpowder_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_HorsebackRiding", "instance", "HorsebackRiding_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Industrialization", "instance", "Industrialization_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Invention", "instance", "Invention_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_IronWorking", "instance", "IronWorking_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_LaborUnion", "instance", "LaborUnion_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Literacy", "instance", "Literacy_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Magnetism", "instance", "Magnetism_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_MapMaking", "instance", "MapMaking_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Masonry", "instance", "Masonry_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_MassProduction", "instance", "MassProduction_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Mathematics", "instance", "Mathematics_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Medicine", "instance", "Medicine_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Metallurgy", "instance", "Metallurgy_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Monarchy", "instance", "Monarchy_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Mysticism", "instance", "Mysticism_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Navigation", "instance", "Navigation_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_NuclearFission", "instance", "NuclearFission_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_NuclearPower", "instance", "NuclearPower_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Philosophy", "instance", "Philosophy_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Physics", "instance", "Physics_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Plastics", "instance", "Plastics_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Pottery", "instance", "Pottery_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Railroad", "instance", "Railroad_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Recycling", "instance", "Recycling_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Refining", "instance", "Refining_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Religion", "instance", "Religion_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Robotics", "instance", "Robotics_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Rocketry", "instance", "Rocketry_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_SpaceFlight", "instance", "SpaceFlight_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_SteamEngine", "instance", "SteamEngine_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Steel", "instance", "Steel_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Superconductor", "instance", "Superconductor_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_TheoryOfGravity", "instance", "TheoryOfGravity_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_TheRepublic", "instance", "TheRepublic_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_TheWheel", "instance", "TheWheel_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Trade", "instance", "Trade_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_University", "instance", "University_default", "registerAdvance_exports", "init_registerAdvance", "__esmMin", "init_AdvanceRegistry", "init_Writing", "instance", "Writing_default", "getRules", "building_complete_default", "init_building_complete", "__esmMin", "init_BulidingComplete", "init_Effect", "init_Engine", "__name", "engine", "instance", "BulidingComplete_default", "Effect_default", "cityBuild", "built", "getRules", "captured_default", "init_captured", "__esmMin", "init_CityRegistry", "init_CityGrowthRegistry", "init_CityBuildRegistry", "init_UnitRegistry", "init_Engine", "init_Captured", "init_Effect", "__name", "cityRegistry", "instance", "unitRegistry", "cityGrowthRegistry", "cityBuildRegistry", "engine", "Captured_default", "Effect_default", "capturedCity", "capturingPlayer", "player", "unit", "negate", "NegativeYield", "makeNegative", "init_NegativeYield", "__esmMin", "init_Yield", "__name", "value", "Yield_default", "provider", "Target", "property", "PopulationSupportFood", "PopulationSupportFood_default", "init_PopulationSupportFood", "__esmMin", "init_Food", "init_NegativeYield", "Food_default", "__name", "makeNegative", "UnitSupportFood", "UnitSupportFood_default", "init_UnitSupportFood", "__esmMin", "init_Food", "init_NegativeYield", "Food_default", "#unit", "value", "unit", "__name", "makeNegative", "UnitSupportProduction", "UnitSupportProduction_default", "init_UnitSupportProduction", "__esmMin", "init_Production", "init_NegativeYield", "Production_default", "#unit", "value", "unit", "__name", "makeNegative", "getRules", "cost_default", "init_cost", "__esmMin", "init_Types", "init_Governments", "init_CityGrowthRegistry", "init_PlayerGovernmentRegistry", "init_UnitRegistry", "init_Cost", "init_Criterion", "init_Effect", "init_PopulationSupportFood", "init_Units", "init_UnitSupportFood", "init_UnitSupportProduction", "__name", "cityGrowthRegistry", "instance", "playerGovernmentRegistry", "unitRegistry", "Cost_default", "Effect_default", "city", "PopulationSupportFood_default", "Settlers", "Anarchy", "Despotism", "Communism", "Democracy", "Monarchy", "Republic", "UnitType", "cost", "governments", "Criterion_default", "unit", "UnitSupportFood_default", "cityGrowth", "Air", "Fortifiable", "Naval", "Worker", "UnitSupportProduction_default", "getRules", "created_default", "init_created", "__esmMin", "init_AvailableCityBuildItemsRegistry", "init_CityBuildRegistry", "init_CityGrowthRegistry", "init_CityRegistry", "init_Engine", "init_TileImprovements", "init_PlayerWorldRegistry", "init_RuleRegistry", "init_TileImprovementRegistry", "init_CityBuild", "init_CityGrowth", "init_Created", "init_Effect", "init_assignWorkers", "init_Criterion", "__name", "tileImprovementRegistry", "instance", "cityBuildRegistry", "cityGrowthRegistry", "cityRegistry", "playerWorldRegistry", "ruleRegistry", "availableBuildItemsRegistry", "engine", "Irrigation", "Road", "TileImprovementType", "Created_default", "Criterion_default", "city", "tileImprovement", "Effect_default", "CityBuild_default", "CityGrowth_default", "assignWorkers_default", "getRules", "destroyed_default", "init_destroyed", "__esmMin", "init_CityRegistry", "init_Engine", "init_TileImprovementRegistry", "init_UnitRegistry", "init_Destroyed", "init_Effect", "init_TileImprovements", "__name", "tileImprovementRegistry", "instance", "cityRegistry", "engine", "unitRegistry", "Destroyed_default", "Effect_default", "city", "improvement", "Irrigation", "irrigation", "player", "unit", "FoodExhausted", "FoodExhausted_default", "init_FoodExhausted", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "food_exhausted_default", "init_food_exhausted", "__esmMin", "init_Effect", "init_FoodExhausted", "__name", "FoodExhausted_default", "Effect_default", "cityGrowth", "getRules", "food_storage_default", "init_food_storage", "__esmMin", "init_RuleRegistry", "init_Criterion", "init_Effect", "init_FoodStorage", "init_FoodExhausted", "__name", "ruleRegistry", "instance", "FoodStorage_default", "Criterion_default", "cityGrowth", "Effect_default", "FoodExhausted_default", "getRules", "grow_default", "init_grow", "__esmMin", "init_CityGrowthRegistry", "init_PlayerWorldRegistry", "init_Criterion", "init_Effect", "init_Grow", "init_assignWorkers", "__name", "cityGrowthRegistry", "instance", "playerWorldRegistry", "Grow_default", "Effect_default", "cityGrowth", "Criterion_default", "assignWorkers_default", "tile", "getRules", "growth_cost_default", "init_growth_cost", "__esmMin", "init_Cost", "init_Effect", "__name", "Cost_default", "Effect_default", "cityGrowth", "Corruption", "init_Corruption", "__esmMin", "init_Trade", "init_NegativeYield", "Trade_default", "__name", "makeNegative", "Happiness", "Happiness_default", "init_Happiness", "__esmMin", "init_Yield", "Yield_default", "__name", "Luxuries", "Luxuries_default", "init_Luxuries", "__esmMin", "init_Yield", "Yield_default", "__name", "Research", "init_Research", "__esmMin", "init_Yield", "Yield_default", "__name", "Unhappiness", "Unhappiness_default", "init_Unhappiness", "__esmMin", "init_Yield", "Yield_default", "__name", "init_Yields", "__esmMin", "init_Corruption", "init_FoodStorage", "init_Gold", "init_Happiness", "init_Luxuries", "init_PopulationSupportFood", "init_Research", "init_Trade", "init_Unhappiness", "init_UnitSupportFood", "init_UnitSupportProduction", "CivilDisorder", "CivilDisorder_default", "init_CivilDisorder", "__esmMin", "init_Rule", "Rule_default", "__name", "ProcessYield", "ProcessYield_default", "init_ProcessYield", "__esmMin", "init_Rule", "Rule_default", "__name", "Unsupported", "Unsupported_default", "init_Unsupported", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "process_yield_default", "init_process_yield", "__esmMin", "init_CityBuildRegistry", "init_CityGrowthRegistry", "init_Yields", "init_RuleRegistry", "init_UnitRegistry", "init_CivilDisorder", "init_Criterion", "init_Effect", "init_ProcessYield", "init_Unsupported", "__name", "cityBuildRegistry", "instance", "cityGrowthRegistry", "unitRegistry", "ruleRegistry", "ProcessYield_default", "Criterion_default", "cityYield", "Food", "Effect_default", "city", "cityYields", "cityGrowth", "foodStorage", "FoodStorage", "UnitSupportFood", "unit", "Unsupported_default", "Production", "cityBuild", "availableProduction", "UnitSupportProduction", "yieldA", "yieldB", "updatedCityYields", "CivilDisorder_default", "rule", "getRules", "shrink_default", "init_shrink", "__esmMin", "init_CityGrowthRegistry", "init_PlayerWorldRegistry", "init_Criterion", "init_Effect", "init_Shrink", "init_assignWorkers", "__name", "cityGrowthRegistry", "instance", "playerWorldRegistry", "Shrink_default", "Criterion_default", "cityGrowth", "Effect_default", "tile", "assignWorkers_default", "CityImprovementRegistry", "instance", "init_CityImprovementRegistry", "__esmMin", "init_CityImprovement", "init_EntityRegistry", "EntityRegistry", "CityImprovement_default", "city", "includeDestroyed", "cityImprovement", "__name", "getRules", "yield_default", "init_yield", "__esmMin", "init_Governments", "init_CityImprovementRegistry", "init_Yields", "init_PlayerGovernmentRegistry", "init_Effect", "init_Priorities", "init_Palace", "init_Priority", "init_Yield", "init_reduceYields", "__name", "cityImprovementRegistry", "instance", "playerGovernmentRegistry", "Yield_default", "High", "Effect_default", "city", "yields", "playerGovernment", "capital", "cityImprovement", "Palace_default", "currentTrade", "reduceYield", "Trade", "distanceFromCapital", "Communism", "Democracy", "governmentModifier", "Anarchy", "Despotism", "Monarchy", "Republic", "GovernmentType", "modifier", "Corruption", "Priority_default", "tile", "tileYield", "provider", "getRules", "action_default", "init_action", "__esmMin", "init_PlayerActions", "init_CityBuildRegistry", "init_CityRegistry", "init_Action", "init_Criterion", "init_Effect", "__name", "cityBuildRegistry", "instance", "cityRegistry", "Action_default", "Criterion_default", "player", "city", "cityBuild", "Effect_default", "CityBuild", "ChangeProduction", "getRules", "defeated_default", "init_defeated", "__esmMin", "init_CityGrowthRegistry", "init_CityRegistry", "init_Engine", "init_Actions", "init_Criterion", "init_Defeated", "init_Effect", "__name", "cityRegistry", "instance", "cityGrowthRegistry", "engine", "Defeated_default", "Criterion_default", "defeated", "by", "action", "Attack", "Effect_default", "city", "getRules", "unsupported_default", "init_unsupported", "__esmMin", "init_Effect", "init_Unsupported", "__name", "Unsupported_default", "Effect_default", "city", "unit", "registerRules_exports", "init_registerRules", "__esmMin", "init_building_complete", "init_captured", "init_cost", "init_created", "init_destroyed", "init_food_exhausted", "init_food_storage", "init_grow", "init_growth_cost", "init_process_yield", "init_shrink", "init_yield", "init_RuleRegistry", "init_action", "init_defeated", "init_unsupported", "instance", "building_complete_default", "captured_default", "cost_default", "created_default", "destroyed_default", "food_exhausted_default", "food_storage_default", "grow_default", "growth_cost_default", "process_yield_default", "shrink_default", "yield_default", "action_default", "defeated_default", "unsupported_default", "CityImprovementContent", "init_CityImprovementContent", "__esmMin", "init_Unhappiness", "init_NegativeYield", "Unhappiness_default", "#cityImprovement", "value", "cityImprovement", "__name", "makeNegative", "LuxuryHappiness", "init_LuxuryHappiness", "__esmMin", "init_Happiness", "Happiness_default", "__name", "MartialLaw", "init_MartialLaw", "__esmMin", "init_Unhappiness", "init_NegativeYield", "Unhappiness_default", "#unit", "value", "unit", "__name", "makeNegative", "MilitaryUnhappiness", "init_MilitaryUnhappiness", "__esmMin", "init_Unhappiness", "Unhappiness_default", "#unit", "value", "unit", "__name", "PopulationUnhappiness", "init_PopulationUnhappiness", "__esmMin", "init_Unhappiness", "Unhappiness_default", "__name", "init_Yields", "__esmMin", "init_Research", "init_Yields", "__esmMin", "init_CityImprovementContent", "init_Happiness", "init_Luxuries", "init_LuxuryHappiness", "init_MartialLaw", "init_MilitaryUnhappiness", "init_PopulationUnhappiness", "init_Unhappiness", "CelebrateLeader", "CelebrateLeader_default", "init_CelebrateLeader", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "celebrate_leader_default", "init_celebrate_leader", "__esmMin", "init_CityGrowthRegistry", "init_Yields", "init_CelebrateLeader", "init_Criterion", "init_reduceYields", "__name", "cityGrowthRegistry", "instance", "CelebrateLeader_default", "Criterion_default", "city", "yields", "happiness", "unhappiness", "reduceYields", "Happiness", "Unhappiness", "getRules", "yield_default", "init_yield", "__esmMin", "init_Types", "init_CityGrowthRegistry", "init_Governments", "init_Yields", "init_PlayerGovernmentRegistry", "init_UnitRegistry", "init_Yield", "init_Criterion", "init_Effect", "__name", "cityGrowthRegistry", "instance", "playerGovernmentRegistry", "unitRegistry", "Yield_default", "Effect_default", "city", "PopulationUnhappiness", "Republic", "Democracy", "GovernmentType", "discontent", "Criterion_default", "unit", "Air", "Fortifiable", "Naval", "UnitType", "MilitaryUnhappiness", "getRules", "civil_disorder_default", "init_civil_disorder", "__esmMin", "init_Yields", "init_CivilDisorder", "init_Criterion", "init_reduceYields", "__name", "CivilDisorder_default", "Criterion_default", "city", "yields", "happiness", "unhappiness", "reduceYields", "Happiness", "Unhappiness", "Or", "Or_default", "init_Or", "__esmMin", "init_Criteria", "Criteria_default", "args", "criterion", "__name", "getRules", "cost_default", "init_cost", "__esmMin", "init_Governments", "init_CityImprovements", "init_CityGrowthRegistry", "init_Yields", "init_CityImprovementRegistry", "init_PlayerGovernmentRegistry", "init_PlayerResearchRegistry", "init_RuleRegistry", "init_UnitRegistry", "init_Cost", "init_Criterion", "init_Effect", "init_Types", "init_High", "init_Priorities", "init_Advances", "init_Or", "init_reduceYields", "__name", "ruleRegistry", "instance", "cityGrowthRegistry", "cityImprovementRegistry", "playerGovernmentRegistry", "playerResearchRegistry", "unitRegistry", "Cost_default", "Criterion_default", "city", "Anarchy", "Communism", "Despotism", "Monarchy", "Effect_default", "yields", "unit", "Fortifiable", "reduceYield", "Unhappiness", "MartialLaw", "Temple", "Mysticism", "Colosseum", "Cathedral", "CityImprovementType", "value", "advances", "Low", "cityImprovement", "Or_default", "AdvanceType", "CityImprovementContent", "High_default", "LuxuryHappiness", "Luxuries", "TurnStart", "TurnStart_default", "init_TurnStart", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "turn_start_default", "init_turn_start", "__esmMin", "init_CityRegistry", "init_Engine", "init_RuleRegistry", "init_CelebrateLeader", "init_CivilDisorder", "init_Effect", "init_Priorities", "init_TurnStart", "__name", "cityRegistry", "instance", "ruleRegistry", "engine", "TurnStart_default", "Low", "Effect_default", "player", "city", "CivilDisorder_default", "rule", "CelebrateLeader_default", "registerRules_exports", "init_registerRules", "__esmMin", "init_RuleRegistry", "init_celebrate_leader", "init_yield", "init_civil_disorder", "init_cost", "init_turn_start", "instance", "celebrate_leader_default", "yield_default", "civil_disorder_default", "cost_default", "turn_start_default", "registerAvailableBuildItems_exports", "init_registerAvailableBuildItems", "__esmMin", "init_CityImprovements", "init_AvailableCityBuildItemsRegistry", "instance", "Aqueduct", "Bank", "Barracks", "Cathedral", "CityWalls", "Colosseum", "Courthouse", "Factory", "Granary", "HydroPlant", "Library", "ManufacturingPlant", "Marketplace", "MassTransit", "NuclearPlant", "Palace", "PowerPlant", "RecyclingCenter", "SdiDefence", "Temple", "University", "getRules", "build_default", "init_build", "__esmMin", "init_CityImprovements", "init_Advances", "init_Build", "init_CityImprovementRegistry", "init_PlayerResearchRegistry", "init_Criterion", "init_Effect", "__name", "cityImprovementRegistry", "instance", "playerResearchRegistry", "Build", "Effect_default", "city", "BuildItem", "Criterion_default", "improvement", "Aqueduct", "Construction", "CityWalls", "Masonry", "Colosseum", "Courthouse", "CodeOfLaws", "Granary", "Pottery", "Library", "Writing", "Marketplace", "Currency", "Palace", "Temple", "CeremonialBurial", "Bank", "Banking", "Cathedral", "Religion", "Factory", "Industrialization", "HydroPlant", "Electronics", "MassTransit", "MassProduction", "ManufacturingPlant", "Robotics", "NuclearPlant", "NuclearPower", "PowerPlant", "Refining", "RecyclingCenter", "Recycling", "SdiDefence", "Superconductor", "University", "CityImprovementType", "RequiredAdvance", "Improvement", "Requires", "Required", "Prevents", "Prevent", "getRules", "build_cost_default", "init_build_cost", "__esmMin", "init_CityImprovements", "init_BuildCost", "__name", "Aqueduct", "Barracks", "CityWalls", "Colosseum", "Courthouse", "Granary", "Library", "Marketplace", "Palace", "Temple", "Bank", "Cathedral", "Factory", "HydroPlant", "MassTransit", "ManufacturingPlant", "NuclearPlant", "PowerPlant", "RecyclingCenter", "SdiDefence", "University", "CityImprovementType", "cost", "buildCost", "getRules", "captured_default", "init_captured", "__esmMin", "init_CityImprovementRegistry", "init_Captured", "init_Effect", "init_CityImprovements", "init_Wonder", "__name", "cityImprovementRegistry", "instance", "randomNumberGenerator", "Captured_default", "Effect_default", "capturedCity", "cityImprovements", "cityImprovement", "Wonder_default", "palace", "Palace", "randomImprovement", "CityImprovementMaintenanceGold", "init_CityImprovementMaintenanceGold", "__esmMin", "init_Gold", "init_NegativeYield", "Gold_default", "#cityImprovement", "value", "cityImprovement", "__name", "makeNegative", "init_Yields", "__esmMin", "init_CityImprovementMaintenanceGold", "init_Corruption", "init_FoodStorage", "init_Luxuries", "init_Trade", "getRules", "cost_default", "init_cost", "__esmMin", "init_CityImprovements", "init_Advances", "init_CityImprovementRegistry", "init_PlayerResearchRegistry", "init_Yields", "init_Cost", "init_Criterion", "init_Effect", "__name", "cityImprovementRegistry", "instance", "playerResearchRegistry", "Aqueduct", "CityImprovementMaintenanceGold", "Bank", "Cathedral", "CityWalls", "Colosseum", "Courthouse", "Factory", "Granary", "HydroPlant", "Library", "ManufacturingPlant", "Marketplace", "MassTransit", "NuclearPlant", "Palace", "PowerPlant", "RecyclingCenter", "SdiDefence", "Temple", "University", "CityImprovementType", "YieldType", "cost", "Cost_default", "Criterion_default", "city", "cityImprovement", "Effect_default", "Barracks", "Gunpowder", "Automobile", "RequiredAdvance", "ObsoletingAdvance", "getRules", "created_default", "init_created", "__esmMin", "init_CityImprovementRegistry", "init_CityRegistry", "init_RuleRegistry", "init_Created", "init_Criterion", "init_Effect", "init_CityImprovements", "__name", "cityRegistry", "instance", "cityImprovementRegistry", "ruleRegistry", "Created_default", "Criterion_default", "city", "Effect_default", "Palace", "getRules", "destroyed_default", "init_destroyed", "__esmMin", "init_CityImprovementRegistry", "init_Criterion", "init_Destroyed", "init_Effect", "__name", "cityImprovementRegistry", "instance", "Destroyed_default", "Criterion_default", "city", "Effect_default", "cityImprovement", "getRules", "grow_default", "init_grow", "__esmMin", "init_CityImprovements", "init_CityImprovementRegistry", "init_Criterion", "init_Effect", "init_Yields", "init_Grow", "__name", "cityImprovementRegistry", "instance", "Grow_default", "Criterion_default", "cityGrowth", "improvement", "Aqueduct", "Effect_default", "Granary", "FoodStorage", "getRules", "created_default", "init_created", "__esmMin", "init_CityImprovementRegistry", "init_Engine", "init_Created", "init_Effect", "__name", "cityImprovementRegistry", "instance", "engine", "Created_default", "Effect_default", "cityImprovement", "city", "getRules", "yield_modifier_default", "init_yield_modifier", "__esmMin", "init_CityImprovements", "init_CityImprovementRegistry", "init_Yields", "init_Criterion", "init_Effect", "init_Low", "init_YieldModifier", "init_reduceYields", "__name", "cityImprovementRegistry", "instance", "Marketplace", "Gold", "Luxuries", "Bank", "Library", "Research", "University", "Factory", "Production", "PowerPlant", "HydroPlant", "NuclearPlant", "ManufacturingPlant", "Courthouse", "Corruption", "Improvement", "YieldType", "multiplier", "YieldModifier_default", "Low_default", "Criterion_default", "city", "improvement", "Effect_default", "yields", "reduceYield", "getRules", "created_default", "init_created", "__esmMin", "init_CityImprovementRegistry", "init_UnitImprovementRegistry", "init_CityImprovements", "init_Created", "init_Criterion", "init_Effect", "init_UnitImprovements", "__name", "cityImprovementRegistry", "instance", "unitImprovementRegistry", "Created_default", "Criterion_default", "unit", "cityImprovement", "Barracks", "Effect_default", "Veteran", "registerRules_exports", "init_registerRules", "__esmMin", "init_RuleRegistry", "init_build", "init_build_cost", "init_captured", "init_cost", "init_created", "init_destroyed", "init_grow", "init_yield_modifier", "instance", "build_default", "build_cost_default", "captured_default", "cost_default", "created_default", "destroyed_default", "grow_default", "yield_modifier_default", "registerCityNames_exports", "__export", "registerCityNames_default", "registerCityNames", "init_registerCityNames", "__esmMin", "init_CityName", "init_CityNameRegistry", "__name", "cityNameRegistry", "instance", "name", "CityName_default", "init_Civilizations", "__esmMin", "init_American", "init_Aztec", "init_Babylonian", "init_Chinese", "init_Egyptian", "init_English", "init_French", "init_German", "init_Greek", "init_Indian", "init_Mongol", "init_Roman", "init_Russian", "init_Zulu", "CivilizationRegistry", "instance", "init_CivilizationRegistry", "__esmMin", "init_ConstructorRegistry", "init_Civilization", "ConstructorRegistry", "Civilization_default", "__name", "registerCivilizations_exports", "__export", "registerCivilizations_default", "registerCivilizations", "init_registerCivilizations", "__esmMin", "init_Civilizations", "init_CivilizationRegistry", "__name", "civilizationRegistry", "instance", "American", "Aztec", "Babylonian", "Chinese", "Egyptian", "English", "French", "German", "Greek", "Indian", "Mongol", "Roman", "Russian", "Zulu", "AbrahamLincoln", "init_AbrahamLincoln", "__esmMin", "init_Leader", "init_American", "Leader_default", "American_default", "__name", "init_GeorgeWashington", "__esmMin", "init_Leader", "init_American", "init_Leaders", "__esmMin", "init_AbrahamLincoln", "init_GeorgeWashington", "MoctezumaII", "init_MoctezumaII", "__esmMin", "init_Leader", "init_Aztec", "Leader_default", "Aztec_default", "__name", "init_Leaders", "__esmMin", "init_MoctezumaII", "Hammurabi", "init_Hammurabi", "__esmMin", "init_Leader", "init_Babylonian", "Leader_default", "Babylonian_default", "__name", "init_Leaders", "__esmMin", "init_Hammurabi", "MaoZedong", "init_MaoZedong", "__esmMin", "init_Leader", "init_Chinese", "Leader_default", "Chinese_default", "__name", "init_Leaders", "__esmMin", "init_MaoZedong", "RamessesII", "init_RamessesII", "__esmMin", "init_Leader", "init_Egyptian", "Leader_default", "Egyptian_default", "__name", "init_Leaders", "__esmMin", "init_RamessesII", "ElizabethI", "init_ElizabethI", "__esmMin", "init_Leader", "init_English", "Leader_default", "English_default", "__name", "init_WinstonChurchill", "__esmMin", "init_Leader", "init_English", "init_Leaders", "__esmMin", "init_ElizabethI", "init_WinstonChurchill", "NapoleonI", "init_NapoleonI", "__esmMin", "init_Leader", "init_French", "Leader_default", "French_default", "__name", "init_Leaders", "__esmMin", "init_NapoleonI", "FrederickTheGreat", "init_FrederickTheGreat", "__esmMin", "init_Leader", "init_German", "Leader_default", "German_default", "__name", "init_OttoVonBismarck", "__esmMin", "init_Leader", "init_German", "init_Leaders", "__esmMin", "init_FrederickTheGreat", "init_OttoVonBismarck", "AlexanderTheGreat", "init_AlexanderTheGreat", "__esmMin", "init_Leader", "init_Greek", "Leader_default", "Greek_default", "__name", "init_Leaders", "__esmMin", "init_AlexanderTheGreat", "MahatmaGandhi", "init_MahatmaGandhi", "__esmMin", "init_Leader", "init_Indian", "Leader_default", "Indian_default", "__name", "init_Leaders", "__esmMin", "init_MahatmaGandhi", "GenghisKhan", "init_GenghisKhan", "__esmMin", "init_Leader", "init_Mongol", "Leader_default", "Mongol_default", "__name", "init_Leaders", "__esmMin", "init_GenghisKhan", "JuliusCaesar", "init_JuliusCaesar", "__esmMin", "init_Leader", "init_Roman", "Leader_default", "Roman_default", "__name", "init_Leaders", "__esmMin", "init_JuliusCaesar", "init_CatherineTheGreat", "__esmMin", "init_Leader", "init_Russian", "JosephStalin", "init_JosephStalin", "__esmMin", "init_Leader", "init_Russian", "Leader_default", "Russian_default", "__name", "init_Leaders", "__esmMin", "init_CatherineTheGreat", "init_JosephStalin", "Shaka", "init_Shaka", "__esmMin", "init_Leader", "init_Zulu", "Leader_default", "Zulu_default", "__name", "init_Leaders", "__esmMin", "init_Shaka", "init_Leaders", "__esmMin", "registerLeaders_exports", "__export", "registerLeaders_default", "registerLeaders", "init_registerLeaders", "__esmMin", "init_Leaders", "init_LeaderRegistry", "__name", "leaderRegistry", "instance", "AbrahamLincoln", "MoctezumaII", "Hammurabi", "MaoZedong", "RamessesII", "ElizabethI", "NapoleonI", "FrederickTheGreat", "AlexanderTheGreat", "MahatmaGandhi", "GenghisKhan", "JuliusCaesar", "JosephStalin", "Shaka", "Aggression", "Aggression_default", "init_Aggression", "__esmMin", "init_Trait", "Trait_default", "__name", "Aggressive", "Aggressive_default", "init_Aggressive", "__esmMin", "init_Aggression", "Aggression_default", "LeaderType", "__name", "Militarism", "Militarism_default", "init_Militarism", "__esmMin", "init_Trait", "Trait_default", "__name", "Civilized", "Civilized_default", "init_Civilized", "__esmMin", "init_Militarism", "Militarism_default", "LeaderType", "__name", "Development", "Development_default", "init_Development", "__esmMin", "init_Trait", "Trait_default", "__name", "Expansionist", "Expansionist_default", "init_Expansionist", "__esmMin", "init_Development", "Development_default", "LeaderType", "__name", "Friendly", "Friendly_default", "init_Friendly", "__esmMin", "init_Aggression", "Aggression_default", "LeaderType", "__name", "Militaristic", "Militaristic_default", "init_Militaristic", "__esmMin", "init_Militarism", "Militarism_default", "LeaderType", "__name", "Normal", "Normal_default", "init_Normal", "__esmMin", "init_Aggression", "Aggression_default", "LeaderType", "__name", "Normal", "Normal_default", "init_Normal", "__esmMin", "init_Development", "Development_default", "LeaderType", "__name", "Normal", "Normal_default", "init_Normal", "__esmMin", "init_Militarism", "Militarism_default", "LeaderType", "__name", "Perfectionist", "Perfectionist_default", "init_Perfectionist", "__esmMin", "init_Development", "Development_default", "LeaderType", "__name", "registerTraits_exports", "__export", "registerTraits_default", "registerTraits", "init_registerTraits", "__esmMin", "init_Leaders", "init_TraitRegistry", "init_Aggressive", "init_Civilized", "init_Expansionist", "init_Friendly", "init_Militaristic", "init_Normal", "init_Perfectionist", "__name", "traitRegistry", "instance", "AbrahamLincoln", "Friendly_default", "Normal_default", "Civilized_default", "MoctezumaII", "Perfectionist_default", "Hammurabi", "MaoZedong", "RamessesII", "ElizabethI", "Expansionist_default", "NapoleonI", "Aggressive_default", "FrederickTheGreat", "AlexanderTheGreat", "Militaristic_default", "MahatmaGandhi", "GenghisKhan", "JuliusCaesar", "JosephStalin", "Shaka", "LeaderType", "traits", "TraitType", "registerCityNames_1", "registerCivilizations_1", "registerLeaders_1", "registerTraits_1", "Yield", "Yield_default", "init_Yield", "__esmMin", "init_Rule", "Rule_default", "__name", "Part", "Part_default", "init_Part", "__esmMin", "init_RuleRegistry", "init_Buildable", "init_Yield", "Buildable_default", "#city", "#ruleRegistry", "city", "ruleRegistry", "instance", "Yield_default", "__name", "Fuel", "Fuel_default", "init_Fuel", "__esmMin", "init_Part", "Part_default", "__name", "Habitation", "Habitation_default", "init_Habitation", "__esmMin", "init_Part", "Part_default", "__name", "ChooseSlot", "ChooseSlot_default", "init_ChooseSlot", "__esmMin", "init_Rule", "Rule_default", "__name", "Active", "Active_default", "init_Active", "__esmMin", "init_Rule", "Rule_default", "__name", "isBetween", "Layout", "Layout_default", "init_Layout", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_ChooseSlot", "init_Active", "__name", "n", "x", "y", "DataObject", "#cachedSearch", "#height", "#ruleRegistry", "#slots", "#width", "height", "width", "slots", "ruleRegistry", "instance", "slot", "Active_default", "result", "key", "adjacentSlots", "maxX", "above", "below", "maxY", "before", "after", "adjacentSlot", "part", "ChooseSlot_default", "LifeSupport", "LifeSupport_default", "init_LifeSupport", "__esmMin", "init_Part", "Part_default", "__name", "Power", "Power_default", "init_Power", "__esmMin", "init_Part", "Part_default", "__name", "Propulsion", "Propulsion_default", "init_Propulsion", "__esmMin", "init_Part", "Part_default", "__name", "Slot", "Slot_default", "init_Slot", "__esmMin", "init_DataObject", "DataObject", "#accepts", "#height", "#part", "#width", "#x", "#y", "x", "y", "height", "width", "accepts", "part", "PartType", "__name", "Structural", "Structural_default", "init_Structural", "__esmMin", "init_Part", "Part_default", "__name", "Default", "Default_default", "init_Default", "__esmMin", "init_RuleRegistry", "init_Fuel", "init_Habitation", "init_Layout", "init_LifeSupport", "init_Power", "init_Propulsion", "init_Slot", "init_Structural", "Layout_default", "ruleRegistry", "instance", "Slot_default", "Fuel_default", "Propulsion_default", "Power_default", "Structural_default", "LifeSupport_default", "Habitation_default", "__name", "LayoutRegistry", "instance", "init_LayoutRegistry", "__esmMin", "init_ConstructorRegistry", "init_Layout", "ConstructorRegistry_default", "Layout_default", "__name", "registerLayouts_exports", "init_registerLayouts", "__esmMin", "init_Default", "init_LayoutRegistry", "instance", "Default_default", "Interaction", "Interaction_default", "init_Interaction", "__esmMin", "#players", "players", "player", "__name", "InteractionRegistry", "instance", "init_InteractionRegistry", "__esmMin", "init_EntityRegistry", "init_Interaction", "EntityRegistry", "Interaction_default", "player", "interaction", "players", "__name", "Contact", "init_Contact", "__esmMin", "init_Interaction", "Interaction_default", "units", "players", "unit", "__name", "init_Interactions", "__esmMin", "init_Contact", "getRules", "moved_default", "init_moved", "__esmMin", "init_InteractionRegistry", "init_UnitRegistry", "init_Interactions", "init_Criterion", "init_Effect", "init_Moved", "__name", "interactionRegistry", "instance", "unitRegistry", "Moved_default", "Criterion_default", "unit", "tile", "tileUnit", "Effect_default", "Contact", "registerRules_exports", "init_registerRules", "__esmMin", "init_RuleRegistry", "init_moved", "instance", "moved_default", "CivilizationStartTile", "CivilizationStartTile_default", "init_CivilizationStartTile", "__esmMin", "#civilizationType", "#mapGenerator", "#startTile", "CivilizationType", "MapGenerator", "startTile", "world", "x", "y", "__name", "coordsToIndex", "coordsToIndex_default", "init_coordsToIndex", "__esmMin", "__name", "height", "width", "x", "y", "indexToCoords", "indexToCoords_default", "init_indexToCoords", "__esmMin", "__name", "height", "width", "index", "total", "distanceFrom", "distanceFrom_default", "init_distanceFrom", "__esmMin", "init_indexToCoords", "__name", "height", "width", "from", "to", "fromX", "fromY", "indexToCoords_default", "toX", "toY", "map", "shortestDistance", "x", "y", "coords", "a", "b", "getNeighbours", "getNeighbours_default", "init_getNeighbours", "__esmMin", "init_coordsToIndex", "init_indexToCoords", "__name", "height", "width", "index", "directNeighbours", "x", "y", "indexToCoords_default", "n", "coordsToIndex_default", "ne", "e", "se", "s", "sw", "w", "nw", "Generator", "Generator_default", "init_Generator", "__esmMin", "init_coordsToIndex", "init_distanceFrom", "init_getNeighbours", "init_indexToCoords", "#height", "#options", "#width", "height", "width", "options", "x", "y", "coordsToIndex_default", "from", "to", "distanceFrom_default", "index", "directNeighbours", "getNeighbours_default", "indexToCoords_default", "__name", "terrainLookup", "Earth", "Earth_default", "init_Earth", "__esmMin", "init_Arctic", "init_Desert", "init_Forest", "init_Generator", "init_Grassland", "init_Hills", "init_Jungle", "init_Mountains", "init_Ocean", "init_Plains", "init_River", "init_Swamp", "init_Tundra", "Arctic_default", "Desert_default", "Forest_default", "Grassland_default", "Hills_default", "Jungle_default", "Mountains_default", "Ocean_default", "Plains_default", "River_default", "Swamp_default", "Tundra_default", "Generator_default", "terrainId", "__name", "EarthStartTile", "EarthStartTile_default", "init_EarthStartTile", "__esmMin", "init_CivilizationStartTile", "init_Earth", "CivilizationStartTile_default", "CivilizationType", "startTile", "Earth_default", "__name", "CivilizationStartTileRegistry", "instance", "CivilizationStartTileRegistry_default", "init_CivilizationStartTileRegistry", "__esmMin", "init_CivilizationStartTile", "init_EntityRegistry", "EntityRegistry_default", "CivilizationStartTile_default", "CivilizationType", "startTile", "world", "__name", "EarthStartTileRegistry", "instance", "init_EarthStartTileRegistry", "__esmMin", "init_CivilizationStartTileRegistry", "init_Earth", "CivilizationStartTileRegistry_default", "startTile", "Earth_default", "__name", "registerEarthStartTiles_exports", "init_registerEarthStartTiles", "__esmMin", "init_Civilizations", "init_EarthStartTile", "init_EarthStartTileRegistry", "instance", "American", "Aztec", "Babylonian", "Chinese", "Egyptian", "English", "French", "German", "Greek", "Indian", "Mongol", "Roman", "Russian", "Zulu", "CivilizationType", "startTile", "EarthStartTile_default", "getRules", "year_default", "init_year", "__esmMin", "init_Criterion", "init_Effect", "init_Year", "__name", "Year_default", "Criterion_default", "turn", "Effect_default", "registerRules_exports", "init_registerRules", "__esmMin", "init_RuleRegistry", "init_year", "instance", "year_default", "getRules", "action_default", "init_action", "__esmMin", "init_GoodyHuts", "init_CityRegistry", "init_Terrains", "init_PlayerResearchRegistry", "init_Action", "init_Criterion", "init_Effect", "init_Food", "init_Production", "init_Trade", "__name", "playerResearchRegistry", "instance", "cityRegistry", "Action_default", "Criterion_default", "goodyHut", "unit", "Effect_default", "Advance", "Grassland", "Plains", "River", "TerrainType", "Food_default", "Production_default", "Trade_default", "tile", "City", "Gold", "Unit", "getRules", "action_performed_default", "init_action_performed", "__esmMin", "init_Engine", "init_ActionPerformed", "init_Effect", "__name", "engine", "instance", "ActionPerformed_default", "Effect_default", "goodyHut", "action", "getRules", "discovered_default", "init_discovered", "__esmMin", "init_Engine", "init_GoodyHutRegistry", "init_Discovered", "init_Effect", "__name", "goodyHutRegistry", "instance", "engine", "randomNumberGenerator", "Discovered_default", "Effect_default", "goodyHut", "unit", "availableGoodyHutActions", "randomAction", "Distribution", "Distribution_default", "init_Distribution", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "distribution_default", "init_distribution", "__esmMin", "init_GoodyHutRegistry", "init_Criterion", "init_Distribution", "__name", "goodyHutRegistry", "instance", "randomNumberGenerator", "Distribution_default", "Criterion_default", "tile", "getRules", "unit_default", "init_unit", "__esmMin", "init_GoodyHutRegistry", "init_Units", "init_RuleRegistry", "init_Effect", "init_Unit", "__name", "goodyHutRegistry", "instance", "randomNumberGenerator", "ruleRegistry", "Unit_default", "Effect_default", "goodyHut", "unit", "availableUnits", "Horseman", "Swordman", "RandomUnit", "getRules", "moved_default", "init_moved", "__esmMin", "init_GoodyHutRegistry", "init_Criterion", "init_Effect", "init_Moved", "__name", "goodyHutRegistry", "instance", "Moved_default", "Criterion_default", "unit", "Effect_default", "Built", "Built_default", "init_Built", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "built_default", "init_built", "__esmMin", "init_GoodyHutRegistry", "init_RuleRegistry", "init_Built", "init_Effect", "init_GoodyHut", "init_Distribution", "__name", "goodyHutRegistry", "instance", "ruleRegistry", "Built_default", "Effect_default", "world", "goodyHutRules", "Distribution_default", "tile", "rule", "GoodyHut_default", "registerRules_exports", "init_registerRules", "__esmMin", "init_action", "init_action_performed", "init_discovered", "init_distribution", "init_unit", "init_RuleRegistry", "init_moved", "init_built", "instance", "action_default", "action_performed_default", "discovered_default", "distribution_default", "unit_default", "moved_default", "built_default", "registerGovernments_exports", "init_registerGovernments", "__esmMin", "init_Governments", "init_AvailableGovernmentRegistry", "instance", "Communism", "Democracy", "Despotism", "Monarchy", "Republic", "getRules", "action_default", "init_action", "__esmMin", "init_PlayerGovernmentRegistry", "init_Governments", "init_Criterion", "init_Effect", "init_PlayerActions", "init_Action", "__name", "playerGovernmentRegistry", "instance", "Action_default", "Criterion_default", "player", "Anarchy", "Effect_default", "Revolution", "getRules", "added_default", "init_added", "__esmMin", "init_AvailableGovernmentRegistry", "init_PlayerGovernmentRegistry", "init_RuleRegistry", "init_Added", "init_Governments", "init_Effect", "init_High", "init_PlayerGovernment", "__name", "availableGovernmentRegistry", "instance", "playerGovernmentRegistry", "ruleRegistry", "Added_default", "High_default", "Effect_default", "player", "playerGovernment", "PlayerGovernment_default", "Despotism", "getRules", "availability_default", "init_availability", "__esmMin", "init_Advances", "init_Governments", "init_PlayerResearchRegistry", "init_Availability", "init_Criterion", "__name", "playerResearchRegistry", "instance", "Availability_default", "Criterion_default", "GovernmentType", "Despotism", "Communism", "Democracy", "Monarchy", "Republic", "TheRepublic", "AvailableGovernment", "RequiredAdvance", "player", "getRules", "government_changed_default", "init_government_changed", "__esmMin", "init_Engine", "init_PlayerWorldRegistry", "init_Changed", "init_Criterion", "init_Effect", "__name", "engine", "instance", "playerWorldRegistry", "Changed_default", "Effect_default", "player", "government", "Criterion_default", "e", "tile", "registerRules_exports", "init_registerRules", "__esmMin", "init_RuleRegistry", "init_action", "init_added", "init_availability", "init_government_changed", "instance", "action_default", "added_default", "availability_default", "government_changed_default", "TurnEnd", "TurnEnd_default", "init_TurnEnd", "__esmMin", "init_Rule", "Rule_default", "__name", "getEvents", "turn_end_default", "init_turn_end", "__esmMin", "init_CurrentPlayerRegistry", "init_Engine", "init_RuleRegistry", "init_TurnEnd", "__name", "currentPlayerRegistry", "instance", "ruleRegistry", "engine", "player", "TurnEnd_default", "nextPlayer", "getEvents", "turn_start_default", "init_turn_start", "__esmMin", "init_ClientRegistry", "init_Engine", "init_RuleRegistry", "init_TurnStart", "__name", "clientRegistry", "instance", "engine", "ruleRegistry", "player", "TurnStart_default", "error", "getEvents", "start_default", "init_start", "__esmMin", "init_CurrentPlayerRegistry", "init_Engine", "init_PlayerRegistry", "__name", "playerRegistry", "instance", "currentPlayerRegistry", "engine", "currentPlayer", "registerEvents_exports", "init_registerEvents", "__esmMin", "init_Engine", "init_turn_end", "init_turn_start", "init_start", "turn_end_default", "turn_start_default", "start_default", "event", "handler", "instance", "Defeated", "Defeated_default", "init_Defeated", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "captured_default", "init_captured", "__esmMin", "init_CityRegistry", "init_RuleRegistry", "init_Captured", "init_Criterion", "init_Defeated", "init_Effect", "__name", "cityRegistry", "instance", "ruleRegistry", "Captured_default", "Criterion_default", "capturedCity", "capturingPlayer", "originalPlayer", "city", "Effect_default", "player", "Defeated_default", "getRules", "destroyed_default", "init_destroyed", "__esmMin", "init_CityRegistry", "init_RuleRegistry", "init_Criterion", "init_Defeated", "init_Destroyed", "init_Effect", "__name", "cityRegistry", "instance", "ruleRegistry", "Destroyed_default", "Criterion_default", "destroyedCity", "destroyingPlayer", "city", "Effect_default", "Defeated_default", "endOfTurnRule", "getRules", "action_default", "init_action", "__esmMin", "init_Action", "init_Criterion", "init_Effect", "init_EndTurn", "init_Priority", "Action_default", "Priority_default", "Criterion_default", "player", "otherActions", "Effect_default", "EndTurn_default", "__name", "getRules", "added_default", "init_added", "__esmMin", "init_Engine", "init_Added", "init_Effect", "__name", "engine", "instance", "Added_default", "Effect_default", "player", "getRules", "defeated_default", "init_defeated", "__esmMin", "init_CurrentPlayerRegistry", "init_Engine", "init_PlayerRegistry", "init_Criterion", "init_Defeated", "init_Effect", "__name", "currentPlayerRegistry", "instance", "playerRegistry", "engine", "Defeated_default", "Criterion_default", "player", "Effect_default", "capturingPlayer", "Spawn", "Spawn_default", "init_Spawn", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "spawn_default", "init_spawn", "__esmMin", "init_RuleRegistry", "init_Effect", "init_Settlers", "init_Spawn", "__name", "ruleRegistry", "instance", "Spawn_default", "Effect_default", "player", "tile", "Settlers_default", "getRules", "turn_start_default", "init_turn_start", "__esmMin", "init_CityRegistry", "init_RuleRegistry", "init_UnitRegistry", "init_Effect", "init_Food", "init_High", "init_ProcessYield", "init_Production", "init_Trade", "init_TurnStart", "init_reduceYields", "__name", "ruleRegistry", "instance", "cityRegistry", "unitRegistry", "TurnStart_default", "High_default", "Effect_default", "player", "city", "cityYields", "reduceYields", "Food_default", "Production_default", "Trade_default", "yields", "yieldValue", "index", "cityYield", "ProcessYield_default", "unit", "busyAction", "getRules", "visibility_changed_default", "init_visibility_changed", "__esmMin", "init_Engine", "init_Effect", "init_VisibilityChanged", "__name", "engine", "instance", "VisibilityChanged_default", "Effect_default", "tile", "player", "getRules", "built_default", "init_built", "__esmMin", "init_PlayerRegistry", "init_PlayerWorldRegistry", "init_Built", "init_Effect", "__name", "playerRegistry", "instance", "playerWorldRegistry", "Built_default", "Effect_default", "tile", "player", "getRules", "destroyed_default", "init_destroyed", "__esmMin", "init_CityRegistry", "init_RuleRegistry", "init_Criterion", "init_Defeated", "init_Destroyed", "init_Effect", "__name", "cityRegistry", "instance", "ruleRegistry", "Destroyed_default", "Criterion_default", "unit", "destroyingPlayer", "Effect_default", "Defeated_default", "getRules", "visibility_default", "init_visibility", "__esmMin", "init_PlayerWorldRegistry", "init_Effect", "init_Visibility", "__name", "playerWorldRegistry", "instance", "Visibility_default", "Effect_default", "tile", "player", "playerWorld", "PickStartTile", "PickStartTile_default", "init_PickStartTile", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "built_default", "init_built", "__esmMin", "init_CivilizationRegistry", "init_ClientRegistry", "init_Engine", "init_PlayerRegistry", "init_PlayerWorldRegistry", "init_RuleRegistry", "init_Built", "init_Effect", "init_Food", "init_Grassland", "init_PickStartTile", "init_Plains", "init_PlayerWorld", "init_Production", "init_River", "init_Trade", "init_Spawn", "__name", "civilizationRegistry", "instance", "clientRegistry", "engine", "playerRegistry", "playerWorldRegistry", "ruleRegistry", "randomNumberGenerator", "Built_default", "Effect_default", "world", "player", "PlayerWorld_default", "tileCache", "areaCache", "tileScore", "tile", "Food_default", "Production_default", "Trade_default", "areaScore", "total", "usedStartSquares", "startingSquares", "Grassland_default", "Plains_default", "River_default", "TerrainType", "scoreA", "scoreB", "promise", "client", "startingSquare", "PickStartTile_default", "Spawn_default", "registerRules_exports", "init_registerRules", "__esmMin", "init_captured", "init_destroyed", "init_RuleRegistry", "init_action", "init_added", "init_defeated", "init_spawn", "init_turn_start", "init_visibility_changed", "init_built", "init_visibility", "instance", "captured_default", "destroyed_default", "action_default", "added_default", "defeated_default", "spawn_default", "turn_start_default", "visibility_changed_default", "built_default", "visibility_default", "registerAdvances_exports", "init_registerAdvances", "__esmMin", "init_Advances", "init_AdvanceRegistry", "instance", "AdvancedFlight", "Alphabet", "Astronomy", "AtomicTheory", "Automobile", "Banking", "BridgeBuilding", "BronzeWorking", "CeremonialBurial", "Chemistry", "Chivalry", "CodeOfLaws", "Combustion", "Communism", "Computers", "Conscription", "Construction", "Corporation", "Currency", "Democracy", "Electricity", "Electronics", "Engineering", "Explosives", "Feudalism", "Flight", "FusionPower", "GeneticEngineering", "Gunpowder", "HorsebackRiding", "Industrialization", "Invention", "IronWorking", "LaborUnion", "Literacy", "Magnetism", "MapMaking", "Masonry", "MassProduction", "Mathematics", "Medicine", "Metallurgy", "Monarchy", "Mysticism", "Navigation", "NuclearFission", "NuclearPower", "Philosophy", "Physics", "Plastics", "Pottery", "Railroad", "Recycling", "Refining", "Religion", "Robotics", "Rocketry", "SpaceFlight", "SteamEngine", "Steel", "Superconductor", "TheRepublic", "TheWheel", "TheoryOfGravity", "Trade", "University", "Writing", "init_PlayerActions", "__esmMin", "init_ChooseResearch", "getRules", "action_default", "init_action", "__esmMin", "init_PlayerResearchRegistry", "init_Action", "init_PlayerActions", "init_Criterion", "init_Effect", "__name", "playerResearchRegistry", "instance", "Action_default", "Criterion_default", "player", "Effect_default", "ChooseResearch", "getRules", "added_default", "init_added", "__esmMin", "init_AdvanceRegistry", "init_PlayerResearchRegistry", "init_RuleRegistry", "init_Added", "init_Effect", "init_PlayerResearch", "__name", "advanceRegistry", "instance", "playerResearchRegistry", "ruleRegistry", "randomNumberGenerator", "Added_default", "Effect_default", "player", "PlayerResearch_default", "playerResearch", "i", "max", "available", "getRules", "captured_default", "init_captured", "__esmMin", "init_PlayerResearchRegistry", "init_Captured", "init_Effect", "init_Criterion", "__name", "playerResearchRegistry", "instance", "randomNumberGenerator", "Captured_default", "Criterion_default", "capturedCity", "capturingPlayer", "player", "advance", "Effect_default", "capturingPlayerResearch", "available", "getRules", "complete_default", "init_complete", "__esmMin", "init_Engine", "init_Complete", "init_Effect", "__name", "engine", "instance", "Complete_default", "Effect_default", "playerResearch", "advance", "getRules", "cost_default", "init_cost", "__esmMin", "init_Cost", "init_Effect", "__name", "Cost_default", "Effect_default", "CostAdvance", "playerResearch", "getRules", "process_yield_default", "init_process_yield", "__esmMin", "init_CivilDisorder", "init_PlayerResearchRegistry", "init_RuleRegistry", "init_Criterion", "init_Effect", "init_ProcessYield", "init_Yields", "__name", "playerResearchRegistry", "instance", "ruleRegistry", "ProcessYield_default", "Criterion_default", "cityYield", "Research", "city", "yields", "CivilDisorder_default", "rule", "Effect_default", "getRules", "requirements_default", "init_requirements", "__esmMin", "init_Advances", "init_Criterion", "init_Effect", "init_Requirements", "__name", "AdvancedFlight", "Flight", "Electricity", "Astronomy", "Mathematics", "Mysticism", "AtomicTheory", "TheoryOfGravity", "Physics", "Automobile", "Combustion", "Steel", "Banking", "TheRepublic", "Trade", "BridgeBuilding", "Construction", "IronWorking", "Chemistry", "University", "Medicine", "Chivalry", "Feudalism", "HorsebackRiding", "CodeOfLaws", "Alphabet", "Refining", "Explosives", "Communism", "Philosophy", "Industrialization", "Computers", "Electronics", "Conscription", "Currency", "Masonry", "Corporation", "BronzeWorking", "Democracy", "Literacy", "Metallurgy", "Magnetism", "Engineering", "TheWheel", "Gunpowder", "Monarchy", "FusionPower", "NuclearPower", "Superconductor", "GeneticEngineering", "Invention", "Railroad", "LaborUnion", "MassProduction", "Writing", "Navigation", "MapMaking", "CeremonialBurial", "NuclearFission", "Plastics", "SpaceFlight", "SteamEngine", "Recycling", "Religion", "Robotics", "Rocketry", "AdvanceWithRequirements", "requiredAdvances", "Requirements_default", "Criterion_default", "CheckAdvance", "Effect_default", "discoveredAdvances", "RequiredAdvance", "advance", "getRules", "started_default", "init_started", "__esmMin", "init_Engine", "init_Effect", "init_Started", "__name", "engine", "instance", "Started_default", "Effect_default", "playerResearch", "AdvanceToResearch", "registerRules_exports", "init_registerRules", "__esmMin", "init_action", "init_added", "init_captured", "init_complete", "init_cost", "init_RuleRegistry", "init_process_yield", "init_requirements", "init_started", "instance", "action_default", "added_default", "captured_default", "complete_default", "cost_default", "process_yield_default", "requirements_default", "started_default", "init_Parts", "__esmMin", "init_Fuel", "init_Habitation", "init_LifeSupport", "init_Power", "init_Propulsion", "init_Structural", "registerBuildItems_exports", "init_registerBuildItems", "__esmMin", "init_Parts", "init_AvailableCityBuildItemsRegistry", "instance", "Fuel", "Habitation", "LifeSupport", "Power", "Propulsion", "Structural", "Built", "Built_default", "init_Built", "__esmMin", "init_Rule", "Rule_default", "__name", "ChanceOfSuccess", "ChanceOfSuccess_default", "init_ChanceOfSuccess", "__esmMin", "init_Rule", "Rule_default", "__name", "FlightTime", "FlightTime_default", "init_FlightTime", "__esmMin", "init_Rule", "Rule_default", "__name", "Landed", "Landed_default", "init_Landed", "__esmMin", "init_Rule", "Rule_default", "__name", "Launch", "Launch_default", "init_Launch", "__esmMin", "init_Rule", "Rule_default", "__name", "Lost", "Lost_default", "init_Lost", "__esmMin", "init_Rule", "Rule_default", "__name", "Spaceship", "Spaceship_default", "init_Spaceship", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_Turn", "init_Built", "init_ChanceOfSuccess", "init_ChooseSlot", "init_FlightTime", "init_Landed", "init_Launch", "init_Lost", "DataObject", "#launched", "#layout", "#player", "#randomNumberGenerator", "#ruleRegistry", "#successful", "#turn", "player", "layout", "ruleRegistry", "instance", "turn", "randomNumberGenerator", "slot", "part", "ChooseSlot_default", "Built_default", "ChanceOfSuccess_default", "Landed_default", "Lost_default", "FlightTime_default", "Launch_default", "__name", "SpaceshipRegistry", "instance", "init_SpaceshipRegistry", "__esmMin", "init_EntityRegistry", "init_Spaceship", "EntityRegistry", "Spaceship_default", "player", "spaceship", "__name", "WonderRegistry", "instance", "init_WonderRegistry", "__esmMin", "init_EntityRegistry", "init_Wonder", "EntityRegistry", "Wonder_default", "city", "player", "wonder", "__name", "ApolloProgram", "ApolloProgram_default", "init_ApolloProgram", "__esmMin", "init_Wonder", "Wonder", "__name", "getRules", "build_default", "init_build", "__esmMin", "init_Build", "init_Parts", "init_PlayerResearchRegistry", "init_SpaceshipRegistry", "init_WonderRegistry", "init_ApolloProgram", "init_Criterion", "init_Effect", "init_Part", "init_Plastics", "init_Robotics", "init_SpaceFlight", "__name", "wonderRegistry", "instance", "playerResearchRegistry", "spaceshipRegistry", "Build", "Criterion_default", "city", "BuildItem", "Part_default", "Effect_default", "wonder", "ApolloProgram_default", "spaceship", "Structural", "SpaceFlight_default", "Fuel", "Plastics_default", "Propulsion", "Habitation", "Robotics_default", "LifeSupport", "Power", "PartType", "RequiredAdvance", "getRules", "build_cost_default", "init_build_cost", "__esmMin", "init_BuildCost", "init_Parts", "__name", "Fuel", "Habitation", "LifeSupport", "Power", "Propulsion", "Structural", "PartType", "cost", "buildCost", "getRules", "building_complete_default", "init_building_complete", "__esmMin", "init_CurrentPlayerRegistry", "init_LayoutRegistry", "init_RuleRegistry", "init_SpaceshipRegistry", "init_Turn", "init_ApolloProgram", "init_BulidingComplete", "init_Criterion", "init_Effect", "init_Part", "init_Spaceship", "__name", "currentPlayerRegistry", "instance", "spaceshipRegistry", "layoutRegistry", "ruleRegistry", "turn", "randomNumberGenerator", "BulidingComplete_default", "Criterion_default", "cityBuild", "buildItem", "ApolloProgram_default", "Effect_default", "LayoutType", "layout", "player", "Spaceship_default", "Part_default", "part", "getRules", "spend_default", "init_spend", "__esmMin", "init_Criterion", "init_Effect", "init_Part", "init_Spend", "__name", "Spend_default", "Criterion_default", "cityBuild", "Part_default", "Effect_default", "cost", "getRules", "action_default", "init_action", "__esmMin", "init_SpaceshipRegistry", "init_Action", "init_Criterion", "init_Effect", "init_LaunchSpaceship", "__name", "spaceshipRegistry", "instance", "Action_default", "Criterion_default", "player", "Effect_default", "LaunchSpaceship_default", "propulsion", "getRules", "active_default", "init_active", "__esmMin", "init_Parts", "init_Active", "init_Criterion", "init_Effect", "Active_default", "Criterion_default", "slot", "Propulsion", "Effect_default", "layout", "activeSlots", "adjacentSlot", "Fuel", "__name", "Habitation", "LifeSupport", "Power", "PartType", "Structural", "getRules", "built_default", "init_built", "__esmMin", "init_Engine", "init_Built", "init_Effect", "__name", "engine", "instance", "Built_default", "Effect_default", "part", "Energy", "init_Energy", "__esmMin", "init_Yield", "Yield_default", "__name", "LifeSupport", "init_LifeSupport", "__esmMin", "init_Yield", "Yield_default", "__name", "Mass", "init_Mass", "__esmMin", "init_Yield", "Yield_default", "__name", "Population", "init_Population", "__esmMin", "init_Yield", "Yield_default", "__name", "init_Yields", "__esmMin", "init_Energy", "init_LifeSupport", "init_Mass", "init_Population", "getRules", "chance_of_success_default", "init_chance_of_success", "__esmMin", "init_Yields", "init_Parts", "init_ChanceOfSuccess", "init_Effect", "__name", "ChanceOfSuccess_default", "Effect_default", "spaceship", "totalEnergy", "requiredEnergy", "totalLifeSupport", "requiredLifeSupport", "population", "shipYield", "Energy", "LifeSupport", "Population", "totalFuel", "totalPropulsion", "part", "Fuel", "Propulsion", "value", "fuelToPropulsionRatio", "lifeSupportRatio", "energyRatio", "getRules", "choose_slot_default", "init_choose_slot", "__esmMin", "init_ChooseSlot", "init_Criterion", "init_Effect", "init_Parts", "__name", "ChooseSlot_default", "Criterion_default", "part", "Structural", "layout", "slot", "Effect_default", "availableSlots", "a", "b", "getRules", "flight_time_default", "init_flight_time", "__esmMin", "init_Turn", "init_Year", "init_FlightTime", "init_Effect", "init_Yields", "init_Parts", "init_reduceYields", "__name", "year", "instance", "turn", "FlightTime_default", "Effect_default", "spaceship", "mass", "reduceYield", "Mass", "propulsion", "total", "part", "Propulsion", "years", "currentYear", "targetYear", "targetTurn", "getRules", "landed_default", "init_landed", "__esmMin", "init_Engine", "init_Effect", "init_Landed", "__name", "engine", "instance", "Landed_default", "Effect_default", "spaceship", "getRules", "lost_default", "init_lost", "__esmMin", "init_Engine", "init_LayoutRegistry", "init_RuleRegistry", "init_SpaceshipRegistry", "init_Turn", "init_Effect", "init_Lost", "init_Spaceship", "__name", "spaceshipRegistry", "instance", "layoutRegistry", "ruleRegistry", "turn", "engine", "randomNumberGenerator", "Lost_default", "Effect_default", "spaceship", "LayoutType", "layout", "Spaceship_default", "getRules", "yield_default", "init_yield", "__esmMin", "init_Yields", "init_Parts", "init_Criterion", "init_Effect", "init_Yield", "__name", "Fuel", "Mass", "Habitation", "Energy", "LifeSupport", "Population", "Power", "Propulsion", "Structural", "PartType", "YieldType", "value", "Yield_default", "Criterion_default", "part", "Effect_default", "Start", "Start_default", "init_Start", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "start_default", "init_start", "__esmMin", "init_SpaceshipRegistry", "init_Effect", "init_Start", "__name", "spaceshipRegistry", "instance", "Start_default", "Effect_default", "spaceship", "registerRules_exports", "init_registerRules", "__esmMin", "init_build", "init_build_cost", "init_building_complete", "init_spend", "init_RuleRegistry", "init_action", "init_active", "init_built", "init_chance_of_success", "init_choose_slot", "init_flight_time", "init_landed", "init_lost", "init_yield", "init_start", "instance", "build_default", "build_cost_default", "building_complete_default", "spend_default", "action_default", "active_default", "built_default", "chance_of_success_default", "choose_slot_default", "flight_time_default", "landed_default", "lost_default", "yield_default", "start_default", "TradeRate", "TradeRate_default", "init_TradeRate", "__esmMin", "init_Yield", "Yield_default", "__name", "Luxuries", "init_Luxuries", "__esmMin", "init_TradeRate", "TradeRate_default", "__name", "Luxuries_default", "Research", "init_Research", "__esmMin", "init_TradeRate", "TradeRate_default", "__name", "Tax", "init_Tax", "__esmMin", "init_Gold", "init_TradeRate", "TradeRate_default", "__name", "Gold_default", "init_TradeRates", "__esmMin", "init_Luxuries", "init_Research", "init_Tax", "AvailableTradeRateRegistry", "instance", "init_AvailableTradeRateRegistry", "__esmMin", "init_ConstructorRegistry", "init_TradeRate", "ConstructorRegistry", "TradeRate_default", "__name", "registerAvailableTradeRates_exports", "init_registerAvailableTradeRates", "__esmMin", "init_TradeRates", "init_AvailableTradeRateRegistry", "instance", "Luxuries", "Research", "Tax", "init_Yields", "__esmMin", "init_Corruption", "init_Trade", "PlayerTradeRates", "PlayerTradeRates_default", "init_PlayerTradeRates", "__esmMin", "init_DataObject", "DataObject_default", "#fudgeFactor", "#player", "#rates", "player", "rates", "fixed", "available", "others", "rate", "current", "total", "TradeRateType", "tradeRate", "Type", "value", "ratesAndValues", "__name", "PlayerTradeRatesRegistry", "instance", "init_PlayerTradeRatesRegistry", "__esmMin", "init_EntityRegistry", "init_PlayerTradeRates", "EntityRegistry", "PlayerTradeRates_default", "player", "playerTradeRates", "__name", "getRules", "yield_default", "init_yield", "__esmMin", "init_AvailableTradeRateRegistry", "init_Yields", "init_PlayerTradeRatesRegistry", "init_Effect", "init_Yield", "init_reduceYields", "__name", "availableTradeRateRegistry", "instance", "playerTradeRatesRegistry", "Yield", "Effect_default", "city", "yields", "playerRates", "total", "reduceYield", "Trade", "remaining", "TradeRateType", "TradeYield", "value", "getRules", "action_default", "init_action", "__esmMin", "init_PlayerTradeRatesRegistry", "init_Action", "init_PlayerActions", "init_Effect", "__name", "playerTradeRateRegistry", "instance", "Action_default", "Effect_default", "player", "AdjustTradeRates", "getRules", "added_default", "init_added", "__esmMin", "init_AvailableTradeRateRegistry", "init_PlayerTradeRatesRegistry", "init_TradeRates", "init_Added", "init_Effect", "init_PlayerTradeRates", "__name", "availableTradeRateRegistry", "instance", "playerTradeRatesRegistry", "Added_default", "Effect_default", "player", "defaultRates", "Tax", "Research", "Luxuries", "availableRates", "playerTradeRates", "PlayerTradeRates_default", "TradeRateType", "defaultRate", "rate", "cachedTradeRateYields", "getRules", "turn_start_default", "init_turn_start", "__esmMin", "init_AvailableTradeRateRegistry", "init_CityRegistry", "init_RuleRegistry", "init_Effect", "init_High", "init_ProcessYield", "init_TurnStart", "init_reduceYields", "__name", "ruleRegistry", "instance", "cityRegistry", "availableTradeRateRegistry", "TurnStart_default", "High_default", "Effect_default", "player", "TradeRateType", "city", "cityYields", "reduceYields", "yields", "yieldValue", "index", "YieldType", "cityYield", "ProcessYield_default", "registerRules_exports", "init_registerRules", "__esmMin", "init_RuleRegistry", "init_yield", "init_action", "init_added", "init_turn_start", "instance", "yield_default", "action_default", "added_default", "turn_start_default", "getRules", "spend_default", "init_spend", "__esmMin", "init_CityImprovement", "init_Criterion", "init_Effect", "init_Spend", "init_Unit", "__name", "Spend_default", "Criterion_default", "cityBuild", "Unit_default", "Effect_default", "cost", "price", "CityImprovement_default", "getRules", "action_default", "init_action", "__esmMin", "init_CityRegistry", "init_Action", "init_PlayerActions", "init_Effect", "__name", "cityRegistry", "instance", "Action_default", "Effect_default", "player", "city", "CompleteProduction", "getRules", "added_default", "init_added", "__esmMin", "init_PlayerTreasuryRegistry", "init_Added", "init_Effect", "init_PlayerTreasury", "__name", "playerTreasuryRegistry", "instance", "Added_default", "Effect_default", "player", "PlayerTreasury_default", "init_Yields", "__esmMin", "init_CityImprovementMaintenanceGold", "init_Gold", "Updated", "Updated_default", "init_Updated", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "process_yield_default", "init_process_yield", "__esmMin", "init_Yields", "init_CityImprovementRegistry", "init_Engine", "init_PlayerTreasuryRegistry", "init_RuleRegistry", "init_BuildItem", "init_CivilDisorder", "init_Criterion", "init_Effect", "init_ProcessYield", "init_Updated", "__name", "playerTreasuryRegistry", "instance", "ruleRegistry", "cityImprovementRegistry", "engine", "ProcessYield_default", "Criterion_default", "cityYield", "Gold", "Effect_default", "city", "yields", "playerTreasury", "CityImprovementMaintenanceGold", "cityImprovement", "buildItem", "BuildItem_default", "CivilDisorder_default", "rule", "Updated_default", "getRules", "treasury_updated_default", "init_treasury_updated", "__esmMin", "init_Engine", "init_Criterion", "init_Effect", "init_Updated", "__name", "engine", "instance", "Updated_default", "Criterion_default", "playerTreasury", "Effect_default", "city", "registerRules_exports", "init_registerRules", "__esmMin", "init_RuleRegistry", "init_spend", "init_action", "init_added", "init_process_yield", "init_treasury_updated", "instance", "spend_default", "action_default", "added_default", "process_yield_default", "treasury_updated_default", "registerAvailableBuildItems_exports", "init_registerAvailableBuildItems", "__esmMin", "init_Units", "init_AvailableCityBuildItemsRegistry", "instance", "Artillery", "Battleship", "Bomber", "Cannon", "Caravan", "Carrier", "Catapult", "Chariot", "Cruiser", "Diplomat", "Fighter", "Frigate", "Horseman", "Ironclad", "Knight", "MechanizedInfantry", "Musketman", "Nuclear", "Rifleman", "Sail", "Settlers", "Spearman", "Submarine", "Swordman", "Tank", "Transport", "Trireme", "Warrior", "Available", "Available_default", "init_Available", "__esmMin", "init_Rule", "Rule_default", "__name", "isLandUnit", "isNavalUnit", "tileHasCity", "getRules", "action_default", "init_action", "__esmMin", "init_Action", "init_Types", "init_Actions", "init_CityNameRegistry", "init_CityRegistry", "init_Terrains", "init_TileImprovements", "init_RuleRegistry", "init_TerrainFeatureRegistry", "init_TileImprovementRegistry", "init_TransportRegistry", "init_Turn", "init_UnitRegistry", "init_UnitImprovementRegistry", "init_And", "init_Available", "init_Criterion", "init_Effect", "init_Or", "init_Units", "Criterion_default", "unit", "to", "from", "Land", "Naval", "__name", "tile", "cityRegistry", "cityNameRegistry", "instance", "ruleRegistry", "tileImprovementRegistry", "unitImprovementRegistry", "unitRegistry", "terrainFeatureRegistry", "transportRegistry", "turn", "Action", "isNeighbouringTile", "hasMovesLeft", "Or_default", "And_default", "tileUnit", "Air", "city", "Effect_default", "Move", "Fighter", "Submarine", "Attack", "CaptureCity", "isCurrentTile", "Fortifiable", "improvement", "Irrigation", "Mine", "Railroad", "Road", "Improvement", "Pillage", "Fortify", "Sleep", "Disband", "NoOrders", "Settlers", "FoundCity", "BuildIrrigation", "River", "Water", "BuildMine", "BuildRoad", "BuildRailroad", "tileImprovement", "ActionType", "additionalCriteria", "Worker", "Available_default", "rule", "Jungle", "ClearJungle", "Forest", "ClearForest", "Plains", "PlantForest", "Swamp", "ClearSwamp", "TerrainType", "NavalTransport", "transport", "Embark", "Disembark", "Unload", "getRules", "activate_default", "init_activate", "__esmMin", "init_UnitImprovementRegistry", "init_Activate", "init_Criterion", "init_Effect", "init_UnitImprovements", "__name", "unitImprovementRegistry", "instance", "Activate_default", "Criterion_default", "unit", "Effect_default", "Fortified", "UnitImprovementType", "unitImprovement", "getRules", "build_default", "init_build", "__esmMin", "init_Advances", "init_Build", "init_Units", "init_PlayerResearchRegistry", "init_Criterion", "init_Effect", "init_Types", "__name", "playerResearchRegistry", "instance", "Build", "Criterion_default", "city", "BuildItem", "Naval", "Effect_default", "Artillery", "Robotics", "Battleship", "Steel", "Bomber", "AdvancedFlight", "Cannon", "Metallurgy", "Carrier", "Caravan", "Trade", "Catapult", "Mathematics", "Chariot", "TheWheel", "Cruiser", "Combustion", "Diplomat", "Writing", "Fighter", "Flight", "Frigate", "Magnetism", "Horseman", "HorsebackRiding", "Ironclad", "SteamEngine", "Knight", "Chivalry", "MechanizedInfantry", "LaborUnion", "Musketman", "Gunpowder", "Nuclear", "Rocketry", "Rifleman", "Conscription", "Sail", "Navigation", "Spearman", "BronzeWorking", "Submarine", "MassProduction", "Swordman", "IronWorking", "Tank", "Automobile", "Transport", "Industrialization", "Trireme", "MapMaking", "UnitType", "RequiredAdvance", "Warrior", "ObseletionAdvance", "getRules", "buildCost_default", "init_buildCost", "__esmMin", "init_BuildCost", "init_Units", "__name", "Artillery", "Battleship", "Bomber", "Cannon", "Caravan", "Carrier", "Catapult", "Chariot", "Cruiser", "Diplomat", "Fighter", "Frigate", "Horseman", "Ironclad", "Knight", "MechanizedInfantry", "Musketman", "Nuclear", "Rifleman", "Sail", "Settlers", "Spearman", "Submarine", "Swordman", "Tank", "Transport", "Trireme", "Warrior", "UnitType", "cost", "buildCost", "getRules", "buildingComplete_default", "init_buildingComplete", "__esmMin", "init_CityGrowthRegistry", "init_BulidingComplete", "init_Criterion", "init_Effect", "init_Units", "__name", "cityGrowthRegistry", "instance", "BulidingComplete_default", "Criterion_default", "cityBuild", "buildItem", "Settlers", "Effect_default", "getRules", "created_default", "init_created", "__esmMin", "init_Engine", "init_UnitRegistry", "init_Created", "init_Effect", "__name", "unitRegistry", "instance", "engine", "Created_default", "Effect_default", "unit", "getRules", "defeated_default", "init_defeated", "__esmMin", "init_CityRegistry", "init_Engine", "init_RuleRegistry", "init_TileImprovementRegistry", "init_UnitRegistry", "init_Criterion", "init_Defeated", "init_Destroyed", "init_Effect", "__name", "cityRegistry", "instance", "ruleRegistry", "tileImprovementRegistry", "unitRegistry", "engine", "Defeated_default", "Effect_default", "unit", "by", "Destroyed_default", "Criterion_default", "tileUnit", "getRules", "destroyed_default", "init_destroyed", "__esmMin", "init_Engine", "init_UnitImprovementRegistry", "init_UnitRegistry", "init_Destroyed", "init_Effect", "__name", "unitRegistry", "instance", "unitImprovementRegistry", "engine", "Destroyed_default", "Effect_default", "unit", "player", "unitImprovement", "LostAtSea", "LostAtSea_default", "init_LostAtSea", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "lostAtSea_default", "init_lostAtSea", "__esmMin", "init_Engine", "init_Effect", "init_LostAtSea", "__name", "engine", "instance", "LostAtSea_default", "Effect_default", "unit", "getRules", "moved_default", "init_moved", "__esmMin", "init_Actions", "init_Engine", "init_RuleRegistry", "init_TransportRegistry", "init_Criterion", "init_Effect", "init_LostAtSea", "init_Moved", "init_Types", "init_Units", "init_CityRegistry", "__name", "transportRegistry", "instance", "ruleRegistry", "randomNumberGenerator", "engine", "cityRegistry", "Moved_default", "Effect_default", "unit", "action", "Criterion_default", "NavalTransport", "Move", "Disembark", "manifest", "Trireme", "LostAtSea_default", "Fighter", "baseTerrainMovementCost", "getRules", "movementCost_default", "init_movementCost", "__esmMin", "init_Terrains", "init_Types", "init_Actions", "init_TileImprovements", "init_TileImprovementRegistry", "init_TransportRegistry", "init_Criterion", "init_Effect", "init_MovementCost", "Arctic", "Desert", "Forest", "Grassland", "Hills", "Jungle", "Mountains", "Ocean", "Plains", "River", "Swamp", "Tundra", "__name", "tileImprovementRegistry", "instance", "transportRegistry", "TerrainType", "cost", "MovementCost_default", "Criterion_default", "unit", "action", "Move", "Land", "Effect_default", "Air", "Naval", "improvement", "Road", "Railroad", "NavalTransport", "BuildIrrigation", "BuildMine", "BuildRoad", "BuildRailroad", "ClearForest", "ClearJungle", "ClearSwamp", "Fortify", "Pillage", "PlantForest", "Sleep", "Action", "moveCost", "terrainCost", "getRules", "action_default", "init_action", "__esmMin", "init_PlayerActions", "init_UnitRegistry", "init_Action", "init_Criterion", "init_Effect", "__name", "unitRegistry", "instance", "Action_default", "Criterion_default", "player", "unit", "Effect_default", "a", "b", "ActiveUnit", "InactiveUnit", "getRules", "stowed_default", "init_stowed", "__esmMin", "init_Effect", "init_Sleep", "init_Stowed", "__name", "Stowed_default", "Effect_default", "unit", "Sleep_default", "getRules", "yield_default", "init_yield", "__esmMin", "init_Yields", "init_Units", "init_UnitImprovements", "init_RuleRegistry", "init_UnitImprovementRegistry", "init_Yield", "init_Criterion", "init_Effect", "__name", "unitImprovementRegistry", "instance", "ruleRegistry", "Artillery", "Battleship", "Bomber", "Cannon", "Caravan", "Carrier", "Catapult", "Chariot", "Cruiser", "Diplomat", "Fighter", "Frigate", "Horseman", "Ironclad", "Knight", "MechanizedInfantry", "Musketman", "Nuclear", "Rifleman", "Sail", "Settlers", "Spearman", "Submarine", "Swordman", "Tank", "Transport", "Trireme", "Warrior", "UnitType", "attack", "defence", "movement", "visibility", "unitYield", "Fortified", "Defence", "Veteran", "Attack", "UnitImprovementType", "yieldModifier", "YieldTypes", "YieldType", "Yield", "Criterion_default", "unit", "unitImprovement", "Effect_default", "baseYield", "BaseYield", "getRules", "unsupported_default", "init_unsupported", "__esmMin", "init_Engine", "init_Effect", "init_Unsupported", "__name", "engine", "instance", "Unsupported_default", "Effect_default", "city", "unit", "getRules", "validateMove_default", "init_validateMove", "__esmMin", "init_Criterion", "init_Effect", "init_ValidateMove", "__name", "randomNumberGenerator", "ValidateMove_default", "Criterion_default", "unit", "movementCost", "Effect_default", "remainingMoves", "registerRules_exports", "init_registerRules", "__esmMin", "init_action", "init_activate", "init_build", "init_buildCost", "init_buildingComplete", "init_created", "init_defeated", "init_destroyed", "init_RuleRegistry", "init_lostAtSea", "init_moved", "init_movementCost", "init_stowed", "init_yield", "init_unsupported", "init_validateMove", "instance", "action_default", "activate_default", "build_default", "buildCost_default", "buildingComplete_default", "created_default", "defeated_default", "destroyed_default", "lostAtSea_default", "moved_default", "movementCost_default", "stowed_default", "yield_default", "unsupported_default", "validateMove_default", "Colossus", "init_Colossus", "__esmMin", "init_Wonder", "Wonder_default", "__name", "CopernicusObservatory", "init_CopernicusObservatory", "__esmMin", "init_Wonder", "Wonder_default", "__name", "CureForCancer", "init_CureForCancer", "__esmMin", "init_Wonder", "Wonder", "__name", "DarwinsVoyage", "init_DarwinsVoyage", "__esmMin", "init_Wonder", "Wonder", "__name", "GreatLibrary", "init_GreatLibrary", "__esmMin", "init_Wonder", "Wonder_default", "__name", "GreatWall", "init_GreatWall", "__esmMin", "init_Wonder", "Wonder_default", "__name", "HangingGardens", "init_HangingGardens", "__esmMin", "init_Wonder", "Wonder_default", "__name", "HooverDam", "init_HooverDam", "__esmMin", "init_Wonder", "Wonder", "__name", "IsaacNewtonsCollege", "init_IsaacNewtonsCollege", "__esmMin", "init_Wonder", "Wonder", "__name", "JsBachsCathedral", "init_JsBachsCathedral", "__esmMin", "init_Wonder", "Wonder", "__name", "Lighthouse", "init_Lighthouse", "__esmMin", "init_Wonder", "Wonder", "__name", "MagellansExpedition", "init_MagellansExpedition", "__esmMin", "init_Wonder", "Wonder_default", "__name", "ManhattanProject", "init_ManhattanProject", "__esmMin", "init_Wonder", "Wonder", "__name", "MichelangelosChapel", "init_MichelangelosChapel", "__esmMin", "init_Wonder", "Wonder", "__name", "Oracle", "init_Oracle", "__esmMin", "init_Wonder", "Wonder_default", "__name", "Pyramids", "init_Pyramids", "__esmMin", "init_Wonder", "Wonder_default", "__name", "SetiProgram", "init_SetiProgram", "__esmMin", "init_Wonder", "Wonder", "__name", "ShakespearesTheatre", "init_ShakespearesTheatre", "__esmMin", "init_Wonder", "Wonder", "__name", "UnitedNations", "init_UnitedNations", "__esmMin", "init_Wonder", "Wonder", "__name", "WomensSuffrage", "init_WomensSuffrage", "__esmMin", "init_Wonder", "Wonder", "__name", "init_Wonders", "__esmMin", "init_ApolloProgram", "init_Colossus", "init_CopernicusObservatory", "init_CureForCancer", "init_DarwinsVoyage", "init_GreatLibrary", "init_GreatWall", "init_HangingGardens", "init_HooverDam", "init_IsaacNewtonsCollege", "init_JsBachsCathedral", "init_Lighthouse", "init_MagellansExpedition", "init_ManhattanProject", "init_MichelangelosChapel", "init_Oracle", "init_Pyramids", "init_SetiProgram", "init_ShakespearesTheatre", "init_UnitedNations", "init_WomensSuffrage", "registerAvailableBuildItems_exports", "init_registerAvailableBuildItems", "__esmMin", "init_Wonders", "init_AvailableCityBuildItemsRegistry", "instance", "ApolloProgram", "Colossus", "CopernicusObservatory", "CureForCancer", "DarwinsVoyage", "GreatLibrary", "GreatWall", "HangingGardens", "HooverDam", "IsaacNewtonsCollege", "JsBachsCathedral", "Lighthouse", "MagellansExpedition", "ManhattanProject", "MichelangelosChapel", "Oracle", "Pyramids", "SetiProgram", "ShakespearesTheatre", "UnitedNations", "WomensSuffrage", "getRules", "build_default", "init_build", "__esmMin", "init_Wonders", "init_Advances", "init_Build", "init_PlayerResearchRegistry", "init_WonderRegistry", "init_Criterion", "init_Effect", "init_Wonder", "__name", "playerResearchRegistry", "instance", "wonderRegistry", "Build", "Criterion_default", "city", "BuildItem", "Wonder_default", "Effect_default", "WonderType", "wonder", "Colossus", "BronzeWorking", "CopernicusObservatory", "Astronomy", "GreatLibrary", "Literacy", "GreatWall", "Masonry", "HangingGardens", "Pottery", "Lighthouse", "MapMaking", "MagellansExpedition", "Navigation", "Oracle", "CeremonialBurial", "Pyramids", "ApolloProgram", "SpaceFlight", "CureForCancer", "GeneticEngineering", "DarwinsVoyage", "Railroad", "HooverDam", "Electronics", "IsaacNewtonsCollege", "TheoryOfGravity", "JsBachsCathedral", "Religion", "ManhattanProject", "NuclearFission", "MichelangelosChapel", "SetiProgram", "Computers", "ShakespearesTheatre", "Medicine", "UnitedNations", "Communism", "WomensSuffrage", "Industrialization", "UnitType", "RequiredAdvance", "getRules", "build_cost_default", "init_build_cost", "__esmMin", "init_Wonders", "init_BuildCost", "__name", "ApolloProgram", "Colossus", "CopernicusObservatory", "CureForCancer", "DarwinsVoyage", "GreatLibrary", "GreatWall", "HangingGardens", "HooverDam", "IsaacNewtonsCollege", "JsBachsCathedral", "Lighthouse", "MagellansExpedition", "ManhattanProject", "MichelangelosChapel", "Oracle", "Pyramids", "SetiProgram", "ShakespearesTheatre", "UnitedNations", "WomensSuffrage", "WonderType", "cost", "buildCost", "getRules", "building_complete_default", "init_building_complete", "__esmMin", "init_CityBuildRegistry", "init_Engine", "init_PlayerResearchRegistry", "init_RuleRegistry", "init_WonderRegistry", "init_BulidingComplete", "init_Criterion", "init_Wonders", "init_Effect", "init_Started", "init_Wonder", "__name", "cityBuildRegistry", "instance", "playerResearchRegistry", "ruleRegistry", "wonderRegistry", "engine", "BulidingComplete_default", "Criterion_default", "cityBuild", "built", "Wonder_default", "Effect_default", "WonderType", "DarwinsVoyage", "playerResearch", "createOnStarted", "action", "onStarted", "Started_default", "startedPlayerResearch", "completeResearch", "cityHasWonder", "playerHasWonder", "init_hasWonder", "__esmMin", "init_WonderRegistry", "init_Criterion", "__name", "WonderType", "wonderRegistry", "instance", "Criterion_default", "city", "wonder", "item", "discoveredByPlayer", "notDiscoveredByAnyPlayer", "notDiscoveredByPlayer", "init_hasDiscovered", "__esmMin", "init_PlayerResearchRegistry", "init_Criterion", "__name", "AdvanceType", "playerResearchRegistry", "instance", "Criterion_default", "item", "playerResearch", "hasCityImprovement", "init_hasCityImprovement", "__esmMin", "init_CityImprovementRegistry", "init_Criterion", "__name", "CityImprovementType", "cityImprovementRegistry", "instance", "Criterion_default", "city", "cityImprovement", "getRules", "cost_default", "init_cost", "__esmMin", "init_CityImprovements", "init_CityImprovementRegistry", "init_Advances", "init_Wonders", "init_PlayerGovernmentRegistry", "init_PlayerResearchRegistry", "init_UnitRegistry", "init_WonderRegistry", "init_hasWonder", "init_hasDiscovered", "init_Cost", "init_Criterion", "init_Effect", "init_Priorities", "init_Yields", "init_Priority", "init_hasCityImprovement", "init_reduceYields", "__name", "cityImprovementRegistry", "instance", "playerGovernmentRegistry", "playerResearchRegistry", "unitRegistry", "wonderRegistry", "Cost_default", "Low", "playerHasWonder", "Oracle", "hasCityImprovement", "Temple", "notDiscoveredByPlayer", "Mysticism", "notDiscoveredByAnyPlayer", "Religion", "Effect_default", "city", "yields", "Unhappiness", "reduceYield", "discoveredByPlayer", "Priority_default", "cityHasWonder", "ShakespearesTheatre", "Electronics", "JsBachsCathedral", "MichelangelosChapel", "Cathedral", "Communism", "WomensSuffrage", "Criterion_default", "cityYields", "cityYield", "MilitaryUnhappiness", "getRules", "destroyed_default", "init_destroyed", "__esmMin", "init_WonderRegistry", "init_Destroyed", "init_Criterion", "init_Effect", "__name", "wonderRegistry", "instance", "Destroyed_default", "Criterion_default", "city", "Effect_default", "wonder", "getRules", "yield_default", "init_yield", "__esmMin", "init_Wonders", "init_Advances", "init_Yields", "init_PlayerResearchRegistry", "init_WonderRegistry", "init_hasWonder", "init_Yield", "init_Effect", "init_Priority", "init_hasDiscovered", "__name", "playerResearchRegistry", "instance", "wonderRegistry", "Yield_default", "Priority_default", "cityHasWonder", "Colossus", "notDiscoveredByAnyPlayer", "Electricity", "Effect_default", "city", "Trade", "tile", "tileYield", "HangingGardens", "Invention", "CureForCancer", "WonderType", "happiness", "ObsoletingAdvance", "playerHasWonder", "Happiness", "getRules", "yield_modifier_default", "init_yield_modifier", "__esmMin", "init_Wonders", "init_PlayerResearchRegistry", "init_WonderRegistry", "init_hasWonder", "init_Advances", "init_Effect", "init_Priorities", "init_Yields", "init_YieldModifier", "init_hasDiscovered", "init_reduceYields", "__name", "playerResearchRegistry", "instance", "wonderRegistry", "CopernicusObservatory", "Research", "Automobile", "WonderType", "YieldType", "multiplier", "ObsoletingAdvance", "YieldModifier_default", "Low", "cityHasWonder", "notDiscoveredByAnyPlayer", "Effect_default", "city", "yields", "reduceYield", "SetiProgram", "playerHasWonder", "Obsolete", "Obsolete_default", "init_Obsolete", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "research_complete_default", "init_research_complete", "__esmMin", "init_Advances", "init_Wonders", "init_PlayerResearchRegistry", "init_RuleRegistry", "init_WonderRegistry", "init_Complete", "init_Criterion", "init_Effect", "init_Obsolete", "__name", "playerResearchRegistry", "instance", "ruleRegistry", "wonderRegistry", "Complete_default", "Criterion_default", "wonder", "GreatLibrary", "playerResearch", "completedResearch", "owningPlayer", "greatLibrary", "Effect_default", "Colossus", "Electricity", "CopernicusObservatory", "Automobile", "University", "GreatWall", "Gunpowder", "HangingGardens", "Invention", "IsaacNewtonsCollege", "NuclearFission", "Lighthouse", "Magnetism", "MichelangelosChapel", "Communism", "Oracle", "Religion", "Pyramids", "ShakespearesTheatre", "Electronics", "WonderType", "ObsoletingAdvance", "advance", "Obsolete_default", "getRules", "yield_default", "init_yield", "__esmMin", "init_Wonders", "init_PlayerResearchRegistry", "init_WonderRegistry", "init_Criterion", "init_Effect", "init_Priorities", "init_Advances", "init_Yields", "init_Types", "init_Yield", "init_hasDiscovered", "init_hasWonder", "__name", "wonderRegistry", "instance", "playerResearchRegistry", "Yield_default", "Low", "Criterion_default", "unit", "unitYield", "Movement", "Naval", "playerHasWonder", "Lighthouse", "notDiscoveredByPlayer", "Magnetism", "Effect_default", "MagellansExpedition", "getRules", "obsolete_default", "init_obsolete", "__esmMin", "init_Engine", "init_Effect", "init_Obsolete", "__name", "engine", "instance", "Obsolete_default", "Effect_default", "wonder", "city", "registerRules_exports", "init_registerRules", "__esmMin", "init_build", "init_build_cost", "init_building_complete", "init_cost", "init_destroyed", "init_yield", "init_yield_modifier", "init_RuleRegistry", "init_research_complete", "init_obsolete", "instance", "build_default", "build_cost_default", "building_complete_default", "cost_default", "destroyed_default", "yield_default", "yield_modifier_default", "research_complete_default", "obsolete_default", "getRules", "available_default", "init_available", "__esmMin", "init_Terrains", "init_TileImprovements", "init_PlayerResearchRegistry", "init_Advances", "init_TileImprovementRegistry", "init_Available", "init_Criterion", "__name", "playerResearchRegistry", "instance", "tileImprovementRegistry", "Irrigation", "Desert", "Grassland", "Hills", "Plains", "River", "Mine", "Mountains", "Road", "Arctic", "Forest", "Jungle", "Swamp", "Tundra", "Improvement", "AvailableTerrains", "Available_default", "Criterion_default", "tile", "AvailableTileImprovement", "Terrain", "improvement", "BridgeBuilding", "RequiredAdvance", "TerrainType", "player", "Railroad", "RequiredImprovement", "tileImprovement", "getRules", "built_default", "init_built", "__esmMin", "init_Engine", "init_TileImprovements", "init_TileImprovementRegistry", "init_Built", "init_Criterion", "init_Effect", "__name", "tileImprovementRegistry", "instance", "engine", "Built_default", "Criterion_default", "tile", "tileImprovement", "existingTileImprovement", "Effect_default", "Mine", "Irrigation", "Improvement", "ToRemove", "AvailableTerrainFeatureRegistry", "instance", "init_AvailableTerrainFeatureRegistry", "__esmMin", "init_ConstructorRegistry", "init_TerrainFeature", "ConstructorRegistry", "TerrainFeature_default", "__name", "getRules", "created_default", "init_created", "__esmMin", "init_AvailableTerrainFeatureRegistry", "init_RuleRegistry", "init_Created", "init_Effect", "init_Feature", "__name", "ruleRegistry", "instance", "availableTerrainFeatureRegistry", "Created_default", "Effect_default", "terrain", "rules", "Feature_default", "TerrainFeatureType", "rule", "Distribution", "init_Distribution", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "distribution_default", "init_distribution", "__esmMin", "init_Terrains", "init_Distribution", "init_Types", "init_Criterion", "init_Effect", "__name", "Distribution", "Criterion_default", "TerrainType", "Arctic", "mapData", "terrain", "Land", "Effect_default", "Desert", "Forest", "Grassland", "Hills", "Jungle", "Mountains", "Ocean", "Water", "Plains", "River", "Swamp", "Tundra", "DistributionGroups", "DistributionGroups_default", "init_DistributionGroups", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "distribution_groups_default", "init_distribution_groups", "__esmMin", "init_Terrains", "init_Effect", "init_DistributionGroups", "__name", "DistributionGroups_default", "Effect_default", "Ocean", "Grassland", "Swamp", "Mountains", "Jungle", "Hills", "Forest", "Desert", "Plains", "Tundra", "Arctic", "River", "getRules", "feature_default", "init_feature", "__esmMin", "init_Terrains", "init_TerrainFeatures", "init_TerrainFeatureRegistry", "init_Feature", "__name", "terrainFeatureRegistry", "instance", "Coal", "Hills", "Fish", "Ocean", "Game", "Forest", "Tundra", "Gems", "Jungle", "Gold", "Mountains", "Horse", "Plains", "Oasis", "Desert", "Oil", "Swamp", "Seal", "Arctic", "Shield", "Grassland", "River", "FeatureType", "chance", "terrains", "TerrainType", "feature", "Pillaged", "Pillaged_default", "init_Pillaged", "__esmMin", "init_Rule", "Rule_default", "__name", "getRules", "pillaged_default", "init_pillaged", "__esmMin", "init_Engine", "init_TileImprovementRegistry", "init_Pillaged", "init_Criterion", "init_Effect", "__name", "tileImprovementRegistry", "instance", "engine", "Pillaged_default", "Criterion_default", "tile", "tileImprovement", "Effect_default", "startTileCache", "tileScoreCache", "areaScoreCache", "tileScore", "areaScore", "pickStartTiles", "getRules", "pick_start_tile_default", "init_pick_start_tile", "__esmMin", "init_EarthStartTileRegistry", "init_Engine", "init_Yields", "init_Terrains", "init_Effect", "init_PickStartTile", "__name", "tile", "player", "Food", "Production", "Trade", "total", "world", "engine", "instance", "startingSquares", "Grassland", "Plains", "River", "TerrainType", "scoreA", "scoreB", "earthStartTileRegistry", "randomNumberGenerator", "PickStartTile_default", "Effect_default", "usedStartSquares", "startTile", "startSquare", "GeneratorRegistry", "instance", "init_GeneratorRegistry", "__esmMin", "init_Generator", "init_ConstructorRegistry", "ConstructorRegistry", "Generator_default", "__name", "PickGenerator", "PickGenerator_default", "init_PickGenerator", "__esmMin", "init_Rule", "Rule_default", "__name", "Start", "Start_default", "init_Start", "__esmMin", "init_Rule", "Rule_default", "__name", "World", "World_default", "init_World", "__esmMin", "init_DataObject", "init_RuleRegistry", "init_Built", "init_EntityRegistry", "init_Tile", "DataObject", "#generator", "#height", "#ruleRegistry", "#tiles", "EntityRegistry_default", "Tile_default", "#width", "generator", "ruleRegistry", "instance", "resolve", "tiles", "terrain", "i", "tile", "Built_default", "iterator", "x", "y", "__name", "getRules", "start_default", "init_start", "__esmMin", "init_GeneratorRegistry", "init_RuleRegistry", "init_Engine", "init_Effect", "init_PickGenerator", "init_Start", "init_World", "__name", "ruleRegistry", "instance", "generatorRegistry", "engine", "Start_default", "Effect_default", "Generator", "PickGenerator_default", "generator", "World_default", "getRules", "yield_default", "init_yield", "__esmMin", "init_TerrainFeatures", "init_Terrains", "init_Yields", "init_TileImprovements", "init_Governments", "init_PlayerGovernmentRegistry", "init_TerrainFeatureRegistry", "init_TileImprovementRegistry", "init_Criterion", "init_Effect", "init_Yield", "__name", "tileImprovementRegistry", "instance", "terrainFeatureRegistry", "playerGovernmentRegistry", "Food", "Forest", "Grassland", "Hills", "Jungle", "Ocean", "Plains", "River", "Swamp", "Tundra", "Production", "Desert", "Mountains", "YieldType", "TerrainType", "value", "Yield_default", "Criterion_default", "tile", "Effect_default", "Coal", "Fish", "Game", "Trade", "Gems", "Gold", "Horse", "Oasis", "Oil", "Seal", "Shield", "Feature", "feature", "player", "Communism", "Democracy", "Monarchy", "Republic", "Irrigation", "Mine", "ImprovedTerrain", "Improvement", "improvement", "Road", "getRules", "yield_modifier_default", "init_yield_modifier", "__esmMin", "init_Yields", "init_TileImprovementRegistry", "init_Criterion", "init_Effect", "init_Priorities", "init_TileImprovements", "init_YieldModifier", "__name", "tileImprovementRegistry", "instance", "Food", "Production", "Trade", "YieldType", "multiplier", "YieldModifier_default", "High", "Criterion_default", "tile", "player", "yields", "tileYield", "improvement", "Railroad", "Effect_default", "currentTotal", "total", "getRules", "pick_generator_default", "init_pick_generator", "__esmMin", "init_Engine", "init_GeneratorRegistry", "init_Earth", "init_Effect", "init_PickGenerator", "__name", "generatorRegistry", "instance", "engine", "randomNumberGenerator", "PickGenerator_default", "Effect_default", "Earth_default", "availableGenerators", "registerRules_exports", "init_registerRules", "__esmMin", "init_available", "init_built", "init_created", "init_distribution", "init_distribution_groups", "init_feature", "init_RuleRegistry", "init_pillaged", "init_pick_start_tile", "init_start", "init_yield", "init_yield_modifier", "init_pick_generator", "instance", "available_default", "built_default", "created_default", "distribution_default", "distribution_groups_default", "feature_default", "pillaged_default", "pick_start_tile_default", "start_default", "yield_default", "yield_modifier_default", "pick_generator_default", "TerrainRegistry", "instance", "init_TerrainRegistry", "__esmMin", "init_ConstructorRegistry", "init_Terrain", "ConstructorRegistry", "Terrain_default", "__name", "registerTerrains_exports", "init_registerTerrains", "__esmMin", "init_Terrains", "init_TerrainRegistry", "instance", "Arctic", "Desert", "Forest", "Grassland", "Hills", "Jungle", "Mountains", "Ocean", "Plains", "River", "Swamp", "Tundra", "registerTerrainFeatures_exports", "init_registerTerrainFeatures", "__esmMin", "init_TerrainFeatures", "init_AvailableTerrainFeatureRegistry", "instance", "Coal", "Fish", "Game", "Gems", "Gold", "Horse", "Oasis", "Oil", "Seal", "Shield", "getAdditionalData", "cities_default", "init_cities", "__esmMin", "init_CityRegistry", "init_AdditionalData", "init_Player", "init_Tile", "__name", "cityRegistry", "instance", "AdditionalData_default", "Player_default", "player", "Tile_default", "tile", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_cities", "instance", "cities_default", "getAdditionalData", "build_default", "init_build", "__esmMin", "init_CityBuildRegistry", "init_AdditionalData", "init_City", "__name", "cityBuildRegistry", "instance", "AdditionalData_default", "City_default", "city", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_build", "init_AdditionalDataRegistry", "instance", "build_default", "getAdditionalData", "growth_default", "init_growth", "__esmMin", "init_CityGrowthRegistry", "init_AdditionalData", "init_City", "__name", "cityGrowthRegistry", "instance", "AdditionalData_default", "City_default", "city", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_growth", "instance", "growth_default", "getAdditionalData", "improvements_default", "init_improvements", "__esmMin", "init_CityImprovementRegistry", "init_AdditionalData", "init_City", "__name", "cityImprovementRegistry", "instance", "AdditionalData_default", "City_default", "city", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_improvements", "instance", "improvements_default", "getAdditionalData", "goodyHut_default", "init_goodyHut", "__esmMin", "init_GoodyHutRegistry", "init_AdditionalData", "init_Tile", "__name", "goodyHutRegistry", "instance", "AdditionalData_default", "Tile_default", "tile", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_goodyHut", "instance", "goodyHut_default", "getAdditionalData", "government_default", "init_government", "__esmMin", "init_PlayerGovernmentRegistry", "init_AdditionalData", "init_Player", "__name", "playerGovernmentRegistry", "instance", "AdditionalData_default", "Player_default", "player", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_government", "init_AdditionalDataRegistry", "instance", "government_default", "getAdditionalData", "world_default", "init_world", "__esmMin", "init_PlayerWorldRegistry", "init_AdditionalData", "init_Player", "__name", "playerWorldRegistry", "instance", "AdditionalData_default", "Player_default", "player", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_world", "instance", "world_default", "getAdditionalData", "research_default", "init_research", "__esmMin", "init_PlayerResearchRegistry", "init_AdditionalData", "init_Player", "__name", "playerResearchRegistry", "instance", "AdditionalData_default", "Player_default", "player", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_research", "instance", "research_default", "getAdditionalData", "spaceship_default", "init_spaceship", "__esmMin", "init_SpaceshipRegistry", "init_AdditionalData", "init_Player", "__name", "spaceshipRegistry", "instance", "AdditionalData_default", "Player_default", "player", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_spaceship", "instance", "spaceship_default", "getAdditionalData", "features_default", "init_features", "__esmMin", "init_TerrainFeatureRegistry", "init_AdditionalData", "init_Terrain", "__name", "terrainFeatureRegistry", "instance", "AdditionalData_default", "Terrain_default", "terrain", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_features", "instance", "features_default", "getAdditionalData", "improvements_default", "init_improvements", "__esmMin", "init_TileImprovementRegistry", "init_AdditionalData", "init_Tile", "__name", "tileImprovementRegistry", "instance", "AdditionalData_default", "Tile_default", "tile", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_improvements", "instance", "improvements_default", "getAdditionalData", "rates_default", "init_rates", "__esmMin", "init_PlayerTradeRatesRegistry", "init_AdditionalData", "init_Player", "__name", "playerTradeRatesRegistry", "instance", "AdditionalData_default", "Player_default", "player", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_rates", "instance", "rates_default", "getAdditionalData", "treasury_default", "init_treasury", "__esmMin", "init_PlayerTreasuryRegistry", "init_AdditionalData", "init_Player", "__name", "playerTreasuryRegistry", "instance", "AdditionalData_default", "Player_default", "player", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_treasury", "instance", "treasury_default", "End", "End_default", "init_End", "__esmMin", "init_Rule", "Rule_default", "__name", "getEvents", "start_default", "init_start", "__esmMin", "init_Engine", "init_RuleRegistry", "init_Turn", "init_End", "init_Start", "__name", "ruleRegistry", "instance", "engine", "turn", "Start_default", "event", "End_default", "registerEvents_exports", "init_registerEvents", "__esmMin", "init_Engine", "init_start", "start_default", "event", "handler", "instance", "getAdditionalData", "units_default", "init_units", "__esmMin", "init_UnitRegistry", "init_AdditionalData", "init_City", "init_Player", "init_Tile", "__name", "unitRegistry", "instance", "AdditionalData_default", "City_default", "city", "Player_default", "player", "Tile_default", "tile", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_units", "instance", "units_default", "getAdditionalData", "improvements_default", "init_improvements", "__esmMin", "init_UnitImprovementRegistry", "init_AdditionalData", "init_Unit", "__name", "unitImprovementRegistry", "instance", "AdditionalData_default", "Unit_default", "unit", "registerAdditionalData_exports", "init_registerAdditionalData", "__esmMin", "init_AdditionalDataRegistry", "init_improvements", "instance", "improvements_default", "AIClientRegistry", "instance", "init_AIClientRegistry", "__esmMin", "init_ConstructorRegistry", "init_AIClient", "ConstructorRegistry", "AIClient_default", "__name", "registerAIClient_exports", "init_registerAIClient", "__esmMin", "init_AIClientRegistry", "init_SimpleAIClient", "instance", "SimpleAIClient_default", "getRules", "captured_default", "init_captured", "__esmMin", "init_ClientRegistry", "init_UnitRegistry", "init_Captured", "init_Criterion", "init_Effect", "init_SimpleAIClient", "__name", "unitRegistry", "instance", "clientRegistry", "Captured_default", "Criterion_default", "city", "player", "SimpleAIClient_default", "Effect_default", "capturingPlayer", "getRules", "destroyed_default", "init_destroyed", "__esmMin", "init_ClientRegistry", "init_UnitRegistry", "init_Criterion", "init_Destroyed", "init_Effect", "init_SimpleAIClient", "__name", "unitRegistry", "instance", "clientRegistry", "Destroyed_default", "Criterion_default", "city", "SimpleAIClient_default", "Effect_default", "player", "getRules", "defeated_default", "init_defeated", "__esmMin", "init_ClientRegistry", "init_UnitRegistry", "init_Criterion", "init_Defeated", "init_Effect", "init_SimpleAIClient", "__name", "unitRegistry", "instance", "clientRegistry", "Defeated_default", "Criterion_default", "unit", "SimpleAIClient_default", "Effect_default", "by", "registerRules_exports", "init_registerRules", "__esmMin", "init_RuleRegistry", "init_captured", "init_destroyed", "init_defeated", "instance", "captured_default", "defeated_default", "destroyed_default", "BaseGenerator", "BaseGenerator_default", "init_BaseGenerator", "__esmMin", "init_Distribution", "init_Generator", "init_Types", "init_RuleRegistry", "init_TerrainRegistry", "init_DistributionGroups", "init_getNeighbours", "Generator", "#landCoverage", "#landSize", "#maxIterations", "#clusterChance", "#coverage", "#pathChance", "#map", "#randomNumberGenerator", "#ruleRegistry", "#terrainRegistry", "height", "width", "options", "ruleRegistry", "instance", "terrainRegistry", "randomNumberGenerator", "landCoverage", "landSize", "maxIterations", "clusterChance", "coverage", "pathChance", "Water", "maxIslandPercentage", "maxIslandSize", "map", "value", "seen", "currentIsland", "toProcess", "seedTile", "flagAsSeen", "__name", "id", "getNeighbours_default", "currentTile", "tile", "index", "Land", "directNeighbours", "resolve", "rules", "Distribution", "DistributionGroups_default", "rule", "result", "group", "TerrainType", "distribution", "cluster", "fill", "from", "path", "to", "validIndices", "max", "currentIndex", "clusteredNeighbours", "candidates", "registerWorldGenerator_exports", "init_registerWorldGenerator", "__esmMin", "init_BaseGenerator", "init_GeneratorRegistry", "instance", "BaseGenerator_default", "plugins_exports", "import_base_civilization_american", "import_base_civilization_aztec", "import_base_civilization_babylonian", "import_base_civilization_chinese", "import_base_civilization_egyptian", "import_base_civilization_english", "import_base_civilization_french", "import_base_civilization_german", "import_base_civilization_greek", "import_base_civilization_indian", "import_base_civilization_mongol", "import_base_civilization_roman", "import_base_civilization_russian", "import_base_civilization_zulu", "import_base_science_advance_advancedflight", "import_base_science_advance_alphabet", "import_base_science_advance_astronomy", "import_base_science_advance_atomictheory", "import_base_science_advance_automobile", "import_base_science_advance_banking", "import_base_science_advance_bridgebuilding", "import_base_science_advance_bronzeworking", "import_base_science_advance_ceremonialburial", "import_base_science_advance_chemistry", "import_base_science_advance_chivalry", "import_base_science_advance_codeoflaws", "import_base_science_advance_combustion", "import_base_science_advance_communism", "import_base_science_advance_computers", "import_base_science_advance_conscription", "import_base_science_advance_construction", "import_base_science_advance_corporation", "import_base_science_advance_currency", "import_base_science_advance_democracy", "import_base_science_advance_electricity", "import_base_science_advance_electronics", "import_base_science_advance_engineering", "import_base_science_advance_explosives", "import_base_science_advance_feudalism", "import_base_science_advance_flight", "import_base_science_advance_fusionpower", "import_base_science_advance_geneticengineering", "import_base_science_advance_gunpowder", "import_base_science_advance_horsebackriding", "import_base_science_advance_industrialization", "import_base_science_advance_invention", "import_base_science_advance_ironworking", "import_base_science_advance_laborunion", "import_base_science_advance_literacy", "import_base_science_advance_magnetism", "import_base_science_advance_mapmaking", "import_base_science_advance_masonry", "import_base_science_advance_massproduction", "import_base_science_advance_mathematics", "import_base_science_advance_medicine", "import_base_science_advance_metallurgy", "import_base_science_advance_monarchy", "import_base_science_advance_mysticism", "import_base_science_advance_navigation", "import_base_science_advance_nuclearfission", "import_base_science_advance_nuclearpower", "import_base_science_advance_philosophy", "import_base_science_advance_physics", "import_base_science_advance_plastics", "import_base_science_advance_pottery", "import_base_science_advance_railroad", "import_base_science_advance_recycling", "import_base_science_advance_refining", "import_base_science_advance_religion", "import_base_science_advance_robotics", "import_base_science_advance_rocketry", "import_base_science_advance_spaceflight", "import_base_science_advance_steamengine", "import_base_science_advance_steel", "import_base_science_advance_superconductor", "import_base_science_advance_theoryofgravity", "import_base_science_advance_therepublic", "import_base_science_advance_thewheel", "import_base_science_advance_trade", "import_base_science_advance_university", "import_base_science_advance_writing", "import_civ1_city", "import_civ1_city_happiness", "import_civ1_city_improvement", "import_civ1_civilization", "import_civ1_default_spaceship_layout", "import_civ1_diplomacy", "import_civ1_earth_generator", "import_civ1_game_year", "import_civ1_goody_hut", "import_civ1_government", "import_civ1_player", "import_civ1_science", "import_civ1_spaceship", "import_civ1_trade_rate", "import_civ1_treasury", "import_civ1_unit", "import_civ1_wonder", "import_civ1_world", "import_core_city", "import_core_city_build", "import_core_city_growth", "import_core_city_improvement", "import_core_goody_hut", "import_core_government", "import_core_player_world", "import_core_science", "import_core_spaceship", "import_core_terrain_feature", "import_core_tile_improvement", "import_core_trade_rate", "import_core_treasury", "import_core_turn_based_game", "import_core_unit", "import_core_unit_improvement", "import_simple_ai_client", "import_simple_world_generator", "init_plugins", "__esmMin", "init_PlayerActions", "init_GoodyHuts", "init_Client", "init_LeaderRegistry", "Client", "#leaderRegistry", "#randomNumberGenerator", "player", "leaderRegistry", "instance", "randomNumberGenerator", "choices", "Random", "civilization", "leaders", "RandomLeader", "__name", "init_PlayerActions", "init_Busy", "init_ChooseResearch", "init_City", "init_CityGrowth", "init_CityImprovement", "init_Civilization", "init_DataObject", "_queue", "DataQueue", "__privateAdd", "targetId", "value", "index", "__privateGet", "patch", "patchData", "key", "type", "__name", "DataQueue_default", "init_EndTurn", "init_EventEmitter", "init_LaunchSpaceship", "init_MandatoryPlayerAction", "init_Player", "init_PlayerTile", "init_PlayerWorld", "RetryFailed", "message", "handler", "attempts", "__name", "RetryFailed_default", "_attempt", "_done", "_handler", "_maxTries", "_reference", "_reject", "_resolve", "Retryable", "handler", "maxTries", "interval", "__privateAdd", "__privateSet", "resolve", "reject", "__privateWrapper", "__privateGet", "RetryFailed_default", "__name", "Retryable_default", "init_PlayerActions", "init_DataObject", "TransferObject", "DataObject_default", "data", "__name", "TransferObject_default", "init_Tile", "init_Unit", "init_DataObject", "init_CityGrowthRegistry", "_name", "_player", "_growth", "_tile", "_City", "DataObject_default", "name", "tile", "player", "size", "__privateAdd", "__privateSet", "__privateGet", "city", "cityGrowth", "instance", "City", "__name", "City_default", "init_DataObject", "_civilization", "_Player", "DataObject_default", "civilization", "__privateAdd", "__privateSet", "player", "__privateGet", "Player", "__name", "Player_default", "init_DataObject", "__", "_tile", "_player", "_Unit", "DataObject_default", "name", "tile", "player", "__privateAdd", "__privateSet", "unit", "__privateGet", "Unit", "__name", "Unit_default", "init_Wonder", "init_AdvanceRegistry", "init_CityRegistry", "init_CurrentPlayerRegistry", "init_Engine", "init_LeaderRegistry", "init_PlayerRegistry", "init_PlayerResearchRegistry", "init_PlayerTreasuryRegistry", "init_PlayerWorldRegistry", "init_Turn", "init_UnitRegistry", "init_Year", "init_assignWorkers", "referenceObject", "__name", "object", "DataObject_default", "filterToReference", "types", "Type", "filterToReferenceAllExcept", "unknownPlayers", "unknownUnits", "unknownCities", "_dataFilter", "_dataQueue", "_eventEmitter", "_receiver", "_sender", "_sentInitialData", "DataTransferClient", "Client", "player", "sender", "receiver", "__privateAdd", "localFilter", "Player_default", "Unit_default", "City_default", "Tile_default", "instance", "Busy_default", "DataQueue_default", "__privateSet", "EventEmitter_default", "__privateGet", "args", "name", "value", "playerWorld", "tile", "playerTile", "Advance", "playerResearch", "playerTreasury", "unitId", "properties", "unit", "property", "packagePath", "error", "Retryable_default", "event", "playerUnits", "playerIndex", "cityUnits", "cityIndex", "tileUnits", "tileIndex", "PlayerTile_default", "action", "CityBuild", "CityGrowth_default", "CityImprovement_default", "fromTile", "toTile", "city", "capturingPlayer", "originalPlayer", "cityImprovement", "cityBuild", "build", "Wonder_default", "advance", "goodyHut", "City", "Gold", "Unit", "defeatedPlayer", "Civilizations", "makeChoice", "ChosenCivilization", "resolve", "reject", "Civilization", "TransferObject_default", "choice", "civilization", "Leaders", "Leader", "actions", "mandatoryActions", "MandatoryPlayerAction_default", "id", "reassignWorkers", "EndTurn", "playerAction", "ActiveUnit", "unitAction", "target", "actionToPerform", "InactiveUnit", "ChangeProduction", "chosen", "buildItem", "ChooseResearch_default", "ChosenAdvance", "AdvanceType", "CompleteProduction", "Revolution", "playerGovernment", "GovernmentType", "AdjustTradeRates", "playerTradeRates", "rate", "LaunchSpaceship", "rawData", "dataObject", "message", "Civilization_default", "listener", "PlayerWorld_default", "e", "DataTransferClient_default", "init_Player", "init_SimpleAIClient", "init_ClientRegistry", "init_Engine", "init_PlayerRegistry", "_transport", "Game", "transport", "__privateAdd", "__privateSet", "name", "value", "__privateGet", "instance", "values", "options", "optionName", "option", "packageName", "turn", "player", "i", "Player_default", "client", "DataTransferClient_default", "channel", "payload", "handler", "SimpleAIClient_default", "__name", "Game_default", "AbstractTransport", "request", "resolve", "value", "__name", "AbstractTransport_default", "ParentTransport", "AbstractTransport_default", "receivingChannel", "handler", "channel", "data", "__name", "ParentTransport_default", "game", "Game_default", "ParentTransport_default"]
}
