"use strict";(()=>{var $o=Object.create;var Ls=Object.defineProperty;var Oo=Object.getOwnPropertyDescriptor;var jo=Object.getOwnPropertyNames;var Bo=Object.getPrototypeOf,Fo=Object.prototype.hasOwnProperty;var l=(s,t)=>Ls(s,"name",{value:t,configurable:!0});var sn=(s,t)=>()=>(t||s((t={exports:{}}).exports,t),t.exports);var Wo=(s,t,e,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of jo(t))!Fo.call(s,a)&&a!==e&&Ls(s,a,{get:()=>t[a],enumerable:!(i=Oo(t,a))||i.enumerable});return s};var R=(s,t,e)=>(e=s!=null?$o(Bo(s)):{},Wo(t||!s||!s.__esModule?Ls(e,"default",{value:s,enumerable:!0}):e,s));var nn=(s,t,e)=>{if(!t.has(s))throw TypeError("Cannot "+e)};var r=(s,t,e)=>(nn(s,t,"read from private field"),e?e.call(s):t.get(s)),p=(s,t,e)=>{if(t.has(s))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(s):t.set(s,e)},h=(s,t,e,i)=>(nn(s,t,"write to private field"),i?i.call(s,e):t.set(s,e),e);var C=sn(w=>{"use strict";var Ni,Ho=w&&w.__classPrivateFieldSet||function(s,t,e,i,a){if(i==="m")throw new TypeError("Private method is not writable");if(i==="a"&&!a)throw new TypeError("Private accessor was defined without a setter");if(typeof t=="function"?s!==t||!a:!t.has(s))throw new TypeError("Cannot write private member to an object whose class did not declare it");return i==="a"?a.call(s,e):a?a.value=e:t.set(s,e),e},Yo=w&&w.__classPrivateFieldGet||function(s,t,e,i){if(e==="a"&&!i)throw new TypeError("Private accessor was defined without a getter");if(typeof t=="function"?s!==t||!i:!t.has(s))throw new TypeError("Cannot read private member from an object whose class did not declare it");return e==="m"?i:e==="a"?i.call(s):i?i.value:t.get(s)};Object.defineProperty(w,"__esModule",{value:!0}),w.Element=w.toggleClass=w.t=w.s=w.removeClass=w.once=w.onEach=w.on=w.off=w.hasClass=w.empty=w.emitCustom=w.emit=w.addClass=void 0;w.addClass=(s,...t)=>s.classList.add(...t);w.emit=(s,t)=>s.dispatchEvent(t);w.emitCustom=(s,t,...e)=>(0,w.emit)(s,new CustomEvent(t,{detail:e}));w.empty=s=>{for(var t;s.hasChildNodes();)(t=s.firstChild)===null||t===void 0||t.remove()};w.hasClass=(s,t)=>s.classList.contains(t);w.off=(s,t,e,i={})=>s.removeEventListener(t,e,i);w.on=(s,t,e,i={})=>s.addEventListener(t,e,i);w.onEach=(s,t,e,i={})=>t.forEach(a=>(0,w.on)(s,a,e,i));w.once=(s,t,e,i={})=>(0,w.on)(s,t,e,Object.assign(Object.assign({},typeof i=="boolean"?{capture:i}:i),{once:!0}));w.removeClass=(s,...t)=>s.classList.remove(...t);w.s=(s,...t)=>{let e=document.createElement("div");e.innerHTML=s;let i=e.firstElementChild;return t.forEach(a=>{a instanceof Re?i.append(a.element()):a instanceof Node?i.append(a):i.append((0,w.t)(a))}),i};w.t=s=>document.createTextNode(s);w.toggleClass=(s,...t)=>t.forEach(e=>s.classList.toggle(e));var Re=class{constructor(t){Ni.set(this,void 0),Ho(this,Ni,t,"f")}static fromString(t){return new Re((0,w.s)(t))}addClass(...t){(0,w.addClass)(this.element(),...t)}append(...t){t.forEach(e=>{e instanceof Re&&(e=e.element()),this.element().append(e)})}element(){return Yo(this,Ni,"f")}emit(t){return(0,w.emit)(this.element(),t)}emitCustom(t,...e){return(0,w.emitCustom)(this.element(),t,...e)}empty(){(0,w.empty)(this.element())}hasClass(t){return(0,w.hasClass)(this.element(),t)}off(t,e,i={}){(0,w.off)(this.element(),t,e,i)}on(t,e,i={}){(0,w.on)(this.element(),t,e,i)}onEach(t,e,i={}){(0,w.onEach)(this.element(),t,e,i)}once(t,e,i={}){(0,w.once)(this.element(),t,e,i)}query(t){return this.element().querySelector(t)}queryAll(t){return this.element().querySelectorAll(t)}remove(){this.element().remove()}removeClass(...t){(0,w.removeClass)(this.element(),...t)}toggleClass(...t){(0,w.toggleClass)(this.element(),...t)}};l(Re,"o");w.Element=Re,Ni=new WeakMap,w.default=Re});var Un=sn(Ve=>{"use strict";var ye,ze=Ve&&Ve.__classPrivateFieldGet||function(s,t,e,i){if(e==="a"&&!i)throw new TypeError("Private accessor was defined without a getter");if(typeof t=="function"?s!==t||!i:!t.has(s))throw new TypeError("Cannot read private member from an object whose class did not declare it");return e==="m"?i:e==="a"?i.call(s):i?i.value:t.get(s)};Object.defineProperty(Ve,"__esModule",{value:!0}),Ve.EventEmitter=void 0;var yi=class{constructor(){ye.set(this,{})}on(t,e){t in ze(this,ye,"f")||(ze(this,ye,"f")[t]=[]),ze(this,ye,"f")[t].push(e)}once(t,e){let i=l((...a)=>{e(...a),this.off(t,i)},"i");this.on(t,i)}off(t,e){if(!(t in ze(this,ye,"f")))return;let i=ze(this,ye,"f")[t].indexOf(e);i!==-1&&ze(this,ye,"f")[t].splice(i,1)}emit(t,...e){t in ze(this,ye,"f")&&ze(this,ye,"f")[t].forEach(i=>i(...e))}};l(yi,"i");Ve.EventEmitter=yi,ye=new WeakMap,Ve.default=yi});var dt=R(C());var Gi=l(({hierarchy:s,objects:t},e=null)=>{let i=new Map;e&&Object.keys(t).forEach(n=>e.push(n));let a=l(n=>{if(i.has(n))return i.get(n);if(Array.isArray(n)){let o=[];return i.set(n,o),n.forEach(d=>o.push(a(d))),o}if(n&&n["#ref"]){if(e&&e.splice(e.indexOf(n["#ref"]),1),!(n["#ref"]in t))throw new TypeError(`missing ${n["#ref"]}`);let o=a(t[n["#ref"]]);return i.set(n,o),o}if(n instanceof Object){let o={};return i.set(n,o),Object.entries(n).forEach(([d,c])=>{o[d]=a(c)}),o}return n},"getReferences");return a(s)},"reconstituteData");var Ga=R(C());var Zi=R(C());var Xt,Kt,qi=class extends Zi.Element{constructor(e,i){super((0,Zi.s)('<div class="action"></div>'));p(this,Xt,void 0);p(this,Kt,void 0);h(this,Xt,e),h(this,Kt,i),this.on("keydown",a=>{a.key!=="Escape"&&a.stopPropagation()}),this.build()}activate(){}build(){}complete(){this.emit(new CustomEvent("actioned",{bubbles:!0,detail:this}))}transport(){return r(this,Kt)}value(){return r(this,Xt).value}};l(qi,"Action"),Xt=new WeakMap,Kt=new WeakMap;var ae=qi;var Xi=R(C());var No=l((s,t)=>(0,Xi.s)(`<fieldset><legend>${s}</legend><input type="range" max="100" min="0" step="1" value="${t}"><input type="number"><label><input type="checkbox">Lock</label></fieldset>`),"template"),Qt,se,pe,ct,Jt,Vi=class extends Xi.Element{constructor(e,i){super(No(e,i));p(this,Qt,void 0);p(this,se,void 0);p(this,pe,void 0);p(this,ct,void 0);p(this,Jt,[]);h(this,Qt,e),h(this,se,this.element().querySelector('input[type="range"]')),h(this,pe,this.element().querySelector('input[type="number"]')),h(this,ct,this.element().querySelector('input[type="checkbox"]')),this.build()}build(){this.set(r(this,se).value),r(this,se).addEventListener("input",()=>this.set(r(this,se).value)),r(this,pe).addEventListener("input",()=>this.set(r(this,pe).value)),r(this,ct).addEventListener("input",()=>this.lock()),this.lock()}label(){return r(this,Qt)}lock(){if(this.isLocked()){r(this,se).setAttribute("disabled",""),r(this,pe).setAttribute("disabled","");return}r(this,se).removeAttribute("disabled"),r(this,pe).removeAttribute("disabled")}onInput(e){r(this,Jt).push(e)}isLocked(){return r(this,ct).checked}set(e){e=Math.max(parseInt(e,10),0).toString(),r(this,se).value!==e&&(r(this,se).value=e),r(this,pe).value!==e&&(r(this,pe).value=e),r(this,Jt).forEach(i=>i())}value(){return parseInt(r(this,se).value,10)}};l(Vi,"LockedSlider"),Qt=new WeakMap,se=new WeakMap,pe=new WeakMap,ct=new WeakMap,Jt=new WeakMap;var on=Vi;var Te,Ki=class{constructor(...t){p(this,Te,void 0);h(this,Te,t),r(this,Te).forEach(e=>e.onInput(()=>{if(this.total()===100)return;let i=r(this,Te).filter(n=>n!==e),a=i.filter(n=>!n.isLocked());if(this.total()!==100&&a.length===0){e.set((100-this.total(i)).toString());return}if(this.total()>100){let n=this.total()-100,o=Math.ceil(n/a.length);a.forEach(d=>{d.set((d.value()-Math.min(o,n)).toString()),n-=o}),this.total()>100&&e.set((100-this.total(i)).toString())}if(this.total()<100){let n=100-this.total(),o=Math.ceil(n/a.length);a.forEach(d=>{d.set((d.value()+Math.min(o,n)).toString()),n-=o}),this.total()<100&&e.set((100-this.total(i)).toString())}}))}sliders(){return r(this,Te)}total(t=r(this,Te)){return t.reduce((e,i)=>e+i.value(),0)}};l(Ki,"LockedSliderGroup"),Te=new WeakMap;var rn=Ki;var Qi=R(C());var ut,ei=class extends Qi.Element{constructor(e,i=(0,Qi.s)("<div></div>")){super(i);p(this,ut,void 0);this.on("keydown",a=>{a.stopPropagation()}),this.element().setAttribute("tabindex","0"),h(this,ut,e)}build(){}display(){this.build(),r(this,ut).append(this.element())}parent(){return r(this,ut)}};l(ei,"TransientElement"),ut=new WeakMap;var te=R(C());var A=l((s,t)=>(Object.entries(t).forEach(([e,i])=>s.addEventListener(e,i)),s),"h");var dn={autoDisplay:!0,canClose:!0,canMaximise:!1,canResize:!1,classes:"",parent:document.body,position:"auto",size:"auto"},qe,ti,mt=class extends ei{constructor(e,i,a={}){var n;super((n=a.parent)!=null?n:dn.parent,(0,te.s)('<div class="window"></div>'));p(this,qe,void 0);p(this,ti,void 0);if(this.options={...dn,...a},h(this,qe,i),h(this,ti,e),this.options.size==="auto"&&this.addClass("size-auto"),this.options.size==="maximised"&&this.addClass("maximised"),this.options.size!=="auto"&&["height","width"].forEach(o=>{let d=this.options.size[o];if(typeof d=="number"){this.element().style[o]=d+"px";return}this.element().style[o]=d}),this.options.position==="auto"&&this.addClass("position-auto"),this.options.position!=="auto"&&[["x","left"],["y","top"]].forEach(([o,d])=>{this.element().style[d]=Math.min(0,Math.max(document.body.clientHeight-20,this.options.position[o]))+"px"}),this.options.classes&&this.addClass(...Array.isArray(this.options.classes)?this.options.classes:[this.options.classes]),this.options.autoDisplay){this.display();return}this.build()}build(){this.empty();let e=[[this.options.canMaximise,A((0,te.s)('<button class="maximise" aria-label="Maximise">Maximise</button>'),{click:()=>this.maximise()})],[this.options.canClose,A((0,te.s)('<button class="close" aria-label="Close">Maximise</button>'),{click:()=>this.close()})]].filter(([a])=>a).map(([,a])=>a),i=!1;this.append(A((0,te.s)(`<header><h3>${r(this,ti)}</h3></header>`,...e),{dblclick:()=>this.maximise(),mousedown:a=>{if(a.target.matches("button, button img"))return;i=!0;let n=l(o=>{!i||this.move({x:o.movementX,y:o.movementY})},"moveHandler");(0,te.on)(document,"mousemove",n),(0,te.on)(document,"mouseup",()=>{(0,te.off)(document,"mousemove",n),i=!1},{once:!0})}}),(0,te.s)('<div class="body"></div>',r(this,qe)instanceof Node?r(this,qe):(0,te.s)(`<p>${r(this,qe)}</p>`))),this.on("keydown",a=>{a.key==="Escape"&&this.options.canClose&&this.close(),a.stopPropagation()})}close(){this.remove(),this.emit(new CustomEvent("close"))}display(e=!0){super.display(),e&&this.element().focus()}maximise(){!this.options.canMaximise||(this.element().classList.toggle("maximised"),this.emit(new CustomEvent("resize",{bubbles:!1})))}move({x:e,y:i}){if(this.hasClass("position-auto")){e+=this.element().offsetLeft,i+=this.element().offsetTop,this.removeClass("position-auto"),this.element().style.setProperty("top",i+"px"),this.element().style.setProperty("left",e+"px");return}let a=getComputedStyle(this.element()),n=parseInt(a.getPropertyValue("top"),10),o=parseInt(a.getPropertyValue("left"),10);this.element().style.setProperty("top",n+i+"px"),this.element().style.setProperty("left",o+e+"px")}update(e){this.element().lastElementChild.remove(),this.append(e instanceof Node?e:(0,te.s)(`<p>${e}</p>`))}};l(mt,"Window"),qe=new WeakMap,ti=new WeakMap;var q=mt;var Go=l((s,t)=>t.some(e=>s instanceof e),"instanceOfAny"),ln,cn;function qo(){return ln||(ln=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}l(qo,"getIdbProxyableTypes");function Zo(){return cn||(cn=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}l(Zo,"getCursorAdvanceMethods");var un=new WeakMap,$s=new WeakMap,mn=new WeakMap,zs=new WeakMap,js=new WeakMap;function Vo(s){let t=new Promise((e,i)=>{let a=l(()=>{s.removeEventListener("success",n),s.removeEventListener("error",o)},"unlisten"),n=l(()=>{e(he(s.result)),a()},"success"),o=l(()=>{i(s.error),a()},"error");s.addEventListener("success",n),s.addEventListener("error",o)});return t.then(e=>{e instanceof IDBCursor&&un.set(e,s)}).catch(()=>{}),js.set(t,s),t}l(Vo,"promisifyRequest");function Xo(s){if($s.has(s))return;let t=new Promise((e,i)=>{let a=l(()=>{s.removeEventListener("complete",n),s.removeEventListener("error",o),s.removeEventListener("abort",o)},"unlisten"),n=l(()=>{e(),a()},"complete"),o=l(()=>{i(s.error||new DOMException("AbortError","AbortError")),a()},"error");s.addEventListener("complete",n),s.addEventListener("error",o),s.addEventListener("abort",o)});$s.set(s,t)}l(Xo,"cacheDonePromiseForTransaction");var Os={get(s,t,e){if(s instanceof IDBTransaction){if(t==="done")return $s.get(s);if(t==="objectStoreNames")return s.objectStoreNames||mn.get(s);if(t==="store")return e.objectStoreNames[1]?void 0:e.objectStore(e.objectStoreNames[0])}return he(s[t])},set(s,t,e){return s[t]=e,!0},has(s,t){return s instanceof IDBTransaction&&(t==="done"||t==="store")?!0:t in s}};function pn(s){Os=s(Os)}l(pn,"replaceTraps");function Ko(s){return s===IDBDatabase.prototype.transaction&&!("objectStoreNames"in IDBTransaction.prototype)?function(t,...e){let i=s.call(Ji(this),t,...e);return mn.set(i,t.sort?t.sort():[t]),he(i)}:Zo().includes(s)?function(...t){return s.apply(Ji(this),t),he(un.get(this))}:function(...t){return he(s.apply(Ji(this),t))}}l(Ko,"wrapFunction");function Qo(s){return typeof s=="function"?Ko(s):(s instanceof IDBTransaction&&Xo(s),Go(s,qo())?new Proxy(s,Os):s)}l(Qo,"transformCachableValue");function he(s){if(s instanceof IDBRequest)return Vo(s);if(zs.has(s))return zs.get(s);let t=Qo(s);return t!==s&&(zs.set(s,t),js.set(t,s)),t}l(he,"wrap");var Ji=l(s=>js.get(s),"unwrap");function gn(s,t,{blocked:e,upgrade:i,blocking:a,terminated:n}={}){let o=indexedDB.open(s,t),d=he(o);return i&&o.addEventListener("upgradeneeded",c=>{i(he(o.result),c.oldVersion,c.newVersion,he(o.transaction),c)}),e&&o.addEventListener("blocked",c=>e(c.oldVersion,c.newVersion,c)),d.then(c=>{n&&c.addEventListener("close",()=>n()),a&&c.addEventListener("versionchange",u=>a(u.oldVersion,u.newVersion,u))}).catch(()=>{}),d}l(gn,"openDB");var Jo=["get","getKey","getAll","getAllKeys","count"],er=["put","add","delete","clear"],Bs=new Map;function hn(s,t){if(!(s instanceof IDBDatabase&&!(t in s)&&typeof t=="string"))return;if(Bs.get(t))return Bs.get(t);let e=t.replace(/FromIndex$/,""),i=t!==e,a=er.includes(e);if(!(e in(i?IDBIndex:IDBObjectStore).prototype)||!(a||Jo.includes(e)))return;let n=l(async function(o,...d){let c=this.transaction(o,a?"readwrite":"readonly"),u=c.store;return i&&(u=u.index(d.shift())),(await Promise.all([u[e](...d),a&&c.done]))[0]},"method");return Bs.set(t,n),n}l(hn,"getMethod");pn(s=>({...s,get:(t,e,i)=>hn(t,e)||s.get(t,e,i),has:(t,e)=>!!hn(t,e)||s.has(t,e)}));var Ce,ge,ii=class{constructor(t,e,i){p(this,Ce,void 0);p(this,ge,void 0);h(this,ge,e),h(this,Ce,gn(t,1,{upgrade:a=>a.createObjectStore(r(this,ge),i)}))}async get(t){return(await r(this,Ce)).get(r(this,ge),t)}async getAll(t,e){return(await r(this,Ce)).getAll(r(this,ge),t,e)}async set(t,e){return(await r(this,Ce)).put(r(this,ge),t,e)}async clear(){return(await r(this,Ce)).clear(r(this,ge))}async keys(){return(await r(this,Ce)).getAllKeys(r(this,ge))}};l(ii,"Store"),Ce=new WeakMap,ge=new WeakMap;var tr=l((s,t,e)=>{let i=document.createElement("canvas"),a=i.getContext("2d");return i.width=s.width*t,i.height=s.height*t,e!=null&&e.smoothing||(a.imageSmoothingEnabled=!1),a.drawImage(s,0,0,i.width,i.height),i},"scaleImage"),fn=tr;var pt,ht,gt,ta,ea=class extends ii{constructor(){super("civ-clone-assets","assets",{keyPath:"name"});p(this,pt,new Map);p(this,ht,new Map);p(this,gt,new Map);p(this,ta,["./assets/city/bulb.png","./assets/city/food.png","./assets/city/gold.png","./assets/city/luxury.png","./assets/city/people_content_f.png","./assets/city/people_content_m.png","./assets/city/people_happy_f.png","./assets/city/people_happy_m.png","./assets/city/people_luxury.png","./assets/city/people_science.png","./assets/city/people_tax.png","./assets/city/people_unhappy_f.png","./assets/city/people_unhappy_m.png","./assets/city/pollution.png","./assets/city/sad.png","./assets/city/production.png","./assets/city/trade.png","./assets/cursor/go.png","./assets/cursor/torch.png","./assets/general/texture_1.png","./assets/general/texture_2.png","./assets/improvements/irrigation.png","./assets/improvements/mine.png","./assets/improvements/pollution.png","./assets/improvements/railroad_e.png","./assets/improvements/railroad_se.png","./assets/improvements/railroad_n.png","./assets/improvements/railroad_ne.png","./assets/improvements/railroad_nw.png","./assets/improvements/railroad_s.png","./assets/improvements/railroad_sw.png","./assets/improvements/railroad_w.png","./assets/improvements/road_e.png","./assets/improvements/road_n.png","./assets/improvements/road_ne.png","./assets/improvements/road_nw.png","./assets/improvements/road_s.png","./assets/improvements/road_se.png","./assets/improvements/road_sw.png","./assets/improvements/road_w.png","./assets/map/city.png","./assets/map/fog_e.png","./assets/map/fog_n.png","./assets/map/fog_s.png","./assets/map/fog_w.png","./assets/map/fort.png","./assets/map/fortify.png","./assets/map/hut.png","./assets/status/pollution_0.png","./assets/status/pollution_25.png","./assets/status/pollution_50.png","./assets/status/pollution_75.png","./assets/status/science_0.png","./assets/status/science_25.png","./assets/status/science_50.png","./assets/status/science_75.png","./assets/terrain/arctic.png","./assets/terrain/arctic_e.png","./assets/terrain/arctic_es.png","./assets/terrain/arctic_esw.png","./assets/terrain/arctic_ew.png","./assets/terrain/arctic_n.png","./assets/terrain/arctic_ne.png","./assets/terrain/arctic_nes.png","./assets/terrain/arctic_nesw.png","./assets/terrain/arctic_new.png","./assets/terrain/arctic_ns.png","./assets/terrain/arctic_nsw.png","./assets/terrain/arctic_nw.png","./assets/terrain/arctic_s.png","./assets/terrain/arctic_sw.png","./assets/terrain/arctic_w.png","./assets/terrain/coal.png","./assets/terrain/coast_sprite.png","./assets/terrain/desert.png","./assets/terrain/desert_e.png","./assets/terrain/desert_es.png","./assets/terrain/desert_esw.png","./assets/terrain/desert_ew.png","./assets/terrain/desert_n.png","./assets/terrain/desert_ne.png","./assets/terrain/desert_nes.png","./assets/terrain/desert_nesw.png","./assets/terrain/desert_new.png","./assets/terrain/desert_ns.png","./assets/terrain/desert_nsw.png","./assets/terrain/desert_nw.png","./assets/terrain/desert_s.png","./assets/terrain/desert_sw.png","./assets/terrain/desert_w.png","./assets/terrain/doe.png","./assets/terrain/fish.png","./assets/terrain/forest.png","./assets/terrain/forest_e.png","./assets/terrain/forest_es.png","./assets/terrain/forest_esw.png","./assets/terrain/forest_ew.png","./assets/terrain/forest_n.png","./assets/terrain/forest_ne.png","./assets/terrain/forest_nes.png","./assets/terrain/forest_nesw.png","./assets/terrain/forest_new.png","./assets/terrain/forest_ns.png","./assets/terrain/forest_nsw.png","./assets/terrain/forest_nw.png","./assets/terrain/forest_s.png","./assets/terrain/forest_sw.png","./assets/terrain/forest_w.png","./assets/terrain/gems.png","./assets/terrain/gold.png","./assets/terrain/grassland.png","./assets/terrain/grassland_e.png","./assets/terrain/grassland_es.png","./assets/terrain/grassland_esw.png","./assets/terrain/grassland_ew.png","./assets/terrain/grassland_n.png","./assets/terrain/grassland_ne.png","./assets/terrain/grassland_nes.png","./assets/terrain/grassland_nesw.png","./assets/terrain/grassland_new.png","./assets/terrain/grassland_ns.png","./assets/terrain/grassland_nsw.png","./assets/terrain/grassland_nw.png","./assets/terrain/grassland_s.png","./assets/terrain/grassland_sw.png","./assets/terrain/grassland_w.png","./assets/terrain/hills.png","./assets/terrain/hills_e.png","./assets/terrain/hills_es.png","./assets/terrain/hills_esw.png","./assets/terrain/hills_ew.png","./assets/terrain/hills_n.png","./assets/terrain/hills_ne.png","./assets/terrain/hills_nes.png","./assets/terrain/hills_nesw.png","./assets/terrain/hills_new.png","./assets/terrain/hills_ns.png","./assets/terrain/hills_nsw.png","./assets/terrain/hills_nw.png","./assets/terrain/hills_s.png","./assets/terrain/hills_sw.png","./assets/terrain/hills_w.png","./assets/terrain/horse.png","./assets/terrain/jungle.png","./assets/terrain/jungle_e.png","./assets/terrain/jungle_es.png","./assets/terrain/jungle_esw.png","./assets/terrain/jungle_ew.png","./assets/terrain/jungle_n.png","./assets/terrain/jungle_ne.png","./assets/terrain/jungle_nes.png","./assets/terrain/jungle_nesw.png","./assets/terrain/jungle_new.png","./assets/terrain/jungle_ns.png","./assets/terrain/jungle_nsw.png","./assets/terrain/jungle_nw.png","./assets/terrain/jungle_s.png","./assets/terrain/jungle_sw.png","./assets/terrain/jungle_w.png","./assets/terrain/land.png","./assets/terrain/mountains.png","./assets/terrain/mountains_e.png","./assets/terrain/mountains_es.png","./assets/terrain/mountains_esw.png","./assets/terrain/mountains_ew.png","./assets/terrain/mountains_n.png","./assets/terrain/mountains_ne.png","./assets/terrain/mountains_nes.png","./assets/terrain/mountains_nesw.png","./assets/terrain/mountains_new.png","./assets/terrain/mountains_ns.png","./assets/terrain/mountains_nsw.png","./assets/terrain/mountains_nw.png","./assets/terrain/mountains_s.png","./assets/terrain/mountains_sw.png","./assets/terrain/mountains_w.png","./assets/terrain/oasis.png","./assets/terrain/ocean.png","./assets/terrain/oil.png","./assets/terrain/plains.png","./assets/terrain/plains_e.png","./assets/terrain/plains_es.png","./assets/terrain/plains_esw.png","./assets/terrain/plains_ew.png","./assets/terrain/plains_n.png","./assets/terrain/plains_ne.png","./assets/terrain/plains_nes.png","./assets/terrain/plains_nesw.png","./assets/terrain/plains_new.png","./assets/terrain/plains_ns.png","./assets/terrain/plains_nsw.png","./assets/terrain/plains_nw.png","./assets/terrain/plains_s.png","./assets/terrain/plains_sw.png","./assets/terrain/plains_w.png","./assets/terrain/river_e.png","./assets/terrain/river_es.png","./assets/terrain/river_esw.png","./assets/terrain/river_ew.png","./assets/terrain/river_mouth_e.png","./assets/terrain/river_mouth_n.png","./assets/terrain/river_mouth_s.png","./assets/terrain/river_mouth_w.png","./assets/terrain/river.png","./assets/terrain/river_n.png","./assets/terrain/river_ne.png","./assets/terrain/river_nes.png","./assets/terrain/river_nesw.png","./assets/terrain/river_new.png","./assets/terrain/river_ns.png","./assets/terrain/river_nsw.png","./assets/terrain/river_nw.png","./assets/terrain/river_s.png","./assets/terrain/river_sw.png","./assets/terrain/river_w.png","./assets/terrain/seal.png","./assets/terrain/shield.png","./assets/terrain/game.png","./assets/terrain/swamp.png","./assets/terrain/swamp_e.png","./assets/terrain/swamp_es.png","./assets/terrain/swamp_esw.png","./assets/terrain/swamp_ew.png","./assets/terrain/swamp_n.png","./assets/terrain/swamp_ne.png","./assets/terrain/swamp_nes.png","./assets/terrain/swamp_nesw.png","./assets/terrain/swamp_new.png","./assets/terrain/swamp_ns.png","./assets/terrain/swamp_nsw.png","./assets/terrain/swamp_nw.png","./assets/terrain/swamp_s.png","./assets/terrain/swamp_sw.png","./assets/terrain/swamp_w.png","./assets/terrain/tundra.png","./assets/terrain/tundra_e.png","./assets/terrain/tundra_es.png","./assets/terrain/tundra_esw.png","./assets/terrain/tundra_ew.png","./assets/terrain/tundra_n.png","./assets/terrain/tundra_ne.png","./assets/terrain/tundra_nes.png","./assets/terrain/tundra_nesw.png","./assets/terrain/tundra_new.png","./assets/terrain/tundra_ns.png","./assets/terrain/tundra_nsw.png","./assets/terrain/tundra_nw.png","./assets/terrain/tundra_s.png","./assets/terrain/tundra_sw.png","./assets/terrain/tundra_w.png","./assets/units/tank.png","./assets/units/artillery.png","./assets/units/battleship.png","./assets/units/bomber.png","./assets/units/cannon.png","./assets/units/caravan.png","./assets/units/carrier.png","./assets/units/catapult.png","./assets/units/horseman.png","./assets/units/chariot.png","./assets/units/combat_1.png","./assets/units/combat_2.png","./assets/units/combat_3.png","./assets/units/combat_4.png","./assets/units/combat_5.png","./assets/units/combat_6.png","./assets/units/combat_7.png","./assets/units/combat_8.png","./assets/units/cruiser.png","./assets/units/diplomat.png","./assets/units/fighter.png","./assets/units/frigate.png","./assets/units/ironclad.png","./assets/units/knight.png","./assets/units/swordman.png","./assets/units/mechanizedinfantry.png","./assets/units/warrior.png","./assets/units/musketman.png","./assets/units/nuclear.png","./assets/units/spearman.png","./assets/units/rifleman.png","./assets/units/sail.png","./assets/units/settlers.png","./assets/units/submarine.png","./assets/units/transport.png","./assets/units/trireme.png"])}async get(e){return r(this,pt).has(e)||r(this,pt).set(e,await super.get(e)),r(this,pt).get(e)}async getImage(e){if(!r(this,ht).has(e)){let i=await this.get(e),a=document.createElement("img");a.src=i.uri,r(this,ht).set(e,a)}return r(this,ht).get(e)}async getScaled(e,i){return r(this,gt).has(e)||r(this,gt).set(e,fn(await this.getImage(e),i)),r(this,gt).get(e)}async hasAllAssets(){return(await this.missingAssets()).length===0}async missingAssets(){let e=await this.keys();return r(this,ta).filter(i=>!e.includes(i))}};l(ea,"AssetStore"),pt=new WeakMap,ht=new WeakMap,gt=new WeakMap,ta=new WeakMap;var D=new ea;var Fs=R(C());var ai,ia=class extends ae{constructor(){super(...arguments);p(this,ai,void 0)}activate(){let e=[];new q("Adjust trade rates",(0,Fs.s)("<div></div>",...this.value().all.map(a=>{let n=new on(a._,a.value*100);return e.push(n),n}))).on("close",()=>{let a=r(this,ai).sliders().map(n=>[n.label(),parseFloat((n.value()/100).toFixed(2))]);console.info("AdjustTradeRates: ",a),this.transport().send("action",{name:"AdjustTradeRates",id:this.value().id,value:a})}),h(this,ai,new rn(...e))}build(){D.get("./assets/city/trade.png").then(e=>this.append((0,Fs.s)(`<button class="adjustTradeRates" title="Adjust trade rates" style="background-image:url('${e.uri}')"></button>`)))}value(){return super.value()}};l(ia,"AdjustTradeRates"),ai=new WeakMap;var yn=ia;var Ws=[],si,aa=class extends mt{constructor(e,i,a={}){let n={classes:"notificationWindow",queue:!0,...a};super(e,i,n);p(this,si,{});h(this,si,n),this.on("keydown",o=>{o.key==="Enter"&&(this.close(),o.stopPropagation())})}close(){if(super.close(),r(this,si).queue&&Ws.length&&aa.hasOpenWindow()){let[e,i,a]=Ws.shift();e.display(i),a()}}display(e=!0){return new Promise(i=>{if(aa.hasOpenWindow()){Ws.push([this,e,i]);return}if(super.display(),!e){i(void 0);return}this.element().focus(),i(void 0)})}static hasOpenWindow(){return!!document.querySelector("div.notificationWindow")}},_e=aa;l(_e,"NotificationWindow"),si=new WeakMap;var sa=_e;var fe=R(C());var bn={0:"Insert",1:"End",2:"ArrowDown",3:"PageDown",4:"ArrowLeft",6:"ArrowRight",7:"Home",8:"ArrowUp",9:"PageUp",".":"Delete"},Ue=l((s,t=!0)=>t&&s.location===KeyboardEvent.DOM_KEY_LOCATION_NUMPAD&&s.key in bn?bn[s.key]:s.key,"mappedKeyFromEvent");var ni,oi,Ee=class extends _e{constructor(e,i,a,n="Please choose one of the following:",o={}){var u,m;o={autoFocus:!0,displayAll:!1,...o,actions:{primary:{label:"OK",action:g=>d(g.selectionList().value),...(m=(u=o.actions)==null?void 0:u.primary)!=null?m:{}},...o.actions}};let d=l(g=>{this.emit(new CustomEvent("selection",{detail:g})),this.close(),a(g)},"chooseHandler"),c=A((0,fe.s)(`<select>${i.map(g=>`<option value="${g.value}">${g.label||g.value}</option>`).join("")}</select>`),{keydown:g=>{let f=Ue(g);if(f==="Enter"&&(d(c.value),g.preventDefault()),["ArrowDown","ArrowUp","End","Home","PageDown","PageUp"].includes(f)&&!["ArrowDown","ArrowUp","End","Home","PageDown","PageUp"].includes(g.key)){let y=c.selectedIndex,I=["Home","PageUp"].includes(f)?0:["End","PageDown"].includes(f)?c.length-1:y+(f==="ArrowUp"?-1:1);I>-1&&I<c.length&&(c.selectedIndex=I),g.preventDefault()}},dblclick:()=>d(c.value)});o.displayAll&&i.length>1&&c.setAttribute("size",i.length.toString()),o.autoFocus&&i.length>1&&c.setAttribute("autofocus","");super(e,(0,fe.s)("<div></div>",...n instanceof Node?[n]:n===null?[]:[(0,fe.s)(`<p>${n}</p>`)],c,(0,fe.s)("<footer></footer>",...Object.entries(o.actions).map(([,{label:g,action:f}])=>A((0,fe.s)(`<button>${g}</button>`),{click:()=>f(this),keydown:y=>{y.key==="Enter"&&f(this)}})))),o);p(this,ni,l(()=>this.resize(),"#resizeHandler"));p(this,oi,void 0);this.addClass("selectionWindow"),h(this,oi,c),this.resize(),(0,fe.on)(window,"resize",r(this,ni))}close(){(0,fe.off)(window,"resize",r(this,ni)),super.close()}display(){return super.display(!1).then(()=>{let e=this.query("select");e&&e.hasAttribute("autofocus")&&e.focus()})}resize(){var e,i;try{this.selectionList().style.maxHeight="none",this.selectionList().style.maxHeight=`calc(${this.element().offsetHeight-this.element().firstElementChild.offsetHeight-((i=(e=this.selectionList().previousElementSibling)==null?void 0:e.offsetHeight)!=null?i:0)-this.selectionList().nextElementSibling.offsetHeight}px - 2.1em)`}catch(a){console.warn(a)}}selectionList(){return r(this,oi)}};l(Ee,"SelectionWindow"),ni=new WeakMap,oi=new WeakMap;var Pe=Ee;var vn=R(C());var na=class extends ae{activate(){let t=new Pe("Choose research",this.value().available.map(e=>({value:e._})),e=>{!e||(this.transport().send("action",{name:"ChooseResearch",id:this.value().id,chosen:e||"@"}),this.complete(),t.close())},"Which advance would you like to research next?",{displayAll:!0})}build(){D.get("./assets/city/bulb.png").then(t=>this.append((0,vn.s)(`<button class="chooseResearch" title="Choose research" style="background-image:url('${t.uri}')">`)))}value(){return super.value()}};l(na,"ChooseResearch");var wn=na;var ri={Food:"Food",UnitSupportFood:"Food",PopulationSupportFood:"Food",Production:"Production",UnitSupportProduction:"Production",Trade:"Trade",Corruption:"Trade",Happiness:"Happiness",LuxuryHappiness:"Happiness",Unhappiness:"Unhappiness",MartialLaw:"Unhappiness",MilitaryUnhappiness:"Unhappiness",PopulationUnhappiness:"Unhappiness",CityImprovementContent:"Unhappiness",Research:"Research",Luxuries:"Luxuries",Gold:"Gold",CityImprovementMaintenanceGold:"Gold"},di=Object.entries(ri).reduce((s,[t,e])=>(Object.prototype.hasOwnProperty.call(s,e)||(s[e]=[]),Object.prototype.hasOwnProperty.call(s,t)||(s[t]=[]),s[e].push(t),s[t].push(t),s),{}),li=l((s,...t)=>s.reduce((e,i,a)=>(t.forEach((n,o)=>{var d;(d=di[n])!=null&&d.includes(i._)&&(e[o]+=i.value)}),e),t.map(()=>0)),"reduceKnownYields"),ft=l((s,t)=>li(s,t)[0],"reduceKnownYield"),yt={Food:"city/food.png",Production:"city/production.png",Trade:"city/trade.png",Gold:"city/gold.png",Luxuries:"city/luxury.png",Pollution:"city/pollution.png",Research:"city/bulb.png",Unhappiness:"city/sad.png"};var bt=R(C());var oa=l(s=>{let t=s.growth,e=parseInt(s.name.replace(/[^a-z]/gi,""),36).toString(2),i=new Array(t.size).fill(1),a=(0,bt.s)('<div class="population"></div>'),[n,o]=li(s.yields,"Happiness","Unhappiness"),d=i.length-1;for(;o>0&&d>-1;)i[d--]=0,o--;for(d=0;n>0&&d<i.length;)i[d]===0&&(i[d]++,n--),i[d]===1&&(i[d++]++,n--),i[d]===2&&d++;return i.forEach((c,u)=>D.getScaled(`./assets/city/people_${["unhappy","content","happy"][c]}_${["f","m"][parseInt(e[u%e.length],10)]}.png`,2).then(m=>a.append((0,bt.s)('<span class="citizen"></span>',(0,bt.s)(`<img src="${m.toDataURL("image/png")}">`))))),a},"renderPopulation"),ci=l((s,t,e)=>`Progress ${s.progress.value} / ${s.cost.value} (${da(ra(s,t,e))})`,"renderProgress"),ra=l((s,t,e)=>Math.max(1,Math.ceil((s.cost.value-s.progress.value)/ft(t,e))),"turnsLeft"),da=l(s=>s+" turn"+(s===1?"":"s"),"turnsText"),xn=l((s,t)=>s.yields.reduce(([e,i,a],n)=>{var d;let o=(d=di[t])==null?void 0:d.includes(n._);return o&&n.value>0&&(e+=n.value),o&&n.value<0&&(i+=n.value),o&&(a+=n.value),[e,i,a]},[0,0,0]),"yieldData"),ui=l(s=>new Array(Math.trunc(Math.abs(s.value))).fill(0).map(()=>{let t=(0,bt.s)('<span class="yield-icon"></span>');return D.getScaled(`./assets/${yt[ri[s._]]}`,2).then(e=>t.append((0,bt.s)(`<img src="${e.toDataURL("image/png")}">`))),t}),"yieldImages");var In=R(C());var Rn,Cn=l(s=>Rn=s,"setPreloadContainer"),Hs=l(s=>{let t=Rn.querySelector(`[data-path$="${s}.png"]`);return t===null?(console.error(`Missing image: ${s}.`),(0,In.s)("<canvas></canvas>")):t},"getPreloadedImage"),Ys=Hs;var An=R(C());var ir=l((s,t,e)=>{let i=(0,An.s)("<canvas></canvas>"),a=i.getContext("2d");i.width=s.width,i.height=s.height,a.drawImage(s,0,0,s.width,s.height);let n=a.getImageData(0,0,i.width,i.height),o=l(u=>{var f;let m=null,g={r:0,g:0,b:0,a:0};return typeof u=="string"?(m=u.match(/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i))!==null?g={r:parseInt(m[1],16),g:parseInt(m[2],16),b:parseInt(m[3],16),a:1}:(m=u.match(/^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/))!==null?g={r:parseInt(m[1]+m[1],16),g:parseInt(m[2]+m[2],16),b:parseInt(m[3]+m[3],16),a:1}:(m=u.match(/^rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/))!==null?g={r:parseInt(m[1]),g:parseInt(m[2]),b:parseInt(m[3]),a:1}:(m=u.match(/^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+|\d+\.|\.\d+|\d+\.\d+)\s*\)\s*$/))!==null&&(g={r:parseInt(m[1]),g:parseInt(m[2]),b:parseInt(m[3]),a:parseFloat((f=m[4])!=null?f:1)}):"length"in u&&(g={r:u[0]||0,g:u[1]||0,b:u[2]||0,a:u[3]||1}),g},"getColor"),d=t.map(o),c=e.map(o);for(let u=0;u<n.data.length;u+=4)d.forEach((m,g)=>{n.data[u]===m.r&&n.data[u+1]===m.g&&n.data[u+2]===m.b&&n.data[u+3]===m.a*255&&(n.data[u]=(c[g]||c[0]).r,n.data[u+1]=(c[g]||c[0]).g,n.data[u+2]=(c[g]||c[0]).b,n.data[u+3]=Math.trunc((c[g]||c[0]).a*255))});return a.putImageData(n,0,0),i},"replaceColours"),la=ir;var kn=R(C());var Me,Ze,mi,De,pi,Se,ne=class{constructor(t,e=2,i=16,a=(0,kn.s)("<canvas></canvas>")){p(this,Me,void 0);p(this,Ze,void 0);p(this,mi,!0);p(this,De,void 0);p(this,pi,void 0);p(this,Se,void 0);h(this,Me,a),h(this,Se,t),h(this,pi,i),h(this,De,e),this.setCanvasSize(),h(this,Ze,r(this,Me).getContext("2d")),Cn(document.querySelector("#preload"))}canvas(){return r(this,Me)}clear(){this.context().clearRect(0,0,this.canvas().width,this.canvas().height)}context(){return r(this,Ze)}render(t=this.world().tiles()){this.clear(),t.forEach(({x:e,y:i})=>this.renderTile(this.world().get(e,i)))}renderTile({x:t,y:e}){let i=this.tileSize(),a=t*i,n=e*i;this.context().clearRect(a,n,i,i)}scale(){return r(this,De)}tileSize(){return r(this,pi)*r(this,De)}update(t){t.forEach(({x:e,y:i})=>this.renderTile(this.world().get(e,i)))}world(){return r(this,Se)}drawImage(t,e,i,a={}){var u,m;let n=this.tileSize(),o=e*n,d=i*n,c=this.getPreloadedImage(t);this.putImage(a.augment?a.augment(c):c,o+((u=a.offsetX)!=null?u:0),d+((m=a.offsetY)!=null?m:0))}filterNeighbours(t,e,i=["n","e","s","w"]){return i.filter(a=>e(r(this,Se).getNeighbour(t,a)))}getPreloadedImage(t){return Hs(t)}putImage(t,e,i){r(this,Ze).imageSmoothingEnabled=!1,r(this,Ze).drawImage(t,e,i,t.width*r(this,De),t.height*r(this,De))}replaceColours(t,e,i){return la(t,e,i)}setCanvasSize(){r(this,Me).height=r(this,Se).height()*this.tileSize(),r(this,Me).width=r(this,Se).width()*this.tileSize()}isVisible(){return r(this,mi)}setVisible(t){h(this,mi,t)}};l(ne,"Map"),Me=new WeakMap,Ze=new WeakMap,mi=new WeakMap,De=new WeakMap,pi=new WeakMap,Se=new WeakMap;var Tn=ne;var ca=class extends ne{renderTile(t){super.renderTile(t);let{x:e,y:i}=t,a=this.tileSize(),n=e*a,o=i*a;if(t.city){let d=t.city,c=d.player,u=c.civilization,[m]=u.attributes.filter(g=>g.name==="colors");t.units.length>0&&(this.context().fillStyle="#000",this.context().fillRect(n,o,a,a)),this.context().fillStyle=m.value[0],this.context().fillRect(n+this.scale(),o+this.scale(),a-this.scale()*2,a-this.scale()*2),this.drawImage("map/city",e,i,{augment:g=>this.replaceColours(g,["#000"],[m.value[1]]),offsetX:this.scale(),offsetY:this.scale()})}}};l(ca,"Cities");var hi=ca;var gi=R(C());var ua=class extends _e{constructor(t,e,i,a={}){var o,d;let n=A((0,gi.s)(`<button>${(o=a.okLabel)!=null?o:"OK"}</button>`),{click:()=>{i(),this.close()},keydown:c=>{(c.key==="Enter"||c.key===" ")&&(c.preventDefault(),c.stopPropagation(),i(),this.close())}});super(t,(0,gi.s)(`<div class="content"><p>${e}</p></div>`,(0,gi.s)("<footer></footer>",n,A((0,gi.s)(`<button>${(d=a.cancelLabel)!=null?d:"Cancel"}</button>`),{click:()=>this.close(),keydown:c=>{(c.key==="Enter"||c.key===" ")&&(c.preventDefault(),c.stopPropagation(),this.close())}}))),{...a,queue:!1}),n.focus()}};l(ua,"ConfirmationWindow");var ma=ua;var vt,wt,pa=class{constructor(t,e){p(this,vt,void 0);p(this,wt,[]);this.setIds(t),h(this,vt,i=>{let{detail:a}=i,n=a.value.objects;!n||r(this,wt).some(o=>o in n)&&document.addEventListener("dataupdated",o=>e(o.detail.data),{once:!0})}),document.addEventListener("patchdatareceived",r(this,vt))}dispose(){document.removeEventListener("patchdatareceived",r(this,vt))}setIds(t){r(this,wt).splice(0,r(this,wt).length,...t)}};l(pa,"DataObserver"),vt=new WeakMap,wt=new WeakMap;var Le=pa;var ha=class extends ne{update(t){let e=[...t];return t.forEach(i=>{["n","ne","e","se","s","sw","w","nw"].forEach(a=>{let n=this.world().getNeighbour(i,a);e.includes(n)||e.push(n)})}),super.update(e)}};l(ha,"TerrainAbstract");var Q=ha;var ga=class extends Q{renderTile(t){if(super.renderTile(t),t.terrain._==="Unknown")return;let{x:e,y:i}=t;t.terrain.features.length&&t.terrain.features.forEach(a=>a._==="Shield"?this.drawImage(`terrain/${a._.toLowerCase()}`,e,i,{offsetX:4*this.scale(),offsetY:4*this.scale()}):this.drawImage(`terrain/${a._.toLowerCase()}`,e,i))}};l(ga,"Feature");var fa=ga;var ya=class extends Q{renderTile(t){if(super.renderTile(t),t.terrain._==="Unknown")return;let{x:e,y:i}=t;this.filterNeighbours(t,a=>a.terrain._==="Unknown").forEach(a=>this.drawImage(`map/fog_${a}`,e,i))}};l(ya,"Fog");var ba=ya;var va=class extends Q{renderTile(t){if(super.renderTile(t),t.terrain._==="Unknown")return;let{x:e,y:i}=t,a=t.improvements.reduce((n,o)=>{let d=o._;return d in n&&(n[d]=!0),n},{Mine:!1,Road:!1,Railroad:!1,Pollution:!1});if(["Mine","Pollution"].forEach(n=>{a[n]&&this.drawImage(`improvements/${n.toLowerCase()}`,e,i)}),a.Road){let n=this.filterNeighbours(t,d=>d.improvements.some(c=>c._==="Road"),["n","ne","e","se","s","sw","w","nw"]),o=this.filterNeighbours(t,d=>!!d.city||d.improvements.some(c=>c._==="Railroad"),["n","ne","e","se","s","sw","w","nw"]);if(n.forEach(d=>{(!a.Railroad||!o.includes(d))&&this.drawImage(`improvements/road_${d}`,e,i)}),a.Railroad&&o.forEach(d=>this.drawImage(`improvements/railroad_${d}`,e,i)),n.length===0&&o.length===0){let d=this.tileSize(),c=e*d,u=i*d,m=Math.floor(this.tileSize()/2)-this.scale();this.context().fillStyle=a.Railroad?"#000":"#8c5828",this.context().rect(c+m,u+m,this.scale()*2,this.scale()*2),this.context().fill()}}}};l(va,"Terrain");var wa=va;var xa=class extends Q{renderTile(t){if(super.renderTile(t),t.terrain._==="Unknown")return;let{x:e,y:i}=t;!t.improvements.some(n=>n._==="Irrigation")||this.drawImage("improvements/irrigation",e,i)}};l(xa,"Terrain");var Ia=xa;var _n=R(C());var Ra=class extends Q{renderTile(t){super.renderTile(t);let{x:e,y:i}=t,a=this.tileSize(),n=e*a,o=i*a;if(t.terrain._!=="Unknown"){if(t.isLand)this.drawImage("terrain/land",e,i);else if(t.isWater&&(this.drawImage("terrain/ocean",e,i),t.isCoast)){let d=this.getPreloadedImage("terrain/coast_sprite"),c=(this.world().getNeighbour(t,"w").isLand?1:0)|(this.world().getNeighbour(t,"nw").isLand?2:0)|(this.world().getNeighbour(t,"n").isLand?4:0)|(this.world().getNeighbour(t,"ne").isLand?8:0)|(this.world().getNeighbour(t,"e").isLand?16:0)|(this.world().getNeighbour(t,"se").isLand?32:0)|(this.world().getNeighbour(t,"s").isLand?64:0)|(this.world().getNeighbour(t,"sw").isLand?128:0);if(c>0){let u=c&7,m=c>>2&7,g=c>>4&7,f=c>>6&7|(c&1)<<2,y=(0,_n.s)('<canvas height="16" width="16"></canvas>'),I=y.getContext("2d");I.drawImage(d,u<<4,0,8,8,0,0,8,8),I.drawImage(d,(m<<4)+8,0,8,8,8,0,8,8),I.drawImage(d,(g<<4)+8,8,8,8,8,8,8,8),I.drawImage(d,f<<4,8,8,8,0,8,8,8),this.putImage(y,n,o)}this.filterNeighbours(t,u=>u.terrain._==="River").forEach(u=>this.drawImage(`terrain/river_mouth_${u}`,e,i))}}}};l(Ra,"Land");var fi=Ra;var En=R(Un()),Pn=R(C());var ar={playerId:null,scale:2,tileSize:16},Z,X,Xe,Ke,bi,xt,It,vi,N,Ca=class extends En.EventEmitter{constructor(e,i,a=(0,Pn.s)("<canvas></canvas>"),n={playerId:null,scale:2},...o){let d={...ar,...n};super();p(this,Z,void 0);p(this,X,{x:0,y:0});p(this,Xe,void 0);p(this,Ke,[]);p(this,bi,null);p(this,xt,void 0);p(this,It,void 0);p(this,vi,void 0);p(this,N,void 0);h(this,N,e),h(this,Z,a),h(this,bi,d.playerId),h(this,It,d.tileSize),h(this,xt,d.scale),h(this,vi,i),o.forEach(c=>r(this,Ke).push(new c(r(this,N),this.scale(),r(this,It)))),h(this,Xe,a.getContext("2d")),this.bindEvents()}bindEvents(){}build(e){r(this,Ke).forEach(i=>i.update(e))}canvas(){return r(this,Z)}center(){return r(this,X)}getLayer(e){var i;return(i=this.getLayers(e).shift())!=null?i:null}getLayers(e){return r(this,Ke).filter(i=>i instanceof e)}isVisible(e,i){let a=Math.floor(r(this,Z).width/this.tileSize()),n=Math.floor(r(this,Z).height/this.tileSize());if(a>=r(this,N).width()&&n>=r(this,N).height())return!0;let[o,d,c,u]=this.visibleBounds();return(a>=r(this,N).width()||(o>d?e<d||e>o:e<d&&e>o))&&(n>=r(this,N).height()||(c>u?i<u||i>c:i<u&&i>c))}playerId(){return r(this,bi)}render(){let e=this.tileSize(),i=r(this,N).width()*e,a=r(this,X).x*e+Math.trunc(e/this.scale()),n=Math.trunc(r(this,Z).width/2),o=r(this,N).height()*e,d=r(this,X).y*e+Math.trunc(e/this.scale()),c=Math.trunc(r(this,Z).height/2),u=n-a,m=n+i,g=c-d,f=c+o;for(;u>0;)u-=i;for(;g>0;)g-=o;for(;m<r(this,Z).width;)m+=i;for(;f<r(this,Z).height;)f+=o;r(this,Xe).fillStyle="#000",r(this,Xe).fillRect(0,0,Math.max(r(this,N).width()*e,r(this,Z).width),Math.max(r(this,N).height()*e,r(this,Z).height));for(let y=u;y<m;y+=i)for(let I=g;I<f;I+=o)r(this,Ke).forEach(P=>{if(!P.isVisible())return;let j=P.canvas();r(this,Xe).drawImage(j,y,I,j.width,j.height)})}scale(){return r(this,xt)}setCenter(e,i){r(this,X).x=e,r(this,X).y=i,this.render(),this.emit("focus-changed",e,i)}tileSize(){return r(this,It)*r(this,xt)}transport(){return r(this,vi)}visibleBounds(){let[{x:e,y:i},{x:a,y:n}]=this.visibleRange();return[e,a,i,n]}visibleRange(){let e=Math.floor(Math.floor(r(this,Z).width/this.tileSize())/2),i=Math.floor(Math.floor(r(this,Z).height/this.tileSize())/2);return[{x:(r(this,X).x-e+r(this,N).width())%r(this,N).width(),y:(r(this,X).y-i+r(this,N).height())%r(this,N).height()},{x:(r(this,X).x+e)%r(this,N).width(),y:(r(this,X).y+i)%r(this,N).height()}]}rawVisibleRange(){let e=Math.floor(Math.floor(r(this,Z).width/this.tileSize())/2),i=Math.floor(Math.floor(r(this,Z).height/this.tileSize())/2);return[{x:r(this,X).x-e,y:r(this,X).y-i},{x:r(this,X).x+e,y:r(this,X).y+i}]}world(){return r(this,N)}};l(Ca,"Portal"),Z=new WeakMap,X=new WeakMap,Xe=new WeakMap,Ke=new WeakMap,bi=new WeakMap,xt=new WeakMap,It=new WeakMap,vi=new WeakMap,N=new WeakMap;var Aa=Ca;var ka=class extends Q{renderTile(t){if(super.renderTile(t),t.terrain._==="Unknown")return;let{x:e,y:i}=t,a=this.filterNeighbours(t,n=>t.terrain._==="River"&&n.isWater||t.terrain._===n.terrain._).join("");t.terrain._!=="Ocean"&&(a?this.drawImage(`terrain/${t.terrain._.toLowerCase()}_${a}`,e,i):this.drawImage(`terrain/${t.terrain._.toLowerCase()}`,e,i))}};l(ka,"Terrain");var Ta=ka;var Ea=R(C());var sr={BuildingIrrigation:"I",BuildingMine:"M",BuildingRoad:"R",BuildingRailroad:"RR"},nr=l((s,t=16)=>{var d,c;let e=s.player,i=e.civilization,[a]=i.attributes.filter(u=>u.name==="colors"),n=la(Ys(`units/${s._.toLowerCase()}`),["#60E064","#2C7800"],a.value),o=n.getContext("2d");if(o.imageSmoothingEnabled=!1,(d=s.improvements)!=null&&d.some(u=>u._==="Fortified")&&o.drawImage(Ys("map/fortify"),0,0),s.busy){let u=t/2,m=t*.75,g=(c=sr[s.busy._])!=null?c:s.busy._.replace(/[a-z]+/g,"");o.font="bold 8px sans-serif",o.fillStyle="black",o.textAlign="center",o.fillText(g,u,m),o.fillStyle="white",o.fillText(g,u,m)}return n},"renderUnit"),_a=nr;var wi,Ua=class extends Ea.Element{constructor(e,i=2){super((0,Ea.s)('<canvas width="32" height="32"></canvas>'));p(this,wi,2);h(this,wi,i),this.build(e)}build(e){let i=_a(e),a=this.element().getContext("2d"),n=this.size(i.width),o=this.size(i.height),d=Math.floor((this.size(16)-n)/2),c=Math.floor((this.size(16)-o)/2);a.imageSmoothingEnabled=!1,a.drawImage(i,d,c,n,o)}element(){return super.element()}size(e){return e*r(this,wi)}};l(Ua,"Unit"),wi=new WeakMap;var Rt=Ua;var Pa=class extends Pe{constructor(t,e,i=()=>{}){super("Activate unit",t.map(a=>{var n,o;return{label:a._+" ["+((o=(n=a.city)==null?void 0:n.name)!=null?o:"NONE")+"]"+(a.busy?` (${a.busy._})`:""),value:a.id}}),a=>{let[n]=t.filter(o=>o.id===a);if(!!n){if(!n.active){e.send("action",{name:"InactiveUnit",id:a});return}i(n)}},null)}};l(Pa,"UnitSelectionWindow");var Ma=Pa;var Sa,Ct,$e,Oe,je,Da=class{constructor(t){p(this,Sa,l((t,e)=>({_:"Tile",id:`Tile-${t}--${e}`,city:null,goodyHut:null,improvements:[],isCoast:!1,isLand:!1,isWater:!1,terrain:{_:"Unknown",id:`UnknownTerrain-${t}--${e}`,features:[]},units:[],x:t,y:e,yields:[]}),"#unknown"));p(this,Ct,{});p(this,$e,void 0);p(this,Oe,void 0);p(this,je,void 0);h(this,Oe,t.height),h(this,je,t.width),h(this,$e,t.tiles||[])}get(t,e){for(;t<0;)t+=r(this,je);for(;e<0;)e+=r(this,Oe);for(;t>=r(this,je);)t-=r(this,je);for(;e>=r(this,Oe);)e-=r(this,Oe);let i=[t,e].toString();if(!(i in r(this,Ct))){let a=r(this,$e).findIndex(n=>n.x===t&&n.y===e);if(a===-1)return r(this,Sa).call(this,t,e);r(this,Ct)[i]=a}return r(this,$e)[r(this,Ct)[i]]}getNeighbour(t,e){if(e==="n")return this.get(t.x,t.y-1);if(e==="ne")return this.get(t.x+1,t.y-1);if(e==="e")return this.get(t.x+1,t.y);if(e==="se")return this.get(t.x+1,t.y+1);if(e==="s")return this.get(t.x,t.y+1);if(e==="sw")return this.get(t.x-1,t.y+1);if(e==="w")return this.get(t.x-1,t.y);if(e==="nw")return this.get(t.x-1,t.y-1);throw new TypeError("Invalid direction.")}height(){return r(this,Oe)}tiles(){return r(this,$e)}width(){return r(this,je)}setTiles(t){h(this,$e,t)}};l(Da,"World"),Sa=new WeakMap,Ct=new WeakMap,$e=new WeakMap,Oe=new WeakMap,je=new WeakMap;var La=Da;var za=class extends Tn{renderTile(t){super.renderTile(t);let{x:e,y:i}=t,a=this.tileSize(),n=e*a,o=i*a,d=t.yields.reduce((g,f)=>g+f.value,0),c=t.yields.sort((g,f)=>g._.charCodeAt(0)-f._.charCodeAt(0)),u=0;if(d<5){let g=[[n,o],[n+a/2,o],[n,o+a/2],[n+a/2,o+a/2]];c.forEach(f=>{for(let y=0;y<f.value;y++)this.putImage(this.getPreloadedImage(`city/${f._.toLowerCase()}`),...g[u++])});return}if(d<7){let g=[[n,o],[n+a/3,o],[n+a/3*2,o],[n,o+a/2],[n+a/3,o+a/2],[n+a/3*2,o+a/2]];c.forEach(f=>{for(let y=0;y<f.value;y++)this.putImage(this.getPreloadedImage(`city/${f._.toLowerCase()}`),g[u][0],g[u++][1])});return}if(d<9){let g=[[n,o],[n+a/4,o],[n+a/4*2,o],[n+a/4*3,o],[n,o+a/2],[n+a/4,o+a/2],[n+a/4*2,o+a/2],[n+a/4*3,o+a/2]];c.forEach(f=>{for(let y=0;y<f.value;y++)this.putImage(this.getPreloadedImage(`city/${f._.toLowerCase()}`),...g[u++])});return}if(d<11){let g=[[n,o],[n+a/5,o],[n+a/5*2,o],[n+a/5*3,o],[n+a/5*4,o],[n,o+a/2],[n+a/5,o+a/2],[n+a/5*2,o+a/2],[n+a/5*3,o+a/2],[n+a/5*4,o+a/2]];c.forEach(f=>{for(let y=0;y<f.value;y++)this.putImage(this.getPreloadedImage(`city/${f._.toLowerCase()}`),...g[u++])});return}let m=[[n,o],[n+a/6,o],[n+a/6*2,o],[n+a/6*3,o],[n+a/6*4,o],[n+a/6*5,o],[n,o+a/2],[n+a/6,o+a/2],[n+a/6*2,o+a/2],[n+a/6*3,o+a/2],[n+a/6*4,o+a/2],[n+a/6*5,o+a/2]];c.forEach(g=>{for(let f=0;f<g.value;f++)this.putImage(this.getPreloadedImage(`city/${g._.toLowerCase()}`),...m[u++])})}};l(za,"Yields");var At=za;var Oa,xi,Ii,$a=class{constructor(t=navigator.language,e=[...navigator.languages],i="en"){p(this,Oa,void 0);p(this,xi,void 0);p(this,Ii,void 0);h(this,xi,t||i),h(this,Ii,e.length>0?e.includes(i)?e:[...e,i]:t?[t,i]:[i]),h(this,Oa,i)}locale(){return r(this,xi)}locales(){return r(this,Ii)}list(t,e){return new Intl.ListFormat(this.locales(),{style:"long",type:"conjunction",...e}).format(t)}number(t,e){return new Intl.NumberFormat(this.locales(),{maximumFractionDigits:0,...e}).format(t)}percent(t,e){return this.number(t,{style:"percent",maximumFractionDigits:0,...e})}timeSince(t,e){let i=new Intl.RelativeTimeFormat(this.locales(),e),a=Math.trunc((t.getTime()-Date.now())/1e3);if(Math.abs(a)<10)return"just now";let[n,o]=[[60,"seconds"],[60,"minutes"],[24,"hours"],[28,"days"],[12,"months"],[1/0,"years"]].reduce(([d,c,u],[m,g])=>u?[d,c,u]:Math.abs(d)<=m?[d,g,!0]:[Math.trunc(d/m),g,!1],[a,"seconds",!1]);return i.format(n,o)}};l($a,"LocaleProvider"),Oa=new WeakMap,xi=new WeakMap,Ii=new WeakMap;var J=new $a;var S=R(C());var ja=R(C());var Qe=class extends ja.Element{constructor(t,e,i=["UnitSupportFood","UnitSupportProduction","MilitaryUnhappiness"]){super((0,ja.s)('<span class="supported-unit"></span>',new Rt(e),...t.yields.filter(a=>i.includes(a._)).filter(a=>a.unit.id===e.id).flatMap(a=>ui(a))))}};l(Qe,"SupportedUnit");var or=l((s,t)=>t.filter(e=>di[s].includes(e._)).reduce(([e,i],a)=>[e+(a.value<0?-a.value:0),i+a.value],[0,0]),"reduceYield"),rr=l(s=>(0,S.s)('<div class="yields-detail"></div>',...[["Food"],["Production"],["Trade"],["Luxuries","Gold","Research"]].map(t=>(0,S.s)(`<div class="yields" data-yields="${t.join(" ")}"></div>`,...t.map(e=>(0,S.s)(`<span class="yield" data-yield="${e}"></span>`,...or(e,s.yields).map((i,a)=>(0,S.s)(`<span class="${["used","free"][a]}"></span>`,...ui({_:e,value:i}))))))),...Object.entries(s.yields.filter(t=>!Object.keys(ri).includes(t._)).reduce((t,e)=>(e._ in t||(t[e._]=0),t[e._]+=e.value,t),{})).map(([t,e])=>(0,S.s)(`<div><div>${t}</div><div>${e}</div></div>`))),"renderYields"),Ns=l(s=>{let t=s.querySelectorAll(".yields-detail .yield");Array.from(t).forEach(e=>{let[i,a]=Array.from(e.children);for(;i.scrollWidth+a.scrollWidth>e.clientWidth;){let n=parseInt(e.getAttribute("data-max-width")||"14",10);if(n===0)break;e.setAttribute("data-max-width",(n-1).toString())}})},"resizeYields"),dr=l((s,t,e)=>{let i=(0,S.s)("<canvas></canvas>"),a=new Aa(new La(t.player.world),e,i,{playerId:t.player.id,scale:s.scale(),tileSize:s.tileSize()/s.scale()},fi,Ia,Ta,wa,fa,ba,hi,At);return i.height=s.tileSize()*5,i.width=s.tileSize()*5,a.setCenter(t.tile.x,t.tile.y),a.build(t.tiles),a.getLayer(At).render(t.tilesWorked),a.render(),A((0,S.s)('<div class="city-map"></div>',i),{click:()=>e.send("action",{name:"ReassignWorkers",city:t.id})})},"renderMap"),lr=l((s,t,e)=>(0,S.s)(`<div class="build"><header>Building ${s.build.building?s.build.building.item._:"nothing"}</header></div>`,A((0,S.s)(`<button>${s.build.building?"Change":"Choose"}</button>`),{click(){t()}}),A((0,S.s)("<button>Buy</button>"),{click(){e()}}),s.build.building?(0,S.s)(`<p>${ci(s.build,s.yields,"Production")}</p>`):""),"renderBuild"),cr=l(s=>(0,S.s)(`<div class="growth"><header>Growth</header><p>Size ${s.growth.size.toString()}</p><p>${ci(s.growth,s.yields,"Food")}</p></div>`),"renderGrowth"),ur=l(s=>(0,S.s)('<div class="improvements"></div>',(0,S.s)("<div></div>",...s.improvements.map(t=>(0,S.s)(`<div>${t._}</div>`,...s.yields.filter(e=>e._==="CityImprovementMaintenanceGold").filter(e=>e.cityImprovement.id===t.id).flatMap(e=>ui(e)))))),"renderImprovements"),mr=l((s,t)=>A((0,S.s)('<div class="garrisoned-units"><header>Garrisoned Units</header></div>',(0,S.s)('<div class="units"></div>',...s.tile.units.map(e=>new Rt(e).element()))),{click(){let e=s.tile.units.filter(i=>i.player.id===s.player.id);e.length!==0&&new Ma(e,t)}}),"renderGarrisonedUnits"),pr=l(s=>(0,S.s)('<div class="supported-units"><header>Supported units</header></div>',(0,S.s)('<div class="units"></div>',...s.units.map(t=>new Qe(s,t)))),"renderSupportedUnits"),Mn=l((s,t,e,i,a)=>(0,S.s)('<div class="city-screen"></div>',(0,S.s)('<div class="top-row"></div>',(0,S.s)('<div class="yield-details"></div>',oa(s),rr(s),pr(s)),dr(t,s,e),ur(s)),(0,S.s)('<div class="bottom-row"></div>',cr(s),(0,S.s)('<div class="tabbed-details"></div>',(0,S.s)('<div class="info"></div>',mr(s,e))),lr(s,i,a))),"cityDetails"),Be,kt,Ri,Tt,Ba=class extends q{constructor(e,i,a){super(e.name,Mn(e,i,a,()=>this.changeProduction(),()=>this.completeProduction()),{canResize:!0,canMaximise:!0,classes:"city-screen-window",size:"maximised"});p(this,Be,void 0);p(this,kt,void 0);p(this,Ri,void 0);p(this,Tt,void 0);setTimeout(()=>Ns(this.element()),200),h(this,Be,e),h(this,Ri,i),h(this,Tt,a),h(this,kt,new Le([e.id,e.build.id,e.growth.id,...e.units.map(o=>o.id)],o=>{var c,u;let[d]=((u=(c=o.player)==null?void 0:c.cities)!=null?u:[]).filter(m=>e.id===m.id);if(!d){this.close();return}h(this,Be,d),r(this,kt).setIds([d.id,d.build.id,d.growth.id,...d.units.map(m=>m.id)]),this.update(Mn(d,r(this,Ri),a,()=>this.changeProduction(),()=>this.completeProduction())),this.element().focus(),setTimeout(()=>Ns(this.element()),200)})),this.on("keydown",o=>{["c","C"].includes(o.key)&&(this.changeProduction(),o.preventDefault(),o.stopPropagation()),["b","B"].includes(o.key)&&(this.completeProduction(),o.preventDefault(),o.stopPropagation()),["Enter","x","X"].includes(o.key)&&this.close()});let n=l(()=>setTimeout(()=>Ns(this.element()),200),"resizeHandler");this.on("close",()=>window.removeEventListener("resize",n)),window.addEventListener("resize",n),this.on("close",()=>this.off("resize",n)),this.on("resize",n)}changeProduction(){new Ut(r(this,Be).build,r(this,Tt),()=>this.element().focus())}close(){r(this,kt).dispose(),super.close()}completeProduction(){let e=r(this,Be).build;if(!e.building)return;let[i]=e.spendCost;new ma("Are you sure?",`Do you want to rush building of ${e.building.item._} for ${J.number(i.value)} ${i.resource._}?`,()=>r(this,Tt).send("action",{name:"CompleteProduction",id:r(this,Be).build.id}))}};l(Ba,"City"),Be=new WeakMap,kt=new WeakMap,Ri=new WeakMap,Tt=new WeakMap;var _t=Ba;var Ci,Fa,Et=class extends Ee{constructor(e,i,a=()=>{},n={}){let o=l(d=>Math.max(1,Math.ceil((d.cost.value-e.progress.value)/ft(e.city.yields,"Production"))),"turns");super(`What would you like to build in ${e.city.name}?`,e.available.map(d=>({label:`${d.item._} (Cost: ${d.cost.value} / ${o(d)} turn${o(d)===1?"":"s"})`,value:d.item._})),d=>{!d||(i.send("action",{name:e.building===null?"CityBuild":"ChangeProduction",id:e.id,chosen:d||"@"}),this.close(!0))},null,{actions:n,displayAll:!0});p(this,Ci,void 0);p(this,Fa,void 0);h(this,Ci,a),h(this,Fa,i)}close(e=!1){super.close(),e&&r(this,Ci).call(this,e)}};l(Et,"CityBuildSelectionWindow"),Ci=new WeakMap,Fa=new WeakMap,Et.showCityAction=l((e,i,a)=>({label:"View city",action(n){n.close(),new _t(e,i,a)}}),"showCityAction"),Et.showCityOnMapAction=l((e,i)=>({label:"Show on map",action(a){a.close(),i.setCenter(e.tile.x,e.tile.y)}}),"showCityOnMapAction");var Ut=Et;var Dn=R(C());var Pt,Wa=class extends ae{constructor(e,i,a){super(e,a);p(this,Pt,void 0);h(this,Pt,i)}activate(){new Ut(this.value(),this.transport(),()=>this.complete(),{showCity:Ut.showCityAction(this.value().city,r(this,Pt),this.transport()),showCityOnMap:Ut.showCityOnMapAction(this.value().city,r(this,Pt))})}build(){let e=this.value();D.get("./assets/city/production.png").then(i=>this.append((0,Dn.s)(`<button class="cityBuild" title="What would you like to build in ${e.city.name}?" style="background-image:url('${i.uri}')">`)))}value(){return super.value()}};l(Wa,"CityBuild"),Pt=new WeakMap;var Sn=Wa;var Ln=R(C());var Ha=class extends ae{activate(){this.transport().send("action",{name:"EndTurn"})}build(){this.append((0,Ln.s)('<button class="endTurn" title="End turn"></button>'))}};l(Ha,"EndTurn");var zn=Ha;var $n=R(C());var Ya=class extends ae{activate(){let t=new Pe("Choose government",this.value().available.map(e=>({value:e._})),e=>{!e||(this.transport().send("action",{name:"Revolution",id:this.value().id,chosen:e||"@"}),this.complete(),t.close())},"Which government would you like to convert to?",{displayAll:!0})}build(){D.get("./assets/city/sad.png").then(t=>this.append((0,$n.s)(`<button class="chooseGovernment" title="Choose government" style="background-image:url('${t.uri}')"></button>`)))}value(){return super.value()}};l(Ya,"Revolution");var On=Ya;var Je=R(C());var hr=l((s,t)=>{let[e]=s.attributes.filter(i=>i.name===t);return e?e.value:null},"civilizationAttribute"),Mt=hr;var Ai=class extends ae{activate(){let t=this.value(),e=t.yields.reduce((c,u)=>u._ in c?u.value<0?(c[u._][1]+=Math.abs(u.value),c):(c[u._][0]+=u.value,c):c,{Energy:[0,0],LifeSupport:[0,0],Mass:[0,0],Population:[0,0]}),i=t.activeParts.reduce((c,u)=>(u._ in c&&c[u._]++,c),{Structural:0,Fuel:0,Propulsion:0,Habitation:0,LifeSupport:0,Power:0}),a=t.inactiveParts.reduce((c,u)=>(u._ in c&&c[u._]++,c),{Structural:0,Fuel:0,Propulsion:0,Habitation:0,LifeSupport:0,Power:0}),n=[["Chance of success",J.percent(t.chanceOfSuccess)],["Flight time",J.number(t.flightTime,{style:"unit",unit:"year",unitDisplay:"long"})],["Launched?",t.launched?"Yes":"No"],["Mass",J.number(e.Mass[0]*1e3,{style:"unit",unit:"kilogram"})],["Population",J.number(e.Population[0])],["Energy",J.percent(e.Energy[1]>0?e.Energy[0]/e.Energy[1]:0)],["Life Support",J.percent(e.LifeSupport[1]>0?e.LifeSupport[0]/e.LifeSupport[1]:0)]],o=l(()=>{this.transport().send("action",{name:"LaunchSpaceship",id:t.id}),d.close()},"launch"),d=new q(`${Mt(t.player.civilization,"people")} spaceship`,(0,Je.s)("<div></div>",(0,Je.s)(`<dl>${Object.entries(i).map(([c,u])=>`<dd>${c}</dd><dt>${J.number(u)}${a[c]===0?"":` <span class="inactive">(${a[c]} inactive)</span>`}</dt>`).join("")}</dl>`),(0,Je.s)(`<dl>${n.map(([c,u])=>`<dd>${c}</dd><dt>${u}</dt>`).join("")}</dl>`),(0,Je.s)("<footer></footer>",A((0,Je.s)(`<button${t.launched||t.chanceOfSuccess===0?" disabled":""}>${t.launched?"Launched":"Launch"}</button>`),{keydown(c){["Enter"," "].includes(c.key)&&o()},click(){o()}}))));d.addClass("spaceship")}build(){this.append((0,Je.s)('<button class="spaceship" title="View spaceship"></button>'))}value(){return super.value()}};l(Ai,"Spaceship");var ki,be,Na=class extends Ga.Element{constructor(e=(0,Ga.s)('<div class="actions"></div>'),i,a){super(e);p(this,ki,void 0);p(this,be,void 0);h(this,ki,i),h(this,be,a),this.on("actioned",n=>n.detail.remove()),this.on("keydown",n=>{var g;let o=document.activeElement;if(!this.element().contains(o))return;let d=Ue(n),c=Array.from(this.element().children);if(!["ArrowDown","ArrowLeft","ArrowRight","ArrowUp"].includes(d)||c.length===0)return;n.preventDefault(),n.stopPropagation();let u=o===this.element()?["ArrowLeft","ArrowUp"].includes(d)?o.firstElementChild:o.lastElementChild:o;for(;u.parentElement!==this.element();)u=u.parentElement;let m=c.indexOf(u);if(["ArrowUp","ArrowLeft"].includes(d)){if(m>0){(g=c[m-1].querySelector("button"))==null||g.focus();return}c.pop().querySelector("button").focus();return}if(["ArrowDown","ArrowRight"].includes(d)){if(m<c.length-1){c[m+1].querySelector("button").focus();return}c.shift().querySelector("button").focus();return}},!0)}build(e){this.empty(),e.forEach(i=>{let a;switch(i._){case"ActiveUnit":return;case"AdjustTradeRates":a=new yn(i,r(this,be));break;case"ChooseResearch":a=new wn(i,r(this,be));break;case"CityBuild":a=new Sn(i,r(this,ki),r(this,be));break;case"EndTurn":a=new zn(i,r(this,be));break;case"LaunchSpaceship":a=new Ai(i,r(this,be));break;case"Revolution":a=new On(i,r(this,be));break;case"ChangeProduction":case"CompleteProduction":case"InactiveUnit":return;default:console.log("need to handle "+i._);return}this.element().prepend(A(a.element(),{click:()=>a.activate(),keydown:({key:n})=>{(n===" "||n==="Enter")&&a.activate()}}))})}};l(Na,"Actions"),ki=new WeakMap,be=new WeakMap;var Gs=Na;var et,qa=class extends ne{constructor(){super(...arguments);p(this,et,null)}renderTile(e){super.renderTile(e);let{x:i,y:a}=e,n=this.tileSize(),o=i*n,d=a*n;if(e.units.length>0&&(r(this,et)!==null?r(this,et).tile.id!==e.id:!0)){let[c]=e.units.sort((m,g)=>{var f,y;return((f=g.defence)==null?void 0:f.value)-((y=m.defence)==null?void 0:y.value)}),u=this.renderUnit(c);e.units.length>1&&this.putImage(u,o-this.scale(),d-this.scale()),this.putImage(u,o,d)}}renderUnit(e){return _a(e)}setActiveUnit(e){h(this,et,e)}activeUnit(){return r(this,et)}};l(qa,"Units"),et=new WeakMap;var Ti=qa;var Za=class extends Ti{render(){this.clear();let t=this.activeUnit();if(t===null)return;let{x:e,y:i}=t.tile,a=this.world().get(e,i),n=this.tileSize(),o=e*n,d=i*n,c=this.renderUnit(t);a.units.length>1&&this.putImage(c,o-this.scale(),d-this.scale()),this.putImage(c,o,d)}update(){this.render()}};l(Za,"ActiveUnit");var qs=Za;var Va=class extends ne{renderTile(t){if(!t.city)return;super.renderTile(t);let{x:e,y:i}=t,a=this.tileSize(),n=e*a,o=i*a,d=t.city,c=this.tileSize()/2,u=this.tileSize()*.75,m=this.tileSize()/2,g=this.tileSize()*1.6;this.context().font=`bold ${8*this.scale()}px sans-serif`,this.context().fillStyle="black",this.context().textAlign="center",this.context().fillText(d.growth.size.toString(),n+c+this.scale(),o+u),this.context().fillText(d.name,n+m+this.scale(),o+g),this.context().fillStyle="white",this.context().fillText(d.growth.size.toString(),n+c,o+u-this.scale()),this.context().fillText(d.name,n+m,o+g-this.scale())}update(){this.clear(),this.world().tiles().filter(t=>!!t.city).forEach(t=>this.renderTile(t))}};l(Va,"CityNames");var Zs=Va;var tt=R(C());var gr=l(async s=>{let[t,e,i,a,n,o]=["Food","Production","Trade","Research","Gold","Luxuries"].map(y=>xn(s,y)),[d,c,u,m,g,f]=await Promise.all(["Food","Production","Trade","Research","Gold","Luxuries"].map(y=>D.getScaled(`./assets/${yt[y]}`,2).then(I=>`<img src="${I.toDataURL("image/png")}">`)));return[(0,tt.s)(`<header>${s.name}</header>`),(0,tt.s)(`<div class="growth"><strong>${s.growth.size}</strong> ${d} ${t[2]} [${t[0]}] (${da(ra(s.growth,s.yields,"Food"))})</div>`),(0,tt.s)(`<div class="build">${c} ${e[2]} [${e[0]}] ${s.build.building?s.build.building.item._:"Nothing"}${s.build.building?` (${da(ra(s.build,s.yields,"Production"))})`:""}</div>`),(0,tt.s)(`<div class="yields">${[[i,u],[a,m],[n,g],[o,f]].filter(([[y]])=>y!==0).map(([[y,,I],P])=>`${P} ${I}${I!==y?` [${y}]`:""}`).join(", ")}</div>`)]},"buildCityRow"),it,Dt,_i,Ui,Xa=class extends q{constructor(e,i,a){super("City details",(0,tt.s)('<div class="loading"></div>'),{classes:"city-status"});p(this,it,void 0);p(this,Dt,void 0);p(this,_i,void 0);p(this,Ui,void 0);h(this,it,e.cities),h(this,Dt,new Le([e.id,...e.cities.flatMap(({id:n,build:o,growth:d})=>[n,d.id,o.id])],n=>{let o=n.player;h(this,it,o.cities),r(this,Dt).setIds([o.id,...o.cities.flatMap(({id:d,build:c,growth:u})=>[d,u.id,c.id])]),this.update()})),h(this,_i,i),h(this,Ui,a),this.update()}close(){return r(this,Dt).dispose(),super.close()}update(){Promise.all(r(this,it).map(e=>gr(e))).then(e=>super.update((0,tt.s)("<table></table>",...e.map(([i,a,n,o],d)=>{let c=document.createElement("tr");return c.append(...[[i,"th"],[a,"td"],[n,"td"],[o,"td"]].map(([u,m])=>{let g=document.createElement(m);return g.append(u),g})),A(c,{click:()=>new _t(r(this,it)[d],r(this,_i),r(this,Ui))})}))))}};l(Xa,"CityStatus"),it=new WeakMap,Dt=new WeakMap,_i=new WeakMap,Ui=new WeakMap;var jn=Xa;var Qa=R(C());var Ei,Pi,Ka=class extends Qa.Element{constructor(e,i,a){super(e);p(this,Ei,void 0);p(this,Pi,void 0);h(this,Ei,i),h(this,Pi,a)}build(){this.empty(),this.append((0,Qa.s)(`<h3><span class="year">${this.year()}</span><span class="turn">${r(this,Ei).value.toString()}</span></h3>`))}year(e=r(this,Pi).value){return e<0?Math.abs(e)+" BCE":e===0?"1 CE":e+" CE"}};l(Ka,"GameDetails"),Ei=new WeakMap,Pi=new WeakMap;var Bn=Ka;var es=R(C());var le=R(C());var St,Mi,Di,Lt,Si,Fe,Ja=class extends le.Element{constructor(e,i,a,n,o){super((0,le.s)('<div class="unit-actions hide"></div>'));p(this,St,l(()=>{},"#bodyListener"));p(this,Mi,void 0);p(this,Di,void 0);p(this,Lt,void 0);p(this,Si,void 0);p(this,Fe,void 0);h(this,Mi,e),h(this,Di,i),h(this,Lt,n),h(this,Si,o),h(this,Fe,a),this.build()}actions(){if(r(this,Lt)===r(this,Fe).tile)return r(this,Fe).actions;let[e]=Object.entries(r(this,Fe).actionsForNeighbours).filter(([,a])=>{let[n]=a;return n?n.to===r(this,Lt):!1}),[,i]=e!=null?e:[];return i||[]}build(){let e=this.actions();if(e.length===0){this.remove();return}this.element().style.setProperty("left",r(this,Mi)+"px"),this.element().style.setProperty("top",r(this,Di)+"px"),this.removeClass("hide"),this.append(...e.map(i=>{let a=(0,le.s)(`<button>${i._}</button>`);return(0,le.on)(a,"pointerup",()=>{r(this,Si).send("action",{name:"ActiveUnit",id:r(this,Fe).id,unitAction:i._,target:i.to.id}),this.remove()}),a}),A((0,le.s)('<button class="close" aria-label="Close">&times;</button>'),{pointerup:()=>this.remove()})),h(this,St,i=>{let a=document.elementFromPoint(i.pageX,i.pageY);!(a!=null&&a.matches(".unit-actions button"))||(i.preventDefault(),a.dispatchEvent(new PointerEvent("pointerup")))}),(0,le.on)(document.body,"pointerup",r(this,St))}remove(){this.addClass("hide"),setTimeout(()=>{super.remove(),(0,le.off)(document.body,"pointerup",r(this,St))},250)}};l(Ja,"UnitActionMenu"),St=new WeakMap,Mi=new WeakMap,Di=new WeakMap,Lt=new WeakMap,Si=new WeakMap,Fe=new WeakMap;var Fn=Ja;var zt,at,ve,ts=class extends Aa{constructor(){super(...arguments);p(this,zt,null);p(this,at,null);p(this,ve,null)}bindEvents(){(0,es.on)(this.canvas(),"pointerup",i=>{let a=document.elementFromPoint(i.pageX,i.pageY);if(a!=null&&a.matches(".unit-actions *"))return;this.clearTimeout(),r(this,ve)!==null&&(r(this,ve).remove(),h(this,ve,null));let n=this.tileFromOffsets(i.offsetX,i.offsetY),o=n.units.filter(d=>d.player.id===this.playerId());if(n.city&&n.city.player.id===this.playerId())new _t(n.city,this,this.transport());else if(o.length){new Ma(o,this.transport(),d=>this.emit("activate-unit",d));return}this.setCenter(n.x,n.y)});let e=l((i,a,n)=>{this.clearTimeout(),r(this,zt)!==null&&(r(this,ve)!==null&&r(this,ve).element().remove(),h(this,at,window.setTimeout(()=>{h(this,ve,new Fn(a,n,r(this,zt),i,this.transport())),document.body.append(r(this,ve).element())},350)))},"showActionMenu");(0,es.on)(this.canvas(),"touchstart",i=>{i.preventDefault()}),(0,es.on)(this.canvas(),"pointerdown",i=>{i.preventDefault(),e(this.tileFromOffsets(i.offsetX,i.offsetY),i.x,i.y)})}clearTimeout(){r(this,at)!==null&&(window.clearTimeout(r(this,at)),h(this,at,null))}setActiveUnit(e=null){h(this,zt,e)}tileFromOffsets(e,i){let a=this.center(),n={x:Math.floor(this.canvas().width/2-this.tileSize()/2),y:Math.floor(this.canvas().height/2-this.tileSize()/2)},o=a.x+Math.trunc(((e-n.x)/this.tileSize()+this.world().width())%this.world().width()),d=a.y+Math.trunc(((i-n.y)/this.tileSize()+this.world().height())%this.world().height());return this.world().get(o,d)}};l(ts,"GamePortal"),zt=new WeakMap,at=new WeakMap,ve=new WeakMap;var Wn=ts;var is=class extends Q{renderTile(t){if(super.renderTile(t),t.terrain._==="Unknown")return;let{x:e,y:i}=t;t.goodyHut!==null&&this.drawImage("map/hut",e,i)}};l(is,"Terrain");var Hn=is;var Li=R(C());var fr=l(async s=>{let t={CityImprovementContent:i=>i.cityImprovement._,MartialLaw:i=>new Rt(i.unit),MilitaryUnhappiness:i=>new Qe(s,i.unit,["MilitaryUnhappiness"])},e=s.yields.reduce((i,a)=>(a._ in t&&i.push(t[a._](a)),i),[]);return(0,Li.s)(`<div class="city"><div class="name">${s.name}</div></div>`,oa(s),(0,Li.s)('<div class="reasons"></div>',...e))},"buildCityRow"),$t,Ot,as=class extends q{constructor(e){super("Happiness report",(0,Li.s)("<div></div>"),{classes:"happiness-report"});p(this,$t,void 0);p(this,Ot,void 0);h(this,$t,new Le([e.id,...e.cities.map(i=>i.id)],i=>{h(this,Ot,i.player),r(this,$t).setIds([e.id,...e.cities.map(a=>a.id)]),this.update()})),h(this,Ot,e),this.update()}close(){return r(this,$t).dispose(),super.close()}update(){Promise.all(r(this,Ot).cities.map(e=>fr(e))).then(e=>super.update((0,Li.s)("<div></div>",...e)))}};l(as,"HappinessReport"),$t=new WeakMap,Ot=new WeakMap;var Yn=as;var st,We,ss=class{constructor(t=500){p(this,st,!1);p(this,We,[]);setInterval(()=>this.check(),t)}check(){r(this,st)||r(this,We).forEach(t=>t())}clear(){h(this,We,[])}off(t){h(this,We,r(this,We).filter(e=>e!==t))}on(t){r(this,We).push(t)}pause(){h(this,st,!0)}isPaused(){return r(this,st)}resume(){h(this,st,!1)}};l(ss,"IntervalHandler"),st=new WeakMap,We=new WeakMap;var Nn=ss;var ue=R(C());var zi,$i,ns=class{constructor(t,...e){p(this,zi,void 0);p(this,$i,void 0);h(this,zi,e),h(this,$i,t)}args(){return r(this,zi)}channel(){return r(this,$i)}};l(ns,"Request"),zi=new WeakMap,$i=new WeakMap;var He=ns;var os=class extends He{constructor(t){super("getOptions",t)}};l(os,"Options");var Gn=os;var K=R(C());var jt,nt,rs=class extends q{constructor(e,i){super("Customise world",(0,K.s)('<div class="customise-world"></div>'));p(this,jt,void 0);p(this,nt,void 0);h(this,jt,i),h(this,nt,e),this.init()}build(){super.build(),this.init()}async init(){var m,g,f,y,I,P;let e=await r(this,nt).request(new Gn(["players","height","width","landCoverage","landSize","maxIterations"])),i=(0,K.s)(`<input name="players" type="number" value="${(m=e.players)!=null?m:7}" step="1" min="1" max="20">`),a=(0,K.s)(`<input name="height" type="number" value="${(g=e.height)!=null?g:60}" step="1" min="1">`),n=(0,K.s)(`<input name="width" type="number" value="${(f=e.width)!=null?f:80}" step="1" min="1">`),o=(0,K.s)(`<input name="landCoverage" type="number" value="${(y=e.landCoverage)!=null?y:.4}" step="0.01" min="0">`),d=(0,K.s)(`<input name="landSize" type="number" value="${(I=e.landSize)!=null?I:.2}" step="0.01" min="0">`),c=(0,K.s)(`<input name="maxIterations" type="number" value="${(P=e.maxIterations)!=null?P:20}" step="1" min="1">`),u=l(async()=>{this.close(),await r(this,nt).request(new He("setOptions",{players:i.value,height:a.value,width:n.value,landCoverage:o.value,landSize:d.value,maxIterations:c.value})),r(this,nt).send("start"),r(this,jt)&&r(this,jt).call(this)},"submit");this.update((0,K.s)('<div class="customise-world"></div>',(0,K.s)('<div class="option"><label>Players</label></div>',i),(0,K.s)('<div class="option"><label>Height</label></div>',a),(0,K.s)('<div class="option"><label>Width</label></div>',n),(0,K.s)('<div class="option"><label>Land coverage</label></div>',o),(0,K.s)('<div class="option"><label>Land size</label></div>',d),(0,K.s)('<div class="option"><label>Max iterations</label></div>',c),A((0,K.s)("<button>Build</button>"),{click:()=>u()}))),this.on("keydown",j=>{j.key==="Enter"&&u()})}};l(rs,"CustomiseWorldWindow"),jt=new WeakMap,nt=new WeakMap;var qn=rs;var ds=class extends Ee{constructor(t,e,i,a="Please choose one of the following:",n={canClose:!1,displayAll:!1}){super(t,e,i,a,{...n,displayAll:!0})}display(){return new Promise(t=>{this.on("selection",({detail:e})=>t(e)),super.display()})}};l(ds,"MandatorySelection");var Zn=ds;var Bt=class extends Zn{constructor(t,e){super("How many players?",[{label:"7 civilizations",value:7},{label:"6 civilizations",value:6},{label:"5 civilizations",value:5},{label:"4 civilizations",value:4},{label:"3 civilizations",value:3}],async i=>{this.close(),await t.request(new He("setOptions",{width:80,height:60,players:parseInt(i,10)})),e&&await e(),t.send("start")})}};l(Bt,"NewGameWindow");var Vn=Bt;var ls=class extends Bt{constructor(t,e){super(t,async()=>{e&&await e(),await t.request(new He("setOptions",{width:80,height:50,earth:!0}))})}};l(ls,"EarthWindow");var Xn=ls;var cs=class{constructor(){this.blob=null;this.ptr=-1}fromString(t,e){this.blob=t,this.ptr=0,this.decode(e)}getUByte(){return this.blob.charCodeAt(this.ptr++)}getUShort(){let t=this.getUByte();return(this.getUByte()<<8)+t}getShort(){return(this.getUShort()+32768)%65536-32768}getString(t){let e=this.ptr;return this.ptr+=t,this.blob.substr(e,t)}decode(t){if(this.blob===null){console.warn("file has not been loaded!");return}console.warn("The decode function should be overwritten"),t&&t()}};l(cs,"BinFile");var Kn=cs;var us=class{constructor(t){this.dicTable=[];this.dicTable=[],this.dicSize=1<<t;for(let e=0;e<this.dicSize;e++)e<256?this.dicTable[e]=[e]:this.dicTable[e]=null;this.curPos=257}getEntry(t){return t<this.curPos?this.dicTable[t]:null}isFull(){return this.curPos===this.dicTable.length}getCurPos(){return this.curPos}addEntry(t){return this.curPos<this.dicTable.length&&(this.dicTable[this.curPos]=t,this.curPos++),this.curPos-1}};l(us,"LZWDictionary");var Qn=us;var ms=class{static parseByteStreamToIndexes(t,e,i){let a=[],n=0,o=0,d=1,c=1,u=256,m=0,g=0;for(;e>0;){for(;o<8+d;)n|=t.getUByte()<<o,e--,o+=8;for(;o>=8+d;)g=n&(c<<8&65280|255),n>>=8+d,o-=8+d,m++,m==u&&(m=0,d+=1,c<<=1,c|=1,u<<=1,8+d>i&&(m=0,d=1,c=1,u=256)),a.push(g)}return a}static decode(t,e){e=e||11;let i=t,a=[];for(;i.length>0;){let n=new Qn(e),o=[i[0]],d=i[0],c=n.getEntry(d),u=d,m,g=0;for(;!n.isFull()&&g++<i.length-1;){m=i[g];let f=[];m>=n.getCurPos()?(f=n.getEntry(d),f===null&&console.error(`No dictionary entry in LZW special case: oldCode=${d}; newCode=${m}; i=${g}; buffer=${c}`),f=[...f??[],u]):f=n.getEntry(i[g]),o.push.apply(o,f),u=f[0],n.addEntry(c.concat(u)),d=m,c=n.getEntry(d)}a.push.apply(a,o),i=i.slice(g+1)}return a}static RLEDecode(t){let e=[],i=0,a=!1;for(let n=0;n<t.length;n++){let o=t[n];if(a){if(o==0)i=144,e.push(144);else for(let d=0;d<o-1;d++)e.push(i);a=!1}else o==144?a=!0:(e.push(o),i=o)}return e}};l(ms,"LZW");var ps=ms;var yr=l(s=>s&15,"lowerNibble"),Jn=yr;var br=l(s=>(s&240)>>4,"upperNibble"),eo=br;var hs=class extends Kn{constructor(){super(...arguments);this.palette=[];this.palette16=[{r:255,g:255,b:255,a:0},{r:170,g:0,b:0,a:255},{r:0,g:170,b:0,a:255},{r:170,g:170,b:0,a:255},{r:0,g:0,b:170,a:255},{r:0,g:0,b:0,a:255},{r:0,g:85,b:170,a:255},{r:170,g:170,b:170,a:255},{r:85,g:85,b:85,a:255},{r:255,g:85,b:85,a:255},{r:85,g:255,b:85,a:255},{r:255,g:255,b:85,a:255},{r:85,g:85,b:255,a:255},{r:255,g:85,b:255,a:255},{r:85,g:255,b:255,a:255},{r:255,g:255,b:255,a:255}];this.imageData=null;this.imageHeight=0;this.imageWidth=0;this.byteMode=11}decode(e){let i=this.getString(2),a=this.getShort();if(i=="M0")this.getPaletteData(),i=this.getString(2),a=this.getShort();else{console.log("Creating a random color palette...");for(let n=0;n<256;n++)n<16?this.palette.push(this.palette16[n]):this.palette.push({r:Math.floor(Math.random()*256),g:Math.floor(Math.random()*256),b:Math.floor(Math.random()*256),a:255})}i=="X0"?this.getX0ImageData(a):i=="X1"?this.getX1ImageData(a):console.error('"'+i+'" is an unknown chunk type'),e&&e()}getPaletteData(){let e=this.getUByte(),i=this.getUByte(),a=i-e+1,n=!1;for(let o=0;o<a;o++){let d={r:this.getUByte()*4,g:this.getUByte()*4,b:this.getUByte()*4,a:255};this.palette.push(d),d.r===d.g&&d.g===d.b&&d.r===0&&(n||(d.a=0),n=!0)}this.palette.push({r:0,g:0,b:0,a:0})}getX0ImageData(e){this.imageWidth=this.getShort(),this.imageHeight=this.getShort(),this.byteMode=this.getUByte();let i=ps.parseByteStreamToIndexes(this,e-5,this.byteMode),a=ps.decode(i,this.byteMode);this.imageData=ps.RLEDecode(a)}getX1ImageData(e){this.getX0ImageData(e);let i=this.imageData;this.imageData=[];for(let a=0;a<i.length;a++)this.imageData.push(Jn(i[a])),this.imageData.push(eo(i[a]));this.palette=this.palette16}draw(e,i=0,a=0){let n=e.getImageData(0,0,this.imageWidth,this.imageHeight),o=0;for(let d=0;d<this.imageHeight;d++)for(let c=0;c<this.imageWidth;c++){let u=this.imageData[o],m=(c+d*this.imageWidth)*4;n.data[m]=this.palette[u].r,n.data[m+1]=this.palette[u].g,n.data[m+2]=this.palette[u].b,n.data[m+3]=this.palette[u].a,o++}e.putImageData(n,i,a)}getPixel(e,i){return this.imageData?this.imageData[e+this.imageWidth*i]:0}};l(hs,"PicImage");var to=hs;var io=l((s,t,e,i,a=n=>console.log(n))=>{let n=i(320,200),o=new to,d=[];return o.fromString(s,()=>{o.draw(n.getContext("2d",{willReadFrequently:!0})),Object.entries(t).forEach(([c,u])=>u.forEach(m=>m.contents.forEach(g=>{let f={...e,...m,...g},y=`./assets/${c+f.name}.png`,I=i(f.width,f.height),P=I.getContext("2d",{willReadFrequently:!0});P.clearRect(0,0,f.width,f.height),P.drawImage(n,f.x,f.y,f.width,f.height,0,0,f.width,f.height);for(let j=0;j<n.width;j++)for(let T=0;T<n.height;T++){let L=P.getImageData(j,T,1,1).data;L[0]==f.clear.r&&L[1]==f.clear.g&&L[2]==f.clear.b&&P.clearRect(j,T,1,1)}a(`Processing ${y}...`),d.push({name:y,uri:I.toDataURL("image/png")})})))}),d},"extractSprites");var Oi={defaults:{height:16,width:16,clear:{r:0,g:170,b:170}},files:{"SP257.PIC":{"cursor/go":[{y:33,x:33,height:12,width:12,contents:[{name:""}]}],"city/pollution":[{y:32,x:48,contents:[{name:""}]}],"improvements/irrigation":[{y:32,x:64,contents:[{name:""}]}],"improvements/mine":[{y:32,x:80,contents:[{name:""}]}],"improvements/pollution":[{y:32,x:96,contents:[{name:""}]}],"cursor/torch":[{y:33,x:113,height:13,width:13,contents:[{name:""}]}],"city/food":[{y:33,x:129,height:7,width:7,contents:[{name:""}]}],"city/production":[{y:33,x:137,height:7,width:7,contents:[{name:""}]}],"city/trade":[{y:33,x:145,height:7,width:7,contents:[{name:""}]}],"city/gold":[{y:33,x:153,height:7,width:7,contents:[{name:""}]}],"city/bulb":[{y:41,x:129,height:7,width:7,contents:[{name:""}]}],"city/sad":[{y:41,x:137,height:7,width:7,contents:[{name:""}]}],"city/luxury":[{y:41,x:145,height:7,width:7,contents:[{name:""}]}],"terrain/":[{y:41,x:153,height:7,width:7,contents:[{name:"shield"}]}],"improvements/road":[{y:48,contents:[{name:"_n",x:0},{name:"_ne",x:16},{name:"_e",x:32},{name:"_se",x:48},{name:"_s",x:64},{name:"_sw",x:80},{name:"_w",x:96},{name:"_nw",x:112}]}],"status/science":[{y:48,height:8,width:8,contents:[{name:"_0",x:128},{name:"_25",x:136},{name:"_50",x:144},{name:"_75",x:152}]}],"status/pollution":[{y:56,height:8,width:8,contents:[{name:"_0",x:128},{name:"_25",x:136},{name:"_50",x:144},{name:"_75",x:152}]}],"terrain/land":[{y:64,contents:[{name:"",x:0}]}],"terrain/river":[{y:64,contents:[{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:224},{name:"_nesw",x:240}]}],"units/combat":[{y:97,height:15,width:15,contents:[{name:"_1",x:1},{name:"_2",x:17},{name:"_3",x:33},{name:"_4",x:49},{name:"_5",x:65},{name:"_6",x:81},{name:"_7",x:97},{name:"_8",x:113}]}],"improvements/railroad":[{y:96,contents:[{name:"_n",x:128},{name:"_ne",x:144},{name:"_e",x:160},{name:"_se",x:176},{name:"_s",x:192},{name:"_sw",x:208},{name:"_w",x:224},{name:"_nw",x:240}]}],"terrain/oasis":[{y:113,height:15,width:15,contents:[{name:"",x:1}]}],"terrain/horse":[{y:113,height:15,width:15,contents:[{name:"",x:17}]}],"terrain/doe":[{y:113,height:15,width:15,contents:[{name:"",x:49}]}],"terrain/coal":[{y:113,height:15,width:15,contents:[{name:"",x:65}]}],"terrain/gold":[{y:113,height:15,width:15,contents:[{name:"",x:81}]}],"terrain/game":[{y:113,height:15,width:15,contents:[{name:"",x:97}]}],"terrain/seal":[{y:113,height:15,width:15,contents:[{name:"",x:113}]}],"terrain/oil":[{y:113,height:15,width:15,contents:[{name:"",x:129}]}],"terrain/gems":[{y:113,height:15,width:15,contents:[{name:"",x:145}]}],"terrain/fish":[{y:113,width:15,height:15,contents:[{name:"",x:161}]}],"map/city":[{y:113,contents:[{name:"",x:193}]}],"map/fortify":[{width:15,height:15,y:113,contents:[{name:"",x:209}]}],"map/fort":[{width:15,height:15,y:113,contents:[{name:"",x:225}]}],"map/hut":[{y:113,height:15,width:15,contents:[{name:"",x:241}]}],"city/people":[{y:128,height:16,width:8,contents:[{name:"_happy_m",x:0},{name:"_happy_f",x:8},{name:"_content_m",x:16},{name:"_content_f",x:24},{name:"_unhappy_m",x:32},{name:"_unhappy_f",x:40},{name:"_tax",x:48},{name:"_science",x:56},{name:"_luxury",x:64}]}],"map/fog":[{y:128,contents:[{name:"_n",x:80},{name:"_e",x:96},{name:"_s",x:112},{name:"_w",x:128}]}],"units/":[{y:161,height:15,width:15,contents:[{name:"settlers",x:1},{name:"warrior",x:17},{name:"spearman",x:33},{name:"swordman",x:49},{name:"musketman",x:65},{name:"rifleman",x:81},{name:"horseman",x:97},{name:"knight",x:113},{name:"catapult",x:129},{name:"cannon",x:145},{name:"chariot",x:161},{name:"tank",x:177},{name:"mechanizedinfantry",x:193},{name:"artillery",x:209},{name:"fighter",x:225},{name:"bomber",x:241},{name:"trireme",x:257},{name:"sail",x:273},{name:"frigate",x:289},{name:"ironclad",x:305}]},{y:177,contents:[{name:"cruiser",x:1},{name:"battleship",x:17},{name:"submarine",x:33},{name:"carrier",x:49},{name:"transport",x:65},{name:"nuclear",x:81},{name:"diplomat",x:97},{name:"caravan",x:113}]}],"general/texture":[{y:176,contents:[{name:"_1",x:288},{name:"_2",x:304}]}]},"TER257.PIC":{"terrain/desert":[{y:0,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/plains":[{y:16,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/grassland":[{y:32,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/forest":[{y:48,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/hills":[{y:64,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/mountains":[{y:80,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/tundra":[{y:96,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/arctic":[{y:112,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/swamp":[{y:128,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/jungle":[{y:144,contents:[{name:"",x:0},{name:"_n",x:16},{name:"_e",x:32},{name:"_ne",x:48},{name:"_s",x:64},{name:"_ns",x:80},{name:"_es",x:96},{name:"_nes",x:112},{name:"_w",x:128},{name:"_nw",x:144},{name:"_ew",x:160},{name:"_new",x:176},{name:"_sw",x:192},{name:"_nsw",x:208},{name:"_esw",x:222},{name:"_nesw",x:228}]}],"terrain/ocean":[{y:160,contents:[{name:"",x:0}]}],"terrain/coast_sprite":[{x:0,y:176,height:16,width:128,contents:[{name:""}]}],"terrain/river":[{y:160,contents:[{name:"",x:240}]},{y:176,contents:[{name:"_mouth_n",x:128},{name:"_mouth_e",x:144},{name:"_mouth_s",x:160},{name:"_mouth_w",x:176}]}]}}};var ji=R(C());var Ft,ee,gs=class extends q{constructor(){let e=(0,ji.s)('<input type="file" multiple>'),i=(0,ji.s)('<p class="loading" hidden></p>');super("Import assets",(0,ji.s)(`<div class="import-assets"><p>Upload ${Object.keys(Oi.files).join(", ")} from the original Civilization files to extract assets (these will be stored locally). This process can take at least a few minutes.</p><div class="brave" ${navigator!=null&&navigator.brave?"":" hidden"}><p>It looks like you're using Brave and due to the use of <code>HTMLCanvasElement</code>'s <code>getImageData</code> and <code>toDataURL</code> functions, please put Shields down while importing, and playing, otherwise any colour-replaced icons won't look correct. <strong>Remember to put them back up after!</strong></p><p><a href="https://brave.com/privacy-updates/4-fingerprinting-defenses-2.0/#2-fingerprinting-protections-20-farbling-for-great-good" target="_blank">Read more about "farbling".</a></p></div></div>`,(0,ji.s)("<p></p>",A(e,{change:a=>this.handleFileUpload(a)})),i));p(this,Ft,void 0);p(this,ee,void 0);h(this,Ft,e),h(this,ee,i)}async handleFileUpload(e){var c;r(this,ee).removeAttribute("hidden"),r(this,ee).style.color="inherit";let i=Array.from((c=e.target.files)!=null?c:[]),a=i.map(u=>u.name),n=Object.keys(Oi.files);if(!n.map(u=>new RegExp(u,"i")).every(u=>a.some(m=>m.match(u)))){r(this,ee).style.color="#f00",r(this,ee).innerText=`Please provide all files to generate assets: ${n.join(", ")}.`;return}r(this,Ft).setAttribute("disabled",""),r(this,ee).innerText="Building image assets...";let d=[];if(await Promise.all(i.map(async u=>new Promise(m=>{let g=Oi.files[u.name.toUpperCase()];if(!g){console.warn(`No definitions found for ${u.name}, skipping.`);return}let f=new FileReader;f.addEventListener("load",async y=>{io(y.target.result,g,Oi.defaults,(I,P)=>{let j=document.createElement("canvas");return j.width=I,j.height=P,j},I=>{r(this,ee).innerText=I}).forEach(I=>d.push(I)),m()}),f.readAsBinaryString(u)}))),r(this,ee).innerText="Writing to database...",await Promise.all(d.map(u=>D.set(u))),!await D.hasAllAssets()){console.error("Something went wrong..."),r(this,ee).style.color="#f00",r(this,ee).innerText="Not all expected data was written. Might need to try again... Missing: "+(await D.missingAssets()).join(", "),r(this,Ft).removeAttribute("disabled");return}r(this,ee).innerText="Done! Please reload the page to utilise the fresh assets.",location.reload()}};l(gs,"ImportAssetsWindow"),Ft=new WeakMap,ee=new WeakMap;var ao=gs;var so="0.1.0@d4a32a4";var vs=R(C());var no=[{version:"0.1.0@d4a32a4",date:"2023-01-17T22:01:12.000Z",localChanges:["Bump dependencies and update UI to match."],externalChanges:{"base-goody-hut-gold":{status:"updated",log:["Update to latest version of `core-treasury`."]},"civ1-city-happiness":{status:"updated",log:["Update `CivilDisorder` and `CelebrateLeader` `Rule`s to be closer to original Civilization.","Trigger an event when `CivilDisorder` or `CelebrateLeader` are reverted.","Add `CelebrateLeader` effect (`City` grows each turn)."]},"civ1-city":{status:"updated",log:["Update to latest version of `core-city-happiness`."]},"civ1-science":{status:"updated",log:["Update to latest version of `core-city-happiness`."]},"civ1-spaceship":{status:"updated",log:["Update to latest version of `core-treasury`."]},"civ1-treasury":{status:"updated",log:["Ensure `CompleteProduction` `PlayerAction` contains `CityBuild` instead of `City`.","Update to use latest version of `core-treasury` and `core-city-happiness`."]},"civ1-unit":{status:"updated",log:["Remove dependency on `civ1-science` and import each advance separately.","Fix `Fighter`, `Nuclear` and `Bomber` behaviour (`LostAtSea` to be replaced)."]},"civ1-wonder":{status:"updated",log:["Ensure `Nuclear` can only be built once `ManhattanProject` has been built by any player."]},"core-city-happiness":{status:"updated",log:["Add `civilDisorder` and `celebrateLeader` `AdditionalData` to `City`s.","Make `CivilDisorder` and `CelebrateLeader` return `boolean` instead of being `validate` only `Rule`s."]},"core-treasury":{status:"updated",log:["Generalise `PlayerTreasury` to allow storage of any `Yield`.","Add `spendCost` `AdditionalData` to `CityBuild`s.","Add `Rush` `Rule` triggered when `CompleteProduction` is called.","Update `Spend` `Rule` to return `SpendCost` value object instead of modifying a `Yield`."]},"simple-ai-client":{status:"updated",log:["Update to latest version of `core-treasury`."]}}},{version:"0.1.0@b6d38dd",date:"2023-01-13T08:40:36.000Z",localChanges:["Add beginnings of a touch compatible interface for moving `Unit`s."],externalChanges:{}},{version:"0.1.0@fb75d4d",date:"2023-01-13T08:37:10.000Z",localChanges:["Add changelog mechanism and populate with historic data."],externalChanges:{}},{version:"0.1.0@8cae915",date:"2023-01-05T19:45:55.000Z",localChanges:["Change `docker-compose` port to avoid local conflicts.","Add `civ1-spaceship` - this enables building `Spaceship` components. (Note: victories are not yet implemented!)","Add `Spaceship` `Window` to display details and allow launch.","Add `LocaleProvider` class to wrap convenience methods for lists and number formatting.","Update lib version to support `es2021.intl`.","Refactor `Actions` to automatically import non-`MandatoryAction`s."],externalChanges:{"base-player-action-launch-spaceship":{status:"added",log:["Initial commit"]},"base-spaceship-fuel":{status:"added",log:["Initial commit"]},"base-spaceship-habitation":{status:"added",log:["Initial commit"]},"base-spaceship-life-support":{status:"added",log:["Initial commit"]},"base-spaceship-power":{status:"added",log:["Initial commit"]},"base-spaceship-propulsion":{status:"added",log:["Initial commit"]},"base-spaceship-structural":{status:"added",log:["Initial commit"]},"base-spaceship-yield-energy":{status:"added",log:["Initial commit","Add `AdditionalData` to `Spaceship`s."]},"base-spaceship-yield-life-support":{status:"added",log:["Initial commit","Add `AdditionalData` to `Spaceship`s.","Update to use npm version of core-spaceship."]},"base-spaceship-yield-mass":{status:"added",log:["Initial commit","Add `AdditionalData` to `Spaceship`s."]},"base-spaceship-yield-population":{status:"added",log:["Initial commit","Add `AdditionalData` to `Spaceship`s."]},"civ1-city-happiness":{status:"updated",log:["Bump dependencies."]},"civ1-default-spaceship-layout":{status:"added",log:["Initial commit"]},"civ1-spaceship":{status:"added",log:["Initial commit","Move default `Layout` to its own repo and make it a class instead of an instance.","Add a `Player` `Action` for launching the `Spaceship`.","Remove unused variable in tests.","Add `LaunchSpaceship` `PlayerAction`.","Add `Spend` `Rule`s for `Part`s.","Add `Active` `Rule`s for `Slot`s.","Add `Landed `Rule`s for `Spaceship`.","Add `Turn` `Start` `Rule`s` to check if `Spaceship` is `Landed` or `Lost`.","Ensure `Spaceship` `Part`s cannot be built when a `Spaceship` is in-flight.","Use updated `LayoutRegistry`.","Update updated `Active` `Slot` mechanism."]},"core-spaceship":{status:"added",log:["Initial commit","Add `yield` to `Spaceship`.","Add `SpaceshipRegistry`.","Add `spaceship` key to `Player`s as `AdditionalData`.","Re-work `Spaceship` and `Part` `yields`.","Add `Validation` `Rule` to prevent adding unusable `Part`s.","Add `chanceOfSuccess` method.","Add `Layout`, `LayoutRegistry` and `Slot` entities, and update `Spaceship` to use them.","Update layout registry to store constructors instead of instances.","Ensure `Layout` is included when `Spaceship` is converted to `PlainObject`.","Ensure `AdditionalData` is correctly registered.","Add index.js entrypoint.","Break down `Slot`s in a `Layout` into active and inactive.","Replace `Validate` `Rule` with `Active`.","Add `activeParts` and `inactiveParts` to `Spaceship`."]}}},{version:"0.1.0@a999e22",date:"2022-12-05T21:31:36.000Z",localChanges:["Support numpad movement on macOS using a non-Apple keyboard."],externalChanges:{}},{version:"0.1.0@39cbaeb",date:"2022-12-04T21:22:23.000Z",localChanges:["Feed back about requiring all asset files when generating assets."],externalChanges:{}},{version:"0.1.0@7ea1d26",date:"2022-11-25T21:12:28.000Z",localChanges:["Fix missing `Import assets` menu item."],externalChanges:{}},{version:"0.1.0@be9ad8d",date:"2022-11-25T11:01:29.000Z",localChanges:["Bump dependencies."],externalChanges:{"base-city-yield-martial-law-content":{status:"updated",log:["Ensure `unit` key is exposed."]},"civ1-city-improvement":{status:"updated",log:["Destroy `CityImprovement`s when a `City` is `Captured` or `Destroyed`."]},"civ1-city":{status:"updated",log:["Track `destroyed` status rather than unregister the `City`."]},"civ1-player":{status:"updated",log:["Ensure `destroyed` `Unit`s are excluded from being processed."]},"civ1-unit":{status:"updated",log:["Use `IBuildable` interface for `BuildingComplete` `Rule`s.","Ensure `Submarine`s cannot bombard `Land` `Unit`s.","Ensure only `Fighter`s can `Attack` other `Air` `Unit`s.","Annotate `Attack` `Action` `Rule`s.","Ensure all `Unit`s on a `Tile` are destroyed when the defending `Unit` is `Destroyed`, unless in a `City`.","Track `destroyed` status rather than unregister the `Unit`."]},"civ1-wonder":{status:"updated",log:["Ensure `IBuildable` interface is used.","Add benefits for `DarwinsVoyage`."]},"core-city-build":{status:"updated",log:["Make `AvailableCityBuildItemsRegistry` more flexible.","Re-work entities and interfaces to avoid having to forcibly cast everything."]},"core-city-improvement":{status:"updated",log:["Track `destroyed` status rather than unregister the `CityImprovement`."]},"core-city":{status:"updated",log:["Repo cleansing.","Track `destroyed` status rather than unregister the `City`."]},"core-data-object":{status:"updated",log:["Make `IDataObject` interface more flexible."]},"core-unit-transport":{status:"updated",log:["Ensure `Base` is `typeof Unit` so that it includes the static methods required by `IBuildable`."]},"core-unit":{status:"updated",log:["Track `destroyed` status rather than unregister the `Unit`."]}}},{version:"0.1.0@55c0fae",date:"2022-11-22T21:24:59.000Z",localChanges:["Remove fixed `Window` width.","Ensure `GameData` variable in `Renderer` is updated.","Add initial `CityStatus` (`F1`), `HappinessReport` (`F4`) and `ScienceReport` (`F6`) screens.","Simplify `City` screen component, moving out some parts to shared lib files or components."],externalChanges:{"base-city-yield-city-improvement-content":{status:"updated",log:["Ensure `CityImprovement` is exposed."]}}},{version:"0.1.0@9efb4a2",date:"2022-11-21T21:48:43.000Z",localChanges:["Add favicon."],externalChanges:{}},{version:"0.1.0@4cb5589",date:"2022-11-21T21:04:26.000Z",localChanges:["Use `@dom111/Element` instead of a divergent package in the repo.","An attempt to resize the `Yield` images when there are too many to fit in the available space.","Add build version information to the landing page.","Inline the `Window` button images.","Clean up source files (remove unncessary `public` declarations.)","Prevent accidental page reloads.","Remove code clean up (return to leaking memory...) to speed up later game.","Fix growth details in `City` screen.","Fix number of turns shown on `CityBuildSelectionWdindow`.","Fix inheritence for `Window` and children.","Fix `Portal` centering bug.","Fix `Gold` and `Research` per turn indicator in sidebar.","Allow `Window` elements to be moved."],externalChanges:{"civ1-earth-generator":{status:"updated",log:["Refactor `Earth` start `Tile`s to use the `Regitry` mechanism."]},"civ1-world":{status:"updated",log:["Use updated `civ1-earth-generator` package."]}}},{version:"0.1.0@ad66e17",date:"2022-11-17T12:49:59.000Z",localChanges:["Add warning about generating assets on Brave.","Ensure `Earth` `MainMenu` option is hidden when the assets are missing."],externalChanges:{}},{version:"0.1.0@7fce207",date:"2022-11-16T21:56:29.000Z",localChanges:["Ensure all assets are loaded before trying to use the curosr.","Add `Earth` `World` `Generator`.","Only trigger `City` screen for `Player`s `City`s.","Only focus the `<select/>` in a `SelectionWindow` if there is more than one item."],externalChanges:{"civ1-asset-extractor":{status:"updated",log:["Add `Map` class and `extractMap` script to convert Civ 1 `*.MAP` (or `MAP.PIC`) files to RLE representations."]},"civ1-earth-generator":{status:"added",log:["Initial commit","Refactor `Earth` start `Tile`s to use the `Regitry` mechanism."]},"civ1-player":{status:"updated",log:["Simplify `World` built `Rule` by breaking out into `Spawn` and `PickStartTile` `Rule`s."]},"civ1-world":{status:"updated",log:["Add support for `Earth` `Generator` and fixed start `Tile`s associated.","Move random start `Tile` selection to `Rule`s."]},"core-player":{status:"updated",log:["Add `Spawn` `Rule` to control what happens when a `Player` is spawned into the game."]},"core-world-generator":{status:"updated",log:["Add `PickGenerator` (to choose the `Generator` to build the `World` map) and `PickStartTile` (to choose the starting `Tile`s for the `Player`) `Rule`s."]},"simple-ai-client":{status:"updated",log:["Add hard-coded check for `Earth` map to ensure first `City` is built in the right place."]},"simple-world-generator":{status:"updated",log:[]}}},{version:"0.1.0@575f690",date:"2022-11-15T20:13:36.000Z",localChanges:["Remove unused packages from esbuild.js.","Fix `Yield`s not being rendered in `City` screen."],externalChanges:{}},{version:"0.1.0@4c67745",date:"2022-11-15T17:00:58.000Z",localChanges:["Reorganise the repo to make it easier to navigate.","Add `AssetStore`.","Use `AssetStore` assets instead of hard-coded links to images.","Break down `MainMenu` into smaller pieces.","Customise esbuild process.","Ensure `Transport` is passed in directly, instead of relying on a global object."],externalChanges:{"base-unit-action-disband":{status:"added",log:["Initial commit","Repo cleansing."]},"civ1-asset-extractor":{status:"added",log:["Initial commit","Updates to fix the incorrect padding around elements.","Fix misnamed assets.","Refactor to allow usage within a browser context.","Add `Map` class and `extractMap` script to convert Civ 1 `*.MAP` (or `MAP.PIC`) files to RLE representations."]},"civ1-player":{status:"updated",log:["Refactor out `Worker`. This probably needs to be added back in at some point..."]},"civ1-science":{status:"updated",log:["Remove unnecessary `Registry` interface."]},"civ1-treasury":{status:"updated",log:["Remove unnecessary `Registry` interface."]},"civ1-unit":{status:"updated",log:["Add `Disband` `Action`."]},"core-data-object":{status:"updated",log:["Ensure `id` is included in `IDataObject` so that `keys` for both `DataObject` and `IDataObject` return the same thing."]},"core-engine":{status:"updated",log:["Remove reliance on `node` so that a browser can be used instead."]},"core-turn-based-game":{status:"updated",log:["Ensure return types match for TypeScript compiler."]},"simple-world-generator":{status:"updated",log:["Remove reliance on `node` so that a browser can be used instead."]}}},{version:"0.1.0@425962f",date:"2022-11-12T23:14:56.000Z",localChanges:["Remove unused logging.","Add `Customise world` option to `MainMenu`.","Fix bug where `Portal` would be re-centered even when map is fully displayed on screen."],externalChanges:{}},{version:"0.1.0@4f027f6",date:"2022-11-10T22:14:42.000Z",localChanges:["Initial version of web-renderer."],externalChanges:{}},{version:"0.1.0@93bb88d",date:"2022-11-09T21:54:44.000Z",localChanges:["Ensure `City` `Yield`s are updated when `Unit`s are moved or destroyed.","Update `City` display screen to be closer to the original game."],externalChanges:{"base-city-yield-city-improvement-maintenance-gold":{status:"updated",log:["Make class extend `Gold` `Yield` and store the value negated."]},"base-city-yield-city-improvement-content":{status:"added",log:["Initial commit","Ensure `CityImprovement` is exposed."]},"base-city-yield-corruption":{status:"updated",log:["Make class extend `Trade` `Yield` and store the value negated."]},"base-city-yield-population-support-food":{status:"updated",log:["Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-luxury-happiness":{status:"added",log:["Initial commit"]},"base-city-yield-martial-law-content":{status:"added",log:["Initial commit","Ensure `unit` key is exposed."]},"base-city-yield-military-unhappiness":{status:"added",log:["Initial commit","Ensure `unit` key is exposed when the `Yield` is exported as raw data."]},"base-city-yield-population-unhappiness":{status:"added",log:["Initial commit"]},"base-city-yield-unit-support-food":{status:"updated",log:["Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-unit-support-production":{status:"updated",log:["Make class extend `Production` `Yield` and store the value negated."]},"base-goody-hut-unit":{status:"updated",log:["Remove `RuleRegistry` interface for `Unit` `Rule`."]},"base-player-action-active-unit":{status:"updated",log:["Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-adjust-trade-rates":{status:"updated",log:["Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-inactive-unit":{status:"updated",log:["Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-revolution":{status:"updated",log:["Update dependencies and add generic property for `PlayerAction`."]},"base-unit-action-attack":{status:"updated",log:["Pass the `Attack` instance to the `Defeated` `Rule` so it can be determined if a `Unit` in a `City` was a defender or not.","Remove `RuleRegistry` interface usage for `Defeated` `Rule`.","Move `unitRegistry` into the `Attack` constructor.","Replace usages of `Math.random` with a testable injected dependency."]},"base-unit-action-build-irrigation":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-mine":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-road":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-forest":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-jungle":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-swamp":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-embark":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Moved` `Rule`s."]},"base-unit-action-fortify":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-found-city":{status:"updated",log:["Ensure local `RuleRegistry` is passed on to `City` constructor."]},"base-unit-action-move":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Moved`, `MovementCost` and `ValidateMove` `Rule`s."]},"base-unit-action-pillage":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-plant-forest":{status:"updated",log:["Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-type-naval-transport":{status:"updated",log:["Update to use latest `core-unit-transport` changes."]},"civ1-city-happiness":{status:"updated",log:["Bump dependencies.","Consolidate `Cost` `Rule`s.","Remove unused `Rule` classes.","Rewrite to use customised `Yield`s for each property.","Update to latest version of `core-city-improvement`."]},"civ1-city-improvement":{status:"updated",log:["Reclassify `CityImprovementMaintenanceGold` `Yield` `Rule`s as `Cost` `Rule`s.","Ensure `Corruption` is provided as expected`.","Add some basic cleanup for when `City`s are destroyed.","Update to latest version of `core-city-improvement`.","Move `Corruption` generation to `civ1-city`, where it makes more sense to exist.","Work on test coverage.","Bump dependencies."]},"civ1-city":{status:"updated",log:["Update `CityBuild` and `ChangeProduction` instantiations with new `PlayerAction` changes.","Ensure when a `Unit` is defeated in a `City` that the population is only reduced when it's a defender.","Use `FoodExhausted` and `Unsupported` `Rule`s.","Refactor `Yield`, `Cost` and `ProcessYield` `Rule` usages.","Update `ProcessYield` usage.","Use updated `CityRegistry.getByTile` method.","Update `setUpCity` mechanism.","Ensure `Irrigation` and `Road` `TileImprovement`s are only added if they don't already exist.","Update `setUpCity` to allow bypassing of `TileImprovement` additions.","Move `Corruption` generation from `civ1-city-improvement`.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo.","Improve test coverage."]},"civ1-civilization":{status:"updated",log:["Repo cleansing."]},"civ1-goody-hut":{status:"updated",log:["Update to use latest `CityRegistry` changes.","Update usages of `Math.random` to be an injectable number provider.","Another attempt at the `City` type of `GoodyHut`."]},"civ1-government":{status:"updated",log:["Update `Revolution` instantiation with new `PlayerAction` changes."]},"civ1-player":{status:"updated",log:["Update `EndTurn` instantiation with new `PlayerAction` changes.","Use `Defeated` `Rule` from `core-player`.","Use `TurnStart` `Rule`s where applicable.","Refactor `ProcessYield` approach.","Use correct type for `City` `Destroyed` and `Unit` `Destroyed` `Rule`s.","Re-work the `Unit` `DelayedAction` handling.","Move event contents into `Rule`s where possible.","Remove reliance on other `civ1-*` packages, preferring individual packages instead.","Add unit tests.","Ensure local `RuleRegistry` is passed in to `World` `Built` `Rule`s when `Unit`s are created.","Fix `ProcessYield` problem in `TurnStart` `Rule`."]},"civ1-science":{status:"updated",log:["Update `ChooseResearch` instantiation with new `PlayerAction` changes.","Update dependencies.","Add unit tests.","Ensure `@civ-clone/core-city-happiness` is used as a module, not a github repo.","Add `randomNumberGenerator` provider for `captured` `Rule`."]},"civ1-trade-rate":{status:"updated",log:["Update `AdjustTradeRates` instantiation with new `PlayerAction` changes.","Ensure `Corruption` can never exceed the available `Trade`.","Add `Player` `turn-start` `Rule` to convert `Trade` into the component `Yield`s."]},"civ1-treasury":{status:"updated",log:["Update `CompleteProduction` instantiation with new `PlayerAction` changes.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo."]},"civ1-unit":{status:"updated",log:["Update `ActiveUnit` and `InactiveUnit` instantiations with new `PlayerAction` changes.","Use `Unsupported` and `Stowed` `Rule`s.","Ensure `Sail` is obselete with `Magenetism`.","Simplify and clarify `Move` action constraints.","Clean up when `Unit` is `Destroyed`.","Add better test coverage.","Add missing `MovementCost`s and use named re-usable `Criterion`s for `Action` `Rule`s where possible.","Ensure `Air` `Unit`s can attack `Land` `Unit`s."]},"civ1-wonder":{status:"updated",log:["Use updated `Yield` mechanism.","Add `CureForCancer` effects.","Add obsoletion for `Lighthouse`.","Rework the tests.","Update to remove requirement for `Player` to be passed into the `Wonder` constructor.","Fix some wonder effects.","Ensure `engine` parameter of `Wonder` `obsolete` `Rule`s is optional.","Add `Wonder` `obsolete` `Rule`s."]},"civ1-world":{status:"updated",log:["Update calls to `Math.random` to be an injectable random number generator.","Ensure `Road` and `Railroad` are not applied multiple times."]},"core-ai-client":{status:"updated",log:["Replace usages of `Math.random` with a testable injected dependency."]},"core-city-build":{status:"updated",log:["Update to use `PlayerAction` generics and fix return type of `Buildable`.","Simpliy `Rule`s."]},"core-city-growth":{status:"updated",log:["Add `CityGrowth` object as an argument to `FoodExhasted` `Rule` instead of `City`.","Fix tests.","Update `README.md`.","Update dependencies."]},"core-city-happiness":{status:"updated",log:["Simpliy `Rule`s.","Repo cleansing."]},"core-city-improvement":{status:"updated",log:["Remove `Player` as a constructor argument since this is available (and more likely reliable) via `City` instead."]},"core-city":{status:"updated",log:["Change `CityRegistry.getByTile` to return `City` instead of `City[]`."]},"core-civilization":{status:"updated",log:["Update to use `DataObject.sourceClass()` for `TraitRegistry` interactions.","Update to use injectable random number generator instead of hard-coded `Math.random`.","Add `getBySubclass` to `TraitRegistry`."]},"core-data-object":{status:"updated",log:["Add `sourceClass()` method to auto cast to `IConstructor`.","Bump dependencies.","Update `DataObject.sourceClass()` type annotations after usage."]},"core-game-year":{status:"updated",log:["Simpliy `Rule`s."]},"core-goody-hut":{status:"updated",log:["Simpliy `Rule`s."]},"core-government":{status:"updated",log:["Simpliy `Rule`s."]},"core-player-world":{status:"updated",log:["Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Fix bug with `PlayerTile.update`.","Allow defined properties to remain `configurable` when (for example) a `City` is built on an already known `Tile`."]},"core-player":{status:"updated",log:["Add `Player` as an argument to `PlayerAction`s.","Make `PlayerAction`s generic to make using `PlayerAction.value()` easier.","Add `Defeated` `Rule`.","Fix typo in filename."]},"core-registry":{status:"updated",log:["Add .deepsource.toml","Improve TypeScript bindings on `Registry.getBy` to hint at properties to search for.","Bump dependencies."]},"core-rule":{status:"updated",log:["Using generics in a better way to provide better hints to arguments for `RuleRegistry.process`.","Refine typings further for `RuleRegistry`."]},"core-science":{status:"updated",log:["Simpliy `Rule`s."]},"core-terrain-feature":{status:"updated",log:["Simpliy `Rule`s.","Replace `Math.random` with injectable generator.","Add a caching layer for `TerrainFeatureRegistry.getByTerrain`. This sped up the map generation and start `Tile` sorting by a considerable amount."]},"core-terrain":{status:"updated",log:["Simpliy `Rule`s."]},"core-tile-improvement":{status:"updated",log:["Simpliy `Rule`s."]},"core-treasury":{status:"updated",log:["Simplify `Rule`s.","Change how `PlayerTreasury.cost` works with updated `Rule`s.","Ensure an empty `Yield` is passed in to the `Cost` `Rule`s in `PlayerTreasury`."]},"core-turn-based-game":{status:"updated",log:["Simpliy `Rule`s.","Amend `Turn` to no longer inherit from `Yield`.","Ensure instances are able to be passed in for events and `Rule`s.","Repo cleansing.","Ensure `Turn` extends `DataObject` and includes the `value`."]},"core-unit-transport":{status:"updated",log:["Update `Transport` to include a mixin mechanism for extending existing classes, reducing repetition for `Transport` `Unit`s of different types.","Add `Stowed` and `Unloaded` `Rule`s.","Add tests.","Bump dependencies."]},"core-unit":{status:"updated",log:["Include the `Action` in `Defeated` `Rule`s so when a `Unit` in a `City` is `Destroyed` it's easy enough to work out if it was a defender.","Add `Unsupported` `Rule`.","Bump depenedencies.","Update typings."]},"core-wonder":{status:"updated",log:["Add `WonderRegistry.getByPlayer`.","Fix `WonderRegistry.getByPlayer`."]},"core-world":{status:"updated",log:["Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Ensure `RuleRegistry` is passed into `World`s constructor, instead of when used by `build`."]},"core-yield":{status:"updated",log:["Add `NegativeYield` as a convenience object for costs."]},"simple-ai-client":{status:"updated",log:["Update dependencies and fix tests."]},"simple-world-generator":{status:"updated",log:["Ensure `TerrainFeatureRegistry` is passed in to `simpleRLELoader`.","Replace `Math.random` calls with injectable random number generator."]}}},{version:"0.1.0@7df4e13",date:"2022-04-07T20:46:58.000Z",localChanges:["Add messaging for unsupported `Unit`s, `City` size decreases, etc."],externalChanges:{"base-city-yield-corruption":{status:"added",log:["Initial commit","Make class extend `Trade` `Yield` and store the value negated."]},"civ1-city-improvement":{status:"updated",log:["Add `Corruption` `Yield` and `Effect`s of `Palace` and `Courthouse`.","Ensure `Palace` is destroyed when a `City` is captured."]},"civ1-city":{status:"updated",log:["Process `Unit` and population support (`Food` and `Production`)."]},"civ1-trade-rate":{status:"updated",log:["Implement `Corruption` `Effect`s."]},"civ1-treasury":{status:"updated",log:["Handle running out of `Gold` in the treasury by selling the maintained `CityImprovement` that would deplete it."]}}},{version:"0.1.0@deeed3f",date:"2022-04-06T20:36:41.000Z",localChanges:["Implement `GamePortal` to begin to remove the inline code from `renderer.ts`.","Replace TypeScript generated modules with an ESBuild bundle.","Beginnings of work to separate the view code from the `ElectronClient` package."],externalChanges:{}},{version:"0.1.0@1d0e3e5",date:"2022-04-04T21:04:11.000Z",localChanges:["Add confirmation dialog when quitting.","Re-enable map cheat.","Add a fudge for `ReassignWorkers` action.","Work on having `SelectionWindow`s automatically sized to fit available options.","Allow `Escape` to return focus to the map when `Action`s are selected.",'Fix occasional bug with `TradeRates` sliders "not adding up to 1".',"Show how many turns the `CityBuild` item will take.","Consolidate the `Yield`s shown in `City` view and show a breakdown with the providers for further inspection.","Allow positioning adjustments in `Map`s.","Adjust position of `Shield`s and the `City` tile.","Sort the `Yield`s when displayed in a `Map`.","Fix the `visibleRange` behaviour in the `Portal`.","Show `Tile` info (`Terrain`, `Feature`s, `Improvement`s) in `UnitDetails`.","Refactor `ActiveUnit` handling - still some work to do here when activating another unit.","Implement `w`ait key functionality.","Display `Unit` `Busy` status.","Fix bug where the `Minimap` wasn't updating in some circumstances."],externalChanges:{"base-city-yield-city-improvement-maintenance-gold":{status:"added",log:["Initial commit","Make class extend `Gold` `Yield` and store the value negated."]},"base-city-yield-population-support-food":{status:"added",log:["Initial commit","Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-unit-support-food":{status:"added",log:["Initial commit","Make class extend `Food` `Yield` and store the value negated."]},"base-city-yield-unit-support-production":{status:"added",log:["Initial commit","Make class extend `Production` `Yield` and store the value negated."]},"civ1-city-happiness":{status:"updated",log:["Update to use new `Yield` mechanism. Actually, it was in part due to this module that the mechanism changed...","Fix a bug where `CivilDisorder` effects were applied even if the `City` wasn't in civil disorder.","Remove `CivilDisorder` `Yield` effects and move those to the respective `civ-`... modules."]},"civ1-city-improvement":{status:"updated",log:["Update method of processing `Yield`s.","Add requirements for a `Factory` to be built before a `PowerPlant` can be built.","Ensure only one type of `PowerPlant` can exist within a `City`.","Add missing `Yield` and `YieldModifier` `Rule`s."]},"civ1-city":{status:"updated",log:["Fix bug where `Unit`s weren't destroyed when their supporting `City` was destroyed.","Rework `ProcessYield` `Rule`s to utilise new ...`Support` `Yield`s.","Remove `Rule` that empties the `FoodStorage` on shrink.","Add `Unit` `Defeated` `Rule` to handle a `City` being destroyed instead of captured.","Use updated `Yield` `Rule`s.","Slight tweak to how `Yield`s are weighted.","Update handling not adding `Production` when `City` is in `CivilDisorder`."]},"civ1-goody-hut":{status:"updated",log:["Updates to `Yield` weights."]},"civ1-player":{status:"updated",log:["Add restrictions on the types of `Terrain`s that can be start squares.","Ensure `Tile` `Yield` cache is cleared each time visibility is changed.","Update to `Yield` weights."]},"civ1-science":{status:"updated",log:["Fix a bug where if there are no `Advance`s available to research (or fewer than the number of granted `Advance`s will be) it'll grant as many are available.","Update handling not adding `Research` when `City` is in `CivilDisorder`."]},"civ1-trade-rate":{status:"updated",log:["Simplify `Yield` `Rule`s."]},"civ1-treasury":{status:"updated",log:["Use updated `Yield` mechanism.","Update handling not adding `Gold` when `City` is in `CivilDisorder`."]},"civ1-unit":{status:"updated",log:["Fix bug where units could retry a failed move over and over.","Made it more likely that your `Move` would succeed (>50% of `Move`s means it'll work - in-line with Civ)."]},"civ1-world":{status:"updated",log:["Update `Yield` mechanism.","Fix a few `Tile` `Yield`s."]},"core-city-happiness":{status:"updated",log:[]},"core-city":{status:"updated",log:["Rework `Yield` `Rule`s to return `Yield`s rather than expecting `Yield` constructors to be provided."]},"core-player-world":{status:"updated",log:["Updates to `Yield` mechanism."]},"core-world":{status:"updated",log:["Update `Yield` mechanism for `Tile`s.","Fix bug where all `Tile`s were rated as `0` since the changes to `Yield`s."]},"core-yield":{status:"updated",log:["Add `reduceYields` utility function."]}}},{version:"0.1.0@1e05c11",date:"2022-03-23T22:18:44.000Z",localChanges:["Updates to utilise `PlayerTile`s.","Update styling for `AdjutstTradeRates` and `Revolution` `PlayerAction`s.","Fix `Actions` `keydown` event to allow selecting events with arrow keys.","Add `Unit` `Busy` indicators."],externalChanges:{"base-city-improvement-aqueduct":{status:"added",log:["Initial commit"]},"base-city-improvement-bank":{status:"added",log:["Initial commit."]},"base-city-improvement-barracks":{status:"added",log:["Initial commit"]},"base-city-improvement-cathedral":{status:"added",log:["Initial commit."]},"base-city-improvement-citywalls":{status:"added",log:["Initial commit"]},"base-city-improvement-colosseum":{status:"added",log:["Initial commit"]},"base-city-improvement-courthouse":{status:"added",log:["Initial commit"]},"base-city-improvement-factory":{status:"added",log:["Initial commit."]},"base-city-improvement-granary":{status:"added",log:["Initial commit"]},"base-city-improvement-hydroplant":{status:"added",log:["Initial commit."]},"base-city-improvement-library":{status:"added",log:["Initial commit"]},"base-city-improvement-manufacturingplant":{status:"added",log:["Initial commit."]},"base-city-improvement-marketplace":{status:"added",log:["Initial commit"]},"base-city-improvement-masstransit":{status:"added",log:["Initial commit."]},"base-city-improvement-nuclearplant":{status:"added",log:["Initial commit."]},"base-city-improvement-palace":{status:"added",log:["Initial commit"]},"base-city-improvement-powerplant":{status:"added",log:["Initial commit."]},"base-city-improvement-recyclingcenter":{status:"added",log:["Initial commit."]},"base-city-improvement-sdidefence":{status:"added",log:["Initial commit."]},"base-city-improvement-temple":{status:"added",log:["Initial commit"]},"base-city-improvement-university":{status:"added",log:["Initial commit."]},"base-city-yield-gold":{status:"added",log:["Initial commit"]},"base-city-yield-happiness":{status:"added",log:["Initial commit"]},"base-city-yield-luxuries":{status:"added",log:["Initial commit"]},"base-city-yield-research":{status:"added",log:["Initial commit"]},"base-city-yield-unhappiness":{status:"added",log:["Initial commit","Fix package name and repo URL.","Actually fix package name and repo URL..."]},"base-civilization-american":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-aztec":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-babylonian":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-chinese":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-egyptian":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-english":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-french":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-german":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-greek":{status:"added",log:["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-indian":{status:"added",log:["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-mongol":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-roman":{status:"added",log:["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-russian":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-zulu":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-diplomacy-declaration-peace":{status:"added",log:["Initial commit"]},"base-diplomacy-declaration-war":{status:"added",log:["Initial commit"]},"base-diplomacy-interaction-contact":{status:"added",log:["Initial commit"]},"base-goody-hut-advance":{status:"added",log:["Initial commit"]},"base-goody-hut-city":{status:"added",log:["Initial commit"]},"base-goody-hut-gold":{status:"added",log:["Initial commit"]},"base-goody-hut-unit":{status:"added",log:["Initial commit","Use consistent references to github repos","Bump dependencies after changing naming convention to be consistent","Add `Unit` `Rule` for determining which `Unit` is provided","Remove redundant dependency.","Update naming for imports from `core-goody-hut`.","Remove `RuleRegistry` interface for `Unit` `Rule`."]},"base-government-anarchy":{status:"added",log:["Initial commit"]},"base-government-communism":{status:"added",log:["Initial commit"]},"base-government-democracy":{status:"added",log:["Initial commit"]},"base-government-despotism":{status:"added",log:["Initial commit"]},"base-government-monarchy":{status:"added",log:["Initial commit"]},"base-government-republic":{status:"added",log:["Initial commit"]},"base-leader-trait-aggression":{status:"added",log:["Initial commit"]},"base-leader-trait-development":{status:"added",log:["Initial commit"]},"base-leader-trait-militarism":{status:"added",log:["Initial commit"]},"base-player-action-active-unit":{status:"added",log:["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-adjust-trade-rates":{status:"added",log:["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-end-turn":{status:"added",log:["Initial commit"]},"base-player-action-inactive-unit":{status:"added",log:["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-revolution":{status:"added",log:["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-science-advance-advancedflight":{status:"added",log:["Initial commit."]},"base-science-advance-alphabet":{status:"added",log:["Initial commit"]},"base-science-advance-astronomy":{status:"added",log:["Initial commit"]},"base-science-advance-atomictheory":{status:"added",log:["Initial commit."]},"base-science-advance-automobile":{status:"added",log:["Initial commit."]},"base-science-advance-banking":{status:"added",log:["Initial commit."]},"base-science-advance-bridgebuilding":{status:"added",log:["Initial commit"]},"base-science-advance-bronzeworking":{status:"added",log:["Initial commit"]},"base-science-advance-ceremonialburial":{status:"added",log:["Initial commit"]},"base-science-advance-chemistry":{status:"added",log:["Initial commit."]},"base-science-advance-chivalry":{status:"added",log:["Initial commit"]},"base-science-advance-codeoflaws":{status:"added",log:["Initial commit"]},"base-science-advance-combustion":{status:"added",log:["Initial commit."]},"base-science-advance-communism":{status:"added",log:["Initial commit."]},"base-science-advance-computers":{status:"added",log:["Initial commit."]},"base-science-advance-conscription":{status:"added",log:["Initial commit."]},"base-science-advance-construction":{status:"added",log:["Initial commit"]},"base-science-advance-corporation":{status:"added",log:["Initial commit."]},"base-science-advance-currency":{status:"added",log:["Initial commit"]},"base-science-advance-democracy":{status:"added",log:["Initial commit."]},"base-science-advance-electricity":{status:"added",log:["Initial commit."]},"base-science-advance-electronics":{status:"added",log:["Initial commit."]},"base-science-advance-engineering":{status:"added",log:["Initial commit"]},"base-science-advance-explosives":{status:"added",log:["Initial commit."]},"base-science-advance-feudalism":{status:"added",log:["Initial commit"]},"base-science-advance-flight":{status:"added",log:["Initial commit."]},"base-science-advance-fusionpower":{status:"added",log:["Initial commit."]},"base-science-advance-geneticengineering":{status:"added",log:["Initial commit."]},"base-science-advance-gunpowder":{status:"added",log:["Initial commit","Repo cleansing."]},"base-science-advance-horsebackriding":{status:"added",log:["Initial commit"]},"base-science-advance-industrialization":{status:"added",log:["Initial commit."]},"base-science-advance-invention":{status:"added",log:["Initial commit"]},"base-science-advance-ironworking":{status:"added",log:["Initial commit"]},"base-science-advance-laborunion":{status:"added",log:["Initial commit."]},"base-science-advance-literacy":{status:"added",log:["Initial commit"]},"base-science-advance-magnetism":{status:"added",log:["Initial commit."]},"base-science-advance-mapmaking":{status:"added",log:["Initial commit"]},"base-science-advance-masonry":{status:"added",log:["Initial commit"]},"base-science-advance-massproduction":{status:"added",log:["Initial commit."]},"base-science-advance-mathematics":{status:"added",log:["Initial commit"]},"base-science-advance-medicine":{status:"added",log:["Initial commit."]},"base-science-advance-metallurgy":{status:"added",log:["Initial commit."]},"base-science-advance-monarchy":{status:"added",log:["Initial commit"]},"base-science-advance-mysticism":{status:"added",log:["Initial commit"]},"base-science-advance-navigation":{status:"added",log:["Initial commit"]},"base-science-advance-nuclearfission":{status:"added",log:["Initial commit."]},"base-science-advance-nuclearpower":{status:"added",log:["Initial commit."]},"base-science-advance-philosophy":{status:"added",log:["Initial commit."]},"base-science-advance-physics":{status:"added",log:["Initial commit."]},"base-science-advance-plastics":{status:"added",log:["Initial commit."]},"base-science-advance-pottery":{status:"added",log:["Initial commit"]},"base-science-advance-railroad":{status:"added",log:["Initial commit."]},"base-science-advance-recycling":{status:"added",log:["Initial commit."]},"base-science-advance-refining":{status:"added",log:["Initial commit."]},"base-science-advance-religion":{status:"added",log:["Initial commit."]},"base-science-advance-robotics":{status:"added",log:["Initial commit."]},"base-science-advance-rocketry":{status:"added",log:["Initial commit."]},"base-science-advance-spaceflight":{status:"added",log:["Initial commit."]},"base-science-advance-steamengine":{status:"added",log:["Initial commit."]},"base-science-advance-steel":{status:"added",log:["Initial commit."]},"base-science-advance-superconductor":{status:"added",log:["Initial commit."]},"base-science-advance-theoryofgravity":{status:"added",log:["Initial commit."]},"base-science-advance-therepublic":{status:"added",log:["Initial commit"]},"base-science-advance-thewheel":{status:"added",log:["Initial commit"]},"base-science-advance-trade":{status:"added",log:["Initial commit."]},"base-science-advance-university":{status:"added",log:["Initial commit."]},"base-science-advance-writing":{status:"added",log:["Initial commit"]},"base-terrain-arctic":{status:"added",log:["Initial commit"]},"base-terrain-desert":{status:"added",log:["Initial commit"]},"base-terrain-feature-coal":{status:"added",log:["Initial commit"]},"base-terrain-feature-fish":{status:"added",log:["Initial commit"]},"base-terrain-feature-game":{status:"added",log:["Initial commit"]},"base-terrain-feature-gems":{status:"added",log:["Initial commit"]},"base-terrain-feature-gold":{status:"added",log:["Initial commit"]},"base-terrain-feature-horse":{status:"added",log:["Initial commit"]},"base-terrain-feature-oasis":{status:"added",log:["Initial commit"]},"base-terrain-feature-oil":{status:"added",log:["Initial commit"]},"base-terrain-feature-seal":{status:"added",log:["Initial commit"]},"base-terrain-feature-shield":{status:"added",log:["Initial commit"]},"base-terrain-forest":{status:"added",log:["Initial commit"]},"base-terrain-grassland":{status:"added",log:["Initial commit"]},"base-terrain-hills":{status:"added",log:["Initial commit"]},"base-terrain-jungle":{status:"added",log:["Initial commit"]},"base-terrain-mountains":{status:"added",log:["Initial commit"]},"base-terrain-ocean":{status:"added",log:["Initial commit"]},"base-terrain-plains":{status:"added",log:["Initial commit"]},"base-terrain-river":{status:"added",log:["Initial commit"]},"base-terrain-swamp":{status:"added",log:["Initial commit"]},"base-terrain-tundra":{status:"added",log:["Initial commit"]},"base-terrain-yield-food":{status:"added",log:["Initial commit"]},"base-terrain-yield-production":{status:"added",log:["Initial commit"]},"base-terrain-yield-trade":{status:"added",log:["Initial commit"]},"base-tile-improvement-irrigation":{status:"added",log:["Initial commit"]},"base-tile-improvement-mine":{status:"added",log:["Initial commit"]},"base-tile-improvement-pollution":{status:"added",log:["Initial commit"]},"base-tile-improvement-railroad":{status:"added",log:["Initial commit"]},"base-tile-improvement-road":{status:"added",log:["Initial commit"]},"base-trade-rate-luxuries":{status:"added",log:["Initial commit"]},"base-trade-rate-research":{status:"added",log:["Initial commit"]},"base-trade-rate-tax":{status:"added",log:["Initial commit"]},"base-unit-action-attack":{status:"added",log:["Initial commit","Reduce `Attack` when `moves` is < 1.","Reduce `moves` when attacking.","Pass the `Attack` instance to the `Defeated` `Rule` so it can be determined if a `Unit` in a `City` was a defender or not.","Remove `RuleRegistry` interface usage for `Defeated` `Rule`.","Move `unitRegistry` into the `Attack` constructor.","Replace usages of `Math.random` with a testable injected dependency."]},"base-unit-action-build-irrigation":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-mine":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-railroad":{status:"added",log:["Initial commit.","Add custom `Busy` `Rule`.","Somehow broke 0.1.1 (and now deleted 0.1.0 too, oops!).","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-road":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-capture-city":{status:"added",log:["Initial commit","Rework constructor to accept the target `City`."]},"base-unit-action-clear-forest":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-jungle":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-swamp":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-disembark":{status:"added",log:["Initial commit","Rework constructor to accept the target `ITransport`."]},"base-unit-action-embark":{status:"added",log:["Initial commit","Update `Move` dependency","Rework constructor to accept the target `ITransport`.","Remove `RuleRegistry` interface usage for `Moved` `Rule`s."]},"base-unit-action-fortify":{status:"added",log:["Initial commit","Add `UnitImprovementRegistry` via constructor and use updated `DelayedAction` constructor.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-found-city":{status:"added",log:["Initial commit","Ensure `CityNameRegistry` is used for `City` names.","Ensure local `RuleRegistry` is passed on to `City` constructor.","Repo cleansing."]},"base-unit-action-move":{status:"added",log:["Initial commit","Extract `movementCost` and `validate` functions into members.","Remove `RuleRegistry` interface usage for `Moved`, `MovementCost` and `ValidateMove` `Rule`s."]},"base-unit-action-no-orders":{status:"added",log:["Initial commit"]},"base-unit-action-pillage":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-plant-forest":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-sleep":{status:"added",log:["Initial commit","Update to latest `DelayedAction` version and add wake condition to `Busy`","Ensure `Unit` `visibility` is used to check when to wake after `Sleep`ing.","Add labelled `Busy` `Rule` (`Sleeping`) to indicate the action being performed.","Repo cleansing."]},"base-unit-action-unload":{status:"added",log:["Initial commit","Ensure `cargo` is correctly reset with required number of moves when `Unload`ing."]},"base-unit-artillery":{status:"added",log:["Initial commit."]},"base-unit-battleship":{status:"added",log:["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-bomber":{status:"added",log:["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-cannon":{status:"added",log:["Initial commit."]},"base-unit-caravan":{status:"added",log:["Initial commit."]},"base-unit-carrier":{status:"added",log:["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-catapult":{status:"added",log:["Initial commit"]},"base-unit-chariot":{status:"added",log:["Initial commit"]},"base-unit-cruiser":{status:"added",log:["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-diplomat":{status:"added",log:["Initial commit."]},"base-unit-fighter":{status:"added",log:["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-frigate":{status:"added",log:["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-horseman":{status:"added",log:["Initial commit"]},"base-unit-improvement-fortified":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone"]},"base-unit-improvement-veteran":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone"]},"base-unit-ironclad":{status:"added",log:["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-knight":{status:"added",log:["Initial commit"]},"base-unit-mechanizedinfanty":{status:"added",log:["Initial commit.","Oops! Mass rename from `MechanizedInfanty` to `MechanizedInfantry`..."]},"base-unit-mechanizedinfantry":{status:"added",log:["Initial commit.","Oops! Mass rename from `MechanizedInfanty` to `MechanizedInfantry`..."]},"base-unit-musketman":{status:"added",log:["Initial commit","Repo cleansing."]},"base-unit-nuclear":{status:"added",log:["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-rifleman":{status:"added",log:["Initial commit."]},"base-unit-sail":{status:"added",log:["Initial commit"]},"base-unit-settlers":{status:"added",log:["Initial commit"]},"base-unit-spearman":{status:"added",log:["Initial commit"]},"base-unit-submarine":{status:"added",log:["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-swordman":{status:"added",log:["Initial commit"]},"base-unit-tank":{status:"added",log:["Initial commit."]},"base-unit-transport":{status:"added",log:["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-trireme":{status:"added",log:["Initial commit"]},"base-unit-type-air":{status:"added",log:["Initial commit."]},"base-unit-type-fortifiable":{status:"added",log:["Initial commit"]},"base-unit-type-land":{status:"added",log:["Initial commit"]},"base-unit-type-naval-transport":{status:"added",log:["Initial commit","Ensure type safety when using `this` to refer to `ITransport`.","Update to use latest `core-unit-transport` changes."]},"base-unit-type-naval":{status:"added",log:["Initial commit"]},"base-unit-type-worker":{status:"added",log:["Initial commit"]},"base-unit-warrior":{status:"added",log:["Initial commit"]},"base-wonder-apolloprogram":{status:"added",log:["Initial commit."]},"base-wonder-colossus":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-copernicus-observatory":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-cureforcancer":{status:"added",log:["Initial commit."]},"base-wonder-darwinsvoyage":{status:"added",log:["Initial commit."]},"base-wonder-great-library":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-great-wall":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-hanging-gardens":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-hooverdam":{status:"added",log:["Initial commit."]},"base-wonder-isaacnewtonscollege":{status:"added",log:["Initial commit."]},"base-wonder-jsbachscathedral":{status:"added",log:["Initial commit."]},"base-wonder-lighthouse":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-magellans-expedition":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-manhattanproject":{status:"added",log:["Initial commit."]},"base-wonder-michelangeloschapel":{status:"added",log:["Initial commit."]},"base-wonder-oracle":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-pyramids":{status:"added",log:["Initial commit"]},"base-wonder-setiprogram":{status:"added",log:["Initial commit."]},"base-wonder-shakespearestheatre":{status:"added",log:["Initial commit."]},"base-wonder-unitednations":{status:"added",log:["Initial commit."]},"base-wonder-womenssuffrage":{status:"added",log:["Initial commit."]},"civ1-city-happiness":{status:"updated",log:["Add effect for `Cololsseum` and `Cathedral`.","Add military wariness to `Republic` and `Democracy` governments.","Fix values for `Colosseum` and `Cathedral`.","Attempt to fix perpetual `CivilDisorder` and `Production` causing `Unit`s to become unsupported.","Fixed bug where `CivilDisorder` effects were active any time there was any `Unhappiness`."]},"civ1-city-improvement":{status:"updated",log:["Add missing `CityImprovement`s.","Update to use new `CityBuild` mechanism.","Fix tests.","Add `Yield` modifiers for `Factory` etc."]},"civ1-city":{status:"updated",log:["Update `Captured` event to include both previous owner and capturing player.","Move `Captured` event to `Player` to handle `player:defeated` events.","Updates to allow setting `YieldRegistry` in `setUpCity`."]},"civ1-government":{status:"updated",log:["Utilise `AvailableGovernmentsRegistry` and separate `Revolution` `PlayerAction` (although TODO, change that to the request and a random delay for the `ChooseGovernment` `MandatoryAction`).","Update `GovernmentChanged` `Rule` to be compatible with `PlayerTile`s."]},"civ1-player":{status:"updated",log:["Allow async `Client` methods (`chooseCivilization`, `chooseLeader`)","Fix `player:defeated` conditions.","Incorporate `Captured` events from `City` `Captured` events."]},"civ1-science":{status:"updated",log:["Updates to randomly start with some `Advance`s.","Acquire `Advance`s when capturing an advance enemey `City`."]},"civ1-trade-rate":{status:"updated",log:["Add `AdjustTradeRates` `PlayerAction`."]},"civ1-unit":{status:"updated",log:["Correct misspelled `MechanizedInfantry`.","Update to use new `CityBuild` mechanism.","Fix tests","Add `BuildRailroad`.","Fix movement costs."]},"civ1-wonder":{status:"updated",log:["Add missing `Wonder`s.","Utilise new `CityBuild` mechanism for registering.","Fix missing cost for `DarwinsVoyage`.","Add effects for `MichelangelosChapel` and `WomensSuffrage`.","Add `Obsoletion` `Rule` to notify `Wonder` owners for obsolesence.","Move `Yield` `Rule`s to `Cost` `Rule`s to enable accurate processing."]},"civ1-world":{status:"updated",log:["Updating world generator values to generate maps closer to those from the original Civilization. More work still to do here.","Fix bug with incorrect `Yield`s for `Plains` with `Horse`.","Enable `Railroad` construction.","Fix bug where `Irrigation` and `Mine` could both exist on the same `Tile`.","Add `Railroad` `Yield` modifier.","Add updated `Tile` yields for other governments."]},"core-ai-client":{status:"added",log:["Initial commit","Add missing `instance` to `AIClientRegistry` and allow `LeaderRegistry` instance to be passed in.","Replace usages of `Math.random` with a testable injected dependency."]},"core-city-build":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone","Make `CityBuild`s extend `DataObject`s for exposing data to `Client`s.","Add `City` to exported fields from `DataObject#toPlainObject`.","Add `ChangeProduction` `PlayerAction` when a `City` is already building something.",'Fix path reference from relative to "absolute" via `@civ-clone`.',"Update `CityBuild#available` mechanism to show resource costs for items.","Add `Buildable` class that `Unit`s and `CityImprovement`s inherit from.","Change logic to pave the way for alternative costs associated to `Buildable` items.","Update to use `PlayerAction` generics and fix return type of `Buildable`.","Simpliy `Rule`s.","Make `AvailableCityBuildItemsRegistry` more flexible.","Re-work entities and interfaces to avoid having to forcibly cast everything."]},"core-city-growth":{status:"added",log:["Initial commit","Fix missing `CityGrowth` `AdditionalData` from `City`s.","Add `CityGrowth` object as an argument to `FoodExhasted` `Rule` instead of `City`.","Fix tests.","Update `README.md`.","Update dependencies.","Repo cleansing."]},"core-city-happiness":{status:"added",log:["Initial commit","Simpliy `Rule`s.","Repo cleansing."]},"core-city-improvement":{status:"added",log:["Initial commit","Make `CityImprovement`s extend `DataObject`.","Update to use new `Buildable` class from core-city-build.","Remove `Player` as a constructor argument since this is available (and more likely reliable) via `City` instead.","Track `destroyed` status rather than unregister the `CityImprovement`."]},"core-city":{status:"added",log:["Initial commit","Add `cities` `AdditionalData` to `Player`s.","Add `player` to data transfer information and add `city` `AdditionalData` to `Tile`s.","Add missing fields to be exported via `DataObject#toPlainObject`.","Update `Captured` `Rule` so that the previous owner and the capturing owner are explicitly provided.","Allow `YieldRegistry` to be supplied on construct or runtime (`.yields`).","Update `yields` to process `Yield` then `Cost` `Rule`s, fixing some bugs.","Rework `Yield` `Rule`s to return `Yield`s rather than expecting `Yield` constructors to be provided.","Change `CityRegistry.getByTile` to return `City` instead of `City[]`.","Repo cleansing.","Track `destroyed` status rather than unregister the `City`."]},"core-civ-client":{status:"added",log:["Initial commit"]},"core-civilization":{status:"added",log:["Initial commit","Update `Leader`s to be `DataObject`s.","Update to use `DataObject.sourceClass()` for `TraitRegistry` interactions.","Update to use injectable random number generator instead of hard-coded `Math.random`.","Add `getBySubclass` to `TraitRegistry`."]},"core-client":{status:"added",log:["Initial commit"]},"core-data-object":{status:"added",log:["Initial commit","Add `id` to `DataObject`s to allow easy referencing from within `Client`s.","Allow `AdditionalData` to be applied to child classes.","Change `DataObject`s to allow recursive data to be stored.","Include `reconstitueData` as a core lib to be used in other packages.","Add `Entity` and `EntityInstance` types for use in other packages.","Remove `ulid` and replace with simpler ID generation.","Merge pull request #1 from civ-clone/remove-ulid","Remove `ulid` and replace with simpler ID generation.","Add `toPlainObject` filter to allow masking of unknown objects (enemy `Player`s, `Unit`s etc.)","Perform `filter`ing on all objects, rather than only `DataObject`s. This also means we can return something other than a `DataObject`.","Add `sourceClass()` method to auto cast to `IConstructor`.","Bump dependencies.","Update `DataObject.sourceClass()` type annotations after usage.","Ensure `id` is included in `IDataObject` so that `keys` for both `DataObject` and `IDataObject` return the same thing.","Make `IDataObject` interface more flexible."]},"core-diplomacy":{status:"added",log:["Initial commit"]},"core-engine":{status:"added",log:["Initial commit","Add `@types/glob` as a direct dependency for dependent packages.","Prevent `Start` `Rule`s from being processed directly. Might rever this later...","Remove reliance on `node` so that a browser can be used instead."]},"core-game-year":{status:"added",log:["Initial commit","Make `Year` extend `DataObject`.","Simpliy `Rule`s."]},"core-goody-hut":{status:"added",log:["Initial commit","Add `Distribution` `Rule` for controlling placement of huts within `World`s.","Correct arguments for `Distribution` `Rule`.","Add `goodyHut` `AdditionalData` to `Tile`s.","Ensure `GoodyHut`s extend `DataObject`s.","Simpliy `Rule`s."]},"core-government":{status:"added",log:["Initial commit","Provide `available` `Government`s with the `PlayerGovernment` instance.","Remove `Revolution`. Move to its own package.","Need to call `super(Government)` in `ConstructorRegistry` constructor.","Simpliy `Rule`s."]},"core-player-world":{status:"added",log:["Initial commit","Expose `PlayerWorld`s against the relevant `Player`.","Add missing compiled assets","Bump `core-world` version","Add `VisibilityChanged` `Rule`, triggered when new `Tile`s are registered.","Refactor `PlayerWorld` to store `PlayerTile`s to allow the world changes to be hidden from players (like in the original game).","Updates to `Yield` mechanism.","Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Fix bug with `PlayerTile.update`.","Allow defined properties to remain `configurable` when (for example) a `City` is built on an already known `Tile`."]},"core-player":{status:"added",log:["Initial commit","Add `HiddenPlayerAction` and rename `PlayerAction`-related methods.","Update returned `DataObject` data.","Add `Player` as an argument to `PlayerAction`s.","Make `PlayerAction`s generic to make using `PlayerAction.value()` easier.","Add `Defeated` `Rule`.","Fix typo in filename.","Add `Spawn` `Rule` to control what happens when a `Player` is spawned into the game."]},"core-registry":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone","Add .deepsource.toml","Improve TypeScript bindings on `Registry.getBy` to hint at properties to search for.","Bump dependencies."]},"core-rule":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone","Add `enable`/`disable`/`enabled` methods to `Rule`s.","Add `Ruleset`s to enable/disable sets of `Rule`s, this will be useful when these can be managed via a UI.","Allow `RuleRegistry` cache to be cleared externally.","Using generics in a better way to provide better hints to arguments for `RuleRegistry.process`.","Refine typings further for `RuleRegistry`."]},"core-science":{status:"added",log:["Initial commit","Add `research` `AdditionalData` to `Player`s.","Make `PlayerResearch` extend `DataObject`.","Ensure `Advance` extends `DataObject` and type issue in `PlayerResearch`.","Simpliy `Rule`s."]},"core-terrain-feature":{status:"added",log:["Initial commit","Simpliy `Rule`s.","Replace `Math.random` with injectable generator.","Add a caching layer for `TerrainFeatureRegistry.getByTerrain`. This sped up the map generation and start `Tile` sorting by a considerable amount."]},"core-terrain":{status:"added",log:["Initial commit","Remove unused `Rule`s.","Simpliy `Rule`s."]},"core-tile-improvement":{status:"added",log:["Initial commit","Ensure `TileImprovement`s extend `DataObject`.","Simpliy `Rule`s."]},"core-trade-rate":{status:"added",log:["Initial commit","Make `PlayerTradeRates` extend `DataObject` and add `rates` `AdditionalData` to `Player`.","Add convenience method `PlayerTradeRates#setAll` to offload the `balance` functionality to the frontend.","Repo cleansing."]},"core-treasury":{status:"added",log:["Initial commit","Add `terasury` `AdditionalData` to `Player`s.","Simplify `Rule`s.","Change how `PlayerTreasury.cost` works with updated `Rule`s.","Ensure an empty `Yield` is passed in to the `Cost` `Rule`s in `PlayerTreasury`."]},"core-turn-based-game":{status:"added",log:["Initial commit","Add `engine:start` event handler.","Add missing events to trigger `Rule`s.","Simpliy `Rule`s.","Amend `Turn` to no longer inherit from `Yield`.","Ensure instances are able to be passed in for events and `Rule`s.","Repo cleansing.","Ensure `Turn` extends `DataObject` and includes the `value`.","Ensure return types match for TypeScript compiler."]},"core-unit-improvement":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone","Ensure `UnitImprovement`s are `DataObject`s."]},"core-unit-transport":{status:"added",log:["Initial commit","Update `Transport` to include a mixin mechanism for extending existing classes, reducing repetition for `Transport` `Unit`s of different types.","Add `Stowed` and `Unloaded` `Rule`s.","Add tests.","Bump dependencies.","Ensure `Base` is `typeof Unit` so that it includes the static methods required by `IBuildable`."]},"core-unit":{status:"added",log:["Initial commit","Fix bug in `Yield` `Rule` type","Update `DelayedAction` to have `Turn` passed into the constructor.","Add `units` `AdditionalData` to `Player`s.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Update to add `status` property to capture the current action being performed (if any) and add in `player` and `visibility` keys for data transfer.","Add `units` `AdditionalData` to `Tile`s.","Updates to call `Created` `Rule`s after setting the keys.","Add `City#units` `AdditionalData`.","Update to use new `Buildable` class from core-city-build.","Trigger `Moved` after a `DelayedAction` has completed.","Ensure `Moved` `Rule`s are triggered at the end of the `DelayedAction` too.","Allow custom `Busy` `Rule`s to be supplied to `DelayedAction`s.","Include the `Action` in `Defeated` `Rule`s so when a `Unit` in a `City` is `Destroyed` it's easy enough to work out if it was a defender.","Add `Unsupported` `Rule`.","Bump depenedencies.","Update typings.","Track `destroyed` status rather than unregister the `Unit`."]},"core-wonder":{status:"added",log:["Initial commit","Add missing `instance` to `WonderRegistry`","Add `getByCity` method to `WonderRegistry`","Add event to trigger when `Wonder`s are obsoleted.","Add `WonderRegistry.getByPlayer`.","Fix `WonderRegistry.getByPlayer`."]},"core-world-generator":{status:"added",log:["Initial commit","Ensure `Generator#generate` returns a `Promise`.","Add utilities to help when map data is used elsewhere.","Add `PickGenerator` (to choose the `Generator` to build the `World` map) and `PickStartTile` (to choose the starting `Tile`s for the `Player`) `Rule`s."]},"core-world-path":{status:"added",log:["Initial commit"]},"core-world":{status:"added",log:["Initial commit","Ensure `undefined` is never added to a `Yield`.","Fix caching issue when `Yield`s get modified after caching.","Fix a bug when `Tile` `Yield`s exist for which weights are not provided.","Convert `World` from a `Registry` to a `DataObject` to allow `height` and `width` to be passed to the `Client`.","Ensure `World#build` handles async `Generator#generate`.","Have `World#build` return `Promise<World>` to help with tests in other packages.","Update `Yield` mechanism for `Tile`s.","Fix bug where all `Tile`s were rated as `0` since the changes to `Yield`s.","Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Ensure `RuleRegistry` is passed into `World`s constructor, instead of when used by `build`."]},"core-yield":{status:"added",log:["Initial commit","Ensure `YieldValue` extends `DataObject`.","Remove `YieldValue` value object, the high usage combined with `ulid` from `DataObject` was causing slowdowns and didn't need to be a `DataObject` at all.","Add `reduceYields` utility function.","Add `NegativeYield` as a convenience object for costs."]},"simple-ai-client":{status:"updated",log:["Add methods for catching when `City`s or `Unit`s are captured or defeated.","Fix the test suite.","Fix `SimpleAIClient` to use the new `CityBuild` mechanism.","Updates to utilise updated `PlayerWorld`."]},"simple-world-generator":{status:"updated",log:["Changes to world generation to be closer to the original Civilization.","Fix `simpleRLELoader` to be async."]}}},{version:"0.1.0@8347999",date:"2022-03-20T21:08:10.000Z",localChanges:["Add new cheat (`ModifyUnit`).","Fix `unit:defeated` event.","Add listeners for `city:grow` and `city:shrink`.","Fix `player:defeated` listener.","Allow activating other `ActiveUnit`s.","Refactor city builds to use new `BuildItem` mechanism.","Add basics of `Revolution` handling (WIP).","Add basics of trade rate adjustment (WIP).","Add `Railroad` to be rendered.","Oprhan data cleanup fix attempt - no change."],externalChanges:{}},{version:"0.1.0@be27348",date:"2022-03-13T21:52:17.000Z",localChanges:["Major update collection","","Fix number of players selector.","Allow activating `InactiveUnit`s.","More `DataTransfer` optimisations.","Refactor `Portal` im preparation for making the map area self-contained.","Add `View city` and `Show on map` to `CityBuild` `PlayerAction`s.","Add `ConfirmationWindow`.","Fix map rendering bug on wraps."],externalChanges:{}},{version:"0.1.0@cb8e514",date:"2022-03-06T20:32:00.000Z",localChanges:["Allow selecting player `Civilization` and `Leader` (if there is more than one available)"],externalChanges:{"base-science-advance-advancedflight":{status:"added",log:["Initial commit."]},"base-science-advance-atomictheory":{status:"added",log:["Initial commit."]},"base-science-advance-automobile":{status:"added",log:["Initial commit."]},"base-science-advance-banking":{status:"added",log:["Initial commit."]},"base-science-advance-chemistry":{status:"added",log:["Initial commit."]},"base-science-advance-combustion":{status:"added",log:["Initial commit."]},"base-science-advance-communism":{status:"added",log:["Initial commit."]},"base-science-advance-computers":{status:"added",log:["Initial commit."]},"base-science-advance-conscription":{status:"added",log:["Initial commit."]},"base-science-advance-corporation":{status:"added",log:["Initial commit."]},"base-science-advance-democracy":{status:"added",log:["Initial commit."]},"base-science-advance-electricity":{status:"added",log:["Initial commit."]},"base-science-advance-electronics":{status:"added",log:["Initial commit."]},"base-science-advance-explosives":{status:"added",log:["Initial commit."]},"base-science-advance-flight":{status:"added",log:["Initial commit."]},"base-science-advance-fusionpower":{status:"added",log:["Initial commit."]},"base-science-advance-geneticengineering":{status:"added",log:["Initial commit."]},"base-science-advance-industrialization":{status:"added",log:["Initial commit."]},"base-science-advance-laborunion":{status:"added",log:["Initial commit."]},"base-science-advance-magnetism":{status:"added",log:["Initial commit."]},"base-science-advance-massproduction":{status:"added",log:["Initial commit."]},"base-science-advance-medicine":{status:"added",log:["Initial commit."]},"base-science-advance-metallurgy":{status:"added",log:["Initial commit."]},"base-science-advance-nuclearfission":{status:"added",log:["Initial commit."]},"base-science-advance-nuclearpower":{status:"added",log:["Initial commit."]},"base-science-advance-philosophy":{status:"added",log:["Initial commit."]},"base-science-advance-physics":{status:"added",log:["Initial commit."]},"base-science-advance-plastics":{status:"added",log:["Initial commit."]},"base-science-advance-railroad":{status:"added",log:["Initial commit."]},"base-science-advance-recycling":{status:"added",log:["Initial commit."]},"base-science-advance-refining":{status:"added",log:["Initial commit."]},"base-science-advance-religion":{status:"added",log:["Initial commit."]},"base-science-advance-robotics":{status:"added",log:["Initial commit."]},"base-science-advance-rocketry":{status:"added",log:["Initial commit."]},"base-science-advance-spaceflight":{status:"added",log:["Initial commit."]},"base-science-advance-steamengine":{status:"added",log:["Initial commit."]},"base-science-advance-steel":{status:"added",log:["Initial commit."]},"base-science-advance-superconductor":{status:"added",log:["Initial commit."]},"base-science-advance-theoryofgravity":{status:"added",log:["Initial commit."]},"base-science-advance-trade":{status:"added",log:["Initial commit."]},"base-science-advance-university":{status:"added",log:["Initial commit."]},"base-unit-artillery":{status:"added",log:["Initial commit."]},"base-unit-battleship":{status:"added",log:["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-bomber":{status:"added",log:["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-cannon":{status:"added",log:["Initial commit."]},"base-unit-caravan":{status:"added",log:["Initial commit."]},"base-unit-carrier":{status:"added",log:["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-cruiser":{status:"added",log:["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-diplomat":{status:"added",log:["Initial commit."]},"base-unit-fighter":{status:"added",log:["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-frigate":{status:"added",log:["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-ironclad":{status:"added",log:["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-mechanizedinfanty":{status:"added",log:["Initial commit.","Oops! Mass rename from `MechanizedInfanty` to `MechanizedInfantry`..."]},"base-unit-nuclear":{status:"added",log:["Initial commit.","Correctly extend `Air` - stupid automation..."]},"base-unit-rifleman":{status:"added",log:["Initial commit."]},"base-unit-submarine":{status:"added",log:["Initial commit.","Correctly extend `Naval` - stupid automation..."]},"base-unit-tank":{status:"added",log:["Initial commit."]},"base-unit-transport":{status:"added",log:["Initial commit.","Correctly extend `NavalTransport` - stupid automation..."]},"base-unit-type-air":{status:"added",log:["Initial commit."]},"civ1-city":{status:"updated",log:["Update `Capturing` `Rule` to include `capturingPlayer` as well as the previously owning `Player`.","Add `reassignWorkers` function to be called via UI."]},"civ1-goody-hut":{status:"updated",log:["Fix `FreeCity` behaviour."]},"civ1-player":{status:"updated",log:["Add `EndTurn` action after `Rule` updates.","Add `player:defeated` events based on a `Player` having no more `City`s."]},"civ1-science":{status:"updated",log:["Add remaining missing `Advance`s.","Fix incorrect prerequisites for `Railroad`."]},"civ1-treasury":{status:"updated",log:["Add `CompleteProduction` action."]},"civ1-unit":{status:"updated",log:["Add in missing `Unit`s.","Add missing `Unit`s.","Fix `ClearX` and `PlantForest` actions and give `Ocean` `MovementCost` back to enable `Embark` again."]},"core-city":{status:"added",log:["Initial commit","Add `cities` `AdditionalData` to `Player`s.","Add `player` to data transfer information and add `city` `AdditionalData` to `Tile`s.","Add missing fields to be exported via `DataObject#toPlainObject`.","Update `Captured` `Rule` so that the previous owner and the capturing owner are explicitly provided.","Allow `YieldRegistry` to be supplied on construct or runtime (`.yields`).","Update `yields` to process `Yield` then `Cost` `Rule`s, fixing some bugs.","Rework `Yield` `Rule`s to return `Yield`s rather than expecting `Yield` constructors to be provided.","Change `CityRegistry.getByTile` to return `City` instead of `City[]`.","Repo cleansing.","Track `destroyed` status rather than unregister the `City`."]},"core-rule":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone","Add `enable`/`disable`/`enabled` methods to `Rule`s.","Add `Ruleset`s to enable/disable sets of `Rule`s, this will be useful when these can be managed via a UI.","Allow `RuleRegistry` cache to be cleared externally.","Using generics in a better way to provide better hints to arguments for `RuleRegistry.process`.","Refine typings further for `RuleRegistry`."]},"core-unit":{status:"added",log:["Initial commit","Fix bug in `Yield` `Rule` type","Update `DelayedAction` to have `Turn` passed into the constructor.","Add `units` `AdditionalData` to `Player`s.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Update to add `status` property to capture the current action being performed (if any) and add in `player` and `visibility` keys for data transfer.","Add `units` `AdditionalData` to `Tile`s.","Updates to call `Created` `Rule`s after setting the keys.","Add `City#units` `AdditionalData`.","Update to use new `Buildable` class from core-city-build.","Trigger `Moved` after a `DelayedAction` has completed.","Ensure `Moved` `Rule`s are triggered at the end of the `DelayedAction` too.","Allow custom `Busy` `Rule`s to be supplied to `DelayedAction`s.","Include the `Action` in `Defeated` `Rule`s so when a `Unit` in a `City` is `Destroyed` it's easy enough to work out if it was a defender.","Add `Unsupported` `Rule`.","Bump depenedencies.","Update typings.","Track `destroyed` status rather than unregister the `Unit`."]},"simple-ai-client":{status:"updated",log:["Updates to prevent TypeScript being sad about the `catch (e)`, `reject(e)` flow.","Add `EndTurn` support."]}}},{version:"0.1.0@e6518a8",date:"2022-03-04T22:23:45.000Z",localChanges:["Add `DataObserver` to track `gamedatapatch`s and act when key components are updated.","Add number of players menu when starting up.","Use `GlobalEventHandlersEventMap` to map expected `Event` types.","Improve efficiencies in `World.get` using caching.","Fix bug in `SelectionWindow`.","Add `autoDisplay` option to `Window`."],externalChanges:{}},{version:"0.1.0@bc6a38f",date:"2022-03-01T07:21:32.000Z",localChanges:["Add cheats (`GrantAdvance` and `GrantGold`) and `CompleteProduction` action.","Make `Actions` component long-lived, instead of a new instance each time an action is performed.","Update `City` component on relevant patch data."],externalChanges:{}},{version:"0.1.0@0b4762d",date:"2022-02-27T22:04:31.000Z",localChanges:["Break `Terrain` `Map` into components.","Handle `EndTurn` `PlayerAction`.","Handle patch driven data transfer (major speedup!).","Add `Minimap` component.","Keep only 1 notification window open at a time.","Selectively update `Map` `Tile`s to speed up renderer."],externalChanges:{}},{version:"0.1.0@6fd2e87",date:"2022-02-21T21:37:07.000Z",localChanges:["Relatively major refactor:","- Add `Window` class and more keyboard shortcuts.","- Updates to `Actions` so that the current highlight is more visible and can be keyboard controlled.","- Allow minimap to be clickable.","- Hide other player details by default.","- Speed improvements for comms (still needs to be improved...)","- Probably more..."],externalChanges:{"core-data-object":{status:"updated",log:["Remove `ulid` and replace with simpler ID generation.","Merge pull request #1 from civ-clone/remove-ulid","Remove `ulid` and replace with simpler ID generation.","Add `toPlainObject` filter to allow masking of unknown objects (enemy `Player`s, `Unit`s etc.)"]}}},{version:"0.1.0@3f94a15",date:"2021-03-10T20:25:38.000Z",localChanges:["Fix `Unit` and `ActiveUnit` `Map`s to work with assets generated by `civ1-asset-extractor`.","Fix `Quit` menu item.","More investigation into incremental data updates - this needs a comprehensive strategy and should also cover enemy `Player`, `Unit` and `City`s with restricted information (a stack of enemy `Unit`s should only show the likely defender etc.)"],externalChanges:{}},{version:"0.1.0@288b2bc",date:"2021-03-08T21:29:54.000Z",localChanges:["Allow closing `NotificationWindow`s with `Escape` and prevent keys from bubbling and affecting the game.","First stab at incremental data updates - all commented out for now...","Sort `activeUnit` by if it was the last one moved, this should help the gameplay feel more like classic Civ."],externalChanges:{"base-civilization-american":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-aztec":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-babylonian":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-chinese":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-egyptian":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-english":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-french":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-german":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-greek":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-indian":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-mongol":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-roman":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-russian":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-civilization-zulu":{status:"updated",log:["Update colours used in `Attribute`s."]},"base-goody-hut-unit":{status:"updated",log:["Remove redundant dependency.","Update naming for imports from `core-goody-hut`."]},"base-unit-action-attack":{status:"updated",log:[]},"base-unit-action-unload":{status:"updated",log:["Ensure `cargo` is correctly reset with required number of moves when `Unload`ing."]},"civ1-city":{status:"updated",log:["Update `tests/lib/setUpCity` to work with updated `World`.","Fix weighting for `City#tilesWorked`.","Add `ChangeProduction` `Rule`."]},"civ1-goody-hut":{status:"updated",log:["Add `index.ts` so that `Rule`s are registered and processed.","Fix method calls and expected returns.","Add missing dependency.","Add missing `Rule`s."]},"civ1-player":{status:"updated",log:["Add `VisibilityChanged` `Rule`s."]},"civ1-unit":{status:"updated",log:["Add `Defeated` implementation to destroy `Unit`s."]},"civ1-wonder":{status:"updated",log:["Update to work with new `setUpCity` form."]},"civ1-world":{status:"updated",log:["Add `Event`s when `TileImprovement`s are `Built` or `Pillaged`.","Update `Engine` `Start` `Rule`s to meet changes to `simple-world-generator`."]},"core-city-build":{status:"updated",log:["Add `ChangeProduction` `PlayerAction` when a `City` is already building something.",'Fix path reference from relative to "absolute" via `@civ-clone`.']},"core-player-world":{status:"updated",log:["Add `VisibilityChanged` `Rule`, triggered when new `Tile`s are registered."]},"core-world":{status:"updated",log:["Have `World#build` return `Promise<World>` to help with tests in other packages."]},"core-yield":{status:"updated",log:["Ensure `YieldValue` extends `DataObject`."]},"simple-ai-client":{status:"updated",log:["Prevent infinite loop and output debug info."]}}},{version:"0.1.0@f0b649b",date:"2021-03-05T23:32:19.000Z",localChanges:["Update `README.md`."],externalChanges:{}},{version:"0.1.0@4fe8fd4",date:"2021-03-04T22:29:57.000Z",localChanges:["Break CSS into SCSS files.","Add a main menu with a background image.","Update maps to add `clear` method to empty.","Fix coast graphics.","Update `City` view to properly show map and worked tiles.","Add `Unload` support for `Transport`s."],externalChanges:{"base-player-action-end-turn":{status:"added",log:["Initial commit"]},"civ1-player":{status:"updated",log:["Move out the calculation of start tiles to a `Worker` to help prevent locking the main thread."]},"core-data-object":{status:"updated",log:["Include `reconstitueData` as a core lib to be used in other packages.","Add `Entity` and `EntityInstance` types for use in other packages."]},"core-tile-improvement":{status:"updated",log:["Ensure `TileImprovement`s extend `DataObject`."]},"core-world-generator":{status:"updated",log:["Ensure `Generator#generate` returns a `Promise`.","Add utilities to help when map data is used elsewhere."]},"core-world":{status:"updated",log:["Ensure `World#build` handles async `Generator#generate`."]},"simple-world-generator":{status:"updated",log:["Update `BaseGenerator` to use updated `Generator` interface and utilise `Promise`s for `#generate`."]}}},{version:"0.1.0@f08bea1",date:"2021-02-27T20:55:42.000Z",localChanges:["Update TODOs."],externalChanges:{}},{version:"0.1.0@5fc5bee",date:"2021-02-27T20:52:12.000Z",localChanges:["Continuing to break `renderer.ts` into components.","Add reusable `Element` and `TransientElement` which other components extend from.","Add `PlayerDetails` to show current research and treasury."],externalChanges:{}},{version:"0.1.0@c1b8fef",date:"2021-02-25T21:32:22.000Z",localChanges:["Add map navigation by clicking on `Tile`s.","Stop notification spam on errors.","City information screen started including showing map. This shows all surrounding tiles somehow...","Fixed `EndOfTurn` bug, this now cycles through turns automatically - client-side.","Move `UnitDetails` into a component."],externalChanges:{"core-player-world":{status:"updated",log:["Bump `core-world` version"]}}},{version:"0.1.0@3012efb",date:"2021-02-24T22:40:18.000Z",localChanges:["Refactor notifications and add ability to handle other `MandatoryAction`s (`CityBuild` and `ChooseResearch`) which notify in a similar way to Civ 5.","Break `Map` into layers (`Terrain`, `Cities`, etc.) and allow use of a `Portal` to view layered maps through.","`City` view is next on the list.","Need to add an `EndOfTurn` `MandatoryAction`."],externalChanges:{"civ1-city-improvement":{status:"updated",log:["Use correct path to `Research` `Yield`."]},"civ1-player":{status:"updated",log:["Reduce starting square calculation time."]},"civ1-wonder":{status:"updated",log:["Add tests for `Wonder` costs."]},"core-city-build":{status:"updated",log:["Add `City` to exported fields from `DataObject#toPlainObject`."]},"core-city":{status:"updated",log:["Add missing fields to be exported via `DataObject#toPlainObject`."]},"core-goody-hut":{status:"updated",log:["Add `goodyHut` `AdditionalData` to `Tile`s.","Ensure `GoodyHut`s extend `DataObject`s."]},"core-world":{status:"updated",log:["Convert `World` from a `Registry` to a `DataObject` to allow `height` and `width` to be passed to the `Client`."]},"simple-ai-client":{status:"updated",log:["Updates to use updated `GoodyHutRegistry#getByTile`."]}}},{version:"0.1.0@5450acb",date:"2021-02-23T21:32:20.000Z",localChanges:["Add missing files.","Resize map view with window size.","Add sidebar.","Flash active Unit.","Fix City name and size display."],externalChanges:{}},{version:"0.1.0@cd8c818",date:"2021-02-22T22:55:06.000Z",localChanges:["Basic renderer working. To get this showing units you need to have extracted the items from the original game data. I aim to make an extractor at some point."],externalChanges:{"core-city":{status:"updated",log:["Add `player` to data transfer information and add `city` `AdditionalData` to `Tile`s."]},"core-data-object":{status:"updated",log:["Change `DataObject`s to allow recursive data to be stored."]},"core-unit":{status:"updated",log:["Update to add `status` property to capture the current action being performed (if any) and add in `player` and `visibility` keys for data transfer.","Add `units` `AdditionalData` to `Tile`s."]}}},{version:"0.1.0@3f031cf",date:"2021-02-19T14:06:01.000Z",localChanges:["Fixed bugs in the data that's returned and 'render' basic maps for surrounding areas of `City`s and `Unit`s. Next step is to try and integrate the old renderer..."],externalChanges:{"base-civilization-greek":{status:"updated",log:["Correct `Leader` name."]},"base-civilization-indian":{status:"updated",log:["Correct `Leader` name."]},"base-civilization-roman":{status:"updated",log:["Correct `Leader` name."]},"civ1-science":{status:"updated",log:["Use external `Research` `Yield` to fix `PlayerResearch`."]},"civ1-treasury":{status:"updated",log:["Ensure `Rule`s are executed by `Engine`."]},"core-data-object":{status:"updated",log:["Allow `AdditionalData` to be applied to child classes."]},"core-science":{status:"updated",log:["Ensure `Advance` extends `DataObject` and type issue in `PlayerResearch`."]},"core-treasury":{status:"updated",log:["Add `terasury` `AdditionalData` to `Player`s."]},"core-unit-improvement":{status:"updated",log:["Ensure `UnitImprovement`s are `DataObject`s."]}}},{version:"0.1.0@7f3ff48",date:"2021-02-18T17:27:54.000Z",localChanges:['Renderer "works" and `Action`s can be performed. Still pretty rudimentary and no graphics are rendered yet.'],externalChanges:{"base-unit-action-fortify":{status:"updated",log:["Fix bug where `Unit`s would become active whilst still having `Fortified` applied."]},"base-unit-action-found-city":{status:"updated",log:[]},"base-unit-action-sleep":{status:"updated",log:["Ensure `Unit` `visibility` is used to check when to wake after `Sleep`ing."]},"civ1-city":{status:"updated",log:["Add missing `Rule`s from `registerRules`."]},"civ1-game-year":{status:"updated",log:["Ensure `registerRules` is called."]},"civ1-player":{status:"updated",log:[]},"civ1-science":{status:"updated",log:["Fix bug that prevented `ChooseResearch` `PlayerAction` from being provided.","Add missing `Rule`s."]},"civ1-unit":{status:"updated",log:["Add `CityNameRegistry` to `action` provider for `FoundCity`."]},"civ1-wonder":{status:"updated",log:["Add `Research` requirements for `Wonder`s."]},"civ1-world":{status:"updated",log:["Update distribution `Rule`s to use `Rule`s defined in `core-world-generator` instead of `core-terrain`."]},"core-city-build":{status:"updated",log:["Make `CityBuild`s extend `DataObject`s for exposing data to `Client`s."]},"core-city-growth":{status:"updated",log:["Fix missing `CityGrowth` `AdditionalData` from `City`s."]},"core-city-improvement":{status:"updated",log:["Make `CityImprovement`s extend `DataObject`."]},"core-city":{status:"updated",log:["Add `cities` `AdditionalData` to `Player`s."]},"core-civilization":{status:"updated",log:["Update `Leader`s to be `DataObject`s."]},"core-game-year":{status:"updated",log:["Make `Year` extend `DataObject`."]},"core-player":{status:"updated",log:["Update returned `DataObject` data."]},"core-science":{status:"updated",log:["Add `research` `AdditionalData` to `Player`s.","Make `PlayerResearch` extend `DataObject`."]},"core-terrain":{status:"updated",log:["Remove unused `Rule`s."]},"core-trade-rate":{status:"updated",log:["Make `PlayerTradeRates` extend `DataObject` and add `rates` `AdditionalData` to `Player`."]},"core-turn-based-game":{status:"updated",log:["Add missing events to trigger `Rule`s."]},"core-unit":{status:"updated",log:["Add `units` `AdditionalData` to `Player`s.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied."]}}},{version:"0.1.0@389523c",date:"2021-02-17T10:38:23.000Z",localChanges:["Basics of the renderer working.","Data can be sent back and forth between the Main and Renderer processes."],externalChanges:{"civ1-player":{status:"updated",log:["Try to improve performance for scoring start tiles.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Reduce starting square calculation time.","Move out the calculation of start tiles to a `Worker` to help prevent locking the main thread.","Add `VisibilityChanged` `Rule`s.","Add `EndTurn` action after `Rule` updates.","Add `player:defeated` events based on a `Player` having no more `City`s.","Allow async `Client` methods (`chooseCivilization`, `chooseLeader`)","Fix `player:defeated` conditions.","Incorporate `Captured` events from `City` `Captured` events.","Add restrictions on the types of `Terrain`s that can be start squares.","Ensure `Tile` `Yield` cache is cleared each time visibility is changed.","Update to `Yield` weights.","Update `EndTurn` instantiation with new `PlayerAction` changes.","Use `Defeated` `Rule` from `core-player`.","Use `TurnStart` `Rule`s where applicable.","Refactor `ProcessYield` approach.","Use correct type for `City` `Destroyed` and `Unit` `Destroyed` `Rule`s.","Re-work the `Unit` `DelayedAction` handling.","Move event contents into `Rule`s where possible.","Remove reliance on other `civ1-*` packages, preferring individual packages instead.","Add unit tests.","Ensure local `RuleRegistry` is passed in to `World` `Built` `Rule`s when `Unit`s are created.","Fix `ProcessYield` problem in `TurnStart` `Rule`.","Refactor out `Worker`. This probably needs to be added back in at some point...","Simplify `World` built `Rule` by breaking out into `Spawn` and `PickStartTile` `Rule`s.","Ensure `destroyed` `Unit`s are excluded from being processed."]},"civ1-world":{status:"updated",log:["Add `Rule`s to `registerRules`.","Prevent double triggering of `Built` `Rule`."]},"core-engine":{status:"updated",log:["Prevent `Start` `Rule`s from being processed directly. Might rever this later..."]},"core-player-world":{status:"updated",log:["Expose `PlayerWorld`s against the relevant `Player`.","Add missing compiled assets"]},"core-world":{status:"updated",log:["Fix a bug when `Tile` `Yield`s exist for which weights are not provided."]},"simple-world-generator":{status:"added",log:["Initial commit","Add `simpleRLELoader`","Update `BaseGenerator` to use updated `Generator` interface and utilise `Promise`s for `#generate`.","Changes to world generation to be closer to the original Civilization.","Fix `simpleRLELoader` to be async.","Ensure `TerrainFeatureRegistry` is passed in to `simpleRLELoader`.","Replace `Math.random` calls with injectable random number generator.","Remove reliance on `node` so that a browser can be used instead."]},"simple-world-path":{status:"added",log:["Initial commit","Updates to use shard `simpleRLELoader` from `simple-world-generator`"]}}},{version:"0.1.0@6a7bbcb",date:"2021-02-16T13:56:21.000Z",localChanges:["first commit"],externalChanges:{"base-city-improvement-aqueduct":{status:"added",log:["Initial commit"]},"base-city-improvement-barracks":{status:"added",log:["Initial commit"]},"base-city-improvement-citywalls":{status:"added",log:["Initial commit"]},"base-city-improvement-colosseum":{status:"added",log:["Initial commit"]},"base-city-improvement-courthouse":{status:"added",log:["Initial commit"]},"base-city-improvement-granary":{status:"added",log:["Initial commit"]},"base-city-improvement-library":{status:"added",log:["Initial commit"]},"base-city-improvement-marketplace":{status:"added",log:["Initial commit"]},"base-city-improvement-palace":{status:"added",log:["Initial commit"]},"base-city-improvement-temple":{status:"added",log:["Initial commit"]},"base-city-yield-gold":{status:"added",log:["Initial commit"]},"base-city-yield-happiness":{status:"added",log:["Initial commit"]},"base-city-yield-luxuries":{status:"added",log:["Initial commit"]},"base-city-yield-research":{status:"added",log:["Initial commit"]},"base-city-yield-unhappiness":{status:"added",log:["Initial commit","Fix package name and repo URL.","Actually fix package name and repo URL..."]},"base-civilization-american":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-aztec":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-babylonian":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-chinese":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-egyptian":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-english":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-french":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-german":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-greek":{status:"added",log:["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-indian":{status:"added",log:["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-mongol":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-roman":{status:"added",log:["Initial commit","Correct `Leader` name.","Update colours used in `Attribute`s."]},"base-civilization-russian":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-civilization-zulu":{status:"added",log:["Initial commit","Update colours used in `Attribute`s."]},"base-diplomacy-declaration-peace":{status:"added",log:["Initial commit"]},"base-diplomacy-declaration-war":{status:"added",log:["Initial commit"]},"base-diplomacy-interaction-contact":{status:"added",log:["Initial commit"]},"base-goody-hut-advance":{status:"added",log:["Initial commit"]},"base-goody-hut-city":{status:"added",log:["Initial commit"]},"base-goody-hut-gold":{status:"added",log:["Initial commit"]},"base-goody-hut-unit":{status:"added",log:["Initial commit","Use consistent references to github repos","Bump dependencies after changing naming convention to be consistent","Add `Unit` `Rule` for determining which `Unit` is provided","Remove redundant dependency.","Update naming for imports from `core-goody-hut`.","Remove `RuleRegistry` interface for `Unit` `Rule`."]},"base-government-anarchy":{status:"added",log:["Initial commit"]},"base-government-communism":{status:"added",log:["Initial commit"]},"base-government-democracy":{status:"added",log:["Initial commit"]},"base-government-despotism":{status:"added",log:["Initial commit"]},"base-government-monarchy":{status:"added",log:["Initial commit"]},"base-government-republic":{status:"added",log:["Initial commit"]},"base-leader-trait-aggression":{status:"added",log:["Initial commit"]},"base-leader-trait-development":{status:"added",log:["Initial commit"]},"base-leader-trait-militarism":{status:"added",log:["Initial commit"]},"base-player-action-active-unit":{status:"added",log:["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-player-action-inactive-unit":{status:"added",log:["Initial commit","Update dependencies and add generic property for `PlayerAction`."]},"base-science-advance-alphabet":{status:"added",log:["Initial commit"]},"base-science-advance-astronomy":{status:"added",log:["Initial commit"]},"base-science-advance-bridgebuilding":{status:"added",log:["Initial commit"]},"base-science-advance-bronzeworking":{status:"added",log:["Initial commit"]},"base-science-advance-ceremonialburial":{status:"added",log:["Initial commit"]},"base-science-advance-chivalry":{status:"added",log:["Initial commit"]},"base-science-advance-codeoflaws":{status:"added",log:["Initial commit"]},"base-science-advance-construction":{status:"added",log:["Initial commit"]},"base-science-advance-currency":{status:"added",log:["Initial commit"]},"base-science-advance-engineering":{status:"added",log:["Initial commit"]},"base-science-advance-feudalism":{status:"added",log:["Initial commit"]},"base-science-advance-gunpowder":{status:"added",log:["Initial commit","Repo cleansing."]},"base-science-advance-horsebackriding":{status:"added",log:["Initial commit"]},"base-science-advance-invention":{status:"added",log:["Initial commit"]},"base-science-advance-ironworking":{status:"added",log:["Initial commit"]},"base-science-advance-literacy":{status:"added",log:["Initial commit"]},"base-science-advance-mapmaking":{status:"added",log:["Initial commit"]},"base-science-advance-masonry":{status:"added",log:["Initial commit"]},"base-science-advance-mathematics":{status:"added",log:["Initial commit"]},"base-science-advance-monarchy":{status:"added",log:["Initial commit"]},"base-science-advance-mysticism":{status:"added",log:["Initial commit"]},"base-science-advance-navigation":{status:"added",log:["Initial commit"]},"base-science-advance-pottery":{status:"added",log:["Initial commit"]},"base-science-advance-therepublic":{status:"added",log:["Initial commit"]},"base-science-advance-thewheel":{status:"added",log:["Initial commit"]},"base-science-advance-writing":{status:"added",log:["Initial commit"]},"base-terrain-arctic":{status:"added",log:["Initial commit"]},"base-terrain-desert":{status:"added",log:["Initial commit"]},"base-terrain-feature-coal":{status:"added",log:["Initial commit"]},"base-terrain-feature-fish":{status:"added",log:["Initial commit"]},"base-terrain-feature-game":{status:"added",log:["Initial commit"]},"base-terrain-feature-gems":{status:"added",log:["Initial commit"]},"base-terrain-feature-gold":{status:"added",log:["Initial commit"]},"base-terrain-feature-horse":{status:"added",log:["Initial commit"]},"base-terrain-feature-oasis":{status:"added",log:["Initial commit"]},"base-terrain-feature-oil":{status:"added",log:["Initial commit"]},"base-terrain-feature-seal":{status:"added",log:["Initial commit"]},"base-terrain-feature-shield":{status:"added",log:["Initial commit"]},"base-terrain-forest":{status:"added",log:["Initial commit"]},"base-terrain-grassland":{status:"added",log:["Initial commit"]},"base-terrain-hills":{status:"added",log:["Initial commit"]},"base-terrain-jungle":{status:"added",log:["Initial commit"]},"base-terrain-mountains":{status:"added",log:["Initial commit"]},"base-terrain-ocean":{status:"added",log:["Initial commit"]},"base-terrain-plains":{status:"added",log:["Initial commit"]},"base-terrain-river":{status:"added",log:["Initial commit"]},"base-terrain-swamp":{status:"added",log:["Initial commit"]},"base-terrain-tundra":{status:"added",log:["Initial commit"]},"base-terrain-yield-food":{status:"added",log:["Initial commit"]},"base-terrain-yield-production":{status:"added",log:["Initial commit"]},"base-terrain-yield-trade":{status:"added",log:["Initial commit"]},"base-tile-improvement-irrigation":{status:"added",log:["Initial commit"]},"base-tile-improvement-mine":{status:"added",log:["Initial commit"]},"base-tile-improvement-pollution":{status:"added",log:["Initial commit"]},"base-tile-improvement-railroad":{status:"added",log:["Initial commit"]},"base-tile-improvement-road":{status:"added",log:["Initial commit"]},"base-trade-rate-luxuries":{status:"added",log:["Initial commit"]},"base-trade-rate-research":{status:"added",log:["Initial commit"]},"base-trade-rate-tax":{status:"added",log:["Initial commit"]},"base-unit-action-attack":{status:"added",log:["Initial commit","Reduce `Attack` when `moves` is < 1.","Reduce `moves` when attacking.","Pass the `Attack` instance to the `Defeated` `Rule` so it can be determined if a `Unit` in a `City` was a defender or not.","Remove `RuleRegistry` interface usage for `Defeated` `Rule`.","Move `unitRegistry` into the `Attack` constructor.","Replace usages of `Math.random` with a testable injected dependency."]},"base-unit-action-build-irrigation":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-mine":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-build-road":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-capture-city":{status:"added",log:["Initial commit","Rework constructor to accept the target `City`."]},"base-unit-action-clear-forest":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-jungle":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-clear-swamp":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-disembark":{status:"added",log:["Initial commit","Rework constructor to accept the target `ITransport`."]},"base-unit-action-embark":{status:"added",log:["Initial commit","Update `Move` dependency","Rework constructor to accept the target `ITransport`.","Remove `RuleRegistry` interface usage for `Moved` `Rule`s."]},"base-unit-action-fortify":{status:"added",log:["Initial commit","Add `UnitImprovementRegistry` via constructor and use updated `DelayedAction` constructor.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-found-city":{status:"added",log:["Initial commit","Ensure `CityNameRegistry` is used for `City` names.","Ensure local `RuleRegistry` is passed on to `City` constructor.","Repo cleansing."]},"base-unit-action-move":{status:"added",log:["Initial commit","Extract `movementCost` and `validate` functions into members.","Remove `RuleRegistry` interface usage for `Moved`, `MovementCost` and `ValidateMove` `Rule`s."]},"base-unit-action-no-orders":{status:"added",log:["Initial commit"]},"base-unit-action-pillage":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Remove `RuleRegistry` interface usage for `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-plant-forest":{status:"added",log:["Initial commit","Update to latest version of `DelayedAction`.","Add custom `Busy` `Rule`.","Remove `RuleRegistry` interface usage for `Feature`, `Moved` and `MovementCost` `Rule`s."]},"base-unit-action-sleep":{status:"added",log:["Initial commit","Update to latest `DelayedAction` version and add wake condition to `Busy`","Ensure `Unit` `visibility` is used to check when to wake after `Sleep`ing.","Add labelled `Busy` `Rule` (`Sleeping`) to indicate the action being performed.","Repo cleansing."]},"base-unit-action-unload":{status:"added",log:["Initial commit","Ensure `cargo` is correctly reset with required number of moves when `Unload`ing."]},"base-unit-catapult":{status:"added",log:["Initial commit"]},"base-unit-chariot":{status:"added",log:["Initial commit"]},"base-unit-horseman":{status:"added",log:["Initial commit"]},"base-unit-improvement-fortified":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone"]},"base-unit-improvement-veteran":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone"]},"base-unit-knight":{status:"added",log:["Initial commit"]},"base-unit-musketman":{status:"added",log:["Initial commit","Repo cleansing."]},"base-unit-sail":{status:"added",log:["Initial commit"]},"base-unit-settlers":{status:"added",log:["Initial commit"]},"base-unit-spearman":{status:"added",log:["Initial commit"]},"base-unit-swordman":{status:"added",log:["Initial commit"]},"base-unit-trireme":{status:"added",log:["Initial commit"]},"base-unit-type-fortifiable":{status:"added",log:["Initial commit"]},"base-unit-type-land":{status:"added",log:["Initial commit"]},"base-unit-type-naval-transport":{status:"added",log:["Initial commit","Ensure type safety when using `this` to refer to `ITransport`.","Update to use latest `core-unit-transport` changes."]},"base-unit-type-naval":{status:"added",log:["Initial commit"]},"base-unit-type-worker":{status:"added",log:["Initial commit"]},"base-unit-warrior":{status:"added",log:["Initial commit"]},"base-wonder-colossus":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-copernicus-observatory":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-great-library":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-great-wall":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-hanging-gardens":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-lighthouse":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-magellans-expedition":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-oracle":{status:"added",log:["Initial commit","Use published package version for `core-wonder`"]},"base-wonder-pyramids":{status:"added",log:["Initial commit"]},"civ1-city-happiness":{status:"added",log:["Initial commit","Add `Temple` `Unhappiness` yield","Add effect for `Cololsseum` and `Cathedral`.","Add military wariness to `Republic` and `Democracy` governments.","Fix values for `Colosseum` and `Cathedral`.","Attempt to fix perpetual `CivilDisorder` and `Production` causing `Unit`s to become unsupported.","Fixed bug where `CivilDisorder` effects were active any time there was any `Unhappiness`.","Update to use new `Yield` mechanism. Actually, it was in part due to this module that the mechanism changed...","Fix a bug where `CivilDisorder` effects were applied even if the `City` wasn't in civil disorder.","Remove `CivilDisorder` `Yield` effects and move those to the respective `civ-`... modules.","Bump dependencies.","Consolidate `Cost` `Rule`s.","Remove unused `Rule` classes.","Rewrite to use customised `Yield`s for each property.","Update to latest version of `core-city-improvement`.","Bump dependencies."]},"civ1-city-improvement":{status:"added",log:["Initial commit","Use correct path to `Research` `Yield`.","Add missing `CityImprovement`s.","Update to use new `CityBuild` mechanism.","Fix tests.","Add `Yield` modifiers for `Factory` etc.","Update method of processing `Yield`s.","Add requirements for a `Factory` to be built before a `PowerPlant` can be built.","Ensure only one type of `PowerPlant` can exist within a `City`.","Add missing `Yield` and `YieldModifier` `Rule`s.","Add `Corruption` `Yield` and `Effect`s of `Palace` and `Courthouse`.","Ensure `Palace` is destroyed when a `City` is captured.","Reclassify `CityImprovementMaintenanceGold` `Yield` `Rule`s as `Cost` `Rule`s.","Ensure `Corruption` is provided as expected`.","Add some basic cleanup for when `City`s are destroyed.","Update to latest version of `core-city-improvement`.","Move `Corruption` generation to `civ1-city`, where it makes more sense to exist.","Work on test coverage.","Bump dependencies.","Destroy `CityImprovement`s when a `City` is `Captured` or `Destroyed`."]},"civ1-city":{status:"added",log:["Initial commit","If `CityGrowthRegistry` is missing expected `CityGrowth`, create and register it automatically in `setUpCity`","Bump dependencies","Add missing `Rule`s from `registerRules`.","Update `tests/lib/setUpCity` to work with updated `World`.","Fix weighting for `City#tilesWorked`.","Add `ChangeProduction` `Rule`.","Update `Capturing` `Rule` to include `capturingPlayer` as well as the previously owning `Player`.","Add `reassignWorkers` function to be called via UI.","Update `Captured` event to include both previous owner and capturing player.","Move `Captured` event to `Player` to handle `player:defeated` events.","Updates to allow setting `YieldRegistry` in `setUpCity`.","Fix bug where `Unit`s weren't destroyed when their supporting `City` was destroyed.","Rework `ProcessYield` `Rule`s to utilise new ...`Support` `Yield`s.","Remove `Rule` that empties the `FoodStorage` on shrink.","Add `Unit` `Defeated` `Rule` to handle a `City` being destroyed instead of captured.","Use updated `Yield` `Rule`s.","Slight tweak to how `Yield`s are weighted.","Update handling not adding `Production` when `City` is in `CivilDisorder`.","Process `Unit` and population support (`Food` and `Production`).","Update `CityBuild` and `ChangeProduction` instantiations with new `PlayerAction` changes.","Ensure when a `Unit` is defeated in a `City` that the population is only reduced when it's a defender.","Use `FoodExhausted` and `Unsupported` `Rule`s.","Refactor `Yield`, `Cost` and `ProcessYield` `Rule` usages.","Update `ProcessYield` usage.","Use updated `CityRegistry.getByTile` method.","Update `setUpCity` mechanism.","Ensure `Irrigation` and `Road` `TileImprovement`s are only added if they don't already exist.","Update `setUpCity` to allow bypassing of `TileImprovement` additions.","Move `Corruption` generation from `civ1-city-improvement`.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo.","Improve test coverage.","Track `destroyed` status rather than unregister the `City`."]},"civ1-civilization":{status:"added",log:["Initial commit","Add `Roman` `Civilization` back in.","Register all `Civilization`s.","Update registration mechanism to reduce duplication in other packages.","Repo cleansing."]},"civ1-diplomacy":{status:"added",log:["Initial commit"]},"civ1-game-year":{status:"added",log:["Initial commit","Ensure `registerRules` is called."]},"civ1-goody-hut":{status:"added",log:["Initial commit","Use published package versions","Use `Unit` `Rule` to control what `Unit`s are provided.","Add `index.ts` so that `Rule`s are registered and processed.","Fix method calls and expected returns.","Add missing dependency.","Add missing `Rule`s.","Fix `FreeCity` behaviour.","Updates to `Yield` weights.","Update to use latest `CityRegistry` changes.","Update usages of `Math.random` to be an injectable number provider.","Another attempt at the `City` type of `GoodyHut`."]},"civ1-government":{status:"added",log:["Initial commit","Prevent unhandled exception on `Changed` `Rule` when `PlayerWorld`s have not yet been initialised.","Utilise `AvailableGovernmentsRegistry` and separate `Revolution` `PlayerAction` (although TODO, change that to the request and a random delay for the `ChooseGovernment` `MandatoryAction`).","Update `GovernmentChanged` `Rule` to be compatible with `PlayerTile`s.","Update `Revolution` instantiation with new `PlayerAction` changes."]},"civ1-player":{status:"added",log:["Initial commit","Remove `Client` and `Player` creation from here, this should be handlded by the renderer.","Try to improve performance for scoring start tiles.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Reduce starting square calculation time.","Move out the calculation of start tiles to a `Worker` to help prevent locking the main thread.","Add `VisibilityChanged` `Rule`s.","Add `EndTurn` action after `Rule` updates.","Add `player:defeated` events based on a `Player` having no more `City`s.","Allow async `Client` methods (`chooseCivilization`, `chooseLeader`)","Fix `player:defeated` conditions.","Incorporate `Captured` events from `City` `Captured` events.","Add restrictions on the types of `Terrain`s that can be start squares.","Ensure `Tile` `Yield` cache is cleared each time visibility is changed.","Update to `Yield` weights.","Update `EndTurn` instantiation with new `PlayerAction` changes.","Use `Defeated` `Rule` from `core-player`.","Use `TurnStart` `Rule`s where applicable.","Refactor `ProcessYield` approach.","Use correct type for `City` `Destroyed` and `Unit` `Destroyed` `Rule`s.","Re-work the `Unit` `DelayedAction` handling.","Move event contents into `Rule`s where possible.","Remove reliance on other `civ1-*` packages, preferring individual packages instead.","Add unit tests.","Ensure local `RuleRegistry` is passed in to `World` `Built` `Rule`s when `Unit`s are created.","Fix `ProcessYield` problem in `TurnStart` `Rule`.","Refactor out `Worker`. This probably needs to be added back in at some point...","Simplify `World` built `Rule` by breaking out into `Spawn` and `PickStartTile` `Rule`s.","Ensure `destroyed` `Unit`s are excluded from being processed."]},"civ1-science":{status:"added",log:["Initial commit","Fix bug that prevented `ChooseResearch` `PlayerAction` from being provided.","Add missing `Rule`s.","Use external `Research` `Yield` to fix `PlayerResearch`.","Add remaining missing `Advance`s.","Fix incorrect prerequisites for `Railroad`.","Updates to randomly start with some `Advance`s.","Acquire `Advance`s when capturing an advance enemey `City`.","Fix a bug where if there are no `Advance`s available to research (or fewer than the number of granted `Advance`s will be) it'll grant as many are available.","Update handling not adding `Research` when `City` is in `CivilDisorder`.","Update `ChooseResearch` instantiation with new `PlayerAction` changes.","Update dependencies.","Add unit tests.","Ensure `@civ-clone/core-city-happiness` is used as a module, not a github repo.","Add `randomNumberGenerator` provider for `captured` `Rule`.","Remove unnecessary `Registry` interface."]},"civ1-trade-rate":{status:"added",log:["Initial commit","Add `AdjustTradeRates` `PlayerAction`.","Simplify `Yield` `Rule`s.","Implement `Corruption` `Effect`s.","Update `AdjustTradeRates` instantiation with new `PlayerAction` changes.","Ensure `Corruption` can never exceed the available `Trade`.","Add `Player` `turn-start` `Rule` to convert `Trade` into the component `Yield`s."]},"civ1-treasury":{status:"added",log:["Initial commit","Ensure `Rule`s are executed by `Engine`.","Add `CompleteProduction` action.","Use updated `Yield` mechanism.","Update handling not adding `Gold` when `City` is in `CivilDisorder`.","Handle running out of `Gold` in the treasury by selling the maintained `CityImprovement` that would deplete it.","Update `CompleteProduction` instantiation with new `PlayerAction` changes.","Ensure `@civ-clone/core-city-happiness` is used as a package, not a github repo.","Remove unnecessary `Registry` interface."]},"civ1-unit":{status:"added",log:["Initial commit","Update actions to pass in entities for `Disembark`, `Embark` and `CaptureCity`","Updates to `Action`s in-line with new `DelayedAction` version.","Add `CityNameRegistry` to `action` provider for `FoundCity`.","Add `Defeated` implementation to destroy `Unit`s.","Add in missing `Unit`s.","Add missing `Unit`s.","Fix `ClearX` and `PlantForest` actions and give `Ocean` `MovementCost` back to enable `Embark` again.","Correct misspelled `MechanizedInfantry`.","Update to use new `CityBuild` mechanism.","Fix tests","Add `BuildRailroad`.","Fix movement costs.","Fix bug where units could retry a failed move over and over.","Made it more likely that your `Move` would succeed (>50% of `Move`s means it'll work - in-line with Civ).","Update `ActiveUnit` and `InactiveUnit` instantiations with new `PlayerAction` changes.","Use `Unsupported` and `Stowed` `Rule`s.","Ensure `Sail` is obselete with `Magenetism`.","Simplify and clarify `Move` action constraints.","Clean up when `Unit` is `Destroyed`.","Add better test coverage.","Add missing `MovementCost`s and use named re-usable `Criterion`s for `Action` `Rule`s where possible.","Ensure `Air` `Unit`s can attack `Land` `Unit`s.","Add `Disband` `Action`.","Use `IBuildable` interface for `BuildingComplete` `Rule`s.","Ensure `Submarine`s cannot bombard `Land` `Unit`s.","Ensure only `Fighter`s can `Attack` other `Air` `Unit`s.","Annotate `Attack` `Action` `Rule`s.","Ensure all `Unit`s on a `Tile` are destroyed when the defending `Unit` is `Destroyed`, unless in a `City`.","Track `destroyed` status rather than unregister the `Unit`."]},"civ1-wonder":{status:"added",log:["Initial commit","Add `Research` requirements for `Wonder`s.","Add tests for `Wonder` costs.","Update to work with new `setUpCity` form.","Add missing `Wonder`s.","Utilise new `CityBuild` mechanism for registering.","Fix missing cost for `DarwinsVoyage`.","Add effects for `MichelangelosChapel` and `WomensSuffrage`.","Add `Obsoletion` `Rule` to notify `Wonder` owners for obsolesence.","Move `Yield` `Rule`s to `Cost` `Rule`s to enable accurate processing.","Use updated `Yield` mechanism.","Add `CureForCancer` effects.","Add obsoletion for `Lighthouse`.","Rework the tests.","Update to remove requirement for `Player` to be passed into the `Wonder` constructor.","Fix some wonder effects.","Ensure `engine` parameter of `Wonder` `obsolete` `Rule`s is optional.","Add `Wonder` `obsolete` `Rule`s.","Ensure `IBuildable` interface is used.","Add benefits for `DarwinsVoyage`."]},"civ1-world":{status:"added",log:["Initial commit","Add `Rule`s to `registerRules`.","Prevent double triggering of `Built` `Rule`.","Update distribution `Rule`s to use `Rule`s defined in `core-world-generator` instead of `core-terrain`.","Add `Event`s when `TileImprovement`s are `Built` or `Pillaged`.","Update `Engine` `Start` `Rule`s to meet changes to `simple-world-generator`.","Updating world generator values to generate maps closer to those from the original Civilization. More work still to do here.","Fix bug with incorrect `Yield`s for `Plains` with `Horse`.","Enable `Railroad` construction.","Fix bug where `Irrigation` and `Mine` could both exist on the same `Tile`.","Add `Railroad` `Yield` modifier.","Add updated `Tile` yields for other governments.","Update `Yield` mechanism.","Fix a few `Tile` `Yield`s.","Update calls to `Math.random` to be an injectable random number generator.","Ensure `Road` and `Railroad` are not applied multiple times.","Add support for `Earth` `Generator` and fixed start `Tile`s associated.","Move random start `Tile` selection to `Rule`s.","Use updated `civ1-earth-generator` package."]},"core-ai-client":{status:"added",log:["Initial commit","Add missing `instance` to `AIClientRegistry` and allow `LeaderRegistry` instance to be passed in.","Replace usages of `Math.random` with a testable injected dependency."]},"core-city-build":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone","Make `CityBuild`s extend `DataObject`s for exposing data to `Client`s.","Add `City` to exported fields from `DataObject#toPlainObject`.","Add `ChangeProduction` `PlayerAction` when a `City` is already building something.",'Fix path reference from relative to "absolute" via `@civ-clone`.',"Update `CityBuild#available` mechanism to show resource costs for items.","Add `Buildable` class that `Unit`s and `CityImprovement`s inherit from.","Change logic to pave the way for alternative costs associated to `Buildable` items.","Update to use `PlayerAction` generics and fix return type of `Buildable`.","Simpliy `Rule`s.","Make `AvailableCityBuildItemsRegistry` more flexible.","Re-work entities and interfaces to avoid having to forcibly cast everything."]},"core-city-growth":{status:"added",log:["Initial commit","Fix missing `CityGrowth` `AdditionalData` from `City`s.","Add `CityGrowth` object as an argument to `FoodExhasted` `Rule` instead of `City`.","Fix tests.","Update `README.md`.","Update dependencies.","Repo cleansing."]},"core-city-happiness":{status:"added",log:["Initial commit","Simpliy `Rule`s.","Repo cleansing."]},"core-city-improvement":{status:"added",log:["Initial commit","Make `CityImprovement`s extend `DataObject`.","Update to use new `Buildable` class from core-city-build.","Remove `Player` as a constructor argument since this is available (and more likely reliable) via `City` instead.","Track `destroyed` status rather than unregister the `CityImprovement`."]},"core-city":{status:"added",log:["Initial commit","Add `cities` `AdditionalData` to `Player`s.","Add `player` to data transfer information and add `city` `AdditionalData` to `Tile`s.","Add missing fields to be exported via `DataObject#toPlainObject`.","Update `Captured` `Rule` so that the previous owner and the capturing owner are explicitly provided.","Allow `YieldRegistry` to be supplied on construct or runtime (`.yields`).","Update `yields` to process `Yield` then `Cost` `Rule`s, fixing some bugs.","Rework `Yield` `Rule`s to return `Yield`s rather than expecting `Yield` constructors to be provided.","Change `CityRegistry.getByTile` to return `City` instead of `City[]`.","Repo cleansing.","Track `destroyed` status rather than unregister the `City`."]},"core-civ-client":{status:"added",log:["Initial commit"]},"core-civilization":{status:"added",log:["Initial commit","Update `Leader`s to be `DataObject`s.","Update to use `DataObject.sourceClass()` for `TraitRegistry` interactions.","Update to use injectable random number generator instead of hard-coded `Math.random`.","Add `getBySubclass` to `TraitRegistry`."]},"core-client":{status:"added",log:["Initial commit"]},"core-data-object":{status:"added",log:["Initial commit","Add `id` to `DataObject`s to allow easy referencing from within `Client`s.","Allow `AdditionalData` to be applied to child classes.","Change `DataObject`s to allow recursive data to be stored.","Include `reconstitueData` as a core lib to be used in other packages.","Add `Entity` and `EntityInstance` types for use in other packages.","Remove `ulid` and replace with simpler ID generation.","Merge pull request #1 from civ-clone/remove-ulid","Remove `ulid` and replace with simpler ID generation.","Add `toPlainObject` filter to allow masking of unknown objects (enemy `Player`s, `Unit`s etc.)","Perform `filter`ing on all objects, rather than only `DataObject`s. This also means we can return something other than a `DataObject`.","Add `sourceClass()` method to auto cast to `IConstructor`.","Bump dependencies.","Update `DataObject.sourceClass()` type annotations after usage.","Ensure `id` is included in `IDataObject` so that `keys` for both `DataObject` and `IDataObject` return the same thing.","Make `IDataObject` interface more flexible."]},"core-diplomacy":{status:"added",log:["Initial commit"]},"core-engine":{status:"added",log:["Initial commit","Add `@types/glob` as a direct dependency for dependent packages.","Prevent `Start` `Rule`s from being processed directly. Might rever this later...","Remove reliance on `node` so that a browser can be used instead."]},"core-game-year":{status:"added",log:["Initial commit","Make `Year` extend `DataObject`.","Simpliy `Rule`s."]},"core-goody-hut":{status:"added",log:["Initial commit","Add `Distribution` `Rule` for controlling placement of huts within `World`s.","Correct arguments for `Distribution` `Rule`.","Add `goodyHut` `AdditionalData` to `Tile`s.","Ensure `GoodyHut`s extend `DataObject`s.","Simpliy `Rule`s."]},"core-government":{status:"added",log:["Initial commit","Provide `available` `Government`s with the `PlayerGovernment` instance.","Remove `Revolution`. Move to its own package.","Need to call `super(Government)` in `ConstructorRegistry` constructor.","Simpliy `Rule`s."]},"core-player-world":{status:"added",log:["Initial commit","Expose `PlayerWorld`s against the relevant `Player`.","Add missing compiled assets","Bump `core-world` version","Add `VisibilityChanged` `Rule`, triggered when new `Tile`s are registered.","Refactor `PlayerWorld` to store `PlayerTile`s to allow the world changes to be hidden from players (like in the original game).","Updates to `Yield` mechanism.","Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Fix bug with `PlayerTile.update`.","Allow defined properties to remain `configurable` when (for example) a `City` is built on an already known `Tile`."]},"core-player":{status:"added",log:["Initial commit","Add `HiddenPlayerAction` and rename `PlayerAction`-related methods.","Update returned `DataObject` data.","Add `Player` as an argument to `PlayerAction`s.","Make `PlayerAction`s generic to make using `PlayerAction.value()` easier.","Add `Defeated` `Rule`.","Fix typo in filename.","Add `Spawn` `Rule` to control what happens when a `Player` is spawned into the game."]},"core-registry":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone","Add .deepsource.toml","Improve TypeScript bindings on `Registry.getBy` to hint at properties to search for.","Bump dependencies."]},"core-rule":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone","Add `enable`/`disable`/`enabled` methods to `Rule`s.","Add `Ruleset`s to enable/disable sets of `Rule`s, this will be useful when these can be managed via a UI.","Allow `RuleRegistry` cache to be cleared externally.","Using generics in a better way to provide better hints to arguments for `RuleRegistry.process`.","Refine typings further for `RuleRegistry`."]},"core-science":{status:"added",log:["Initial commit","Add `research` `AdditionalData` to `Player`s.","Make `PlayerResearch` extend `DataObject`.","Ensure `Advance` extends `DataObject` and type issue in `PlayerResearch`.","Simpliy `Rule`s."]},"core-terrain-feature":{status:"added",log:["Initial commit","Simpliy `Rule`s.","Replace `Math.random` with injectable generator.","Add a caching layer for `TerrainFeatureRegistry.getByTerrain`. This sped up the map generation and start `Tile` sorting by a considerable amount."]},"core-terrain":{status:"added",log:["Initial commit","Remove unused `Rule`s.","Simpliy `Rule`s."]},"core-tile-improvement":{status:"added",log:["Initial commit","Ensure `TileImprovement`s extend `DataObject`.","Simpliy `Rule`s."]},"core-trade-rate":{status:"added",log:["Initial commit","Make `PlayerTradeRates` extend `DataObject` and add `rates` `AdditionalData` to `Player`.","Add convenience method `PlayerTradeRates#setAll` to offload the `balance` functionality to the frontend.","Repo cleansing."]},"core-treasury":{status:"added",log:["Initial commit","Add `terasury` `AdditionalData` to `Player`s.","Simplify `Rule`s.","Change how `PlayerTreasury.cost` works with updated `Rule`s.","Ensure an empty `Yield` is passed in to the `Cost` `Rule`s in `PlayerTreasury`."]},"core-turn-based-game":{status:"added",log:["Initial commit","Add `engine:start` event handler.","Add missing events to trigger `Rule`s.","Simpliy `Rule`s.","Amend `Turn` to no longer inherit from `Yield`.","Ensure instances are able to be passed in for events and `Rule`s.","Repo cleansing.","Ensure `Turn` extends `DataObject` and includes the `value`.","Ensure return types match for TypeScript compiler."]},"core-unit-improvement":{status:"added",log:["Initial commit copied from https://github.com/dom111/civ-clone","Ensure `UnitImprovement`s are `DataObject`s."]},"core-unit-transport":{status:"added",log:["Initial commit","Update `Transport` to include a mixin mechanism for extending existing classes, reducing repetition for `Transport` `Unit`s of different types.","Add `Stowed` and `Unloaded` `Rule`s.","Add tests.","Bump dependencies.","Ensure `Base` is `typeof Unit` so that it includes the static methods required by `IBuildable`."]},"core-unit":{status:"added",log:["Initial commit","Fix bug in `Yield` `Rule` type","Update `DelayedAction` to have `Turn` passed into the constructor.","Add `units` `AdditionalData` to `Player`s.","Fix bug where `Unit`s would become active whilst still having `Fortified` applied.","Update to add `status` property to capture the current action being performed (if any) and add in `player` and `visibility` keys for data transfer.","Add `units` `AdditionalData` to `Tile`s.","Updates to call `Created` `Rule`s after setting the keys.","Add `City#units` `AdditionalData`.","Update to use new `Buildable` class from core-city-build.","Trigger `Moved` after a `DelayedAction` has completed.","Ensure `Moved` `Rule`s are triggered at the end of the `DelayedAction` too.","Allow custom `Busy` `Rule`s to be supplied to `DelayedAction`s.","Include the `Action` in `Defeated` `Rule`s so when a `Unit` in a `City` is `Destroyed` it's easy enough to work out if it was a defender.","Add `Unsupported` `Rule`.","Bump depenedencies.","Update typings.","Track `destroyed` status rather than unregister the `Unit`."]},"core-wonder":{status:"added",log:["Initial commit","Add missing `instance` to `WonderRegistry`","Add `getByCity` method to `WonderRegistry`","Add event to trigger when `Wonder`s are obsoleted.","Add `WonderRegistry.getByPlayer`.","Fix `WonderRegistry.getByPlayer`."]},"core-world-generator":{status:"added",log:["Initial commit","Ensure `Generator#generate` returns a `Promise`.","Add utilities to help when map data is used elsewhere.","Add `PickGenerator` (to choose the `Generator` to build the `World` map) and `PickStartTile` (to choose the starting `Tile`s for the `Player`) `Rule`s."]},"core-world-path":{status:"added",log:["Initial commit"]},"core-world":{status:"added",log:["Initial commit","Ensure `undefined` is never added to a `Yield`.","Fix caching issue when `Yield`s get modified after caching.","Fix a bug when `Tile` `Yield`s exist for which weights are not provided.","Convert `World` from a `Registry` to a `DataObject` to allow `height` and `width` to be passed to the `Client`.","Ensure `World#build` handles async `Generator#generate`.","Have `World#build` return `Promise<World>` to help with tests in other packages.","Update `Yield` mechanism for `Tile`s.","Fix bug where all `Tile`s were rated as `0` since the changes to `Yield`s.","Update to use more appropriately named iterator type from `core-registry`.","Simplify `Rule`s.","Ensure `RuleRegistry` is passed into `World`s constructor, instead of when used by `build`."]},"core-yield":{status:"added",log:["Initial commit","Ensure `YieldValue` extends `DataObject`.","Remove `YieldValue` value object, the high usage combined with `ulid` from `DataObject` was causing slowdowns and didn't need to be a `DataObject` at all.","Add `reduceYields` utility function.","Add `NegativeYield` as a convenience object for costs."]},"simple-ai-client":{status:"added",log:["Initial commit","Update how `PlayerAction`s are named.","Updates to use updated `GoodyHutRegistry#getByTile`.","Prevent infinite loop and output debug info.","Updates to prevent TypeScript being sad about the `catch (e)`, `reject(e)` flow.","Add `EndTurn` support.","Add methods for catching when `City`s or `Unit`s are captured or defeated.","Fix the test suite.","Fix `SimpleAIClient` to use the new `CityBuild` mechanism.","Updates to utilise updated `PlayerWorld`.","Update dependencies and fix tests.","Add hard-coded check for `Earth` map to ensure first `City` is built in the right place."]}}}];function po(){return{async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}l(po,"getDefaults");var Yt=po();function Ir(s){Yt=s}l(Ir,"changeDefaults");var ho=/[&<>"']/,Rr=new RegExp(ho.source,"g"),go=/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,Cr=new RegExp(go.source,"g"),Ar={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},oo=l(s=>Ar[s],"getEscapeReplacement");function V(s,t){if(t){if(ho.test(s))return s.replace(Rr,oo)}else if(go.test(s))return s.replace(Cr,oo);return s}l(V,"escape");var kr=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;function fo(s){return s.replace(kr,(t,e)=>(e=e.toLowerCase(),e==="colon"?":":e.charAt(0)==="#"?e.charAt(1)==="x"?String.fromCharCode(parseInt(e.substring(2),16)):String.fromCharCode(+e.substring(1)):""))}l(fo,"unescape");var Tr=/(^|[^\[])\^/g;function M(s,t){s=typeof s=="string"?s:s.source,t=t||"";let e={replace:(i,a)=>(a=a.source||a,a=a.replace(Tr,"$1"),s=s.replace(i,a),e),getRegex:()=>new RegExp(s,t)};return e}l(M,"edit");var _r=/[^\w:]/g,Ur=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function ro(s,t,e){if(s){let i;try{i=decodeURIComponent(fo(e)).replace(_r,"").toLowerCase()}catch{return null}if(i.indexOf("javascript:")===0||i.indexOf("vbscript:")===0||i.indexOf("data:")===0)return null}t&&!Ur.test(e)&&(e=Dr(t,e));try{e=encodeURI(e).replace(/%25/g,"%")}catch{return null}return e}l(ro,"cleanUrl");var fs={},Er=/^[^:]+:\/*[^/]*$/,Pr=/^([^:]+:)[\s\S]*$/,Mr=/^([^:]+:\/*[^/]*)[\s\S]*$/;function Dr(s,t){fs[" "+s]||(Er.test(s)?fs[" "+s]=s+"/":fs[" "+s]=ys(s,"/",!0)),s=fs[" "+s];let e=s.indexOf(":")===-1;return t.substring(0,2)==="//"?e?t:s.replace(Pr,"$1")+t:t.charAt(0)==="/"?e?t:s.replace(Mr,"$1")+t:s+t}l(Dr,"resolveUrl");var bs={exec:l(function(){},"noopTest")};function ce(s){let t=1,e,i;for(;t<arguments.length;t++){e=arguments[t];for(i in e)Object.prototype.hasOwnProperty.call(e,i)&&(s[i]=e[i])}return s}l(ce,"merge");function lo(s,t){let e=s.replace(/\|/g,(n,o,d)=>{let c=!1,u=o;for(;--u>=0&&d[u]==="\\";)c=!c;return c?"|":" |"}),i=e.split(/ \|/),a=0;if(i[0].trim()||i.shift(),i.length>0&&!i[i.length-1].trim()&&i.pop(),i.length>t)i.splice(t);else for(;i.length<t;)i.push("");for(;a<i.length;a++)i[a]=i[a].trim().replace(/\\\|/g,"|");return i}l(lo,"splitCells");function ys(s,t,e){let i=s.length;if(i===0)return"";let a=0;for(;a<i;){let n=s.charAt(i-a-1);if(n===t&&!e)a++;else if(n!==t&&e)a++;else break}return s.slice(0,i-a)}l(ys,"rtrim");function Sr(s,t){if(s.indexOf(t[1])===-1)return-1;let e=s.length,i=0,a=0;for(;a<e;a++)if(s[a]==="\\")a++;else if(s[a]===t[0])i++;else if(s[a]===t[1]&&(i--,i<0))return a;return-1}l(Sr,"findClosingBracket");function yo(s){s&&s.sanitize&&!s.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}l(yo,"checkSanitizeDeprecation");function co(s,t){if(t<1)return"";let e="";for(;t>1;)t&1&&(e+=s),t>>=1,s+=s;return e+s}l(co,"repeatString");function uo(s,t,e,i){let a=t.href,n=t.title?V(t.title):null,o=s[1].replace(/\\([\[\]])/g,"$1");if(s[0].charAt(0)!=="!"){i.state.inLink=!0;let d={type:"link",raw:e,href:a,title:n,text:o,tokens:i.inlineTokens(o)};return i.state.inLink=!1,d}return{type:"image",raw:e,href:a,title:n,text:V(o)}}l(uo,"outputLink");function Lr(s,t){let e=s.match(/^(\s+)(?:```)/);if(e===null)return t;let i=e[1];return t.split(`
`).map(a=>{let n=a.match(/^\s+/);if(n===null)return a;let[o]=n;return o.length>=i.length?a.slice(i.length):a}).join(`
`)}l(Lr,"indentCodeCompensation");var Wt=class{constructor(t){this.options=t||Yt}space(t){let e=this.rules.block.newline.exec(t);if(e&&e[0].length>0)return{type:"space",raw:e[0]}}code(t){let e=this.rules.block.code.exec(t);if(e){let i=e[0].replace(/^ {1,4}/gm,"");return{type:"code",raw:e[0],codeBlockStyle:"indented",text:this.options.pedantic?i:ys(i,`
`)}}}fences(t){let e=this.rules.block.fences.exec(t);if(e){let i=e[0],a=Lr(i,e[3]||"");return{type:"code",raw:i,lang:e[2]?e[2].trim().replace(this.rules.inline._escapes,"$1"):e[2],text:a}}}heading(t){let e=this.rules.block.heading.exec(t);if(e){let i=e[2].trim();if(/#$/.test(i)){let a=ys(i,"#");(this.options.pedantic||!a||/ $/.test(a))&&(i=a.trim())}return{type:"heading",raw:e[0],depth:e[1].length,text:i,tokens:this.lexer.inline(i)}}}hr(t){let e=this.rules.block.hr.exec(t);if(e)return{type:"hr",raw:e[0]}}blockquote(t){let e=this.rules.block.blockquote.exec(t);if(e){let i=e[0].replace(/^ *>[ \t]?/gm,""),a=this.lexer.state.top;this.lexer.state.top=!0;let n=this.lexer.blockTokens(i);return this.lexer.state.top=a,{type:"blockquote",raw:e[0],tokens:n,text:i}}}list(t){let e=this.rules.block.list.exec(t);if(e){let i,a,n,o,d,c,u,m,g,f,y,I,P=e[1].trim(),j=P.length>1,T={type:"list",raw:"",ordered:j,start:j?+P.slice(0,-1):"",loose:!1,items:[]};P=j?`\\d{1,9}\\${P.slice(-1)}`:`\\${P}`,this.options.pedantic&&(P=j?P:"[*+-]");let L=new RegExp(`^( {0,3}${P})((?:[	 ][^\\n]*)?(?:\\n|$))`);for(;t&&(I=!1,!(!(e=L.exec(t))||this.rules.block.hr.test(t)));){if(i=e[0],t=t.substring(i.length),m=e[2].split(`
`,1)[0].replace(/^\t+/,F=>" ".repeat(3*F.length)),g=t.split(`
`,1)[0],this.options.pedantic?(o=2,y=m.trimLeft()):(o=e[2].search(/[^ ]/),o=o>4?1:o,y=m.slice(o),o+=e[1].length),c=!1,!m&&/^ *$/.test(g)&&(i+=g+`
`,t=t.substring(g.length+1),I=!0),!I){let F=new RegExp(`^ {0,${Math.min(3,o-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`),H=new RegExp(`^ {0,${Math.min(3,o-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),U=new RegExp(`^ {0,${Math.min(3,o-1)}}(?:\`\`\`|~~~)`),k=new RegExp(`^ {0,${Math.min(3,o-1)}}#`);for(;t&&(f=t.split(`
`,1)[0],g=f,this.options.pedantic&&(g=g.replace(/^ {1,4}(?=( {4})*[^ ])/g,"  ")),!(U.test(g)||k.test(g)||F.test(g)||H.test(t)));){if(g.search(/[^ ]/)>=o||!g.trim())y+=`
`+g.slice(o);else{if(c||m.search(/[^ ]/)>=4||U.test(m)||k.test(m)||H.test(m))break;y+=`
`+g}!c&&!g.trim()&&(c=!0),i+=f+`
`,t=t.substring(f.length+1),m=g.slice(o)}}T.loose||(u?T.loose=!0:/\n *\n *$/.test(i)&&(u=!0)),this.options.gfm&&(a=/^\[[ xX]\] /.exec(y),a&&(n=a[0]!=="[ ] ",y=y.replace(/^\[[ xX]\] +/,""))),T.items.push({type:"list_item",raw:i,task:!!a,checked:n,loose:!1,text:y}),T.raw+=i}T.items[T.items.length-1].raw=i.trimRight(),T.items[T.items.length-1].text=y.trimRight(),T.raw=T.raw.trimRight();let de=T.items.length;for(d=0;d<de;d++)if(this.lexer.state.top=!1,T.items[d].tokens=this.lexer.blockTokens(T.items[d].text,[]),!T.loose){let F=T.items[d].tokens.filter(U=>U.type==="space"),H=F.length>0&&F.some(U=>/\n.*\n/.test(U.raw));T.loose=H}if(T.loose)for(d=0;d<de;d++)T.items[d].loose=!0;return T}}html(t){let e=this.rules.block.html.exec(t);if(e){let i={type:"html",raw:e[0],pre:!this.options.sanitizer&&(e[1]==="pre"||e[1]==="script"||e[1]==="style"),text:e[0]};if(this.options.sanitize){let a=this.options.sanitizer?this.options.sanitizer(e[0]):V(e[0]);i.type="paragraph",i.text=a,i.tokens=this.lexer.inline(a)}return i}}def(t){let e=this.rules.block.def.exec(t);if(e){let i=e[1].toLowerCase().replace(/\s+/g," "),a=e[2]?e[2].replace(/^<(.*)>$/,"$1").replace(this.rules.inline._escapes,"$1"):"",n=e[3]?e[3].substring(1,e[3].length-1).replace(this.rules.inline._escapes,"$1"):e[3];return{type:"def",tag:i,raw:e[0],href:a,title:n}}}table(t){let e=this.rules.block.table.exec(t);if(e){let i={type:"table",header:lo(e[1]).map(a=>({text:a})),align:e[2].replace(/^ *|\| *$/g,"").split(/ *\| */),rows:e[3]&&e[3].trim()?e[3].replace(/\n[ \t]*$/,"").split(`
`):[]};if(i.header.length===i.align.length){i.raw=e[0];let a=i.align.length,n,o,d,c;for(n=0;n<a;n++)/^ *-+: *$/.test(i.align[n])?i.align[n]="right":/^ *:-+: *$/.test(i.align[n])?i.align[n]="center":/^ *:-+ *$/.test(i.align[n])?i.align[n]="left":i.align[n]=null;for(a=i.rows.length,n=0;n<a;n++)i.rows[n]=lo(i.rows[n],i.header.length).map(u=>({text:u}));for(a=i.header.length,o=0;o<a;o++)i.header[o].tokens=this.lexer.inline(i.header[o].text);for(a=i.rows.length,o=0;o<a;o++)for(c=i.rows[o],d=0;d<c.length;d++)c[d].tokens=this.lexer.inline(c[d].text);return i}}}lheading(t){let e=this.rules.block.lheading.exec(t);if(e)return{type:"heading",raw:e[0],depth:e[2].charAt(0)==="="?1:2,text:e[1],tokens:this.lexer.inline(e[1])}}paragraph(t){let e=this.rules.block.paragraph.exec(t);if(e){let i=e[1].charAt(e[1].length-1)===`
`?e[1].slice(0,-1):e[1];return{type:"paragraph",raw:e[0],text:i,tokens:this.lexer.inline(i)}}}text(t){let e=this.rules.block.text.exec(t);if(e)return{type:"text",raw:e[0],text:e[0],tokens:this.lexer.inline(e[0])}}escape(t){let e=this.rules.inline.escape.exec(t);if(e)return{type:"escape",raw:e[0],text:V(e[1])}}tag(t){let e=this.rules.inline.tag.exec(t);if(e)return!this.lexer.state.inLink&&/^<a /i.test(e[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\/a>/i.test(e[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\s|>)/i.test(e[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(e[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?"text":"html",raw:e[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(e[0]):V(e[0]):e[0]}}link(t){let e=this.rules.inline.link.exec(t);if(e){let i=e[2].trim();if(!this.options.pedantic&&/^</.test(i)){if(!/>$/.test(i))return;let o=ys(i.slice(0,-1),"\\");if((i.length-o.length)%2===0)return}else{let o=Sr(e[2],"()");if(o>-1){let c=(e[0].indexOf("!")===0?5:4)+e[1].length+o;e[2]=e[2].substring(0,o),e[0]=e[0].substring(0,c).trim(),e[3]=""}}let a=e[2],n="";if(this.options.pedantic){let o=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(a);o&&(a=o[1],n=o[3])}else n=e[3]?e[3].slice(1,-1):"";return a=a.trim(),/^</.test(a)&&(this.options.pedantic&&!/>$/.test(i)?a=a.slice(1):a=a.slice(1,-1)),uo(e,{href:a&&a.replace(this.rules.inline._escapes,"$1"),title:n&&n.replace(this.rules.inline._escapes,"$1")},e[0],this.lexer)}}reflink(t,e){let i;if((i=this.rules.inline.reflink.exec(t))||(i=this.rules.inline.nolink.exec(t))){let a=(i[2]||i[1]).replace(/\s+/g," ");if(a=e[a.toLowerCase()],!a){let n=i[0].charAt(0);return{type:"text",raw:n,text:n}}return uo(i,a,i[0],this.lexer)}}emStrong(t,e,i=""){let a=this.rules.inline.emStrong.lDelim.exec(t);if(!a||a[3]&&i.match(/[\p{L}\p{N}]/u))return;let n=a[1]||a[2]||"";if(!n||n&&(i===""||this.rules.inline.punctuation.exec(i))){let o=a[0].length-1,d,c,u=o,m=0,g=a[0][0]==="*"?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(g.lastIndex=0,e=e.slice(-1*t.length+o);(a=g.exec(e))!=null;){if(d=a[1]||a[2]||a[3]||a[4]||a[5]||a[6],!d)continue;if(c=d.length,a[3]||a[4]){u+=c;continue}else if((a[5]||a[6])&&o%3&&!((o+c)%3)){m+=c;continue}if(u-=c,u>0)continue;c=Math.min(c,c+u+m);let f=t.slice(0,o+a.index+(a[0].length-d.length)+c);if(Math.min(o,c)%2){let I=f.slice(1,-1);return{type:"em",raw:f,text:I,tokens:this.lexer.inlineTokens(I)}}let y=f.slice(2,-2);return{type:"strong",raw:f,text:y,tokens:this.lexer.inlineTokens(y)}}}}codespan(t){let e=this.rules.inline.code.exec(t);if(e){let i=e[2].replace(/\n/g," "),a=/[^ ]/.test(i),n=/^ /.test(i)&&/ $/.test(i);return a&&n&&(i=i.substring(1,i.length-1)),i=V(i,!0),{type:"codespan",raw:e[0],text:i}}}br(t){let e=this.rules.inline.br.exec(t);if(e)return{type:"br",raw:e[0]}}del(t){let e=this.rules.inline.del.exec(t);if(e)return{type:"del",raw:e[0],text:e[2],tokens:this.lexer.inlineTokens(e[2])}}autolink(t,e){let i=this.rules.inline.autolink.exec(t);if(i){let a,n;return i[2]==="@"?(a=V(this.options.mangle?e(i[1]):i[1]),n="mailto:"+a):(a=V(i[1]),n=a),{type:"link",raw:i[0],text:a,href:n,tokens:[{type:"text",raw:a,text:a}]}}}url(t,e){let i;if(i=this.rules.inline.url.exec(t)){let a,n;if(i[2]==="@")a=V(this.options.mangle?e(i[0]):i[0]),n="mailto:"+a;else{let o;do o=i[0],i[0]=this.rules.inline._backpedal.exec(i[0])[0];while(o!==i[0]);a=V(i[0]),i[1]==="www."?n="http://"+i[0]:n=i[0]}return{type:"link",raw:i[0],text:a,href:n,tokens:[{type:"text",raw:a,text:a}]}}}inlineText(t,e){let i=this.rules.inline.text.exec(t);if(i){let a;return this.lexer.state.inRawBlock?a=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(i[0]):V(i[0]):i[0]:a=V(this.options.smartypants?e(i[0]):i[0]),{type:"text",raw:i[0],text:a}}}};l(Wt,"Tokenizer");var v={newline:/^(?: *(?:\n|$))+/,code:/^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,hr:/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,html:"^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",def:/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,table:bs,lheading:/^((?:.|\n(?!\n))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,text:/^[^\n]+/};v._label=/(?!\s*\])(?:\\.|[^\[\]\\])+/;v._title=/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;v.def=M(v.def).replace("label",v._label).replace("title",v._title).getRegex();v.bullet=/(?:[*+-]|\d{1,9}[.)])/;v.listItemStart=M(/^( *)(bull) */).replace("bull",v.bullet).getRegex();v.list=M(v.list).replace(/bull/g,v.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+v.def.source+")").getRegex();v._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";v._comment=/<!--(?!-?>)[\s\S]*?(?:-->|$)/;v.html=M(v.html,"i").replace("comment",v._comment).replace("tag",v._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();v.paragraph=M(v._paragraph).replace("hr",v.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",v._tag).getRegex();v.blockquote=M(v.blockquote).replace("paragraph",v.paragraph).getRegex();v.normal=ce({},v);v.gfm=ce({},v.normal,{table:"^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"});v.gfm.table=M(v.gfm.table).replace("hr",v.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",v._tag).getRegex();v.gfm.paragraph=M(v._paragraph).replace("hr",v.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("table",v.gfm.table).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",v._tag).getRegex();v.pedantic=ce({},v.normal,{html:M(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment",v._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:bs,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:M(v.normal._paragraph).replace("hr",v.hr).replace("heading",` *#{1,6} *[^
]`).replace("lheading",v.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()});var b={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:bs,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(ref)\]/,nolink:/^!?\[(ref)\](?:\[\])?/,reflinkSearch:"reflink|nolink(?!\\()",emStrong:{lDelim:/^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,rDelimAst:/^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/,rDelimUnd:/^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:bs,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,punctuation:/^([\spunctuation])/};b._punctuation="!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";b.punctuation=M(b.punctuation).replace(/punctuation/g,b._punctuation).getRegex();b.blockSkip=/\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;b.escapedEmSt=/(?:^|[^\\])(?:\\\\)*\\[*_]/g;b._comment=M(v._comment).replace("(?:-->|$)","-->").getRegex();b.emStrong.lDelim=M(b.emStrong.lDelim).replace(/punct/g,b._punctuation).getRegex();b.emStrong.rDelimAst=M(b.emStrong.rDelimAst,"g").replace(/punct/g,b._punctuation).getRegex();b.emStrong.rDelimUnd=M(b.emStrong.rDelimUnd,"g").replace(/punct/g,b._punctuation).getRegex();b._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;b._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;b._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;b.autolink=M(b.autolink).replace("scheme",b._scheme).replace("email",b._email).getRegex();b._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;b.tag=M(b.tag).replace("comment",b._comment).replace("attribute",b._attribute).getRegex();b._label=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;b._href=/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;b._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;b.link=M(b.link).replace("label",b._label).replace("href",b._href).replace("title",b._title).getRegex();b.reflink=M(b.reflink).replace("label",b._label).replace("ref",v._label).getRegex();b.nolink=M(b.nolink).replace("ref",v._label).getRegex();b.reflinkSearch=M(b.reflinkSearch,"g").replace("reflink",b.reflink).replace("nolink",b.nolink).getRegex();b.normal=ce({},b);b.pedantic=ce({},b.normal,{strong:{start:/^__|\*\*/,middle:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,endAst:/\*\*(?!\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\*/,middle:/^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,endAst:/\*(?!\*)/g,endUnd:/_(?!_)/g},link:M(/^!?\[(label)\]\((.*?)\)/).replace("label",b._label).getRegex(),reflink:M(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",b._label).getRegex()});b.gfm=ce({},b.normal,{escape:M(b.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/});b.gfm.url=M(b.gfm.url,"i").replace("email",b.gfm._extended_email).getRegex();b.breaks=ce({},b.gfm,{br:M(b.br).replace("{2,}","*").getRegex(),text:M(b.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()});function zr(s){return s.replace(/---/g,"\u2014").replace(/--/g,"\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1\u2018").replace(/'/g,"\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1\u201C").replace(/"/g,"\u201D").replace(/\.{3}/g,"\u2026")}l(zr,"smartypants");function mo(s){let t="",e,i,a=s.length;for(e=0;e<a;e++)i=s.charCodeAt(e),Math.random()>.5&&(i="x"+i.toString(16)),t+="&#"+i+";";return t}l(mo,"mangle");var oe=class{constructor(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||Yt,this.options.tokenizer=this.options.tokenizer||new Wt,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};let e={block:v.normal,inline:b.normal};this.options.pedantic?(e.block=v.pedantic,e.inline=b.pedantic):this.options.gfm&&(e.block=v.gfm,this.options.breaks?e.inline=b.breaks:e.inline=b.gfm),this.tokenizer.rules=e}static get rules(){return{block:v,inline:b}}static lex(t,e){return new oe(e).lex(t)}static lexInline(t,e){return new oe(e).inlineTokens(t)}lex(t){t=t.replace(/\r\n|\r/g,`
`),this.blockTokens(t,this.tokens);let e;for(;e=this.inlineQueue.shift();)this.inlineTokens(e.src,e.tokens);return this.tokens}blockTokens(t,e=[]){this.options.pedantic?t=t.replace(/\t/g,"    ").replace(/^ +$/gm,""):t=t.replace(/^( *)(\t+)/gm,(d,c,u)=>c+"    ".repeat(u.length));let i,a,n,o;for(;t;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some(d=>(i=d.call({lexer:this},t,e))?(t=t.substring(i.raw.length),e.push(i),!0):!1))){if(i=this.tokenizer.space(t)){t=t.substring(i.raw.length),i.raw.length===1&&e.length>0?e[e.length-1].raw+=`
`:e.push(i);continue}if(i=this.tokenizer.code(t)){t=t.substring(i.raw.length),a=e[e.length-1],a&&(a.type==="paragraph"||a.type==="text")?(a.raw+=`
`+i.raw,a.text+=`
`+i.text,this.inlineQueue[this.inlineQueue.length-1].src=a.text):e.push(i);continue}if(i=this.tokenizer.fences(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.heading(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.hr(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.blockquote(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.list(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.html(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.def(t)){t=t.substring(i.raw.length),a=e[e.length-1],a&&(a.type==="paragraph"||a.type==="text")?(a.raw+=`
`+i.raw,a.text+=`
`+i.raw,this.inlineQueue[this.inlineQueue.length-1].src=a.text):this.tokens.links[i.tag]||(this.tokens.links[i.tag]={href:i.href,title:i.title});continue}if(i=this.tokenizer.table(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.lheading(t)){t=t.substring(i.raw.length),e.push(i);continue}if(n=t,this.options.extensions&&this.options.extensions.startBlock){let d=1/0,c=t.slice(1),u;this.options.extensions.startBlock.forEach(function(m){u=m.call({lexer:this},c),typeof u=="number"&&u>=0&&(d=Math.min(d,u))}),d<1/0&&d>=0&&(n=t.substring(0,d+1))}if(this.state.top&&(i=this.tokenizer.paragraph(n))){a=e[e.length-1],o&&a.type==="paragraph"?(a.raw+=`
`+i.raw,a.text+=`
`+i.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=a.text):e.push(i),o=n.length!==t.length,t=t.substring(i.raw.length);continue}if(i=this.tokenizer.text(t)){t=t.substring(i.raw.length),a=e[e.length-1],a&&a.type==="text"?(a.raw+=`
`+i.raw,a.text+=`
`+i.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=a.text):e.push(i);continue}if(t){let d="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(d);break}else throw new Error(d)}}return this.state.top=!0,e}inline(t,e=[]){return this.inlineQueue.push({src:t,tokens:e}),e}inlineTokens(t,e=[]){let i,a,n,o=t,d,c,u;if(this.tokens.links){let m=Object.keys(this.tokens.links);if(m.length>0)for(;(d=this.tokenizer.rules.inline.reflinkSearch.exec(o))!=null;)m.includes(d[0].slice(d[0].lastIndexOf("[")+1,-1))&&(o=o.slice(0,d.index)+"["+co("a",d[0].length-2)+"]"+o.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;(d=this.tokenizer.rules.inline.blockSkip.exec(o))!=null;)o=o.slice(0,d.index)+"["+co("a",d[0].length-2)+"]"+o.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;(d=this.tokenizer.rules.inline.escapedEmSt.exec(o))!=null;)o=o.slice(0,d.index+d[0].length-2)+"++"+o.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex),this.tokenizer.rules.inline.escapedEmSt.lastIndex--;for(;t;)if(c||(u=""),c=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some(m=>(i=m.call({lexer:this},t,e))?(t=t.substring(i.raw.length),e.push(i),!0):!1))){if(i=this.tokenizer.escape(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.tag(t)){t=t.substring(i.raw.length),a=e[e.length-1],a&&i.type==="text"&&a.type==="text"?(a.raw+=i.raw,a.text+=i.text):e.push(i);continue}if(i=this.tokenizer.link(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.reflink(t,this.tokens.links)){t=t.substring(i.raw.length),a=e[e.length-1],a&&i.type==="text"&&a.type==="text"?(a.raw+=i.raw,a.text+=i.text):e.push(i);continue}if(i=this.tokenizer.emStrong(t,o,u)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.codespan(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.br(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.del(t)){t=t.substring(i.raw.length),e.push(i);continue}if(i=this.tokenizer.autolink(t,mo)){t=t.substring(i.raw.length),e.push(i);continue}if(!this.state.inLink&&(i=this.tokenizer.url(t,mo))){t=t.substring(i.raw.length),e.push(i);continue}if(n=t,this.options.extensions&&this.options.extensions.startInline){let m=1/0,g=t.slice(1),f;this.options.extensions.startInline.forEach(function(y){f=y.call({lexer:this},g),typeof f=="number"&&f>=0&&(m=Math.min(m,f))}),m<1/0&&m>=0&&(n=t.substring(0,m+1))}if(i=this.tokenizer.inlineText(n,zr)){t=t.substring(i.raw.length),i.raw.slice(-1)!=="_"&&(u=i.raw.slice(-1)),c=!0,a=e[e.length-1],a&&a.type==="text"?(a.raw+=i.raw,a.text+=i.text):e.push(i);continue}if(t){let m="Infinite loop on byte: "+t.charCodeAt(0);if(this.options.silent){console.error(m);break}else throw new Error(m)}}return e}};l(oe,"Lexer");var Ht=class{constructor(t){this.options=t||Yt}code(t,e,i){let a=(e||"").match(/\S*/)[0];if(this.options.highlight){let n=this.options.highlight(t,a);n!=null&&n!==t&&(i=!0,t=n)}return t=t.replace(/\n$/,"")+`
`,a?'<pre><code class="'+this.options.langPrefix+V(a)+'">'+(i?t:V(t,!0))+`</code></pre>
`:"<pre><code>"+(i?t:V(t,!0))+`</code></pre>
`}blockquote(t){return`<blockquote>
${t}</blockquote>
`}html(t){return t}heading(t,e,i,a){if(this.options.headerIds){let n=this.options.headerPrefix+a.slug(i);return`<h${e} id="${n}">${t}</h${e}>
`}return`<h${e}>${t}</h${e}>
`}hr(){return this.options.xhtml?`<hr/>
`:`<hr>
`}list(t,e,i){let a=e?"ol":"ul",n=e&&i!==1?' start="'+i+'"':"";return"<"+a+n+`>
`+t+"</"+a+`>
`}listitem(t){return`<li>${t}</li>
`}checkbox(t){return"<input "+(t?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "}paragraph(t){return`<p>${t}</p>
`}table(t,e){return e&&(e=`<tbody>${e}</tbody>`),`<table>
<thead>
`+t+`</thead>
`+e+`</table>
`}tablerow(t){return`<tr>
${t}</tr>
`}tablecell(t,e){let i=e.header?"th":"td";return(e.align?`<${i} align="${e.align}">`:`<${i}>`)+t+`</${i}>
`}strong(t){return`<strong>${t}</strong>`}em(t){return`<em>${t}</em>`}codespan(t){return`<code>${t}</code>`}br(){return this.options.xhtml?"<br/>":"<br>"}del(t){return`<del>${t}</del>`}link(t,e,i){if(t=ro(this.options.sanitize,this.options.baseUrl,t),t===null)return i;let a='<a href="'+t+'"';return e&&(a+=' title="'+e+'"'),a+=">"+i+"</a>",a}image(t,e,i){if(t=ro(this.options.sanitize,this.options.baseUrl,t),t===null)return i;let a=`<img src="${t}" alt="${i}"`;return e&&(a+=` title="${e}"`),a+=this.options.xhtml?"/>":">",a}text(t){return t}};l(Ht,"Renderer");var Bi=class{strong(t){return t}em(t){return t}codespan(t){return t}del(t){return t}html(t){return t}text(t){return t}link(t,e,i){return""+i}image(t,e,i){return""+i}br(){return""}};l(Bi,"TextRenderer");var Fi=class{constructor(){this.seen={}}serialize(t){return t.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-")}getNextSafeSlug(t,e){let i=t,a=0;if(this.seen.hasOwnProperty(i)){a=this.seen[t];do a++,i=t+"-"+a;while(this.seen.hasOwnProperty(i))}return e||(this.seen[t]=a,this.seen[i]=0),i}slug(t,e={}){let i=this.serialize(t);return this.getNextSafeSlug(i,e.dryrun)}};l(Fi,"Slugger");var ie=class{constructor(t){this.options=t||Yt,this.options.renderer=this.options.renderer||new Ht,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new Bi,this.slugger=new Fi}static parse(t,e){return new ie(e).parse(t)}static parseInline(t,e){return new ie(e).parseInline(t)}parse(t,e=!0){let i="",a,n,o,d,c,u,m,g,f,y,I,P,j,T,L,de,F,H,U,k=t.length;for(a=0;a<k;a++){if(y=t[a],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[y.type]&&(U=this.options.extensions.renderers[y.type].call({parser:this},y),U!==!1||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(y.type))){i+=U||"";continue}switch(y.type){case"space":continue;case"hr":{i+=this.renderer.hr();continue}case"heading":{i+=this.renderer.heading(this.parseInline(y.tokens),y.depth,fo(this.parseInline(y.tokens,this.textRenderer)),this.slugger);continue}case"code":{i+=this.renderer.code(y.text,y.lang,y.escaped);continue}case"table":{for(g="",m="",d=y.header.length,n=0;n<d;n++)m+=this.renderer.tablecell(this.parseInline(y.header[n].tokens),{header:!0,align:y.align[n]});for(g+=this.renderer.tablerow(m),f="",d=y.rows.length,n=0;n<d;n++){for(u=y.rows[n],m="",c=u.length,o=0;o<c;o++)m+=this.renderer.tablecell(this.parseInline(u[o].tokens),{header:!1,align:y.align[o]});f+=this.renderer.tablerow(m)}i+=this.renderer.table(g,f);continue}case"blockquote":{f=this.parse(y.tokens),i+=this.renderer.blockquote(f);continue}case"list":{for(I=y.ordered,P=y.start,j=y.loose,d=y.items.length,f="",n=0;n<d;n++)L=y.items[n],de=L.checked,F=L.task,T="",L.task&&(H=this.renderer.checkbox(de),j?L.tokens.length>0&&L.tokens[0].type==="paragraph"?(L.tokens[0].text=H+" "+L.tokens[0].text,L.tokens[0].tokens&&L.tokens[0].tokens.length>0&&L.tokens[0].tokens[0].type==="text"&&(L.tokens[0].tokens[0].text=H+" "+L.tokens[0].tokens[0].text)):L.tokens.unshift({type:"text",text:H}):T+=H),T+=this.parse(L.tokens,j),f+=this.renderer.listitem(T,F,de);i+=this.renderer.list(f,I,P);continue}case"html":{i+=this.renderer.html(y.text);continue}case"paragraph":{i+=this.renderer.paragraph(this.parseInline(y.tokens));continue}case"text":{for(f=y.tokens?this.parseInline(y.tokens):y.text;a+1<k&&t[a+1].type==="text";)y=t[++a],f+=`
`+(y.tokens?this.parseInline(y.tokens):y.text);i+=e?this.renderer.paragraph(f):f;continue}default:{let Y='Token with "'+y.type+'" type was not found.';if(this.options.silent){console.error(Y);return}else throw new Error(Y)}}}return i}parseInline(t,e){e=e||this.renderer;let i="",a,n,o,d=t.length;for(a=0;a<d;a++){if(n=t[a],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[n.type]&&(o=this.options.extensions.renderers[n.type].call({parser:this},n),o!==!1||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(n.type))){i+=o||"";continue}switch(n.type){case"escape":{i+=e.text(n.text);break}case"html":{i+=e.html(n.text);break}case"link":{i+=e.link(n.href,n.title,this.parseInline(n.tokens,e));break}case"image":{i+=e.image(n.href,n.title,n.text);break}case"strong":{i+=e.strong(this.parseInline(n.tokens,e));break}case"em":{i+=e.em(this.parseInline(n.tokens,e));break}case"codespan":{i+=e.codespan(n.text);break}case"br":{i+=e.br();break}case"del":{i+=e.del(this.parseInline(n.tokens,e));break}case"text":{i+=e.text(n.text);break}default:{let c='Token with "'+n.type+'" type was not found.';if(this.options.silent){console.error(c);return}else throw new Error(c)}}}return i}};l(ie,"Parser");function x(s,t,e){if(typeof s>"u"||s===null)throw new Error("marked(): input parameter is undefined or null");if(typeof s!="string")throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(s)+", string expected");if(typeof t=="function"&&(e=t,t=null),t=ce({},x.defaults,t||{}),yo(t),e){let a=t.highlight,n;try{n=oe.lex(s,t)}catch(c){return e(c)}let o=l(function(c){let u;if(!c)try{t.walkTokens&&x.walkTokens(n,t.walkTokens),u=ie.parse(n,t)}catch(m){c=m}return t.highlight=a,c?e(c):e(null,u)},"done");if(!a||a.length<3||(delete t.highlight,!n.length))return o();let d=0;x.walkTokens(n,function(c){c.type==="code"&&(d++,setTimeout(()=>{a(c.text,c.lang,function(u,m){if(u)return o(u);m!=null&&m!==c.text&&(c.text=m,c.escaped=!0),d--,d===0&&o()})},0))}),d===0&&o();return}function i(a){if(a.message+=`
Please report this to https://github.com/markedjs/marked.`,t.silent)return"<p>An error occurred:</p><pre>"+V(a.message+"",!0)+"</pre>";throw a}l(i,"onError");try{let a=oe.lex(s,t);if(t.walkTokens){if(t.async)return Promise.all(x.walkTokens(a,t.walkTokens)).then(()=>ie.parse(a,t)).catch(i);x.walkTokens(a,t.walkTokens)}return ie.parse(a,t)}catch(a){i(a)}}l(x,"marked");x.options=x.setOptions=function(s){return ce(x.defaults,s),Ir(x.defaults),x};x.getDefaults=po;x.defaults=Yt;x.use=function(...s){let t=x.defaults.extensions||{renderers:{},childTokens:{}};s.forEach(e=>{let i=ce({},e);if(i.async=x.defaults.async||i.async,e.extensions&&(e.extensions.forEach(a=>{if(!a.name)throw new Error("extension name required");if(a.renderer){let n=t.renderers[a.name];n?t.renderers[a.name]=function(...o){let d=a.renderer.apply(this,o);return d===!1&&(d=n.apply(this,o)),d}:t.renderers[a.name]=a.renderer}if(a.tokenizer){if(!a.level||a.level!=="block"&&a.level!=="inline")throw new Error("extension level must be 'block' or 'inline'");t[a.level]?t[a.level].unshift(a.tokenizer):t[a.level]=[a.tokenizer],a.start&&(a.level==="block"?t.startBlock?t.startBlock.push(a.start):t.startBlock=[a.start]:a.level==="inline"&&(t.startInline?t.startInline.push(a.start):t.startInline=[a.start]))}a.childTokens&&(t.childTokens[a.name]=a.childTokens)}),i.extensions=t),e.renderer){let a=x.defaults.renderer||new Ht;for(let n in e.renderer){let o=a[n];a[n]=(...d)=>{let c=e.renderer[n].apply(a,d);return c===!1&&(c=o.apply(a,d)),c}}i.renderer=a}if(e.tokenizer){let a=x.defaults.tokenizer||new Wt;for(let n in e.tokenizer){let o=a[n];a[n]=(...d)=>{let c=e.tokenizer[n].apply(a,d);return c===!1&&(c=o.apply(a,d)),c}}i.tokenizer=a}if(e.walkTokens){let a=x.defaults.walkTokens;i.walkTokens=function(n){let o=[];return o.push(e.walkTokens.call(this,n)),a&&(o=o.concat(a.call(this,n))),o}}x.setOptions(i)})};x.walkTokens=function(s,t){let e=[];for(let i of s)switch(e=e.concat(t.call(x,i)),i.type){case"table":{for(let a of i.header)e=e.concat(x.walkTokens(a.tokens,t));for(let a of i.rows)for(let n of a)e=e.concat(x.walkTokens(n.tokens,t));break}case"list":{e=e.concat(x.walkTokens(i.items,t));break}default:x.defaults.extensions&&x.defaults.extensions.childTokens&&x.defaults.extensions.childTokens[i.type]?x.defaults.extensions.childTokens[i.type].forEach(function(a){e=e.concat(x.walkTokens(i[a],t))}):i.tokens&&(e=e.concat(x.walkTokens(i.tokens,t)))}return e};x.parseInline=function(s,t){if(typeof s>"u"||s===null)throw new Error("marked.parseInline(): input parameter is undefined or null");if(typeof s!="string")throw new Error("marked.parseInline(): input parameter is of type "+Object.prototype.toString.call(s)+", string expected");t=ce({},x.defaults,t||{}),yo(t);try{let e=oe.lexInline(s,t);return t.walkTokens&&x.walkTokens(e,t.walkTokens),ie.parseInline(e,t)}catch(e){if(e.message+=`
Please report this to https://github.com/markedjs/marked.`,t.silent)return"<p>An error occurred:</p><pre>"+V(e.message+"",!0)+"</pre>";throw e}};x.Parser=ie;x.parser=ie.parse;x.Renderer=Ht;x.TextRenderer=Bi;x.Lexer=oe;x.lexer=oe.lex;x.Tokenizer=Wt;x.Slugger=Fi;x.parse=x;var Nu=x.options,Gu=x.setOptions,qu=x.use,Zu=x.walkTokens,Vu=x.parseInline;var Xu=ie.parse,Ku=oe.lex;var bo=l((s,t)=>{for(;!(s!=null&&s.matches(t));){if(!(s instanceof HTMLElement))throw new TypeError(`Can't find a match for ${t}`);s=s.parentElement}return s},"firstParentMatching"),vo=l((s,t)=>{if(!(s instanceof HTMLElement)||!s.matches(t))return;let e=s.getAttribute("aria-expanded")==="true";s.setAttribute("aria-expanded",e?"false":"true")},"toggleExpanded"),ws=class extends q{constructor(){super("Releases",(0,vs.s)("<section></section>",(0,vs.s)('<div class="release-list"></div>',...no.map((t,e)=>{let i=new Date(t.date);return(0,vs.s)(`<div class="release">
  <h2>${t.version} - <time title="${i.toLocaleString()}">${J.timeSince(i)}</time></h2>
  
  <div aria-expanded="${e===0?"true":"false"}">
    ${t.localChanges.length>0?`
    <ul>
      ${t.localChanges.map(a=>`<li>${x(a.replace(/^\s*-\s*/,"").trim(),{sanitize:!0})}</li>`).join(`
      `)}
    </ul>
  `:""}
    
    ${Object.keys(t.externalChanges).length>0?`
    <h3>External changes</h3>
    
    <dl>
      ${Object.entries(t.externalChanges).map(([a,{status:n,log:o}])=>`<dd>${n} ${a}</dd>
      <dt aria-expanded="false">
        <ul>
          ${o.map(d=>`<li>${x(d.replace(/^\s*-\s*/,"").trim(),{sanitize:!0})}</li>`).join(`
          `)}
        </ul>
      </dt>`).join(`
    `)}
    </dl>
  </div>
`:""}
</div>`)}))),{canMaximise:!0,canResize:!0,classes:"releases"}),this.on("click",t=>{t.target instanceof HTMLElement&&(t.target.matches("dd, dd *")&&vo(bo(t.target,"dd").nextElementSibling,"dt"),t.target.matches(".release h2, .release h2 *")&&vo(bo(t.target,"h2").nextElementSibling,"div"))})}};l(ws,"ReleaseWindow");var wo=ws;var Ye,xs=class extends ue.Element{constructor(e,i){super(e);p(this,Ye,void 0);h(this,Ye,i),this.build(),this.addClass("active")}async build(e=!1){let i=await D.hasAllAssets();i||(console.log("Missing assets:"),console.log(await D.missingAssets())),this.append(A((0,ue.s)("<nav></nav>",A((0,ue.s)(`<button autofocus${i?"":" hidden"}>Start a New Game</button>`),{click:()=>{new Vn(r(this,Ye),()=>this.remove())}}),A((0,ue.s)(`<button${i?"":" hidden"}>Earth</button>`),{click:()=>new Xn(r(this,Ye),()=>this.remove())}),A((0,ue.s)(`<button${i?"":" hidden"}>Customise World</button>`),{click:async()=>new qn(r(this,Ye),()=>this.remove())}),A((0,ue.s)("<button>Import Assets</button>"),{click:()=>new ao}),A((0,ue.s)(`<button${e?"":" hidden"}>Quit</button>`),{click:()=>{this.remove(),r(this,Ye).send("quit")}})),{keydown(a){let n=document.activeElement,o=Ue(a);n===null||!n.matches("#mainmenu nav button")||(o==="ArrowDown"&&n.nextElementSibling&&n.nextElementSibling.focus(),o==="ArrowUp"&&n.previousElementSibling&&n.previousElementSibling.focus())}}),(0,ue.s)("<footer></footer>",A((0,ue.s)(`<a href="#releases">version: ${so}</a>`),{click(a){a.preventDefault(),new wo}})))}remove(){this.removeClass("active"),setTimeout(()=>super.remove(),2e3)}};l(xs,"MainMenu"),Ye=new WeakMap;var xo=xs;var Io=R(C());var re,me,ot,Nt,we,Is=class{constructor(t,e,i,...a){p(this,re,void 0);p(this,me,void 0);p(this,ot,void 0);p(this,Nt,void 0);p(this,we,void 0);h(this,me,t),h(this,we,e),h(this,Nt,i),h(this,ot,a),h(this,re,r(this,me).getContext("2d")),(0,Io.on)(r(this,me),"click",n=>{let o=n.offsetX-r(this,me).offsetLeft,d=n.offsetY-r(this,me).offsetTop,c=Math.ceil(o/r(this,me).offsetWidth*r(this,we).width()),u=Math.ceil(d/r(this,me).offsetHeight*r(this,we).height());r(this,Nt).setCenter(c,u),this.update()})}update(){let t=r(this,ot)[0].canvas().height*(190/r(this,ot)[0].canvas().width);r(this,me).height=t,r(this,re).clearRect(0,0,190,t),r(this,ot).forEach(a=>r(this,re).drawImage(a.canvas(),0,0,190,t));let[e,i]=r(this,Nt).rawVisibleRange();r(this,re).lineWidth=1,r(this,re).strokeStyle="#fff",r(this,re).fillStyle="rgba(255, 255, 255, .2)",r(this,re).rect(Math.floor(190/r(this,we).width()*e.x),Math.floor(t/r(this,we).height()*e.y),Math.floor(190/r(this,we).width()*(i.x-e.x)),Math.floor(t/r(this,we).height()*(i.y-e.y))),r(this,re).stroke(),r(this,re).fill()}};l(Is,"Minimap"),re=new WeakMap,me=new WeakMap,ot=new WeakMap,Nt=new WeakMap,we=new WeakMap;var Ro=Is;var Wi,Gt,Rs=class{constructor(t=document.body){p(this,Wi,void 0);p(this,Gt,[]);h(this,Wi,t)}receive(t){r(this,Gt).push(t),this.check()}check(){let t=document.querySelector(".notificationWindow");if(!r(this,Gt).length||t)return;let e=r(this,Gt).shift();this.publish(e)}publish(t){var i;new sa((i=t.title)!=null?i:"Notification",t.message,{parent:r(this,Wi)}).on("close",()=>this.check())}};l(Rs,"Notifications"),Wi=new WeakMap,Gt=new WeakMap;var Co=Rs;var qt=R(C());var Hi,Cs=class extends qt.Element{constructor(e,i){super(e);p(this,Hi,void 0);h(this,Hi,i)}build(){this.empty();let{civilization:e,treasuries:i,research:a,cities:n}=r(this,Hi),[o]=i.filter(m=>m.yield._==="Gold"),[d,c]=n.reduce(([m,g],f)=>{let[y,I]=li(f.yields,"Gold","Research");return[m+y,g+I]},[0,0]),u=Math.ceil((a.cost.value-a.progress.value)/c);this.append((0,qt.s)(`<h3>${e.leader.name} of the ${Mt(e,"people")} empire</h3>`),(0,qt.s)(`<p><strong>Researching</strong><br/>${a.researching?`${a.researching._} ${a.progress.value} / ${a.cost.value} (${c} / turn - ${u} turn${u===1?"":"s"})`:`Nothing (${c} / turn)`}</p>`),(0,qt.s)(`<p><strong>Treasury</strong><br/>${o.value} (${d} / turn)</p>`))}};l(Cs,"PlayerDetails"),Hi=new WeakMap;var Ao=Cs;var ko=l(s=>s.cities.reduce((t,e)=>t.concat(e.yields),[]),"combinedYields");var Vs=R(C());var $r=l(async(s,t)=>{let e=await D.getScaled(`./assets/${yt.Research}`,2).then(i=>`<img src="${i.toDataURL("image/png")}">`);return(0,Vs.s)(`<div><p><strong>Researching ${s.researching?s.researching._:"Nothing"}</strong>${s.researching?` ${ci(s,t,"Research")}`:""}</p><p>${e} ${ft(t,"Research")} / turn</p><div class="discovered">${s.complete.map(i=>`<div>${i._}</div>`).join("")}</div></div>`)},"template"),Zt,rt,As=class extends q{constructor(e){super("Player research",(0,Vs.s)("<div></div>"),{classes:"science-report"});p(this,Zt,void 0);p(this,rt,void 0);h(this,rt,e),this.update(),h(this,Zt,new Le([e.id,e.research.id,...e.cities.map(i=>i.id)],i=>{let a=i.player;r(this,Zt).setIds([a.id,a.research.id,...a.cities.map(n=>n.id)]),h(this,rt,a),this.update()}))}close(){return r(this,Zt).dispose(),super.close()}update(){$r(r(this,rt).research,ko(r(this,rt))).then(e=>super.update(e))}};l(As,"ScienceReport"),Zt=new WeakMap,rt=new WeakMap;var To=As;var xe=R(C());var B,ks=class extends xe.Element{constructor(e,i){super(e);p(this,B,void 0);h(this,B,i),this.build()}build(){var e,i;this.empty(),r(this,B)!==null&&this.append((0,xe.s)(`<p>${r(this,B)._} (${r(this,B).tile.x}, ${r(this,B).tile.y})</p>`),(0,xe.s)(`<p>${(i=(e=r(this,B).city)==null?void 0:e.name)!=null?i:"NONE"}</p>`),(0,xe.s)(`<p>${Number.isInteger(r(this,B).moves.value)?r(this,B).moves.value:r(this,B).moves.value.toFixed(2)} / ${r(this,B).movement.value} moves</p>`),(0,xe.s)(`<p>A: ${r(this,B).attack.value} / D: ${r(this,B).defence.value} / V: ${r(this,B).visibility.value}</p>`),(0,xe.s)(`<p>${r(this,B).improvements.map(a=>a._).join(", ")}</p>`),(0,xe.s)(`<p>${r(this,B).tile.terrain._}${r(this,B).tile.terrain.features?" "+r(this,B).tile.terrain.features.map(a=>a._).join(", "):""}${r(this,B).tile.improvements.length?" ("+r(this,B).tile.improvements.map(a=>a._).join(", ")+")":""}</p>`),(0,xe.s)(`<p>${r(this,B).tile.units.filter(a=>a!==r(this,B)).map(a=>a._).join(", ")}</p>`))}};l(ks,"UnitDetails"),B=new WeakMap;var _o=ks;var Ne,Ts=class{constructor(t){p(this,Ne,void 0);h(this,Ne,t)}init(){let t=r(this,Ne);D.hasAllAssets().then(i=>{!i||D.getScaled("./assets/cursor/torch.png",2).then(a=>document.body.style.cursor=`url('${a.toDataURL("image/png")}'), default`)}),(0,dt.on)(document,"keypress",i=>{if(i.key==="F5"||["R","r"].includes(i.key)&&i.ctrlKey){i.preventDefault(),new ma("Quit","Are you sure you want to reload?",()=>window.location.reload());return}});let e={autoEndOfTurn:!0};try{let i=document.getElementById("notification"),a=document.querySelector("#mainmenu"),n=document.getElementById("actions"),o=document.getElementById("other-actions"),d=document.getElementById("game"),c=document.getElementById("map"),u=c.querySelector("canvas"),m=document.getElementById("gameDetails"),g=document.getElementById("playerDetails"),f=document.getElementById("minimap"),y=document.getElementById("unitInfo"),I=document.getElementById("preload"),P=new Co,j=new xo(a,r(this,Ne)),T=l((k,Y,Ae,Ie)=>{let ke=new _o(y,k);if(H=k,ke.build(),Y.setActiveUnit(k),Ae.setActiveUnit(k),Ae.render(),Ae.setVisible(!0),Ie.setActiveUnit(k),Ie.render(),Ie.setVisible(!0),k===null){Y.render();return}F=k,Ae.update([...F!=null&&F.tile?[F.tile]:[],k.tile]),Y.isVisible(k.tile.x,k.tile.y)||Y.setCenter(k.tile.x,k.tile.y),Y.render()},"setActiveUnit");D.getAll().then(k=>k.forEach(Y=>I.append(A((0,dt.s)(`<img src="${Y.uri}" data-path="${Y.name}">`),{error:()=>console.error(`There was a problem preloading '${Y.name}', you may have some missing details.`)}))));let L=[],de,F=null,H=null;t.receive("notification",k=>{i.innerHTML=k,de&&window.clearTimeout(de),de=window.setTimeout(()=>{de=void 0,i.innerText=""},4e3)}),[["chooseCivilization","Choose your civilization"],["chooseLeader","Choose your leader"]].forEach(([k,Y])=>t.receive(k,Ae=>{let{choices:Ie}=Gi(Ae);new Pe(Y,Ie.map(({_:ke})=>({label:ke,value:ke})),ke=>t.send(k,ke),Y,{displayAll:!0})}));let U;t.receiveOnce("gameData",k=>{try{U=Gi(k),new sa("Welcome",(0,dt.s)(`<div class="welcome">
<p>${U.player.civilization.leader.name}, you have risen to become leader of the ${Mt(U.player.civilization,"people")}.</p>
<p>Your people have knowledge of ${J.list(["Irrigation","Mining","Roads",...U.player.research.complete.map(_=>_._)])}.</p>
</div>`)),d.classList.add("active"),u.width=u.parentElement.offsetWidth,u.height=u.parentElement.offsetHeight;let Y=[],Ae=2,Ie=new La(U.player.world),ke=new Nn,z=new Wn(Ie,t,u,{playerId:U.player.id,scale:Ae,tileSize:16},fi,Ia,Ta,wa,fa,Hn,ba,At,Ti,hi,Zs,qs),Mo=z.getLayer(fi),Es=z.getLayer(At),Vt=z.getLayer(Ti),Ps=z.getLayer(hi),Xs=z.getLayer(Zs),lt=z.getLayer(qs),Ms=new Ro(f,Ie,z,Mo,Ps,lt),Ks=new Gs(n,z,r(this,Ne)),Do=new Gs(o,z,r(this,Ne));Es.setVisible(!1),z.on("focus-changed",()=>Ms.update()),z.on("activate-unit",_=>T(_,z,Vt,lt)),ke.on(()=>{lt.setVisible(!lt.isVisible()),z.build(L.splice(0)),z.render()}),(0,dt.on)(window,"resize",()=>{u.width=u.parentElement.offsetWidth,u.height=u.parentElement.offsetHeight});let Ds=l(_=>{U=Gi(_),document.dispatchEvent(new CustomEvent("dataupdated",{detail:{data:U}})),Ks.build(U.player.mandatoryActions),Do.build(U.player.actions.filter(O=>!["ActiveUnit","ChangeProduction","ChooseProduction","ChooseResearch","CityBuild","CompleteProduction","InactiveUnit"].includes(O._))),d.append(Ks.element()),Ie.setTiles(U.player.world.tiles),new Bn(m,U.turn,U.year).build(),new Ao(g,U.player).build(),Y=U.player.actions.filter(O=>O._==="ActiveUnit");let[W]=Y.sort(({value:O},{value:G})=>G===F?1:O===F?-1:(z.isVisible(G.tile.x,G.tile.y)?1:0)-(z.isVisible(O.tile.x,O.tile.y)?1:0));if(F!==(W==null?void 0:W.value)&&(F=null),T(F!=null&&F.active?F:W?W.value:null,z,Vt,lt),z.build(L.splice(0)),z.render(),Ms.update(),e.autoEndOfTurn&&U.player.mandatoryActions.length===1&&U.player.mandatoryActions.every(O=>O._==="EndTurn")){t.send("action",{name:"EndTurn"});return}},"handler");Ds(k),t.receive("gameData",_=>Ds(_));let So=l(_=>_.replace(/]/g,"").split(/[.[]/),"pathToParts"),Qs=l((_,$)=>{let E=So($),W=E.pop();return[E.reduce((G,Yi)=>!G||!(Yi in G)?null:G[Yi],_),W]},"getPenultimateObject"),Lo=l((_,$,E)=>{let[W,O]=Qs(_,$);if(!W||!O){console.warn(`unable to set ${$} of ${_} (${O})`);return}W[O]=E},"setObjectPath"),zo=l((_,$)=>{let[E,W]=Qs(_,$);if(!E||!W){console.warn(`unable to set ${$} of ${_} (${W})`);return}delete E[W]},"removeObjectPath");t.receive("gameDataPatch",_=>{_.forEach($=>Object.entries($).forEach(([E,{type:W,index:O,value:G}])=>{if(W==="add"||W==="update"){if(!G.hierarchy){console.error("No hierarchy"),console.error(G);return}O?Lo(k.objects[E],O,G.hierarchy):k.objects[E]=G.hierarchy,document.dispatchEvent(new CustomEvent("patchdatareceived",{detail:{value:G}})),Object.entries(G.objects).forEach(([Yi,Ss])=>{k.objects[Yi]=Ss,Ss._==="PlayerTile"&&L.push(Ss)})}if(W==="remove"){if(O){zo(k.objects[E],O);return}delete k.objects[E]}})),Ds(k)}),t.receive("gameNotification",_=>P.receive(_));let Js={" ":["NoOrders"],b:["FoundCity"],D:["Disband"],f:["Fortify","BuildFortress"],i:["BuildIrrigation","ClearForest","ClearSwamp","ClearJungle"],m:["BuildMine","PlantForest"],P:["Pillage"],r:["BuildRoad","BuildRailroad"],s:["Sleep"],u:["Unload"],w:["Wait"]},en={ArrowUp:"n",PageUp:"ne",ArrowRight:"e",PageDown:"se",ArrowDown:"s",End:"sw",ArrowLeft:"w",Home:"nw"},tn={F1:()=>new jn(U.player,z,t),F4:()=>new Yn(U.player),F6:()=>new To(U.player)},an="";(0,dt.on)(document,"keydown",_=>{let $=Ue(_);if($ in tn&&(tn[_.key](),_.preventDefault()),H){if($ in Js){let E=[...Js[$]];for(;E.length;){let W=E.shift(),[O]=H.actions.filter(G=>G._===W);if(O){t.send("action",{name:"ActiveUnit",id:H.id,unitAction:O._,target:O.to.id}),_.stopPropagation(),_.preventDefault();return}}}if($ in en){let[E]=H.actionsForNeighbours[en[$]];if(E){t.send("action",{name:"ActiveUnit",id:H.id,unitAction:E._,target:E.to.id}),_.stopPropagation(),_.preventDefault();return}}}if($==="Escape"&&document.activeElement!==null){document.activeElement.blur();return}if($==="Enter"&&U.player.mandatoryActions.some(E=>E._==="EndOfTurn")){t.send("action",{name:"EndTurn"}),_.stopPropagation(),_.preventDefault();return}if($==="Tab"){let E=n.querySelector("div.action:first-child button");if(E!==null){E.focus(),_.preventDefault(),_.stopPropagation();return}}if($==="c"&&H){z.setCenter(H.tile.x,H.tile.y),z.render(),Ms.update();return}if($==="w"&&H&&Y.length>1){let E=Y.map(G=>G.value),W=E.indexOf(H),O=E[W===E.length-1?0:W+1];T(O,z,Vt,lt)}if($==="t"){Vt.setVisible(!Vt.isVisible()),Ps.setVisible(!Ps.isVisible()),Xs.setVisible(!Xs.isVisible()),z.render();return}if($==="y"){Es.setVisible(!Es.isVisible()),z.render();return}if(an==="%"&&$==="^"){t.send("cheat",{name:"RevealMap"});return}an=$})}catch(Y){console.error(Y)}})}catch(i){console.error(i)}}};l(Ts,"Renderer"),Ne=new WeakMap;var Uo=Ts;var _s=class{async request(t){return new Promise(e=>{this.send(t.channel(),...t.args()),this.receiveOnce(t.channel(),i=>e(i))})}};l(_s,"AbstractTransport");var Eo=_s;var Ge,Us=class extends Eo{constructor(e){super();p(this,Ge,void 0);h(this,Ge,e)}receive(e,i){r(this,Ge).addEventListener("message",({data:{channel:a,data:n}})=>{a===e&&i(n)})}receiveOnce(e,i){let a=l(({data:{channel:n,data:o}})=>{n===e&&(i(o),r(this,Ge).removeEventListener("message",a))},"onceHandler");r(this,Ge).addEventListener("message",a)}send(e,i){r(this,Ge).postMessage({channel:e,data:i})}};l(Us,"WorkerTransport"),Ge=new WeakMap;var Po=Us;var Or=new Uo(new Po(new Worker("dist/backend.js")));Or.init();})();
//# sourceMappingURL=frontend.js.map
